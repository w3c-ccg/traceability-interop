{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8a92fee4-9a60-4fda-a320-e28c9f15a9a4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "597c6858-ef45-4cd7-aa07-cc9aea8ce14e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "133727f2-945f-4e4f-8ac2-580f64daf889",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "01dda07e-4446-49a3-97ac-316bc3aeff32"
                }
              }
            ]
          },
          {
            "id": "b261f459-3e19-41d5-9451-7ab27f8c0af8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3729d9e1-fe6e-48b7-b2f7-ba28ca269d3b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e2e833fb-0a59-4d17-8c6e-8736adb25b75"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9bd56b61-347f-454a-9b77-e61f723c6c5c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f8eb1b73-b052-4809-989b-a4876f25bd70",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3a3ec674-b75b-496f-b6d6-cb1c74a8baf2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ad1192c-1edc-439a-9ed6-c77bf7262e65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2707757-c9ad-4aab-99ab-ab1011e405fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7cf070d8-684e-4a75-b401-0a85a0de5d5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b05ce0d9-a700-4042-b222-6daddb401e12"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1670b60c-dc2c-4457-8e1e-5ae0ec66f366",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06dd416e-e56d-48bc-b930-e35479ad14e6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2057f18a-0ef7-42a7-9b90-0ee6bdaa33b0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "db10dbad-8544-48bc-9328-532c19f19d15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3cce5ac-cc63-4776-a3fc-272d74b379ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76edfa7c-27f2-49d2-842c-f6888410a9c8"
            }
          }
        ]
      },
      {
        "id": "1193779d-be35-4ae3-a03d-4baec0856514",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c01c4972-94a0-4270-af27-7c8d89143b5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f3d9255-f72e-4ab8-910f-d3919edf16ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d64f48f0-ba9d-44fc-9a1b-63339ddcf80a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b27d515-7aa8-431f-904c-3e4a381c9b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab274af2-bddc-41a4-9172-146c4d43e7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5d64fa-e0dd-4891-b430-f2e9bdb79884",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06387206-5c19-4bdb-8da4-abbf573ac1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58af19c8-2c65-4f62-a228-609295d6f295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef54651-04d7-4462-a009-35a255c0ca8f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee8f509-849a-4e82-8baa-ae9a3ef70602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ad5c722-f8e1-4e73-9e00-30949cba00e8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b1edacd-4725-44eb-83be-365a2002cd91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1125307-de2e-4f08-9985-bd114565ce20",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633d0fa1-1dd3-460b-a9a7-7bc49c6ae4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61f561c6-2dd0-4d6f-b908-70b74dafac8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ec1ff8-d342-434f-8f77-a2e559009ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e76954b-e907-4714-a14c-ba1df3872b7a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "98399432-f5e3-4abc-ae65-72813aae39ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "43682ea3-75e1-4903-a671-1d20183e3474",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e580c335-45d3-42a1-a556-3637d378a676",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "68ced2c3-ffff-47af-b3f3-6ae5118f6791"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fd13d4c-a7e6-481f-a2d0-43d5dbbc3ade",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7dc6faa5-431f-4407-8af1-7a53b4927de7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1334f6e8-b732-49ce-a9d5-5c3227b23982",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "724f95aa-2e35-4064-b08b-a5a612774964"
            }
          }
        ]
      },
      {
        "id": "219af1ec-35ae-4a85-8797-3a2bb021b4d6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ba3995e1-1107-4425-9d6b-7b5b96300c43",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d49abb8f-bccd-4859-87c6-eb8f12d51c49",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0a685dd4-fd50-4635-aa5b-e7c6deeaa811",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cb1f2d-36d5-4e7b-996d-2204c40ea3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf58bd64-ba14-4c35-9c5a-65c0a4336f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04b8fd8-8435-444d-83cd-c8336fbe3ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e092c954-53d1-4cd1-bdc7-74ed54f28036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a8c65a-edd4-4e5f-b749-57f675b7ae5c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f0e86a-2a69-4c45-a0f0-3849cb16b791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d16f49-af28-4763-93f2-585f95c09f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28179e8-2f07-41af-9a44-f6949898034c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6bafddd-05f0-4077-8862-70c3db2d64a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63d98e0-8ff2-4e6b-9a1a-37b75c52474e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e2f73d-9ed3-4815-96ad-f23646ec1bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66293630-a69e-410c-a829-62afd72dbd9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4099ed-094d-4e3d-8aab-9a55a3c30f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa5d1c7e-fd4d-4537-9729-f85a4bb1cdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4819f6-d84c-4e49-a581-1ab374dbc446",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44ff211-7f91-4a28-9966-d5bbaeb992a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4611b8dd-76eb-442d-a816-584d084b13f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b689da-d462-4a52-8cfe-78b7f1786d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73a65ad4-9323-4153-bf87-2d1f1762d03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82403e0-de54-4014-a6af-1f3a19053784",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0c01d6-3b50-42b2-8c40-f64f91e1d6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade62d9f-53c8-415a-9c83-550eb46dc093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc226f80-3431-4123-9768-f7b55454d09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16b1f189-a160-4580-921a-a922ebff5bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1272fd-0ab0-4887-88f7-3c263106f395",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ece07d5-d003-41eb-8c3f-7b00249a35d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89daba6d-fd5a-4171-9a09-195f3c895e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cf46fc-8452-4c24-bb17-fa743ac7a879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1f90e57-259c-4568-b01c-e88eede317a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818e12ac-cf7c-4c97-964c-b6080f227d91",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e8c8f4-d03d-491a-a8cf-8e942a02a41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809a7453-9829-49d4-9262-8418fcc87193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5750e1bb-58e8-439f-8c71-9fcdeb566863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15a309b8-5bd2-459e-b6c5-1a4dbbaa7eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f681b82-d525-4b62-933f-2d397c121e9a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6e2270-839e-4b34-81fa-eb92ccf64b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50467f6-e0ed-4857-8faa-372014505fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc15d98-81f0-48a3-ba3d-c3914cd6fb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "caf64826-c0ce-41cb-a47e-c14e3e4ba26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8869effe-4adc-4107-a1bf-bf981bde170b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f5630e-4464-4248-bdb1-40cc9ffb1507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97248057-529e-46cc-ae33-43572a6e880a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c481f83-6e24-49e8-ac94-dcae2c57e087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9f1d4dc-fc2a-4b85-b9fc-6f148e2993c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b50937a-d4ac-41ec-b7e1-505a8961c05b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc85e9e4-7618-4121-8cae-4b008e54287f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bbe0f0-c247-47b8-a06f-02bfa7f9ebd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99237ae7-0077-4e8a-ab64-ca760557d734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18fc5483-cd77-457a-a9fb-b95b49218abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914215ed-27a7-4721-8544-068dff71d6bd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a573fc98-f6a9-4f0e-b404-32820b1c6029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b666c127-da7e-4cfa-b5d3-37adaf5bc7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cc8245-a0a0-4d09-beb1-33452dc0f090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1526ee00-fbe1-431a-987d-5745ec568d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c811acd-f021-4760-85ed-a780828410a8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d716fcb4-c3cb-46ba-bf7d-3d6ebd06b907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6eff0ae-bb55-474b-96f1-cb46454a7ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f594bf-9d60-480f-a308-7ec4864204a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa70a5b2-b8ea-447f-9ef0-05df3d943c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4242fb9-6008-4a20-8223-6bb7d4c04895",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2798b6f7-b588-4da9-a0a3-23e409aa52d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe403fc-455e-4bae-907c-02720d200f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e75767-1ef8-460e-b187-d01984e81fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc49decf-0d39-496e-a2ae-9c266125a47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d2cfda-c360-4bba-b761-2e3de5c0fa4d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5120ec96-dab4-4856-8dff-8824da43e204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d5032d-4ef5-40f1-ae07-6723d7b60a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55650012-5615-4e43-9e28-9449580991bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fee3950-1094-4838-b8f8-c52e72cdfd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25213cc4-8b65-41d6-a0a4-b45c17894bcf",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b9a129-2bd7-46fc-849f-dd130a6f662f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64248e02-ca2c-451d-bba7-2ab67c316045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad501f4-ec7f-49b4-ac58-5ea16b94a077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24e8e850-8525-4433-babc-28e05584e053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15787610-b865-4ff7-8f49-7feab1b1af67",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e745f817-8b6e-4915-81f4-0b46baadb350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac523929-5dcc-4dd6-983e-b4c02771e8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbd88fa-df51-40c5-a512-0420af8fbd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cedd6fe-8e74-4096-a8b0-a00fa063d3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc8d0b4-39ee-414a-83ad-0830f3ce4571",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471d5341-82e7-4d4f-b0d0-a7906f0acdd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9e132b-93bc-4e8c-bc96-4a240b35f205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9c4339-606d-4bba-8620-6071847f0d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "335bb0a6-f017-4aab-93bf-bb5b748b49fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9696dc64-305d-4453-8684-97b346b6d2f8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244409c4-7d29-46dd-8198-59f4ed92799b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d42317-39d4-4b62-8a36-2ff714e73cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e1f8cb-53e7-48d9-be5d-99dfa3b01005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff51e845-3e07-4384-aa17-651f6ab7e8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f9c137-e7b5-4851-918a-a3d7cd290dea",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b2dcf0-5a9e-487d-bc02-aad7c009367b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161cb96b-710c-4efb-97e2-fe5ff4554794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c77202-5603-48fe-bb29-08b516143db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92925765-b37b-484c-8f91-21141c7f5f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e826c1-3886-4a5c-93c0-bb6df9f84d1c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f0fddc-af32-431d-abca-13cf032e55ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2ea793-2b1d-4025-82f1-c90dedd5cc57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6e7f7c-c61f-4617-aea0-07398b39b65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66cfec15-31dc-4abb-ad0c-027b58adc8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c4f1b3-0923-4fe9-868b-85a35bf7d964",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3cfcff-f34a-4942-8ef4-4cb5e160eec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24aaeef-ce96-43c4-9bbb-68fdacc04f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71eccff3-f4fd-49ac-9354-de71dd7e3ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a753adb3-df1d-427b-a765-286929a276ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e525f6d3-b7a3-46aa-bb70-60ab8e32f57b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36b72bc-c2ab-4434-9be3-30b588bbd22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2ea025-ed59-4ab9-bfb1-f9089d268e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88bf260-7e8f-41df-bf96-fb01342cd740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c916f76c-2e6c-4d12-86d6-39e94fd4b989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e3b863-7275-4518-b978-c969d9f4e03a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c779b5ad-b3ba-4472-8acc-9508b2596fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2df10c-93fa-40f8-b2ef-3d3fd85916c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88bedf0-c121-49b9-82b0-53b0b62f5853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "695bc374-5a4d-4bc1-82a7-1a4a7914df37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3e4397-cf23-4cc2-8a81-b81a5475e191",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfa961d-9eb9-40a3-b3ba-3d717f1fdc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ab2ad6-9324-4be9-957d-9492a3f5b1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe702b05-1733-463c-8ea6-9fa45c4302c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b52691cb-a8f2-453e-8272-980fbc3dba5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dba6451-ba90-4e2f-967e-3a00807084b5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e407414-0574-428a-ade5-91fb207b7c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5987a668-0ea3-4ca9-9916-24168e761f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2796fad0-5501-470c-9039-5cfb16d52efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9669b1be-b15e-40d4-b4ae-08dc28c73747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38aedee5-68e0-4835-942b-0fe3e6ef96a9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ee1fff-f393-441c-bae5-20e1a5063516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dbdb5a5-f802-4712-a50b-786710f08880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c15a56-3cf1-4fe4-a83f-36a09354a91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02053149-73d8-4573-8cc3-e7d42c6636ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76f422e-2dc7-4411-8e3d-1845260e6733",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f40b6e4-9582-4214-96a5-7c3cb1cd1619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e32949-3ea8-46d9-ab9a-b78b76da12e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4ce0c0-1f0a-47b8-ab54-f8fd9c453c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31d16ac9-1aa8-43fc-aa29-cfb265601e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0375de56-1d15-43af-be71-705b1b6ec468",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d349211-cb56-4681-93ae-75a4fd6eedb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c98411e-990f-4ef7-b1eb-795c42147d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eab0873-ee27-4958-bebd-119e33ab05ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4800b68-0044-4b1e-8d70-b18d449236f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df54cb02-ad68-4d4d-b95c-b0ba3f8b78b7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1f8f07-6131-4094-8931-c847b6825db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf139906-8239-460b-b6ca-1872dc9edaeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9bcba8-c22f-4819-b0fd-d64a61335b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4e75f5-7897-460b-865e-461addb618e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9dee66-0776-4695-b85b-8c7567a55fbf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b5a56b-1c2a-4bf1-a5ac-d7896490d66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b76b969-db2e-4cbf-8441-f1f3b6cf72cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c04bc35-f066-4fb3-80ea-ec011527ce04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "067c8ede-e062-4778-8e86-48a2356ab7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1651c9eb-fdd3-4904-9c7a-1a31fc8159af",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04801cce-9c81-4e66-8b23-dca42fcbcff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78cd162-1f60-4f97-8c25-713c150c73f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9180f8b-cdc0-40b6-8514-24b80d1f32a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f7cdfc-2e87-499e-81d5-75ec8e24f4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b53319-68b3-42b2-84a9-2ad0df47ed29",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b780891b-7269-4bcb-8461-bd087e148d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5db043f-883c-45d2-aa0d-425447a4c7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bf7e15-d71d-4957-a32a-a7d210782301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8765ae39-7c48-408d-8d5a-a7cb41ac6746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cce3e8-dfa9-4c47-af54-2ac0edb91e97",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74839a84-1150-4a05-a7e5-41c6969bd85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e086e8fe-72dd-439b-bdc3-dd9ca32fdcb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296f5ad8-651b-4e57-9a64-5d9bf56eb6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0735b1fb-ee88-485b-83d3-6db95008b15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96033c0f-3ddb-4ef9-8a30-fdf7d99ebf09",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f0df49-6386-4994-a931-f58ab6d9f030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26992a29-a1bc-4df6-9c66-129b3c32d35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3065b8e-5f33-4163-95b1-b1b822e0b155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a66a49f4-8b60-413f-8afa-7668ce3d1316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0aedb9-29cb-4eaf-85b2-608ff262537d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98a3f46-b167-4145-9135-885871b46abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aadac2e0-1fd8-43c7-803b-b225a0b9474c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c008c1-8e97-4936-97c0-b4ef68e4320b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "16988acd-5c7c-4b2c-886a-f4d2e5e3d74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4d4982-da11-4e6a-a0b7-2e5c15db85d7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95e2903-f4c0-4bcd-bce0-15ce76fd0660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5267351-a48a-4af0-ba0e-f0fc206ba306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ce6faf-e1a6-4c4b-83f3-3c3a2ca1b358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27705119-78da-4785-8e3b-70bc804b47b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b055af64-9919-430e-a293-df0619007dfc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aed6f1-933d-4ee7-9f7b-692d99ef3788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4592fb55-68ed-4610-a86e-e3270a04b4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7620278-a115-4ab4-8662-06f8b60a8e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9246ad0-0166-4188-89ba-4ea8c272cf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76f9b08-e31c-48da-b141-5190e7d4a219",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75096f3f-7729-44a5-9e29-ba419f004a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bf893d-37dd-4cbf-8261-249ee12eddcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584414d9-bffd-4409-adb4-f1ff02a266c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "feea5e0b-e6c9-4ce4-88aa-52b6c3c2b0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0692b78e-46a0-4c0e-93bc-1705f16004ff",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc81b105-55f1-48fd-80e8-6198e9510128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbf79ef-5eb5-46b1-b7e6-609836463dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046a4bfd-ae3a-4101-83f6-9dea9035eb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "73ee4106-9fda-49d9-97e2-1d63c86d34a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f74388-7d22-4138-88fb-9e5893284866",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba6475e-684e-49dc-8e91-89d1ff8ebbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901186a8-d2e4-414a-b419-859b2ba0ff12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874ce715-a0e1-4256-9b45-c4f7f7b7b936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a16e86-1d16-4750-ad0a-61fb8c408872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386ff738-076e-42c8-a755-0eff3ab48a98",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d3d2be-0d4c-49af-8dbc-9825b8da6ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bbe022-e2e8-40d3-afdd-443fbae73e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f0cdc6-2a34-42fb-819d-e265bc49ae72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eac2833-1381-4297-ae33-8d0e886f0f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25905f70-18ca-4787-931e-9cce6f9fd280",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aead618c-5dbe-4e75-a3a5-ebd94907217e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2741ca77-3777-4fc5-a0f3-06f703f59e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a74866e-9314-4b7a-a7f5-87f1fe886920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbdc393-5da4-48c8-9322-cc973c8b9a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9de90ba-3c00-40cd-82af-f63648926a2d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c15b54e-44b0-4423-aaf6-0e3b4b5a21b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a2d782-ec66-4b82-ad8d-3fa6dbefa8a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a041d1b-88d2-4cf8-95e6-5ff40ca5fafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a29f0012-d406-44dc-a1d3-f20c1d7f1a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b344436b-a741-44d4-bae9-7ab756c92564",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7869f5e1-0b96-4539-a7b2-8c8318625cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b8bac4-704f-4914-baf6-d1210c68cbab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3bb2c7-6d5b-44e3-8e40-41882b08c3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad541699-c5e3-44a3-8572-53ec625340d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028bb7a9-096e-45cb-a969-a1289874c423",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06863077-6ddf-452d-8f97-c1e83386472c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8029ade0-6e2f-4960-a7fa-6699733d5b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f956c7f-df8a-4115-8a57-e0c852a7c886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "28d2ec61-2584-41d3-a76d-d4fbfee9fbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f636fce-b0f9-4649-b328-a36e52d17e42",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d8571e-6b7b-45b9-ab08-167652226410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f3705d-8186-497c-8087-42a273da64be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bc886c-09ff-4cbf-ac98-ef7454541fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11efbb59-cae2-40c5-8fc9-149b88d9bcc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0fd7cc-a961-41fd-a66c-7d33b3d1c29d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18de9d2c-1054-4d74-9989-99f0fd850e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17bab882-5251-4408-b3e0-861eafe86f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a332244-91d4-4999-9476-b72bd542d008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "adcf7d06-9ae0-4447-82c2-372c4342e66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e42d2fa-210b-4df6-94ca-d5ab23b15708",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e523a4-a88b-449e-8353-c08490cba64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7f5102-22a9-467d-96fb-09c12f306a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879eea5b-79ba-4ee1-81c6-5fdac4568336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76a1b010-90e4-468d-9a49-2d5e567ece6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dda360-b67b-4664-8d4f-377da99869f7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cb6e18-75e5-4e4d-bf8b-5d0df4e01236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1e7765-ff49-493d-9c83-bc8d166f1b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2fdd49-3f62-4d7e-92f0-ebd68fee9623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b6a3696-304f-44e1-aad4-2cd115604db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44beaf07-f031-4abf-9969-8ccd2327dcab",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b15a8eb-94a6-4d78-ac68-d6ab2ae444cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac96037-8a65-4d61-9542-2ffef7b1b593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01767ca8-dac9-4a26-85b5-36b25a3bbab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "108386b2-156e-443e-8aca-57a8f438b196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fe159b-91b9-488f-87b3-d88b4357efe3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5aff9d-ca7a-45a2-b425-084f23954366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1c3f78-4fd3-42e5-a53b-e0fb6d723cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd495185-8373-47c3-8bc0-6073e16bcd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d25c0bf-4942-46da-8e69-3c07237bae2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240ae7b4-12f2-4cf5-aa0e-d9fc0828565c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48f342f-14f8-4e36-912d-797f068f1612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f553fed-5bea-4aa9-92cf-03359043f6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c84f0c-fb59-4dc5-ac36-d1403c910804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "081fa1b3-a7bc-41ba-a0e1-183dba129a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0d5a4f-030d-45b1-8bb0-b61dfe9eaa56",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3241c4b2-b52a-4ebc-b7f8-0dcc3a789552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1424f201-1f4b-4a1d-9472-7b60146c1d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a004533f-65ca-4e54-9f84-75892cb5bb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6817fac-90c4-47d2-8e93-92290f2f9c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff083b83-dd76-4096-864b-112390712998",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e2376f-0af3-421a-9886-f6249846cfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444746f6-2e71-4439-9305-dabccdc33b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33d7226-e335-44c8-ae7b-3b570bf8f356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5ad346a-dd62-495d-950f-8287295023a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4708cf62-77b7-43b9-bf85-a98c3898554f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9385fe2f-7c6d-4408-8ef9-99da2d2b4963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f497769-7602-49d0-9c23-b216be9e3acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ece63b6-b149-402c-90ab-d1823f2db5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e649b116-ea10-4b66-ac04-cbffb85d4050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb876c4-6753-41f3-a203-3f1313e74336",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0bddf2-6c4b-4243-a841-8de5ac2d30f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50ab817-8531-4139-aa2f-aee4dfce8991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387d7065-9612-4a1a-9c21-384677b3d74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a47d58-c341-4cce-889c-2179e9530cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b77362-6534-44a0-a012-6fe23fd6cde9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd4bc45-2a66-462e-b976-161569184fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e723b5-7d11-41a7-8125-98b6ce01e871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa503662-e919-4fd4-9f82-d479e6ce5b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d4fb00-1e1f-4cd5-a635-43b51b374e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa61a90a-0e17-4762-a7d9-89d7449db377",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37afffe-c751-4f0e-b4f8-266a848498dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158fa77b-7451-455d-8adf-f6a003f44b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7999a8f-5392-4a64-b755-30c128c8db90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "faade9a3-3f59-4b85-96b8-dd68f4e53733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c216cd10-5aa6-414a-9bec-ae1fc8a840e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff44afd8-0e09-4c76-be4b-5ab8c0cdfa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d96792-7a96-4dde-8a88-cb5044f46bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51792aaf-8f6d-4d5d-9d09-13e67f873187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "983bba29-1feb-48dd-a8c6-8e32534c350f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb1d1cd-2cda-429c-afd9-e0668aa39875",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16b299e-c1ed-4199-a91a-9607e7d4c335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f39b7a-9955-4f53-b59b-f8fda5580401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2211a7eb-711d-495c-8497-f73f50f0ec0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "abce56f6-c24a-4067-921f-28d01746b433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e5c9b8-0aaa-493c-9960-6e95ebf82bba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12ccafc-fee5-4d63-9370-834f3207e52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e053ad3-7e40-4807-b611-28d8146277b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb63bcd-cb42-427c-a2b1-33b2383234a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c919ba-5754-477f-b1d6-a995b4d568d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e61543-f750-421d-89f0-46194710a03b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562ee42e-601c-4878-abc0-eb4359fa452d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e03647-3d6b-48db-b6ea-3bfec8b4e9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619c42b1-81de-492e-841d-f15c5dee3f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "60c00471-bafe-42c9-9bac-18f80e324fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd0b743-ee13-4acc-a9d8-e51a5040e09d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225cfa8d-e151-4f4a-97f9-d988596f1560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05810b4-0bc0-4c7c-8bb5-8ec650ec549f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a810fa34-5812-41ce-aeda-4dabc5a1e315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c58fed-881b-407d-ac1c-350e71bcb80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49dba268-c8ab-45b2-bfaf-89a5133c95bb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af463e22-72fd-499e-b8d7-f624a0443ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9de782-0320-423d-8644-d34380f1a8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef44cf9a-2512-453e-9ba7-d5f3451e5081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f592db3a-5d14-4357-8ec2-7a4b7c7f48eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9520972b-8964-48ca-9afb-0ab35bd46dbf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bb41ce-b1f6-4769-9f1a-131fef15dbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c9d6c39-0eee-485b-9e00-c83746a09c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9189b102-deca-4237-85db-480bc21c32bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49da0261-a406-46e6-acbf-e6de12640edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be92a791-f266-4c9a-a496-9147d05db61e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73940bdf-b27f-4ac2-88bb-0b60fdd07f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fcb23b1-4155-433a-96e0-e616a3fb8b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3529741-39d6-4dad-8e87-af8b00d38de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa48078-e228-4c91-bb92-376cd4e9b2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c225bca9-2af1-4f6d-a732-745f5543b0a2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc7ac9f-d4fd-44fc-9b43-863be9c65a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8982eca3-7301-4a54-a6ef-e7ea8f70c797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd62c46c-3c73-4b0c-8944-6a3e02c1b8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19f05b66-a886-401a-ac2f-51e2aae9ffa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d62da4-4d39-4ca4-8995-5806255ec7d2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf6c52a-b312-4b55-8205-3bbdf75c5234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680c521c-53c9-4e97-b2ca-fc2340092650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd92d0d3-8c61-4c79-8c3a-4aad2a3636b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1d9a7a-0cb5-4b58-8984-5f53203625cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266e31d8-8f2a-4653-b6fc-c3c015f489f2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae761dc-ffa4-4bc5-8a89-3f8772bc7a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fd7c51-a0de-4668-a5f1-66621fb9fa8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018e600d-016c-42f3-8e0a-05458f00b683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "41ef128a-4956-4a4d-b90e-d0bbf4b4bc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beffb2ca-a336-4ae1-8139-61c75397a763",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa4dc6d-96d3-401b-80fd-481d10a70233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d82dcc9-e3e4-4433-9c93-6ef294e661ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae37d07-9d19-418b-b9c3-54d8d54181bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db31ad38-4e97-4589-8e35-f8ae134bf373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2aa9918-5637-4457-a493-84a2ac15d267",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c97f029-30fb-4933-9a63-1b2c45c82076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af84f09-5449-473e-9168-1651e4e81f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e575195d-95fb-4de4-a858-13570890476b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17b8f0f7-5023-428c-aef2-33b90e9b3ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9a5297-b6e9-4b77-ab6c-860d40fa4482",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44857114-0b15-4bf1-87b0-831afab2471a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5143bb-21f6-42eb-988c-fad9d79e586b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322dc2e0-2b14-4071-ae71-40bd97ed9c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "428d7e70-7a54-41f1-a17a-b2550ab689de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca21900f-a82a-4a8d-baa3-d26ccf0ce4df",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f441906a-c24f-4ad0-9807-611e4bb08a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4ca5f0-c0a1-4c7c-8437-8840331f108d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192cf4af-42ff-4e11-8bc7-2ab02570fa42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d70cbc2-de4b-4b61-9846-695cf0622066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e9adef-57ac-40ec-a76f-649bdf808f03",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2447681-75ba-4c0a-ba01-6019cea056a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515c401b-0b61-4f8f-b556-6af1fe00097d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941d91f1-e68e-45c8-8dca-22b65fd48b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd44100-04f7-49e6-8081-77e9fb4dfe59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153ce635-1b85-454f-a5cb-5d29943d9be1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944afa67-0103-4c69-aed6-91e6712f787d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408770d2-9d16-4e6b-afb3-8d4fe31ad5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3324e858-52c3-4a37-b1a9-7404ec72d9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6caf2a-f749-47d2-a5dc-f5ca6a67e5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8f3b84-02eb-42cc-bfd5-1e4d6f973d88",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb78f0e-c1c6-4823-937f-08a021c65a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e82ccee-fa8f-44f6-b1e6-c838df701cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df912a0-ed35-4482-a746-9bd3256b3a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd3cdbf-460c-4649-9390-7e24decba3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038f0396-554f-4611-af6c-77ee4b4a9889",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb95a99-b0a3-4be1-bd46-c4b570458f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5375269d-f153-48f4-82fd-71f463e6ca3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0702631-82f3-42fc-a7ab-8a8dce8fbd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c883e9-a104-46f4-9254-5908f8417d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1dd1a3-b51a-441a-b6d4-cdc2b6024972",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428775ad-239d-4048-847e-a514ee8c8fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0964e8-2d47-47da-a66e-b06b56948e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d46b29-1bd1-4c65-8aa3-69b35f0afbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18af31a2-88b8-4802-b88f-47d555a66b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e1678a-4be1-4a7d-ad93-00d79218fe62",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc1f7c1-f5c1-469e-a9d1-dee72e028341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbedd4fd-4a99-4429-9a02-61233f10f8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c451f3-adbb-49b8-b4e2-e9ee58766b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cde25bdb-bb30-486c-a8b0-4914413ec51a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189ab4ae-9d4f-4d96-82f7-5b765ea3ab35",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7f5761-0932-4bb5-8683-6b41de760b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e2e713-bdf8-48f6-8315-165243b76bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbc41a8-a54f-4d10-a666-ada9f8bc9a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f88ccb95-f277-4517-9dfe-dc033b4877f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fabade-95ab-43b8-b851-f1a605047d0b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4075c7df-7bd5-4898-b90f-9bb3ac56348f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bea56d7-ab33-4aa9-9efc-532d9f1544fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc8691c-ef50-4102-836f-dcc4d3ee4ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e249a2a0-77bf-439b-a99b-6c8bfbb9f4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a3d3e5-bad0-443a-903a-77921d709b4c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b910584c-ca83-4efc-b2bf-d8e8df2561c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb586413-9ac7-463a-8b6a-19a5335042e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fe6a62-e79f-4afa-a8c0-9573175bf419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c15b7aaa-8c4c-47a8-a17a-56043451d720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4105420b-c87b-4e19-b159-1ca88a924a52",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb668720-303e-4c99-a3b1-f56d6880dcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00437adb-600a-4a97-911d-ac1f87b0bbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6a00fa-2758-4df8-a860-d6c98bbecc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a93817b6-92df-4728-b9cb-2906ace58072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19241a45-bce5-449a-92f2-4e88d7262fe5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174d7ce3-5cd9-43ac-9861-df7981d56ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e124a4-f454-4894-9806-b3e8d283144e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820a2aec-f062-4606-ac79-b988cdb9e2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d347c12-9003-455a-899a-0623909d662b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6cf6e2-cba1-469d-93a9-2f2bc9ec8cd6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb78c07-6e38-407c-b7ae-8c3752548b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfaa0266-e3c5-4d0e-9ccb-1fdba15b9f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e29c3b-f4ef-4cbf-92a3-3a971c254d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e06c80f-4d80-42cc-9ddd-76a295fe0d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b44c7bb-918f-4555-a560-016772618e9f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d90100-caac-493e-b2a7-e37830e70e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618e9429-ac37-430c-af58-1f768843ae1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb4eaab-44a0-426a-86d0-2afe1e58f34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79a0e9ad-8fd4-4106-bbea-437e1456af8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d241227d-4864-4f2b-9913-3ecb6cb6cb75",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ceb15e9-33f7-44d4-8bd8-345926d41bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9280aefb-ae0c-45f1-9052-8c5a2e602f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c77590-28c4-4d64-a114-437c34e5c2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "28a01569-9f68-4ea0-bac1-fb5d9bd06319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30d7ed6-db0b-47b5-a05f-4f8a20ff992d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a05bf3-f083-4d24-b968-9809759c28d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6760c4b1-8e01-4e11-9d07-8d6a07ac45e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a03f92b-48b9-45a4-9888-435b9946c97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc579ad8-b661-4166-a2b8-5f4c0952ee62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5605e346-c5cf-4b2b-9ff7-27d7332c6474",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb853690-7fc2-41d6-8631-e502c56794e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f19dac-13af-4c02-bb8b-d31b7289e308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111e2a9f-d999-417f-b1bd-803db519b919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "215edcf9-054f-4fc3-a255-99d71219ed4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437f6e39-ea7f-48bb-b0ce-4546dc3e0ec1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c54d311-1291-4e1e-90b1-2f09814cb845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ffbadb-6788-489f-9fbb-465db14d9c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e777299-f6e8-4543-b26a-8e8a2ddd25a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "18ad4be5-14be-46f9-ba2a-d53303e31383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82476f7-9d6b-497a-92b2-924477142be9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7d9f8e-0750-4167-abed-58e1c6b9c450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a11cec-f38c-4fe3-8fff-47658894bfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851e8354-c1ae-4457-8771-97c51cd6b44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "acd3c659-dcd1-4348-b3ee-62eefd26b91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fa17cc-2186-44e9-ba2f-c020eaef1548",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d116df-c0b1-4a53-8e35-04a27e0b4673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "de466b79-d7a7-4be6-8d0c-405e952cf590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406d3c88-5019-40b2-8cbd-476185629a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1150a612-1a7a-482c-a1e5-21c9bcdb13e9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "47ea2b09-9670-48f2-9b4b-b0988e87d177",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3bdd9067-fe8c-4544-a4d9-b8fc57224ce7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f339cb6e-1417-4b52-a41a-902e0af13b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89000628-a387-4c5f-b02b-b1fef43c707f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c66699-7724-45e2-973e-dd3ab9a3a0bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cd5a742-5864-4127-bbf7-e62532958ec4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a57ca0a-d728-430f-b568-9d17c93095bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "308239fd-3b31-426c-bf2e-07a5d28e47f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3a1e628-9545-431c-b0c8-ff0b7f3eaf4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63aefeed-3ba1-41b4-8da7-b1b483b78b27"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a8a3f49-8aa0-42bf-b269-10775dc37791",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3a93efae-f442-443c-8547-0b3840672c81"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac4cc64e-0f10-4172-af74-f71aa2e2c5b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "546dc8bc-9c87-480a-8663-c623d711e9ab"
                }
              }
            ]
          },
          {
            "id": "03c10e20-9577-4184-9517-d75d16662cf8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49b898a6-dca7-43ce-8550-cd3c3202ab3e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b030987a-b5aa-4615-a16b-b2dbcccea653",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2916a0ce-b2a0-45ff-a532-3d7a529fec3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6f269dac-f6e7-4517-80a9-27418ba93773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9629b786-95e9-4f60-aa4c-06f07f358ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50268ab0-6d17-48e0-b2f0-1d52158518c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e8236fc-964a-4faa-94a0-b695343ba75a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8313eb06-0a76-478e-aed5-2e3c871e13cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7912e8b-bbf7-455a-8d33-39b07630d149"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05cae895-b7d0-4144-a378-ce13a44eb3ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "496dd92e-df58-4ec1-9bfd-096c894f340d"
                    }
                  }
                ]
              },
              {
                "id": "f89b5f38-8c20-44a7-abbb-ea776e0f5ef0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b541d5ad-2f16-449a-a0f5-34fe453304c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9e1aa17-3539-4b30-9659-ccfc87cc6282"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa4fbc6a-b9f6-44cf-867d-93ab205a7e64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5997ce16-5e57-4535-8908-253f739a29d3"
                    }
                  }
                ]
              },
              {
                "id": "8bdb70c2-2304-4008-be89-f179eb0734ba",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1077b5d-693e-499e-b0a1-0fbd98e5a551",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec625180-ac3d-4166-82e7-940c788ac809"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be889e70-3c99-42bd-8148-06d15df52c5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ef889dcc-074f-44c7-a4ef-bc9771fd59a9"
                    }
                  }
                ]
              },
              {
                "id": "4d358412-717c-4104-b77b-09b7837907af",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0599ca2f-a8d2-4e5a-ae44-bcb2a5849b78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "923c1cd7-73c1-483c-be54-f9622b5e883f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0200e98f-4b4b-4d86-8147-c56f4bb46192",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "223380d7-069d-4951-8b8e-fae2d225cdee"
                    }
                  }
                ]
              },
              {
                "id": "8caf9c14-2851-46e4-b42b-184ff2c722ca",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ebbc1ab-aceb-4415-adf1-2b781fa1ba6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b32a1cf6-93df-49de-8ed1-c540640a97bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed74c462-413c-4bda-a89a-7e09bdfd8b5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "19acb0f0-2be6-4aa7-a24d-ced6aaa5ffa4"
                    }
                  }
                ]
              },
              {
                "id": "ac3f7dce-bd06-4984-a8e0-3b57ff8c2e67",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9b90d3d-46f9-49b2-8d6b-579de0098790",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb7d176e-2eac-4097-9033-9ab2dcf5a80b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e8da334-151e-4f3a-831d-1884a471b9ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "19a76976-da19-4644-99a2-7e87bf34c247"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "916261e8-a032-4ccd-97da-71fcfc8bb7fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b9e0ba5-18dc-4963-865c-d462bba415b5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "247c6c71-c108-4589-9a72-73d9d21d8b7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a465d64-9d9d-40b3-bfa8-e58d3b8f434a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36e5a055-cdd3-4a0b-9416-9a457432c247",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3be82699-7656-470e-acbe-8b6cd29a6b3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ebecd77-deca-4815-8156-16680293c633",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9e1f6a3-8be3-47fa-abfb-fe8ffeaa5a64"
            }
          }
        ]
      },
      {
        "id": "bfc5c097-667d-4a19-bddb-046922949e5b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d92d3edd-770c-4cf4-b83c-f927cd6c75d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "149181b0-dcc8-4128-9ed8-7df22cfd50ea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "94ba1a9c-eb7c-4e74-8b20-a7614569e3b5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49987fe-adba-462a-9234-94283bbbc30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64861273-95ae-4d3e-85b5-71a85f8443d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b01a261-e0d5-45b3-aef7-b449705cbecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "055c3335-a1d5-46e2-8d6e-afbe1e66243d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242127b6-dde4-432c-a184-e7a5f127476a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735cbf82-d6dd-4474-8948-63d09947537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca63d442-30f0-461b-b3f9-07988ff43ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4def4b-d609-4b43-81ba-36c8d7383085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d542ca55-c1f0-4a7b-ba6b-f0b1208c7329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97001bf-e0c2-42d2-a0e6-3cb798ea6cf0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c83e14c-5ac7-4cdd-b372-dc1a4163524f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ccf7de5-faf9-43e1-b0e0-7ffd6f50de9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d81d287-244a-46a2-bbed-b0101bedd766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38644fdd-8f97-4f1e-b847-1a35f8e2ab13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db10f130-8256-4ce0-80bc-58f99c7a192c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd682be-231d-45a3-94d2-b6d8f8953ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8233de69-353f-4bb6-9e19-6eafc0515642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49503de-9c45-4ab7-a9c2-d38a70fe4610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa47af61-4bfa-4a54-8621-216a55397b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7803c3b-ad38-402d-88fb-9db8adc51cd0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c99df2f-83eb-422f-915f-f2617d35ebe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832edbf2-cbc0-401c-90cf-9c4cdd988b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90438e7c-304a-4993-b5ec-d4d3fde143fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "058ad2be-1cd2-4f26-950d-57ad0e7b52a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd4dd7c-1365-4f9d-9304-17d9a65bd639",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55191ab5-2895-4f73-a27b-f1bbde160a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7169a49b-c1fe-4f03-994e-b7cfbc29963d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0325021d-6049-415b-8cc8-70d9f9b0361e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58905f59-1e5d-4762-aac3-c0d3e202926b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ebfc1b-d832-40fe-9c46-c33307916063",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b3d09e-efb4-44e0-bc53-c73b246be139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c913aacb-53b8-4824-b1c0-91b9049acaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c0468a-8bd1-42c2-b2ed-60aae9b967f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "03ca3b4a-8568-414f-934d-1265be5ddbca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e7ad2c-8774-417f-a6cf-536c63822c28",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d36fef-2862-49cb-a752-a4fc81c91880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e04855-11df-4c8c-a6c5-4422bd673236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56595b9b-832f-4cd0-abe8-705b42212083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef94ae9-f58d-4636-bfd7-f34ae46a7138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c754a13-ab5e-491d-be17-1641ebdd7449",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4e979c-5970-444c-adfc-d5e74d816028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd9cbf59-b092-4520-8a0d-9059b0715663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a35c1dd-0c6d-4520-a3c6-27c1b77569c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "986d2e1c-cc3f-4b2c-be09-34d0ae53e606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae742651-962b-4bbb-9c70-f47bad3e1b62",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1100f64a-a453-4b90-82a3-2c1d96649809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911f1a8b-1f3a-43fc-97d7-29e6cc5f3931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9583940e-c8cb-4a44-9e51-af97e8d64d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aecc132a-5b84-455d-b140-942a7e6f3aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd814e7-1642-4202-b58a-2873dd8ae20f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba95472-c1f0-4496-8a1e-84574b3422b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c98857c-1bae-496f-b661-991d8b44ca7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c0174b-6590-4129-b432-35bd6ae7cb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "12dd6890-9abd-4fc2-aac7-1e99df30d03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86135c1-be3a-4187-923f-098b59498873",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9262504e-c45b-47b9-bcc2-e222b0d52288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18326d38-ed26-488a-b055-d1d620d0fb73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e9d521-1bed-447a-9d0a-cdef2fe451b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "445917c5-ba20-4c26-a51a-8272d34f5ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88e2b3e-d890-42a5-899a-0a1c798349b6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0faa295e-e4e6-49bf-abf3-4f9430665116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7fa0a0-967e-4f82-a3c2-dd747c5c73b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec66c55-60e0-4ef6-8297-6679a0346ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90d94758-6784-42ec-9fd4-b0798f0db8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7668f2a4-92d4-46ad-8a1f-3045779e4aa1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdebae0-c28e-4ca8-bb88-3466718a6ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd011a9-dee9-46f5-a181-50510d0341ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a060001-9684-4e39-a680-72be4f14c2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7644bb3-8f08-4f20-aed5-c29c229d66dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4622f4fa-269a-4857-ab14-0d9e8317d10c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878c516d-dc7c-423b-9f1d-1ce2f79ec4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b7ec8ca-e360-4d89-8326-ac5362d4ec37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf82def-4ecf-40a5-8359-a970e2858064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce76333-9f95-4f3c-b3f8-74a328dff535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ce9a6f-fd17-44ee-9298-3013437d3187",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c996ef-3d91-40ff-b4b4-b37a5388d9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44aaa158-e0bc-4483-b683-f7e04c978b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15b000a-17a6-4262-b1fb-7c52138706b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce11a971-0ad2-4741-93dd-88adf41090c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054a05b9-0e33-410d-8a75-00c401aef9e5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f14bd77-2312-4e7c-a75c-f5541994d992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f74bd6-cbd8-4ac0-a7dd-60b661a8be91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c676a7c9-3035-43fe-9089-4597b1de9f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e8cda06-8814-4746-b49c-84f1efc76bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92567f9e-4a2c-4e65-8631-d9912b10da47",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c846d9-60b6-4436-a133-c3095f2c7a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54fed51-8840-447c-9023-a3a78f2edea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b801859c-5abf-418e-96d4-4883dd6c5919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f26cf684-6643-46be-a4a2-87de92b76e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b48c4b-3787-44bb-9ce8-9f5da30ff023",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee4e452-ce56-47ad-878e-aafe2dbebb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a4de86-2576-47e3-a992-23f79154a257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a463d6a-68c2-4730-805a-3ee04cce48dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66b0ebe7-d4c6-4419-9fc6-0e4ccd7d684b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4d0980-58d4-42de-b76a-2174f55b9e18",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fc1a33-34ac-497b-91be-4272fdc42fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9741cc03-609c-4a66-99f1-52f5185d7a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a358a1aa-3b4d-40a5-835e-04a7eb101bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eb495b3-6751-4471-bc8e-e53f1cafbea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5016fc08-c4f8-408c-80aa-923e94b1af0b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b84853d-03d6-478f-9525-c13327b0b3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292e6405-5420-4165-b692-c22c2df99658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c4a3fd-be10-4688-97bd-af262ce633bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a065f3b1-ceb4-4a6a-bdf0-5df177c2cf97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7dfbcb-7d7c-454b-a515-3145eaac8aeb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96668570-1af7-4803-b4c3-55d273c22173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc845f6f-ab1e-4c50-819c-0ec9ba3cfb61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbeda52-71bb-4fe5-a027-5cf8d0ee3666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0096fa59-40eb-42b0-9712-a41b75bde8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621fdcf8-24b2-4e25-b004-491dbda94a60",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3574a769-b3d5-41e5-a449-5779882fa99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcf74b3-992b-477f-af21-2b577fc230f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b38081-2e15-49b2-bf28-87d1c8f74925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f18c4bb1-26f4-4a13-b111-77fb2b5e91ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892bd467-cd42-4776-ba62-2dfd53720dc5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf71d998-e684-4555-9369-61a57a0cf9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cff9e0e-7bf3-47a7-a88e-e7251de25b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f14171-c31c-4ab8-b2d1-209e84574cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f88d1ec3-1903-4cd2-968b-7aae1af787d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd563c5-981a-4696-aa39-d372cca98944",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4150df6-21bb-4d35-b053-1cfbbb31294a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70af77e2-65d2-45d6-bc6e-e3c058ddc685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0888c288-f1a0-473f-9176-ce674540d929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44389c9f-69df-4b29-a1ba-5cbc3d382d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111f07f8-3514-44fd-9d7d-1fceb490846e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d45a45-4061-48c0-90bf-ae07bf0f176f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e486d1ea-ea41-43f2-8f96-562bed73f3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c725545f-41cb-49b9-8eb3-64e218a123cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0bac66-b900-4e74-80d5-1d8e610a8785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5649aadd-3c06-442e-8c00-772c6fc67691",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6447a17c-733e-4d51-868a-44ecd9a1ee73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34ab0fb-16e5-4642-9b5d-ead5c2108611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774eece2-6af7-4df0-8046-bb2032ac53d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70076ca1-c1f9-44a5-8bb1-9de4e458258e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8a9bdc-ba35-4eeb-88ed-4b5d12a0ed8e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fd69a3-543f-4025-89d8-66dc16358483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4ee5cf-8246-40a7-b89f-79752de7acb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08328dce-b583-4dc4-927b-78eb95a3b750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d63aad9-9d5b-4aa2-8a48-41a91ea8f0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8bbee1-ac76-4a09-9a82-4486afa53d82",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713f01e4-11ac-4414-9fa9-d1d02b98b0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8d4655-957f-495b-bc79-610d78e72991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af7e8d1-2ea9-4474-8918-d5a26a96c652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f69cba6-bec4-42af-b467-d173e519bd40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb72b511-d3b0-4a04-b96a-d29503e02009",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447b743b-10e2-43b9-8a93-cbf6c44e9c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f891f18c-250b-4cb1-95a3-2f2823cc6fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe293518-5d5c-4042-b2c9-7f06c131f491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5fe8e24-8630-4e1b-ad6d-ae5da453bf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f3a80f-9f2e-46c7-8b5e-1213bd629b20",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0312575b-2d8e-4ba2-92c6-72bb17dd30dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfdf6918-cda4-4b37-acf1-037150c8546c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5ff8a4-5927-4a1f-9be6-2ca93e91722c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0fd449-3196-4afd-bcc4-c6e7a1c95b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75aefae1-b15c-444e-bc5f-7a92a8e7c8b6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e496a8-e5f9-4737-b3e9-506c5384831b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c24da13-7d53-4826-9e9b-82bcb476ad96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87fa31b-a16d-4141-b2bb-03f00289a8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe10b724-eb7b-4a80-b820-768cdec31432"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de4c3b82-3579-458c-bdfe-bd7e5273dd67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "131e8374-437d-4a3a-9d3c-ec5a7e84d056",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01622020-783f-4e17-9b9e-3bc97186dd71",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5e5d9f-9bf4-4dbd-8bab-4eafe4c2b904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7aa996-a068-41c2-8390-2ade222012a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a47e5bbe-2975-4fbb-b7a0-7f8a18c8aa2a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de10c193-fe32-4ac0-aeaf-90f16a3d96d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e0a96da-bf7e-4706-af0f-60bd1136a55b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4feece63-4eae-45e0-8030-7df916be2374",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d3b0bac-597d-4b68-9ebf-8e4994a77817"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "639c350a-2e94-473d-b8a3-1a3eca2ff77e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "36f91dd6-6a62-43fd-8298-5b2b76816fb2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6954facf-ae9c-47c0-84ba-d7a5fb4529b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8439232e-a6f9-4a15-b5d1-699b564c45a3"
            }
          }
        ]
      },
      {
        "id": "41ed5717-0380-43d4-9271-c475c4153cd7",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0ef84882-9fa7-4fcc-9b47-c7188c5652db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a367599-c475-40f8-8d2f-9c663685a8b0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c998412-5222-4055-9ecf-68b0bb50e5a8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f32269-eee4-42cc-b9a5-fba27a043822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1710db-fb52-4bee-901b-b05dde4e6a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc720daf-e5ce-497f-aff9-524878b36a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae656a9-7fe3-4feb-83cd-ad9d767b4790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9d892b-12a8-4caa-8078-9af52ee76158",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da4b578-4406-40e0-8a80-9fc95aa7216c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3821a3c2-8ebc-4fda-b871-93d3e9ba66fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a756cf3-d85a-416e-8613-e4120416e999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "40fd77d1-e13d-4e2f-9b3c-6f5ab5b50a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dd18a8-a2d4-494e-8003-cdb552b4fe8d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c14999c-8fd6-41d3-a2cc-f3a915400e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd60d25b-7dc4-461c-a3bd-cdddac9b8ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cd3221-1f02-41df-aeef-fb841e094058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "386b0376-06d6-4995-96ba-b48cc21aa4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63aa490e-f559-4936-9bf4-8f81d7bdb436",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcce5dd-f333-4fe6-aa3d-abb70e39694d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3afd34b-14fb-4f51-a546-98a352f937f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae1cd18-ca34-4145-825b-f0500cea18e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0341a483-0317-4965-9534-8e6e3a659bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f176d2-ed23-45ea-886f-e6f927724b20",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05771c96-9977-4ff3-be60-d3f6aece17f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57764d1-b91f-44a8-a675-834317991035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3383a3c-9f1e-4e4e-9f48-078a3f911aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff47e9ec-a339-475f-aac8-43763b8de335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8b0d34-887d-49d6-9252-2358972956b3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b39b70a-d02c-48cd-8e32-36da614bd0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3d733a-134e-4c7a-87fb-1f3a24da6a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039295d8-6ce2-4cde-99c5-cdef175f4a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "196ecbe0-61e1-4166-ab4c-f0fc36fbd88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd31232-7c93-49e7-a22f-44156862ed25",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e023f23d-cb00-4ee9-8945-89d0ff3b2980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f41f695-1bcd-4ff6-892b-34b586185a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87471058-6f1c-468b-9b08-bc22e85df5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "29294136-1114-4da3-86f6-fb6a4fd981dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e6dac5-0479-46e0-b62d-6ee1694bb12d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a40b89-5252-4e0a-a593-694be56ec56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4acc7d4e-e5cc-4155-9016-99674c765808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7160ffb-6afd-4363-a436-2b4cfe99420f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3033bf-586e-4ea0-b917-6b635dbbe951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea5fe23-d0ab-4396-be94-3dd7aeecf56b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5325be6a-112c-4c8a-b434-252ada43d3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ad84d6-8cd3-4294-9ddf-ea4b2fb38513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56805441-f390-4430-b434-6b0cea29b21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6581cd17-e062-4bc3-baec-ddf6c388c500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07ef5a5-8f90-4007-9d1c-1c28a5bdc12a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ba285a-783d-4746-9e9e-303488c689ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9be385-7bf1-4092-a206-cb0b76727f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fb0c24-2a66-4bca-943c-17df2e6af8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24e73aa0-7e8c-4e17-93fe-6909eb1d3e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8e52b5-9847-4386-9acd-d20946951ecc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf001b7-5731-4883-a589-b1811689b6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d74883-fc11-4336-a203-096b1a09ac48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3522bc5a-364f-4673-97e6-fd18bfcd9819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc03819-87b3-4e8d-aa24-5d4d11412cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c464b59e-1146-40d0-9cac-ae27e9cc2bde",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25da3cf-c571-4658-8048-880235189920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19cb1eab-06c3-4360-91ff-6aa4ca409582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be825e8-a503-4c13-b7fa-a8c5b6f12f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c3ff86-a219-4f02-afdb-7e5a3936ac79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff602b2a-77f6-4f7e-b71e-0219ab5c7583",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f328de5-5149-4c5e-9e87-0153aec2c0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1db525-5270-44f6-ba2d-26e286299367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70d4cd5-3aaf-422a-b03e-a14ae6bb7cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78df2630-28d8-4b7e-ad47-e88ae153ffac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a241ca-7fae-4485-9ba0-d2ac3221eb4b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7408df69-5e12-41a1-b1aa-a186d758d046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae102be8-70a3-433a-b760-3307414d90c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3b9593-9769-47f3-a05f-80c158df1a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8247db60-bfbb-4fe3-ad5f-28aa8d1f46b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989279ff-9aca-490a-a087-b98ed70d8ee8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cab5cab-1a10-4e41-962e-abe5c7f2249e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1684b18-629a-4906-a3dc-6995e2e47f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9bb9ecf-43c6-4509-a1a6-1e2d6e4fbf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f974cee-0af1-4fcd-ae7f-fb077fabd660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1406f134-c915-43b2-b017-b27bfe3b987a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1450d79-ed0c-4024-9b9f-82e33c8b5774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff44e56d-c90c-4da8-91ab-d2e0fdc6794e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1635b7-f98f-4e57-9888-855269bf069a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eefc4c9-5c87-444c-91b7-b956c9102f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc7d7f1-a21c-41b7-8933-4d4bed96a52b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cdf4a44-b9e5-471e-82c2-7caf010c7778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74e3994-e68b-4e0a-9575-41710bc121b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5635c643-55ed-46b8-bfab-6a3d0d4bb4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc94dbe-c6ce-45e0-a48a-820109ef9bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d944999-6a0c-44db-987b-9040babe1e7f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbbd68e-5766-4c8b-8577-0bca0e20111f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7dd031-fa8e-4cc2-9af5-79cc9e2ee786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdca0292-32de-4cd2-b38a-ffe844aaf2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "153332fd-963b-4633-bc84-8277fce15cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f40dd6d-f38a-452c-b510-ff0d9718cb3b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16bdc93-6054-4030-95f1-49ee03317cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e10898e-e88c-4b85-a936-5319966e6737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc06d04-4dc0-46db-bec0-1ee48da8ee8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f79793-2b2a-4521-82cd-76c8cecb496c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf12d70-9b13-4d46-a548-c74d7eae072e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444c661c-557b-4ec0-a287-12d1aaabd991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "470e64a7-44e7-44aa-b133-014af5533367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1e3190-2bd3-45c4-9c92-b7a9bb6f6a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd11f06c-51cc-49e9-8807-1df554ceb4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113f54c6-7531-4098-ac42-2c58bf5e0d77",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58281fc-f5a3-4751-9739-33dbf124e96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1113fd98-8082-4ffb-9af1-c2817d084c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e527028e-608e-4190-b77e-12108c09fc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "892e897f-791e-4edd-97ce-ce84902c56f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf6281c-8ca8-436b-a562-b6d0c4091232",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b93bcb-afe1-4721-adbb-2c68ad541719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec58e28-6288-40f5-87d7-deec9dad44eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e18fc8-489a-48a3-83ee-27e508ae901e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "073e414c-5a15-4770-a703-a9bbe945eefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16a8d60-ec8b-4dbc-9f54-ebb76610ee68",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e1cd87-1db7-4f20-a0fb-f834fcfc7eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3fc70b-ca1d-4f56-85fd-20f2be71ff6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d09315-15b1-4201-a8b2-a050a6e447ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3642332-df86-48b0-97e3-ef0386056b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e8bc6f-3799-470f-924e-038c775ab7a1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e505f6-7c92-44d7-8799-a64950c1683f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b91070-2e29-4722-b238-ae3dec674a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c72f6b7-968e-420c-8d25-e6e8488d78b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91b085a4-114d-4911-9dcc-c33a98f39b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542c4fa8-f897-4b08-8d33-d749c866f414",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1289785-043a-45d0-b17b-aff19b8921d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba1883e-0f01-41fe-ae76-9d03eebc773b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e37963-00a1-4248-8863-382909617271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5839ffc1-ba39-4800-a335-1858ce58b6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f74f2a-7971-46af-9f82-2698079a4149",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd83d9a-e416-411e-a1aa-bbe2fd5fe471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712c65b5-a9f8-482b-b106-187afff2fbf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c035a8-ec19-4129-aec3-e51bb81bc6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "257ec0e5-8570-44e4-af32-8ee802a653cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165368a3-52a8-4e88-a29e-9b96a6ea8fd8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5043574b-e5de-4e3c-b013-18a7ff299100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066463c6-5288-45e9-a32c-6c921e3683a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afd7732-216e-4a8b-b176-aae175e2a30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dfcc28a-17bb-415f-ad61-fffe0a10fb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccd94ff-bb37-4bfc-b975-1486ab140745",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cba95c7-6d2f-44df-8851-499765f0cdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84156a40-034f-4e16-8f7a-c978faa546c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c98ae28-85fc-4c99-b4fc-20a02e0a6b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b90c88ee-1548-4f66-ba26-29431f41b371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416fdce4-916c-45d0-9b29-aecb0437e023",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adddcff-9fbe-47d2-b6f2-911f9011586d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3af414-9fe2-424b-b577-ebf22cc2d189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfbfc6d-190f-4f1f-bd3e-1620c68518c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3da68e1-c2b0-4c6b-b08b-eb51e57e80bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d58376-b2e5-4d41-a999-66b4039163be",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c47d38d-2cfa-48f7-afe5-d8d5eacfa56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64528964-c8af-425e-8230-5bad6ce826d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c218740f-f806-4865-8f82-7b6c0df6de8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a833fff8-55d3-4920-a3c5-b57104e6b525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf87fa2-d0f3-429d-a142-912b2e711978",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba429dc7-dc05-40e6-b49a-dbfbf1fea560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b590b26-f965-496a-9e2b-3765806abd8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30669f1-a17f-4b89-9507-bccad9837c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b28ed001-0b88-4890-abe9-fc686987fc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82a202e-9661-4a61-813c-fc8bc9c4873a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181a212d-6dc9-4bdb-95e1-4a9428ee5bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940e6c1f-d81c-4fe7-887c-8b2410d28563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc62eda-d593-4af4-a5cf-cbbc52e1b6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e19d89c6-6c73-415e-af89-dd338bfe9f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397949ec-185e-4a6a-90d4-5ec32c851c2f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b394b1ef-6897-4317-a284-f2204c9570ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64641e3a-6dab-4bba-9fdc-5110065d670e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7eb862-3421-4cd2-ab86-411f52948b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96bcef93-18a6-4a0a-970d-f132542ea7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140ad144-1e20-416e-8f71-29c48a998076",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea72c608-44af-4eed-bc89-e4f946d4f4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af15b3e-2e3d-4a79-aa6a-d59b72d5fc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc94d8c-4679-4519-afa7-a0bdc6318a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2566d11f-c8a7-4151-b5ee-5174a3f8d1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9d6dbf-e4d2-4395-9529-c22034506010",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3654bb-1a60-4bf5-8611-ec8777a7066a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd967a93-86af-4855-a346-b948536a43de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8bd0ce-cc48-456c-95cb-724f8179d174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b852c165-e939-46cb-9672-f91d519fb7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0e0df7-53ef-45c2-91a2-770584e32629",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f245dce6-08bf-414b-afbc-245f0bf2283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83aad299-ce3e-4865-8b2b-a532bfb4cdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297a0f41-e8b5-492b-b925-3ac4a86717c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a54950e4-8a85-41f3-9e29-7fe310dedcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db352873-20a6-441d-9b7b-da8378980f5e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90200ca-4127-4484-9bde-a08c424a2e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b99c60af-6e7d-4b2e-898d-67dce8fc8ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5e6d32-7fb1-4ea5-852b-bd67ef8efa30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe385bc-5aa0-4c05-a39d-2519ed35266f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c7158d88-f946-4811-8566-cfc169c4edf0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f27caaa8-65a0-4d18-91e3-b36aa6568145",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe390e1-61a6-4f96-99a8-f8fc28d3e77c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "413a122f-a1cf-4387-b390-6ed79f57c21a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb7d3a7-aee0-4e5f-b797-b1bcc14d6445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a770f7cc-7133-4646-8bc1-6df34a66df55"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af123a5c-3abc-4275-8584-7df58196fa01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a314541-58ec-45ca-9b8a-27fd581e6d97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec704f85-1348-49c7-9e90-1d67553872f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac4fe35d-1a84-4fb9-bbda-e8c71d3fff7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc2f0c30-f04e-4d7a-93d4-3eea56192825",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "36dbe3c4-fd00-4909-b8d3-18247c9a6a12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbd44880-1c23-4348-9b72-f16133082f92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae464dd6-a3be-4923-af2b-1a70cf8ea0c7"
            }
          }
        ]
      },
      {
        "id": "3b0191cc-9d98-4b97-9606-e58cbaf53806",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e1645bc4-5522-4bdd-ba34-ec1edc49fb6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a3ffe1b-03ae-4406-a078-c096fc31d143",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ec91bfa4-812f-40e9-bc8d-fd6a5ef9a6e6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e289ddf2-a1c6-42a8-a529-8ae18d339176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e65c23f-1294-4431-8f1d-91975857b8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779f44c8-1baf-4ae9-aeaa-5cee825f24b3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a6bac7-9dc7-43b4-8e8a-c0fc5bdd2b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd36b44a-0cb9-43ba-9dc5-0aae0e01a116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995ab384-56bd-4ae5-9b1b-aa84c5fd4ffd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd63e10-9942-423b-b809-8cdf77473941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30051c74-0da3-4aa3-8406-011620ef9cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ccb362-7ad9-4902-9197-cf89371bccec",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e98c62-e3ff-49ed-b762-f3bb9ffe76f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5f1ccb-9f4b-4147-947d-89f22f7ff944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c93515-0eaf-444a-910c-73f77c9601fa",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89736f0f-c133-4235-a582-2d10b89a9c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb77d26-9936-411a-855d-4433328d807b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3fb265-6364-42f5-810f-80d2ef3507a1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4131b0b3-4019-4cfc-a9f8-c48578d368a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e892d800-de6e-4523-aa3a-21301b83282a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c258f00-574c-48f7-9c53-5c1cc5c2b1d9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94f6540-7876-4eab-8ec7-c261c2eb9deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc85dc8-4681-415b-b0a0-40fc085cc084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e9d69e-572e-4320-b89a-5d29cb211b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565e75fe-c14b-486f-8491-6988ac237e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c192269-4544-4a6b-b1d5-4d209d91bc00",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9c662f-c67c-40cc-8cb4-a271fdb0524c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46c73a39-6706-469c-9bf8-64eecf2efc1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3285d6d-e552-459b-b108-7be9ae997798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33437ce2-bbb4-4dd2-a13d-cf10dd015342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d3eefa-e67c-4772-a768-6e1349f74d04",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c59517-ceac-4801-94ef-d6152d9394ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b2c5f9f-b33e-4565-b685-b907f9dbb5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bdbebc-4c87-4433-a808-3d42a594d7ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd7bb58-4ea4-4fcf-affa-9872ac0acd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d22f8d8-a5dc-48df-bebd-8bed8ad77293",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916e7cbe-eedc-4a46-8b37-a20381058bc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f82640b3-d5a2-4a2d-b6c8-dfccb4fb7d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa672850-ddf1-45a8-81a7-4cafc671ab8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4545fa09-669b-45ca-b4e5-1f604ce79f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c59a72f-c1a3-4aef-b06b-77733ee12a99",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8141c28-cfbc-4844-8219-19ae3548da5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44533951-7dd4-4543-8422-815833529d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3173070a-75db-4bab-9f0c-7206c6f945dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3821246-dbed-491d-8f61-03f7bf89c532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31f25e4-612a-4dfb-ab77-f6fdf2d3220b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292dbcf8-ea43-417a-ba21-841fa698fcbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f60dbaf-b50a-475f-8cbb-652937f1e13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da12ee96-00eb-4827-bf6b-738f27f16db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f2457b-e7e2-455b-82c7-16a5d2dde756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b021cae-0807-4885-92ee-5e187693f14f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6697a4-3891-4301-a3df-c85ed94f9a06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d5d39fb-bf2c-45dd-bced-74b5058621b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2c842f-fb21-46e4-8dc3-d567cfb544ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b45969d-a7ca-49b9-92d9-8ef5bc6d1c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41acc39a-49ec-4939-9a02-224741eaecdf",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea445edd-9c00-4525-a955-db2c9ea11151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0df80b5d-9a55-4617-9775-670153bc8b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6063705f-1de1-4514-9c3b-43565196837e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b588c2-44e6-4e70-aca1-2018a3187e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d6bdf0-081d-47d7-9485-bceb8ee343e3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b283266d-2a54-476a-802e-e01b9a1beff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ae653b6-6a43-437b-a26e-b7df85c3720f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908c029c-645e-498a-b415-45bb1a3abdb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e55cfb5-12d3-49d5-84d1-588fabf059c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4bbeac-0cb5-4738-b573-1fe073c9f8cc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dc5285-f26a-40ad-9589-5bb627e0b8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddb20faf-4544-46ec-95e1-422810fddf25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4b0620-2120-4f02-bebb-d9307678d890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8653d8-4f1d-462d-b820-f158541037bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e55b859-3016-44c3-82d3-58f8099de15a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438e906e-8d87-47aa-8974-efaa58a10a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cca334b-ac27-4730-877a-7db76c3d5235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182fedf8-a743-4be0-90aa-87e946f1f6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59db21e-b646-42f4-ad66-56b7876c993d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3c83e2-2dfb-4f6e-a557-889c4df43640",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1de283-34f3-4360-bcee-5b060408bae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8386f0-e22a-41f6-b93d-2d17f96c5100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceabe787-6a55-4b39-843a-7ddc103fab35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3329c0ce-745d-4569-ba7e-ef24b58696d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b92610c-8d46-4546-9829-25121ff20599",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a632aaa-91a6-4c58-bc01-cea5fcdc2bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4d8637-1178-4ea4-9e66-3e8a7e64f30d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b27caa-a412-4b33-a849-9565ae7bcc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "032b2d81-1d54-49ea-ad52-a07c7cf6729a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0701938d-ec71-4617-a22f-b57ecc307e98",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7388cf0a-c598-4916-baf5-d8e5e99ccb46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15613c63-508a-495d-9b48-b858b3790ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "354d2927-1408-45ea-aa64-553c42947f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328726fe-1e19-4c70-8008-2c7f5b9bb267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff04440e-5501-460c-b1be-90fdd1380b53",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51dbfdc5-40c2-4ab9-a66e-aa240622871e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4213e2f-d35f-4844-a00e-305ad232adb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac39304-6379-4a6f-b57c-243fb7573840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b682dd-b681-41b5-8ddd-f651fb906126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60db9712-baef-448d-baa9-492f6d4287f6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01264129-4764-42da-9d84-9c09f41fcbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa60fe53-be40-4fb9-8daf-3ddfd277f79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f7ff60-ea7d-49cc-9841-fb9584280b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c659b17-f889-4ca7-b926-ca3d78ca6395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59925fb9-1013-4aaf-b89d-11de7cfdff5d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df88c1e0-8737-4661-98d1-8d84e0c69ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e3c826-25e4-407a-9fe0-d6d7af804b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f54a8f9-2085-4e8d-b417-4ad34067dc7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e24333-ba65-4105-a017-32f707c15047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9aab532-36db-4ca0-b295-9307fd88808d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827cfd8c-2a9d-494b-8f1c-3639d8ef7303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da7a093a-2019-4e52-8e69-240a2d287d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10378541-a6e6-42c1-96c0-b6e169a0f962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7897d66b-7e95-4154-8c00-9945d08272ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6101aba2-3a77-4247-a732-3ee1527fd8dd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf16a1d-e37d-4d77-a0aa-52a09bd9c2c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c57f07a-4343-48c9-804d-2b976b40f042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dc37ea-e2ec-4ce0-aeda-15c4dc36e2e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d8a3b5-e09e-495a-a51a-0fa54c0d470c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd57420-1509-458e-8b6b-b7143b685d21",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b19679d-2048-4881-ada1-7b018d5adaf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46419d0c-94ba-46f0-9123-aeffb85d3784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03227df0-eb6e-446c-9166-97438b2b73aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf32541-f1be-42e2-bd48-2ed57cc57735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1993c848-6065-4bf8-b0b8-ffbb9ff4409e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa7fd3b-5d43-44ae-ad5c-bfe74df4f5e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f03e7ed-6c50-443b-a2c1-51f07ff5e192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e69fa7c-abdd-48da-9a1f-0d78ffeb23a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a2f569-4e1c-4a96-94b5-c51d7ae33dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17756e36-bd37-46e2-9b0e-aa56aa0949c5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6734337-8967-4611-8763-3e3a2e94e462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb8e602-75e7-4078-8a12-b655eae4ebeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadba289-c5ee-4e44-b90c-68eddfdedaca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2729a374-97a2-43f5-bf77-369aad2b390d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7dbaf4-dde5-416f-bbdd-9dc6a6c7d466",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd0a158-c6db-471e-a92e-e56e077b5e1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "979cfeca-b984-4e52-ba83-3104135f494f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ceb019f-8ec7-40d1-8323-280ddcf6a465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6d21c4-def3-457f-a024-ea0487dedfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dfdb57-67ba-48ad-b8c1-600b041abb9e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfecd67-ab4c-4495-ad85-1511e3ad11aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c47d5ac2-07be-4f72-95db-9bc46560972a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdb91f4-6a2a-4ca9-a851-ff4db3f9c699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5954a9bd-4bc9-427a-9804-a4a4931326c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f696953-94d7-4a03-9250-44bbeaa8cc65",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a2313a-8a88-4d4f-a30c-638fd36801a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6839bcb9-dfa6-49bb-a208-0cdcb95056bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4438a9-3f5e-4351-a46f-cdbd08a29a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f51209-d188-4286-9022-7c50bc23d0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee13119-a9d3-469b-8299-b3f57a9710e6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793a1fb7-4201-46ce-9ceb-6a1afa54a8c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82790896-c5b2-456a-9090-d43399b0392f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407fae87-37c9-4bed-8071-b5316f57d8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79927d14-ae8a-4938-80f2-867d664be2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece3a405-ccd4-4567-9ad8-f5628a3e6b8b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e8f81f-05cc-446a-827a-9671b15d2811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "958ce5c9-cdfb-44c8-9612-dc25427e2ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb91457f-8ced-4e11-8d39-0fa788472bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea29968b-1525-474f-98d6-133ffb7e220e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ca5d75-cc7f-4ec9-8113-257d8d38304b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d929724-28d1-4d27-8995-fdcec2b99f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2953ce91-8c05-46b9-99c7-bc71752c8a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29978902-e361-47cf-8da1-9223d2345cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd24a86-91ea-458f-b070-43680d88abc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94580784-4283-4f76-a4e8-28db7b43afd4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d90ca37-143b-473b-a7f2-50b72f955000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd525f9-6ba3-41b6-84c0-86e9cf4732e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b5c849-ac55-4bbe-99bd-ae101a16e13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a08ef35-bc17-4885-8ee5-ee130e40b8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c305977-43ed-4ebf-ae83-4cf5286551b8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0dffd1-8ee3-4395-9311-4434e7730633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec927ecf-00f8-4943-bf50-6633add142aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d74d6c-7860-4a17-a351-3f4a3994b66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c279cc14-500b-445e-801c-023d15d92f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26eb729-a003-49f4-81c4-2547d4ca65d2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14538bd9-7972-4d8f-ad4b-efe072cf0c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa10343-fab4-4dc3-abed-e30f2afa6e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a87367-a949-402e-8d7d-890267e08298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730fb470-cd02-4244-aa17-40a5f82a50d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6facc92b-4a6f-4866-915b-01b2f1bc939a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d242d322-d87c-409b-88f4-6db64443ddf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f00b7c-07c4-440b-90db-ebc2b1011d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e62ea75-19d8-49dc-834c-f9156da939e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd349d4-c1c8-4e53-a8ca-d092f5695cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9df85f-c8c6-41c0-95ef-f0883a80f25c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cfe0e7-7ffb-4cee-9580-65e08e1ba3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63fc29ba-22bd-4917-87d8-18073749ea90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec4c72c-0992-467e-800f-90d6ac0d730c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133cdfa6-6dbc-4220-ac24-8ee1d939b097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca6dfa7-a249-49eb-8554-7fb1f4097925",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa05d8ad-436d-42ac-aa71-1e9620117560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5354557f-b4b5-44b3-99bd-958cba9966de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5d5b69-1a4f-4c8c-9d92-21a8d6312632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8048589e-a58a-4028-b137-edb9ac9e1497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f114194-2900-4b1a-97da-4cb97d32e83e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd77d8c-7545-4900-914f-1dc173f715fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7ccfff0-16a0-4ccb-affe-d11c89219200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3aaeed-17b8-4a9b-b5d6-75ee78a2fb3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09f8572-91f6-4b4f-afd4-d0e1a481b721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027b0f03-49be-4c46-b281-cc6f48ff2605",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0f686d-017a-48b1-86dd-2f8346322c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb4c79c-b319-4b70-b71c-0aea7d359915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a76cbf-b821-423f-a7c8-380070e2e9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8620a08-fb92-459d-b46c-d7049fcabd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4c59fa-a454-49c1-9b2e-722631279f32",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0837bf93-5d1d-4689-b113-7ce794ea7056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397167ad-184e-4625-8cbe-878287bab769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e325749-c723-4f75-821d-b097fd729a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9f5532-bb63-4502-a447-a379aef96616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1dff24-869b-4087-9bc1-a92ae7d7ad9a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc66c798-1aa0-4e17-9f67-c0cd729f0924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2f562f-04bc-4e1e-93be-62d40080e226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529238b4-9101-4fe5-9e29-f00153237c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c971d85a-0359-49e3-9542-d8fdcc14a1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e9711c-6a5c-4adc-b1df-7f052549c852",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0dbe9d-b51b-4706-a26b-6c7f40a17634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6374dc1-51f6-4d83-b5ad-fad9c15abb63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe588354-9871-420d-be3d-1a0dfba0960b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fddfba8e-0347-4091-a72d-35ee2b0d88e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3650e87f-28a2-408e-827d-90a1d26d48a8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77938eec-41b1-49cb-8f4e-dfb88f73f1bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da70215b-a042-46d6-b746-9908dc522f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b881404f-caf6-4667-8f50-cafdf3783a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde350ae-08bc-4d25-acad-b97a5bd628bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad121ad5-1a0b-472d-ae41-8f6982a18539",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59eec481-d456-4421-a940-24f9fd8da4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86183731-34bc-4f49-9607-b7fd7d98a0e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79a8e64-73f1-4f6c-a0f3-20ea3931efac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4a4fd8-9f72-42c3-ad8a-a602dc554d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f10e259-c61b-4d76-84f4-cde583e984e6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21611fa-7cda-4889-a957-44bc4932d104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5c5db2-cb6e-4eae-b4d5-a219e2718126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d40e9a-cb1a-4e7f-8feb-10f79830fd20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aaa4ecf-22a0-4527-9a80-062d488bb8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c291f4-1706-403a-9e84-bfc7df349a47",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99a66c5-a984-4f3f-ac23-8bb54a2ce939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac32ae22-0f73-4fd2-8da0-11b89946640b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f083ab4-263a-43c3-895c-950a952df756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41442076-5d39-41a7-a19d-63582ea1bbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2697ac3f-7e74-437d-8a23-8b8879806ebd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaae8591-64f3-4849-9d1d-960d6066afdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34cc659-9229-41d8-a8d5-7f505745c9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb15ee6c-638b-4bda-b50c-86148f1d4d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e9b40f-7e3d-4aba-bfa3-c808b26430fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d65ffc-73b6-401e-878a-0ccd60d926fa",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f281bae-0648-4ebc-b6f7-7898ae9969dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "527bc000-dc65-4904-b9a6-832a20199123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e93b313-168f-4c26-a69f-9d36c9dfbe8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb462592-4a6d-41f6-acd6-7218a85210e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e641a145-8be6-44ef-b00a-75d78add2478",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c23a70-16da-4a0a-b223-e16f8cb09dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25617cd3-a756-48f2-9546-18ee4c9fb41b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8965b43f-79f3-43ad-9c94-c2fb224be4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8dfcdc4-3499-4e9d-9503-003fa3744816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7d4598-0594-4232-9dc5-739090257935",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fb49ad-2715-4820-9118-c4d6816d30a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09a9a2c-e4c7-481a-8513-1930ea4f6fc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c532bd58-58e3-4e9e-a696-f77453ab971d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ed9351-8840-443c-8e99-a5540e318f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b53172-8c8f-4940-94e8-ca58cfdcb4e9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69ffc84-70f5-4c6f-92ac-8f6f9c72f1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b0cadf-8f0b-42cc-a50a-35c52b5a0f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347a90c1-2d34-48a0-9ec5-23ebc92587ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb634cd-b8c6-4df7-8f44-ecbf5be14e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcc8430-5f4a-4198-a539-40041696ad0d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab334bf-cef9-4519-bad8-efe32f48e7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3800116-ff9e-4a8d-8675-1d998da2ceb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef267146-b418-4590-9341-6f08e94cf6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdbe919-7367-4986-b73a-0a0699eba66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043b31d7-4ff0-48d3-9148-2b0486fa2122",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0358ffd-5485-40d9-a9eb-de35f26fd023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d3d44f-aeb7-4287-bc2c-2b713f8baac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176619e9-1e64-4704-9ed4-58fd7215d286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93580e36-6750-4456-8f7e-9474e62fe950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5198b6-b7ab-471d-901d-e89bcb22c55d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b952c6f-14dc-4e51-9d97-e43b08df35d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24962a0-3e32-415f-9f2b-3274de9613e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c09305-0264-4184-ae9a-becdb951911e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54dce84e-1864-4508-a52b-a551fd60cd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f2ceb9-90dc-4304-b8f3-ae45bed30472",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163d5351-9f0e-47f1-9103-d5e9b1b955ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e3175a-fe1d-4e31-8acd-d3840b300ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d9c71b-eb26-49b9-97ab-b2a128cc1fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f4e9ce-d4f1-4751-8804-0355c2a86411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae6f111-acf0-4cae-a933-b4d912bc8400",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50aeeab-f78c-408e-b488-5203db49fb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48ec119-b90b-4738-bae9-adcc3ac1ba8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617b2f57-09b4-4280-aff0-6d8698288810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b94b8c-390e-4983-9cb4-237ff8bc766a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f65e16-4277-4612-b56e-676a923991a9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6736b75-ed7d-4743-af7e-771f09d783b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295bdc8c-43fa-4960-9e02-6a3b3f1cfb73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9a7ba4-5c35-40ab-aa6f-12b038a6ce4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5803babd-0961-4ca2-8558-a0337b1b7248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db02111-59e4-4095-8bf4-8949d22c2830",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44744d25-e062-41cf-b2a1-5eb16da1215a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecae9979-1f0f-419b-a3d7-22b9a0a33c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4e19b2-834b-441e-b373-a93e28c8ef02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018dfe01-1e7a-4e71-8e3f-6a7dcd9bfafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03048fc-2532-4e65-8553-c983767c18e5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b39c87-2135-41b1-acce-7b88372f1c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2527d7c7-fb71-4bf7-be10-2cec72d01ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa40f13a-8cc6-40d4-836c-2c8e5e29966a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de45c539-c86b-4131-a0bb-0afd4a515c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ea07fd-654d-4864-93b2-f73f1408057e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1476251a-cacb-4275-ae46-f40b3767e533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfbc565c-71a3-4bcc-8929-db5204d076f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331bc8d5-8549-4007-ba9d-7135836ca95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97596c3-b7d6-4361-8530-a8dfdf483c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fe1e03-0368-4584-b9f9-9329e8e07b49",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44eb3aeb-54c6-4fde-8014-5aabcef8afa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d1f6b68-231e-4a4f-9674-1891a6f225c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079d6956-fa79-42c9-9d9b-ef275e0c2c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0d0d39-62e5-4b81-9bd6-9e9d113a7df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b987516-be83-4d6b-92dc-9b39d9cb103f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec20582-c640-41dc-8cd3-1e3e03855ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42bedcf5-b40b-47f2-87ba-c262803b1829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ced2f53-1439-4d16-b6da-7526b7395128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a46775-28da-4193-8bb5-ff831292e5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e02e2d-fa34-4a0b-82b1-c334fc6768e5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f061039-e332-4b99-aefc-cd91378aa9a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "048d983c-a8fa-48fa-9992-a694430ed5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1b164d-08d8-4773-8932-15d7c6648fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed371e8-4be7-4194-afcc-f1cf15d9c985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953305ea-1f02-41c8-998f-fdd75c2459e8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee083352-1de1-43e8-a646-615ef60eee4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7d6d1c4-e44b-47a6-b821-5e139a7d8ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589f288d-0b3b-4ad1-9db6-88b315668658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2507cc5e-a543-4f00-9419-a9e91fd27954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa357c2-783a-426e-9a00-eab9ff7c49e1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c0a939-15c7-45a9-be5c-fddb30101267",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d85ac5a-fa15-420c-98df-24ce502755e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "685aa5e9-6a6a-4967-a4ea-195709083608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d76b3d5-c1eb-4609-af0d-d3dfdc269202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ab54a8-f537-4109-bbb3-42ae33750caf",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678b3eac-355d-4c57-a26f-200788199456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4454c9d-9cd2-4827-9aa5-2912ee103cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396be7a4-69d7-41b1-abec-6a17dfec0ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc76af0f-0787-49e6-b0d5-fb92f0bb38e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2954cff9-f2ed-49b7-9177-296c20c9b010",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2799f46-ae34-4e1d-889d-8e8223fd2c70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbe1b3b9-ef1b-41fb-beec-86bf18adaf3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c9c307-b2a3-433a-a5be-785ff2c37345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463ee71a-eb52-4d7b-9a21-6e442515b13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd55194-e7b9-4c47-b108-be1ec37851c2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe7bfdc-edd3-4ffb-8af6-2214f45fd806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bd32b5d-70a1-4839-b8d3-70103c9eb2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7801a5-d7c7-49dd-a17d-4d4bef1e5728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e01c7d8-a69e-484c-9020-95706c5d2719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d149f1d-28b1-4eee-b8fd-8328973b1d81",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc861a9-de51-4a03-97e5-69418c2c8369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04e17a2e-5a03-4a67-b262-2b9701254403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c31066-c3f7-488e-95ec-78c2dd987d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f9f276-ff76-4882-9ab3-9f08e2d1125d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dec96f-78be-42a4-811f-d92b26777f0c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e405c9e-0358-430d-a651-566b182ff6d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f8a3d9c-d7af-491d-89d1-906c62c2045c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be44add-bd9c-493c-a46c-e60ff32631ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19444880-55cd-4d44-b3c3-3eb7e6563acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697ae778-8d9d-42f5-90fb-7085c2393eae",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60fa6d9-587a-4d52-8dcd-5e7e541cf0f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4728037e-97eb-4ecd-bd4e-ba7777a5997c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a012ef5-0db9-417b-958d-2bcd90cfd5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385ef118-7012-47d8-ad83-29993b7bb4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e60590-edf4-4774-827d-9bd21b801b2f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45eb5296-b6b6-409a-b1a8-068ba156efeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8054dd9d-6657-4b8a-b535-1e517596c9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f332c3-9b73-478d-8571-4bccba2f9fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee8b86c-092a-4a65-bd2d-888b09ef1420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b59680a-d385-415a-9494-ecf97c48416b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f19a5c-8873-4c1a-be73-5b7af55535be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64ae9e5f-6d73-4251-a4d4-f0c71167dcc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc48bfe-5f87-4189-9f96-999fa7381062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955d6544-f53d-4d0a-8c06-8084006a4765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f8b0c3-6127-46bd-b488-f3017f436346",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0914468b-8ec1-4968-a413-e9c19dd7da12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec4d75a-7509-4e3e-80b0-af605e55a73c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa72da0-9d8d-4d32-8bb7-892c2936edd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5153cc33-48ec-46b9-bad3-92091cf45e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a418bc0d-36fe-4d1f-9f8c-7a30179af7c4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a50f748-41ea-4a6a-8cf1-76147aabeebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f61c4e4c-1c23-4493-a413-f102166aae24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5092440-5840-4af1-8995-3b475f28a199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfdd7317-3fd4-4c75-85d0-fa9bc15f0c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0a6a97-05fa-4fe0-8ed7-5400a41c9e07",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df6607b-36e7-41e1-96fb-f5a6c908a33d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a93c6d4b-f7f4-4091-a1bb-b1617fffbb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e29284-b409-4f0c-b160-0e459e0feb92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456582f8-ee73-421e-b986-aec88dfbd1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185d65ce-4b6e-4053-956b-5113b2b23d6a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df679cc-2fb2-406d-af7d-f84eca56a151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46b72b89-dacc-4aed-92b0-7ba7c3b6c2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b37197-7b49-4ecf-9bae-0661c9e90db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad052e70-ace9-4b9f-b9a3-9c2ef2da8174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3f2365-4d61-4b3b-8d77-063daf43422b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de57abd-a8c8-4eaf-a6fc-d8d744d3a37a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ea59172-4e0b-4270-b96a-10d5cb9156b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4bc42b-b6e6-4244-a2e1-877f9bdee716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c245d574-1e79-49c7-a751-b934e865542f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1419ee39-5664-4068-88cc-e334ce7cacd6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05be519-9e32-4d42-8d6f-c53368cd32ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c972e025-4103-4218-b1c3-ecb4d648e5bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6594fb6e-7402-4357-86a6-f1701e35643e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4360634e-15ef-4133-b994-97f458f2c06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dcb08e-211d-4b4e-bdb9-cf8d8222a712",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bc0c42-57f3-4fdb-ada5-d7d215f36c76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1613897c-f476-45b1-8eb2-5e51ffe2d464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafbf189-d2e6-4593-b415-e9cb976653f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce44dff4-18ca-4d80-bcb5-136ca917585a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c192d2-87dc-444d-bf5a-6923397bfcfc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9899d096-052f-421e-a4bf-5256282b5669",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beb27721-6e06-4962-888b-331ece9a5500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df12518-218e-4952-9ce3-259feedec4ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1c88c9-d70d-4c37-bed7-eb4f8d42a246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c076b12-cef3-4470-af73-5a6652affd00",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbb5a15-6a48-4aca-b663-fa3832e6a6c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f973af1b-09c9-4a19-a994-5a5ec4282a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77e59c8-7b1c-470e-abd4-42e9b1da92de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12293ac0-0abe-4a42-8dfd-32000960f75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697ca365-90e6-4a12-90ea-730c8b1d149c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab25e8ae-1e47-4a0b-a203-37994f3acc68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bfb5517-87f7-4dfe-be11-0dee1db1a797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ef741c-c29d-47b9-ae44-db3cbc14a594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dcdf66e-ca42-4c97-8315-93de963b63b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f078dc4a-97b3-4afb-9703-95497d53104f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1ddf9b-708f-4b28-afe8-59eecc0b8b99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce16ff9-1fa3-4617-a81d-25faa12f9608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9a6dfb-5fcd-4499-b8ca-03d5f3ad3aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85522099-a420-4ad1-b963-4079c5bb2bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88bca3e-d1a6-4c58-9404-0e90d1e17eb7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a483d81e-90d8-404b-9480-d4ac3d2b47e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29944d56-c577-48b4-8ec5-9031e6fd8a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a3cd0f-5dc8-4c69-a593-7bc6539f1e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae03748a-1671-4a90-9d64-9f0c5d3104d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b444631e-fbf1-4cea-a710-760bb9653dff",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a5ef25-38b3-4f59-8073-dcc665ce9beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9890e7cd-99c4-4e09-918d-d0366b087f53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9906bc18-f580-4bd0-ba65-70b00e80c799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09cdcb7-caa5-49a4-8012-cbeceef4b281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da13e6aa-2ec7-4887-89dd-d5e37cb720ae",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d5cf3a-d135-4351-b9ca-4f8ca835383f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "337fa01f-5065-47b6-8af7-79805ea1d7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ee23fd-7b7d-4f95-9508-d46e23581a1a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb605150-0082-4e5f-ae3b-8971da3fe640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a65f12-4fec-446c-9990-bb781cb693d5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29484cf5-c538-4cc9-9e44-8e8ca8f17317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f19fce8-33fa-430c-943b-bf44dd0eff38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "395aa2be-92a8-466a-9298-ea6860d2e8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90919169-2ee4-4540-b8b9-7606785b91b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824add05-e22b-44fa-8b51-9b79b42132df",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93aa7f6e-53ed-4fcd-8ede-a24e3336df87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88e3d385-d918-4854-8410-1c653cc8de25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61087eb5-35be-4789-aad8-4c33292d1723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1658c8-ea03-42fe-829c-5de968c96d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f3eb51-675c-4909-b7d1-1999f4751973",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0dc0898-b558-4154-85de-48ae23f70ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8483eaf2-d352-48c2-a3b5-128a44f6a9f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5ec301-6ac5-414a-bae7-e4a4a9ceec03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e7648c-9f73-4ce1-81b3-e68ddf73d875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a9fd12-4ed0-4cf4-8335-8131a636e23d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2788ce87-053c-419d-9e4f-b84287c23a7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8c8c060-93f2-4f38-b6ea-2920fb0bb038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c8126c-a939-409d-b41e-37dae7cbf62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5bb8cc-03b6-408a-888f-8e02eb18d58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75df99d-9772-4138-ac39-ea5b3557f728",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec41c89a-1c3e-4549-8567-6176366e50d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a171814d-2b62-4bec-9eaf-7b142cbd8b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ee55d4-c1c6-44e3-b297-ef625b50fdb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1d1aca-6426-4166-9309-074626b1d706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe0fb61-a36f-48d3-ab0d-c7c35846382a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea09833-484c-4b03-9c90-2711c36f46de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba5341b8-01fe-4b6b-8622-a2e939563bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4eec01c-e03b-4db1-a6e7-7810485e34f1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f800690d-e940-4042-80e7-0da6247e438b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2a2aa8-32b1-4fbc-9688-637623d3a59c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7782c214-600c-4f88-8679-ac12d97301dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "806df3a0-7ed2-4479-b417-66e28281262b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf3199a-2b30-45eb-878e-0e7b5c15179c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9910295a-f37f-446e-b0b0-61cd1ee148be"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65d0dd15-9435-4a63-8342-07191a4f73f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c176e1e-6982-4e8d-8c58-091dd48b75d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ec9563f-e2ed-49d8-9d29-013bce1dd468",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49c4ecce-702c-474a-bf6c-091d058318ed"
                    }
                  }
                ]
              },
              {
                "id": "f6bd6db4-1a2c-4168-85d0-71757fcb91d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df92c440-d534-42fd-ac26-0d8199290478",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6795de-b0a1-4afb-9912-12afabcda0f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f515daf7-f8ac-4878-978d-3e565ad78762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6901e272-ec91-4f95-b7b6-17dc5f49911c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "491e15e2-3357-4797-accb-0ef3c0b3340d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8fd7c45-7eb9-4e1d-9b04-9ada564d1532",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e24d1b9-ee15-4b56-b2ff-75afbe421146"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec5eae7a-6a53-4194-a5e5-cfa38883bab4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26fd5b8a-1e8d-41bd-ade6-c2166a4c5798"
                    }
                  }
                ]
              },
              {
                "id": "369a622e-404b-4cbb-a260-0c599a19777b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ffd7bb63-5e51-4e55-9143-51bf09a26922",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8801a9-f1a8-4f5a-8bbe-5ee0f21dbc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "731c0d37-23e1-4a71-9e4f-a6fe3d7a042b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664fb231-8563-40b7-b1ab-b3a9345f2cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bc3806-673b-4265-b297-a2ca406982f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "868c8e14-9786-4e80-b037-4cf703fa4836",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6a5e567a-2c28-4944-8d9a-187eabb9ac0e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe1528da-2bc1-4e6d-8006-2119fb30cb77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "209c569b-3ba6-4689-abe9-d6e6d0bccccb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dedb2cd4-aa4f-499a-8170-70e3df0e54d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca93548a-ca72-4883-a717-a68b2102fbbf"
                    }
                  }
                ]
              },
              {
                "id": "fbf1013d-273c-491b-b277-5793fcb1e639",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c03e2b2-a43f-4289-9a01-5bec0e5e4375",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1f2bf153-3d42-4e6a-9d32-685896f25c7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb4dcdfa-2a93-48ad-b525-46c32f9e43b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a7d6a08-9404-4860-80c0-8951a957dd01"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "391ede22-9b27-47b1-90ef-1c6a0e074a72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "458cbac8-da5d-4df4-8f08-e2a9ee0f9b69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74468400-7c63-485d-b15d-0d4d635c7957",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a007a1c-0cc5-4b8a-b64d-a9e9f065c143"
            }
          }
        ]
      },
      {
        "id": "e9c2c6fc-b2e9-41d6-b38e-51b5a1247b48",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "92124044-4267-491c-8cef-ca800e709599",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76da712d-7248-43c6-be47-f107efe5603d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88cc68f9-2b1e-4bfe-b0bf-f7eeabdcbe62",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72d2d81-a1cc-457e-9497-f44b1eb4fe3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f8f3875e-3f07-4ca9-9686-1e98f46232e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae5536a-ab82-4bce-87bb-c676e8c535c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bf177e1-c87f-4880-aaf6-faeb302c7242"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b013861-46bd-4a64-9ed7-12a3a7cce552",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9ceff39-62b0-4202-a93b-994846b297ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "001bb643-e5a4-4062-81d1-38d5397a8f15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e88bd6e9-515a-45a8-a312-f4127a792c1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ec2a60a-ac2f-4b1b-ac54-8c5db0e39f87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a4a77234-5b18-4652-a5ad-1261b94dd741"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "210bfec1-389f-44a4-a567-f6ffd1b5c0c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7cb92af4-5554-43a0-b63b-a0b0d20848e1"
            }
          }
        ]
      },
      {
        "id": "c49dc2e2-b408-4a4d-b04f-2eaabb2f13bd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b8d158aa-8f88-4018-94e4-434081cec22e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c8ed870-5ab2-447f-976e-cb9df04280da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aba9aa56-4f9e-48ac-950e-14d80ef7729d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdf2b61-d66d-4e80-9a65-ae42af8d3e61",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2de6690e-2cc4-4874-b265-88b602a872f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef6a002-33e7-4430-9036-6305472abdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "479fc721-c09c-4482-85e0-3237c70e2cbf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d4a1892-3448-4074-8e0d-e9ad66d28159",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72c43f3c-214a-4052-bfe4-f8377c5fae13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05bd39a0-2976-4845-83d0-20f0c1f37947",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61608dc5-5f63-43bf-90a2-5f4bb24760bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4104a3e-90e3-4b5a-bed5-205f04b98e40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "91b9458a-12bb-423c-816b-d01357c650fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62b66ac2-7696-401a-a25c-8f8281f50533",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cbe71520-3f7f-4888-bfc4-84f58b144e6a"
            }
          }
        ]
      },
      {
        "id": "6ca06101-b622-4bc2-bea9-c97787672b26",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "dcb86400-04c1-4da6-a5af-6916c097bdc8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0a9cee2-5fbe-4594-ba0e-3d078fec00e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae7754ee-211f-4057-aafd-d870880bc0d2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f441134c-a912-435b-96d0-2f06259c03af",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84dd28d1-2e64-49d6-ab4f-7b9b554af96d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0af929-054d-4dff-9cd4-d4f6693904a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2b8a275-89cb-4e13-a4f7-9b95c0868b12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "033c6a09-e376-40c2-9a47-2015876891ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2260ac28-04b8-4f99-8d1d-862d79e51732"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb01a0c9-de3c-43b8-8339-6fe1b81bc3ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a41249ff-71c2-4ca7-836b-41c3d18f2fc9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6626f484-1e29-4c39-96dd-4de780f1e660",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e53d6b44-2844-4e60-933c-19dc1b077de1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d66c8029-63d5-451a-b2c4-45515a811f08",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ce26487-e71c-4e72-82d5-08b2b1161573"
            }
          }
        ]
      },
      {
        "id": "a8f83a0a-14b3-45a8-821c-30e14d919fd7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccb92722-6d37-473e-b906-5eed8d649aae",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02a5b098-bf4d-42e0-80ec-be7cbee181da",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dcd460b6-9268-4f8d-8a23-68ba42f3740c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c2363d3-d413-44d8-8e67-af69eead610f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eea0a79f-b391-4614-a0f8-c57629b5eaea",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.7087719298246,
      "responseMin": 9,
      "responseMax": 636,
      "responseSd": 80.81351346242135,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707870840703,
      "completed": 1707870868793
    },
    "executions": [
      {
        "id": "597c6858-ef45-4cd7-aa07-cc9aea8ce14e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d137e5d8-0de2-4033-aa58-3fefdef45906",
          "httpRequestId": "93312fc2-ecf3-46af-b041-9e0dff1b1b9c"
        },
        "item": {
          "id": "597c6858-ef45-4cd7-aa07-cc9aea8ce14e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "209c368a-296a-4f6a-b0b7-a6c26258a1e3",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "b261f459-3e19-41d5-9451-7ab27f8c0af8",
        "cursor": {
          "ref": "adac82e1-c66b-4e44-83c9-0b6a0c713848",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "16fa3639-7231-4a22-b03c-45179a6d325a"
        },
        "item": {
          "id": "b261f459-3e19-41d5-9451-7ab27f8c0af8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "90b14972-20c2-4da1-8f96-449bfc1dd7d5",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "3a3ec674-b75b-496f-b6d6-cb1c74a8baf2",
        "cursor": {
          "ref": "4d5d52b9-134f-407b-b7fa-f598644e89fd",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "091c7384-7476-4bdc-9609-f93facdc06be"
        },
        "item": {
          "id": "3a3ec674-b75b-496f-b6d6-cb1c74a8baf2",
          "name": "did_json"
        },
        "response": {
          "id": "a7cd0703-aa14-424c-8690-84c3ac3ffdfc",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64f48f0-ba9d-44fc-9a1b-63339ddcf80a",
        "cursor": {
          "ref": "d517c256-c86f-40c7-aa9a-73372c834c66",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "75933418-574a-4cc6-85ce-b1bcd3658a14"
        },
        "item": {
          "id": "d64f48f0-ba9d-44fc-9a1b-63339ddcf80a",
          "name": "did:invalid"
        },
        "response": {
          "id": "54ae66f0-adad-46ce-8873-7432848dd7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64f48f0-ba9d-44fc-9a1b-63339ddcf80a",
        "cursor": {
          "ref": "d517c256-c86f-40c7-aa9a-73372c834c66",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "75933418-574a-4cc6-85ce-b1bcd3658a14"
        },
        "item": {
          "id": "d64f48f0-ba9d-44fc-9a1b-63339ddcf80a",
          "name": "did:invalid"
        },
        "response": {
          "id": "54ae66f0-adad-46ce-8873-7432848dd7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5d64fa-e0dd-4891-b430-f2e9bdb79884",
        "cursor": {
          "ref": "f1d5cda5-7124-4af0-ad59-6b5672f0cc2d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "71856cb0-d86a-46a5-b71c-de9895e960c3"
        },
        "item": {
          "id": "0c5d64fa-e0dd-4891-b430-f2e9bdb79884",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0425c7db-ed86-486d-9666-bb75fff8433d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef54651-04d7-4462-a009-35a255c0ca8f",
        "cursor": {
          "ref": "87a69276-8552-45e2-a86b-75fff00d9fdb",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d0c43d4e-80d7-438f-b17d-a0e6267bf6e4"
        },
        "item": {
          "id": "7ef54651-04d7-4462-a009-35a255c0ca8f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1ad96d67-fb9f-4ce0-845c-6791e35120dc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1125307-de2e-4f08-9985-bd114565ce20",
        "cursor": {
          "ref": "0fda898a-e20f-4bd4-914d-4bfa2b95ddbe",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bd2b9e7a-b5cc-465f-9153-84016293789e"
        },
        "item": {
          "id": "f1125307-de2e-4f08-9985-bd114565ce20",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fcbbdde1-b72f-4c74-a31e-891cacac52f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43682ea3-75e1-4903-a671-1d20183e3474",
        "cursor": {
          "ref": "d3ff3af3-8f28-411e-a77d-7c0ce6121fae",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9bab5653-a4d8-4bad-b729-8488fdca65dc"
        },
        "item": {
          "id": "43682ea3-75e1-4903-a671-1d20183e3474",
          "name": "identifiers"
        },
        "response": {
          "id": "35c78d62-7444-4fa5-8d7b-b8b65db0704d",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a685dd4-fd50-4635-aa5b-e7c6deeaa811",
        "cursor": {
          "ref": "295fcab0-e1ca-42df-94d4-8b5853e711bb",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "76c5dfa7-aa7f-4d7d-90a5-b5488478951b"
        },
        "item": {
          "id": "0a685dd4-fd50-4635-aa5b-e7c6deeaa811",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "099661de-4a88-42aa-be9f-6f281126cd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a8c65a-edd4-4e5f-b749-57f675b7ae5c",
        "cursor": {
          "ref": "887207d9-23f2-4b71-a6cf-81f03d3999c8",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1b594982-1df7-4343-b719-d6369c07cc6c"
        },
        "item": {
          "id": "90a8c65a-edd4-4e5f-b749-57f675b7ae5c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9a9ced9c-3286-425a-a0c3-e53df7b106c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63d98e0-8ff2-4e6b-9a1a-37b75c52474e",
        "cursor": {
          "ref": "0a09d3a5-f430-4544-bb2d-e51cc91847f1",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7800d9ce-de3a-4ddd-aa2c-df56c7e8b2db"
        },
        "item": {
          "id": "f63d98e0-8ff2-4e6b-9a1a-37b75c52474e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b90aa20f-958f-4ff7-aa34-9bddc6eecef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4819f6-d84c-4e49-a581-1ab374dbc446",
        "cursor": {
          "ref": "a96fd653-5aa6-4f12-8171-a6029a800ecc",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "43b5d8fa-7bc6-4131-8f37-446afb63072b"
        },
        "item": {
          "id": "ef4819f6-d84c-4e49-a581-1ab374dbc446",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5a7e2209-b771-4ad6-961e-91edd5c08076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82403e0-de54-4014-a6af-1f3a19053784",
        "cursor": {
          "ref": "266932fc-4bdc-40f1-99e7-b0e254530187",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bd9b1806-37c6-48f7-a504-50e3f23cd68c"
        },
        "item": {
          "id": "e82403e0-de54-4014-a6af-1f3a19053784",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a281ed4c-a175-4d93-8fe0-df79cc7cc14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1272fd-0ab0-4887-88f7-3c263106f395",
        "cursor": {
          "ref": "5d53e35c-9967-40e1-a913-aafa21f590e2",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "53348e0c-27d6-481d-ade8-9fcc3bedf86b"
        },
        "item": {
          "id": "de1272fd-0ab0-4887-88f7-3c263106f395",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "177e0395-c0c9-4a11-9fe6-2029778fb9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818e12ac-cf7c-4c97-964c-b6080f227d91",
        "cursor": {
          "ref": "1ec41c57-92da-48bd-a6e3-35ee35b3649c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "50c319f1-9db1-4b37-8d9e-4d85313bb547"
        },
        "item": {
          "id": "818e12ac-cf7c-4c97-964c-b6080f227d91",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7d0ca6cb-a7f9-4d75-8c30-491e9ecf680f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f681b82-d525-4b62-933f-2d397c121e9a",
        "cursor": {
          "ref": "4b046e24-008d-4f66-ac55-a5c58c875ba5",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "448d1d30-3857-4b13-8455-da0b4608d1e4"
        },
        "item": {
          "id": "0f681b82-d525-4b62-933f-2d397c121e9a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8470a28f-5e82-4f82-9cb4-f4cdc3808e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8869effe-4adc-4107-a1bf-bf981bde170b",
        "cursor": {
          "ref": "52ba9650-b60a-4ad0-bc3e-8aa080cced15",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cf5e7278-2381-415f-8271-9a82454c547a"
        },
        "item": {
          "id": "8869effe-4adc-4107-a1bf-bf981bde170b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4bbd8783-f254-4249-bc65-8da428e57846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b50937a-d4ac-41ec-b7e1-505a8961c05b",
        "cursor": {
          "ref": "f84d649c-9102-45a1-b538-953cad6600f8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0c1297b1-e0f3-494f-8f11-9c27a96ea014"
        },
        "item": {
          "id": "2b50937a-d4ac-41ec-b7e1-505a8961c05b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2ecc808b-675b-42bc-951f-a4fb5617e028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914215ed-27a7-4721-8544-068dff71d6bd",
        "cursor": {
          "ref": "8074e37a-31ed-4c78-b2be-446e1492707e",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "baa2d8c8-d46f-4ff8-966e-c96d3d676f3c"
        },
        "item": {
          "id": "914215ed-27a7-4721-8544-068dff71d6bd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ea12c50d-2b55-450e-a993-c6fa9da3d21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c811acd-f021-4760-85ed-a780828410a8",
        "cursor": {
          "ref": "50260702-d830-4680-b89c-97c2131a31eb",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fbb3b65b-ed26-4471-878a-545b063b317b"
        },
        "item": {
          "id": "9c811acd-f021-4760-85ed-a780828410a8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bd7862dc-23a6-4bc2-bb7c-ef249d8188a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4242fb9-6008-4a20-8223-6bb7d4c04895",
        "cursor": {
          "ref": "733463af-528c-4032-873e-615b8fea2ef8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2a74492f-a325-4efc-aa42-9add5d8ae2e4"
        },
        "item": {
          "id": "c4242fb9-6008-4a20-8223-6bb7d4c04895",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b0748acf-ddef-4080-b7d5-5678e51f305b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d2cfda-c360-4bba-b761-2e3de5c0fa4d",
        "cursor": {
          "ref": "d4796cdc-2853-490b-8bba-fd0a69618ece",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "71363f7e-1336-4e0b-af8a-229a0b7e6fb0"
        },
        "item": {
          "id": "24d2cfda-c360-4bba-b761-2e3de5c0fa4d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1ec4bff7-0a2f-4476-a2e1-34893cbf98ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25213cc4-8b65-41d6-a0a4-b45c17894bcf",
        "cursor": {
          "ref": "a7b7f9ce-25d3-492a-a1ea-e0c895b882ed",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f06ff87f-81d1-42f5-88fa-69bc9a71b724"
        },
        "item": {
          "id": "25213cc4-8b65-41d6-a0a4-b45c17894bcf",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4a01f22a-dc19-49d8-9c37-81aae19a1b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15787610-b865-4ff7-8f49-7feab1b1af67",
        "cursor": {
          "ref": "3aa88f39-6692-4ebf-a335-90b671d5fb47",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "14a6ee2d-155b-4bda-881a-9bffb356a886"
        },
        "item": {
          "id": "15787610-b865-4ff7-8f49-7feab1b1af67",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ab11b62d-b347-40d8-b002-d5bc97429387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc8d0b4-39ee-414a-83ad-0830f3ce4571",
        "cursor": {
          "ref": "faee4a80-2bd7-418a-a7e9-d5d7a99bcc4a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "13a0bcb8-fadb-451e-a00e-57fc7923745b"
        },
        "item": {
          "id": "3cc8d0b4-39ee-414a-83ad-0830f3ce4571",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "aa3b2479-3e03-4c4e-a41b-13b72574f67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9696dc64-305d-4453-8684-97b346b6d2f8",
        "cursor": {
          "ref": "4d3f3a0d-315f-4589-9468-d475100f5966",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7eb4ca0c-46ec-475c-85b2-909c7c110d54"
        },
        "item": {
          "id": "9696dc64-305d-4453-8684-97b346b6d2f8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "11a3f484-0f27-4071-afbd-d148db697224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f9c137-e7b5-4851-918a-a3d7cd290dea",
        "cursor": {
          "ref": "d30d9223-11e8-4755-9f10-4890d898d4de",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "90fd75da-0474-426c-a404-23dc063ea2c1"
        },
        "item": {
          "id": "40f9c137-e7b5-4851-918a-a3d7cd290dea",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "58d2c2b2-6466-485f-ab1a-f552aa220d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e826c1-3886-4a5c-93c0-bb6df9f84d1c",
        "cursor": {
          "ref": "c5caef5e-bf54-4771-ade0-8ca754d6db7f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1837f63b-ef56-4326-8be7-a6951772c9db"
        },
        "item": {
          "id": "98e826c1-3886-4a5c-93c0-bb6df9f84d1c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "51eda341-ab26-4b71-b039-0b9880a7f8ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c4f1b3-0923-4fe9-868b-85a35bf7d964",
        "cursor": {
          "ref": "46602ffa-94c5-464e-a188-1574bed802f5",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "199e9e13-f0f5-497c-84e7-5f50f077358e"
        },
        "item": {
          "id": "18c4f1b3-0923-4fe9-868b-85a35bf7d964",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1e0362cb-b24f-4041-aa04-65233ae846fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e525f6d3-b7a3-46aa-bb70-60ab8e32f57b",
        "cursor": {
          "ref": "cc441f2f-bcd8-42f6-8e25-d3e608c696a6",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d95e3212-76cc-48b1-949a-7119e08bfc0f"
        },
        "item": {
          "id": "e525f6d3-b7a3-46aa-bb70-60ab8e32f57b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "17f9a5c3-fc50-45c0-bf73-5e1a0c0804b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e3b863-7275-4518-b978-c969d9f4e03a",
        "cursor": {
          "ref": "66fc6c54-98c5-4069-b9f7-7b1e55afb290",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "644d6e26-65f7-447f-ad2b-1c6dbe392bd9"
        },
        "item": {
          "id": "01e3b863-7275-4518-b978-c969d9f4e03a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "06ba0543-5456-4cd0-b221-cc694c851c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3e4397-cf23-4cc2-8a81-b81a5475e191",
        "cursor": {
          "ref": "a5ba9866-4f9c-4857-b972-45e182c697d4",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4d75dcdf-671f-4d13-a51e-9ce20326a48b"
        },
        "item": {
          "id": "cc3e4397-cf23-4cc2-8a81-b81a5475e191",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4b74b85e-f649-4b5d-8474-d1e30c4a0e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dba6451-ba90-4e2f-967e-3a00807084b5",
        "cursor": {
          "ref": "7e1b8a60-1860-43aa-beb0-d058ba788276",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "75a83590-e585-4da5-866a-b973d7da4a13"
        },
        "item": {
          "id": "2dba6451-ba90-4e2f-967e-3a00807084b5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e1f8cb27-433f-4c4b-9a43-25b2a891affa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38aedee5-68e0-4835-942b-0fe3e6ef96a9",
        "cursor": {
          "ref": "dec4fa9a-9800-40da-a9f7-19cafc186af5",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8b829680-29f3-460d-b697-3f1ffee8e091"
        },
        "item": {
          "id": "38aedee5-68e0-4835-942b-0fe3e6ef96a9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8f98d1be-1325-4204-9dd0-c9982b56afbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76f422e-2dc7-4411-8e3d-1845260e6733",
        "cursor": {
          "ref": "e17bd534-ba9c-4e29-af5b-64fb71c93244",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "28681143-ef2a-441f-9237-8e5deb434cee"
        },
        "item": {
          "id": "b76f422e-2dc7-4411-8e3d-1845260e6733",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "55cb3c2f-f244-4fd1-9915-d3b7dfac5c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0375de56-1d15-43af-be71-705b1b6ec468",
        "cursor": {
          "ref": "21e3b40e-2055-43d5-b6fc-792e34af9e64",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c79b6bae-609a-4db2-a691-cb32a4b53a1f"
        },
        "item": {
          "id": "0375de56-1d15-43af-be71-705b1b6ec468",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7d8d86b0-6558-4125-a9e9-60f41cdb9dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df54cb02-ad68-4d4d-b95c-b0ba3f8b78b7",
        "cursor": {
          "ref": "25db031e-fc84-4fa4-9d11-e94580f57baa",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4d75d49d-0f7b-4fcd-bcac-cb33226d5f4c"
        },
        "item": {
          "id": "df54cb02-ad68-4d4d-b95c-b0ba3f8b78b7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d1caa3a9-3077-4194-a553-86a37821ab9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9dee66-0776-4695-b85b-8c7567a55fbf",
        "cursor": {
          "ref": "0ca74919-1afd-42b6-be90-33227d21f6eb",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "55e35fdb-4bbe-436a-824c-57f6d34a6fb2"
        },
        "item": {
          "id": "ec9dee66-0776-4695-b85b-8c7567a55fbf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e37f932c-60de-4582-b0c3-eac66c08cf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1651c9eb-fdd3-4904-9c7a-1a31fc8159af",
        "cursor": {
          "ref": "9e7d8bb5-369d-4941-bd4a-946657015446",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6b4745c5-72b7-4359-9778-aa335fbbaf71"
        },
        "item": {
          "id": "1651c9eb-fdd3-4904-9c7a-1a31fc8159af",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6413e3e9-b9f5-4dcf-a2a7-431107fc4bb7",
          "status": "Created",
          "code": 201,
          "responseTime": 636,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "62b53319-68b3-42b2-84a9-2ad0df47ed29",
        "cursor": {
          "ref": "17c627a7-290d-41a4-b344-bbffab1a4f9f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dd021bbb-adbd-4d0d-9b7b-b643234daec3"
        },
        "item": {
          "id": "62b53319-68b3-42b2-84a9-2ad0df47ed29",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "41ec923f-d6ed-4402-9705-ffec36278eee",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "73cce3e8-dfa9-4c47-af54-2ac0edb91e97",
        "cursor": {
          "ref": "2ec72ac4-fa17-460d-a989-0d227db93446",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "00603c2b-0c63-44b8-88c4-47ed7cfcf068"
        },
        "item": {
          "id": "73cce3e8-dfa9-4c47-af54-2ac0edb91e97",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6390698e-a362-4787-9234-a59be03bb4d6",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "96033c0f-3ddb-4ef9-8a30-fdf7d99ebf09",
        "cursor": {
          "ref": "483910dc-c4bf-442e-84e1-68f9d6d149cc",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c09d259b-cd7c-408f-bb92-0ce339e08db3"
        },
        "item": {
          "id": "96033c0f-3ddb-4ef9-8a30-fdf7d99ebf09",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b50533e1-5a87-4c78-8d89-2a4a38e48375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0aedb9-29cb-4eaf-85b2-608ff262537d",
        "cursor": {
          "ref": "bca91083-fa01-41d2-b855-3a2a744007f7",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b419f8e6-4257-4563-b797-658e480412ab"
        },
        "item": {
          "id": "ba0aedb9-29cb-4eaf-85b2-608ff262537d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d9abd9f4-8926-4ea9-8c9b-3c7fece78578",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "de4d4982-da11-4e6a-a0b7-2e5c15db85d7",
        "cursor": {
          "ref": "a95e05df-a150-4c6a-a405-680f42a1da39",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ae58bfdb-fc6e-4a67-af7b-6b9900267450"
        },
        "item": {
          "id": "de4d4982-da11-4e6a-a0b7-2e5c15db85d7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "394464da-d101-44fe-a890-47e7178fc7ea",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b055af64-9919-430e-a293-df0619007dfc",
        "cursor": {
          "ref": "33845a41-aa7d-4e62-8fbd-59b789ceb564",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a4733142-3a8b-44e3-9844-10fe5caf2125"
        },
        "item": {
          "id": "b055af64-9919-430e-a293-df0619007dfc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "af09e6fe-2bf8-4fec-b31d-e0ca8f1490b6",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c76f9b08-e31c-48da-b141-5190e7d4a219",
        "cursor": {
          "ref": "8168b2df-3b92-4139-9d5e-2e5a4cc76d87",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dc588168-cf1f-4d45-9306-b3e476643f76"
        },
        "item": {
          "id": "c76f9b08-e31c-48da-b141-5190e7d4a219",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d05525be-45b8-481b-81e5-9d2f114c5cd8",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0692b78e-46a0-4c0e-93bc-1705f16004ff",
        "cursor": {
          "ref": "a08441b8-9de8-4423-8ea4-b833827f222b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d47752e9-a169-4467-aff6-ef177fbe896e"
        },
        "item": {
          "id": "0692b78e-46a0-4c0e-93bc-1705f16004ff",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ff4b2ac8-4b6c-49b6-a746-3f222c19ad65",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d2f74388-7d22-4138-88fb-9e5893284866",
        "cursor": {
          "ref": "f3f8156c-c7e7-4a17-a8b9-4651216c940d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d54fa019-6a20-484c-ba84-bd8be5d6ebda"
        },
        "item": {
          "id": "d2f74388-7d22-4138-88fb-9e5893284866",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "27d94676-361b-4916-92a5-5ec4fbbed8fd",
          "status": "Created",
          "code": 201,
          "responseTime": 410,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "386ff738-076e-42c8-a755-0eff3ab48a98",
        "cursor": {
          "ref": "64ca54a7-1dae-4589-b880-4ac155971e14",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0ac106e1-7049-4157-ba6b-6e482ed5ad61"
        },
        "item": {
          "id": "386ff738-076e-42c8-a755-0eff3ab48a98",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "827daa3e-d5b0-4ee7-9d03-1c8b1fe65829",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "25905f70-18ca-4787-931e-9cce6f9fd280",
        "cursor": {
          "ref": "640ed142-ff71-4e3c-8091-cd1c993010a0",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "54294a3f-88b3-48d2-aabb-8b0638518fc0"
        },
        "item": {
          "id": "25905f70-18ca-4787-931e-9cce6f9fd280",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "257e5362-17e5-4802-9d5e-054ad4728681",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f9de90ba-3c00-40cd-82af-f63648926a2d",
        "cursor": {
          "ref": "e37965ad-5d4b-42ca-86ca-94b0c4b455da",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7aa9e655-584a-4a05-a010-9e4b0ecde344"
        },
        "item": {
          "id": "f9de90ba-3c00-40cd-82af-f63648926a2d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b91a03b9-c6dc-4d91-80e6-e15fac2c7507",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b344436b-a741-44d4-bae9-7ab756c92564",
        "cursor": {
          "ref": "579329b4-0f0a-4c20-a7dd-ffacb25fbfcb",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f4929f5c-e994-4cf3-bc42-1a7f5cb6c83e"
        },
        "item": {
          "id": "b344436b-a741-44d4-bae9-7ab756c92564",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b958f900-9e8d-4faf-95de-f99713788d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028bb7a9-096e-45cb-a969-a1289874c423",
        "cursor": {
          "ref": "c20d38e3-d148-4c2b-b5ba-a5ade6bcdcae",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "79b47c91-c6aa-4d78-8d3b-437bc8c88d53"
        },
        "item": {
          "id": "028bb7a9-096e-45cb-a969-a1289874c423",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "60ea0faf-9b02-47d7-9a4b-c54b822ef1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f636fce-b0f9-4649-b328-a36e52d17e42",
        "cursor": {
          "ref": "293f7a2d-d5f0-4ca0-ba6d-ebab4a24d29e",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "692e65ae-0c68-4531-83b6-ad1eeef666f7"
        },
        "item": {
          "id": "5f636fce-b0f9-4649-b328-a36e52d17e42",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "489ca276-720d-4f89-a195-b7733616f924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0fd7cc-a961-41fd-a66c-7d33b3d1c29d",
        "cursor": {
          "ref": "8ceea846-c2b5-4bce-9938-ce550004b8b5",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4c8ccd9d-ca86-4811-8f2b-0aad61882097"
        },
        "item": {
          "id": "0a0fd7cc-a961-41fd-a66c-7d33b3d1c29d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5493f29d-7bb6-4afe-97e9-ebdc3c24b858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e42d2fa-210b-4df6-94ca-d5ab23b15708",
        "cursor": {
          "ref": "ff2f3291-789d-47a4-b446-2674822d69fb",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2ccbd15d-2902-4df5-8e53-356d265414e7"
        },
        "item": {
          "id": "0e42d2fa-210b-4df6-94ca-d5ab23b15708",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a85719d0-8372-4f51-a711-ed4296d522c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dda360-b67b-4664-8d4f-377da99869f7",
        "cursor": {
          "ref": "fecf7ec3-0d5b-4b0a-b7b0-1cd859113bb0",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b748dae0-5749-4ebe-94f7-0f5a088f8120"
        },
        "item": {
          "id": "31dda360-b67b-4664-8d4f-377da99869f7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8f722d85-88cf-4e6a-9278-86156153a940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44beaf07-f031-4abf-9969-8ccd2327dcab",
        "cursor": {
          "ref": "7de26a1c-0f1f-4d06-a594-8575009f98af",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "00f33e63-8613-45ed-9875-1bbec7d077ab"
        },
        "item": {
          "id": "44beaf07-f031-4abf-9969-8ccd2327dcab",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b41809b2-ecda-4597-87f3-f685f19377c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fe159b-91b9-488f-87b3-d88b4357efe3",
        "cursor": {
          "ref": "f450eb35-590b-477b-9e56-582b6540529a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4a36447c-93dd-4c27-b47d-3b530e61d40b"
        },
        "item": {
          "id": "57fe159b-91b9-488f-87b3-d88b4357efe3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "259ac2fb-8689-47b7-8029-dbf6a572d56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240ae7b4-12f2-4cf5-aa0e-d9fc0828565c",
        "cursor": {
          "ref": "c027db34-a6a4-4cf0-ad5c-0296f97e330b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d62c4ca3-29f9-4f8e-919a-bac8f3eb4b49"
        },
        "item": {
          "id": "240ae7b4-12f2-4cf5-aa0e-d9fc0828565c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fffb4059-77b2-45e4-8cd7-c0231a01cab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0d5a4f-030d-45b1-8bb0-b61dfe9eaa56",
        "cursor": {
          "ref": "772b89c8-754b-4d16-b0bc-ba545c2e9cbb",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7fcebc9d-3e38-45be-8197-f13589a10976"
        },
        "item": {
          "id": "8d0d5a4f-030d-45b1-8bb0-b61dfe9eaa56",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "029fc2d9-2bd5-44d2-8c2d-a0cd34e1476f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff083b83-dd76-4096-864b-112390712998",
        "cursor": {
          "ref": "bf0d8226-efbe-4003-aacb-38c16cd3406a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "91f4bb79-0152-4ed7-8933-429d44a6bec0"
        },
        "item": {
          "id": "ff083b83-dd76-4096-864b-112390712998",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "32fbd70e-8f65-4e8a-92fb-462638e9b176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4708cf62-77b7-43b9-bf85-a98c3898554f",
        "cursor": {
          "ref": "e8ea05b3-b83e-42fe-84cd-632c10fa2dd3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "28f43240-3701-4272-a9a8-bc7441610903"
        },
        "item": {
          "id": "4708cf62-77b7-43b9-bf85-a98c3898554f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b7426d69-ed6f-4185-8c7f-78d45e0c2771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb876c4-6753-41f3-a203-3f1313e74336",
        "cursor": {
          "ref": "8640e60b-cf01-48fe-a07a-10e9b0ab6e38",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7224c970-43fd-4b2b-b900-3dadd4c35fc3"
        },
        "item": {
          "id": "cdb876c4-6753-41f3-a203-3f1313e74336",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "34ceac55-b44f-461d-9e8a-54247ef1a30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b77362-6534-44a0-a012-6fe23fd6cde9",
        "cursor": {
          "ref": "8cafa10c-683b-4682-9a55-b0a56bc2e50e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6d9bcb3f-9eeb-421c-95f4-4fc0e28486e5"
        },
        "item": {
          "id": "78b77362-6534-44a0-a012-6fe23fd6cde9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c7b0a40e-01b1-475f-838b-b009c585a542",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "aa61a90a-0e17-4762-a7d9-89d7449db377",
        "cursor": {
          "ref": "49a80d93-d3d4-4f84-bebb-aa8685157cbc",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1a29a2b3-0f37-4c95-901d-4c303bc50dde"
        },
        "item": {
          "id": "aa61a90a-0e17-4762-a7d9-89d7449db377",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ee073010-e49a-43b0-80b2-154a58eca47b",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c216cd10-5aa6-414a-9bec-ae1fc8a840e8",
        "cursor": {
          "ref": "08620819-0c3d-45ad-8ade-dc4fd91a9e78",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fd5904c3-88e9-4e1e-ad99-7a8ceb7129d0"
        },
        "item": {
          "id": "c216cd10-5aa6-414a-9bec-ae1fc8a840e8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "78fab077-4da8-4470-90f4-88bd84f3f17b",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5fb1d1cd-2cda-429c-afd9-e0668aa39875",
        "cursor": {
          "ref": "2358d091-16a6-4667-baa5-c35ce8101a32",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cf784077-7d11-4c1a-b1da-e5612cd1fecc"
        },
        "item": {
          "id": "5fb1d1cd-2cda-429c-afd9-e0668aa39875",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e6a67ead-1943-4e08-96ed-271f4046bcf5",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b2e5c9b8-0aaa-493c-9960-6e95ebf82bba",
        "cursor": {
          "ref": "c3ccea15-8aa6-44a6-92c7-8f79f95e5dd5",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b05b7a05-565f-4b82-890d-1482f9717a99"
        },
        "item": {
          "id": "b2e5c9b8-0aaa-493c-9960-6e95ebf82bba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "55ad8387-4279-4073-a9ca-70a8ed4cfb3f",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "65e61543-f750-421d-89f0-46194710a03b",
        "cursor": {
          "ref": "fd9cccb1-49e4-4c7d-95d7-40d00d32a004",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "98931b00-bc18-449e-af8f-82029d5476d1"
        },
        "item": {
          "id": "65e61543-f750-421d-89f0-46194710a03b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "399f9c54-799e-4238-8253-e16900e3dba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd0b743-ee13-4acc-a9d8-e51a5040e09d",
        "cursor": {
          "ref": "94462f8b-1095-44e7-a7ef-c438bffab4ee",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2266f575-e97f-4f85-8e77-705cedbf02dd"
        },
        "item": {
          "id": "bbd0b743-ee13-4acc-a9d8-e51a5040e09d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "de709062-80e4-4acb-93d8-c845daab7fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49dba268-c8ab-45b2-bfaf-89a5133c95bb",
        "cursor": {
          "ref": "0bc089a6-305d-4b00-a9f5-3b8e8ebd65fa",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7944be8a-8f3c-474a-ae23-b72ba1931153"
        },
        "item": {
          "id": "49dba268-c8ab-45b2-bfaf-89a5133c95bb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "539a0898-1e2c-4316-8ee4-7412ab2a5805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9520972b-8964-48ca-9afb-0ab35bd46dbf",
        "cursor": {
          "ref": "deb6efba-1929-4413-8a2c-d43185be2d85",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "344e46b4-519a-46a2-8e5b-eadbbd9e36cf"
        },
        "item": {
          "id": "9520972b-8964-48ca-9afb-0ab35bd46dbf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cab2bccc-3800-4999-87ed-56c983b384bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be92a791-f266-4c9a-a496-9147d05db61e",
        "cursor": {
          "ref": "a5be4ce5-794f-4c40-9c67-19849184a4e4",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "948d348f-7336-4baf-8c8a-c7a0db69a26f"
        },
        "item": {
          "id": "be92a791-f266-4c9a-a496-9147d05db61e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c89a3257-a6a6-4ba5-b2c4-67f723a60a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c225bca9-2af1-4f6d-a732-745f5543b0a2",
        "cursor": {
          "ref": "df99f9e7-897b-4d84-858b-81711e2d798f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cc24e7a9-7cb7-4928-a91b-cc16cae70297"
        },
        "item": {
          "id": "c225bca9-2af1-4f6d-a732-745f5543b0a2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3360a004-0c21-4d4f-a969-b360b0a88408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d62da4-4d39-4ca4-8995-5806255ec7d2",
        "cursor": {
          "ref": "f4a4ab32-3d38-4b43-a5e2-adbc27d244f3",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f3f5c585-475e-460d-bdf5-b68fa6a0e00a"
        },
        "item": {
          "id": "c8d62da4-4d39-4ca4-8995-5806255ec7d2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c77fd249-27c8-430e-8747-6e6b4d406403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266e31d8-8f2a-4653-b6fc-c3c015f489f2",
        "cursor": {
          "ref": "dd5fa4dc-16ab-4c24-ac5a-55892b8fa486",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b73cf32c-3a7a-48ea-9af0-c9ea1bdd2267"
        },
        "item": {
          "id": "266e31d8-8f2a-4653-b6fc-c3c015f489f2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d2e7ef99-414a-4a05-9bf4-8535a470aa2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beffb2ca-a336-4ae1-8139-61c75397a763",
        "cursor": {
          "ref": "3bef2ad0-16ae-4837-a005-039c5fc8c6c3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6aca37cf-55a5-4c38-b787-481193a28b7d"
        },
        "item": {
          "id": "beffb2ca-a336-4ae1-8139-61c75397a763",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "83bf7c0a-1cfd-4804-b07f-a740be8c3fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2aa9918-5637-4457-a493-84a2ac15d267",
        "cursor": {
          "ref": "ebe5be86-39b2-4cf2-b4a3-7a26d71c21c2",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "81fa3ad6-c74b-43d6-b203-1f9723c564ff"
        },
        "item": {
          "id": "f2aa9918-5637-4457-a493-84a2ac15d267",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "44b65b0b-fa9f-4177-9215-8c401cf66295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9a5297-b6e9-4b77-ab6c-860d40fa4482",
        "cursor": {
          "ref": "62e7160c-b219-4e95-aa56-05c8ea4f71fb",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "94f5d91d-44f7-4095-8088-f347ab4df753"
        },
        "item": {
          "id": "1a9a5297-b6e9-4b77-ab6c-860d40fa4482",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3eb5a08a-aa5a-43e2-8b48-04c92fbac63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca21900f-a82a-4a8d-baa3-d26ccf0ce4df",
        "cursor": {
          "ref": "0f4392ea-a1a8-43cd-9dbd-92e8f99eeec0",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "aba4c847-17a8-4535-ac03-a0873d22d26e"
        },
        "item": {
          "id": "ca21900f-a82a-4a8d-baa3-d26ccf0ce4df",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e13182d6-038f-45cc-ac39-3ebd64e173a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e9adef-57ac-40ec-a76f-649bdf808f03",
        "cursor": {
          "ref": "5de21cf4-c7b1-4599-93dc-3b884307aaf3",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "51a5b523-e26d-410a-99e6-3b0e128ec9ed"
        },
        "item": {
          "id": "74e9adef-57ac-40ec-a76f-649bdf808f03",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7645b1b7-1fab-43dc-926e-bbb68b3904a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153ce635-1b85-454f-a5cb-5d29943d9be1",
        "cursor": {
          "ref": "731ee37f-906a-4376-b456-e633fc967b7f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ee532e34-9318-4100-916f-fd65d6377cf7"
        },
        "item": {
          "id": "153ce635-1b85-454f-a5cb-5d29943d9be1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f509438d-337f-4f52-9de1-5997cae5b7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8f3b84-02eb-42cc-bfd5-1e4d6f973d88",
        "cursor": {
          "ref": "080c1602-ac7d-4d19-a263-c0eaf775cf22",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b41e4c99-3245-4643-9270-378178517d67"
        },
        "item": {
          "id": "4a8f3b84-02eb-42cc-bfd5-1e4d6f973d88",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "52d2eb3c-0c7b-48f6-a212-6b33595fed5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038f0396-554f-4611-af6c-77ee4b4a9889",
        "cursor": {
          "ref": "f6469e09-d118-48f6-822f-7da1394189d4",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "402f48b6-5528-4d77-879c-314bc0bcba2f"
        },
        "item": {
          "id": "038f0396-554f-4611-af6c-77ee4b4a9889",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8c02e633-dca8-4e72-83fd-fc4457f5782c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1dd1a3-b51a-441a-b6d4-cdc2b6024972",
        "cursor": {
          "ref": "65eb7096-f1c2-49d4-82d1-784ce5417c1a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1a0a57f3-7df1-449f-80f7-a3021ee8305b"
        },
        "item": {
          "id": "ac1dd1a3-b51a-441a-b6d4-cdc2b6024972",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "344322bb-6a73-4e73-9bbc-3ca3c405bb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e1678a-4be1-4a7d-ad93-00d79218fe62",
        "cursor": {
          "ref": "a3dfed93-8300-4314-99cb-34561de708b7",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ffc5902c-3710-4080-aecf-fbf55d53b01f"
        },
        "item": {
          "id": "c7e1678a-4be1-4a7d-ad93-00d79218fe62",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a35cec43-33f0-4076-80aa-75380cbe3e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189ab4ae-9d4f-4d96-82f7-5b765ea3ab35",
        "cursor": {
          "ref": "315c4b62-96df-4245-b1c1-4181968cee23",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "474348e4-de5a-4f87-90a6-c4304f88711b"
        },
        "item": {
          "id": "189ab4ae-9d4f-4d96-82f7-5b765ea3ab35",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "501f2e88-02f7-491c-8d32-961edd00f72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fabade-95ab-43b8-b851-f1a605047d0b",
        "cursor": {
          "ref": "7787ac38-9e53-4992-8b87-0e00be41fb2f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "64334a88-161d-4b43-b65d-9984a38bc902"
        },
        "item": {
          "id": "39fabade-95ab-43b8-b851-f1a605047d0b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b8a9a291-918f-4f78-9cdc-09e556c157ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a3d3e5-bad0-443a-903a-77921d709b4c",
        "cursor": {
          "ref": "685ef75e-55d2-4d5e-99d3-5a96b4315a75",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "810ee298-c1e7-47d4-93ba-a3613514585a"
        },
        "item": {
          "id": "58a3d3e5-bad0-443a-903a-77921d709b4c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9d3d6c10-01e6-4334-8998-be3b3d738f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4105420b-c87b-4e19-b159-1ca88a924a52",
        "cursor": {
          "ref": "fae3c88b-01a3-4510-989a-634eaacfea21",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e01fc4d8-1171-431a-8de5-e1c8bdb882d7"
        },
        "item": {
          "id": "4105420b-c87b-4e19-b159-1ca88a924a52",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1704256c-0999-4781-bbb6-078ed2de5ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19241a45-bce5-449a-92f2-4e88d7262fe5",
        "cursor": {
          "ref": "b3a135db-82a2-4f4f-a619-473ca0a1d04b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5a1298e5-432c-453e-a4fe-77eeb955687c"
        },
        "item": {
          "id": "19241a45-bce5-449a-92f2-4e88d7262fe5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a7687911-477e-4bfb-86ab-c6d6e0dc94ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6cf6e2-cba1-469d-93a9-2f2bc9ec8cd6",
        "cursor": {
          "ref": "7132a0bb-c3d1-4d5c-99dc-1d7e70eb8ad4",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fc36184b-ed90-4efd-ac91-8270cc2bded7"
        },
        "item": {
          "id": "cd6cf6e2-cba1-469d-93a9-2f2bc9ec8cd6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "00469b76-69e1-493b-90b5-c0d6d20d33e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b44c7bb-918f-4555-a560-016772618e9f",
        "cursor": {
          "ref": "b123efcc-f4dd-405e-b31c-b0a95c47c8ed",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "45a1a847-c384-4f6f-bdfd-cbced0c314f0"
        },
        "item": {
          "id": "6b44c7bb-918f-4555-a560-016772618e9f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8a4c3599-d593-4a81-9907-ec9b124b3518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d241227d-4864-4f2b-9913-3ecb6cb6cb75",
        "cursor": {
          "ref": "cba13c60-ce11-4981-86f4-06174807ee60",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2d91f559-7b63-4802-933e-50b19de32078"
        },
        "item": {
          "id": "d241227d-4864-4f2b-9913-3ecb6cb6cb75",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "364d70aa-f837-4268-b034-71d9503d07b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30d7ed6-db0b-47b5-a05f-4f8a20ff992d",
        "cursor": {
          "ref": "4a1e6847-a328-48c8-a383-7216b6e4adf9",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "351c0bfd-b536-4a42-8c5e-510630691e6a"
        },
        "item": {
          "id": "c30d7ed6-db0b-47b5-a05f-4f8a20ff992d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "32ee0218-5d53-48e7-ac7f-0c7f62f33008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5605e346-c5cf-4b2b-9ff7-27d7332c6474",
        "cursor": {
          "ref": "abc0becd-63d0-45c5-87d1-d908c8a460c5",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1e539703-6713-40bb-9281-fbd95ae34b8e"
        },
        "item": {
          "id": "5605e346-c5cf-4b2b-9ff7-27d7332c6474",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3257f625-a87f-4220-a75b-9626c57150ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437f6e39-ea7f-48bb-b0ce-4546dc3e0ec1",
        "cursor": {
          "ref": "61c961f0-efe7-4c58-95e8-eb9fd18b0ab8",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ba0db7e4-eb79-4487-b01b-83253ef1f49f"
        },
        "item": {
          "id": "437f6e39-ea7f-48bb-b0ce-4546dc3e0ec1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e11e267e-bf17-47ee-ad5f-ea66cadc6bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82476f7-9d6b-497a-92b2-924477142be9",
        "cursor": {
          "ref": "55648e86-5053-44c4-b87f-e0e1a310cd9b",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cc3067c7-5fd7-48c1-a509-32dc56629165"
        },
        "item": {
          "id": "c82476f7-9d6b-497a-92b2-924477142be9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "58dff22c-438e-46fd-800d-fc312be8156b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4fa17cc-2186-44e9-ba2f-c020eaef1548",
        "cursor": {
          "ref": "99ecbd7e-5302-452e-adc7-7960f9c2958b",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e99cdc38-4788-48ae-ac83-4b874a48eeb2"
        },
        "item": {
          "id": "e4fa17cc-2186-44e9-ba2f-c020eaef1548",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6a28d1d9-26f3-421d-a916-b5095034b10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdd9067-fe8c-4544-a4d9-b8fc57224ce7",
        "cursor": {
          "ref": "85089902-22d1-416c-907d-6e8f4afa9a39",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d688f03a-c727-41b3-9e77-8e0ee6848c46"
        },
        "item": {
          "id": "3bdd9067-fe8c-4544-a4d9-b8fc57224ce7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ea686a04-9472-403f-84e4-9fa9d2d63696",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b030987a-b5aa-4615-a16b-b2dbcccea653",
        "cursor": {
          "ref": "72209598-522d-44f0-9ba9-d76d99806cc7",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "776215e7-8f1b-4884-ae3a-7c3b448a4815"
        },
        "item": {
          "id": "b030987a-b5aa-4615-a16b-b2dbcccea653",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c4115452-e89f-4df8-bb6c-134c566a7651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4e8236fc-964a-4faa-94a0-b695343ba75a",
        "cursor": {
          "ref": "0f54384d-3e9f-4ba1-9cbd-9c535fcd5caa",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c6208432-f678-4fde-a97e-dbe99e0ed054"
        },
        "item": {
          "id": "4e8236fc-964a-4faa-94a0-b695343ba75a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ff9e3af7-0376-40c4-a31e-35ea90752baa",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89b5f38-8c20-44a7-abbb-ea776e0f5ef0",
        "cursor": {
          "ref": "c84d3abb-db8c-4863-a85a-861f043ddc7a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c29ff979-c4f6-4ac0-9471-5fe613081358"
        },
        "item": {
          "id": "f89b5f38-8c20-44a7-abbb-ea776e0f5ef0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8ca24596-0042-4951-aee1-0ff661e39fb4",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdb70c2-2304-4008-be89-f179eb0734ba",
        "cursor": {
          "ref": "446bfd5b-9310-45a0-8123-2848af5ffcd4",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "09e1c325-6165-4d6e-8850-2015e1b91f3f"
        },
        "item": {
          "id": "8bdb70c2-2304-4008-be89-f179eb0734ba",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d4e3535a-dc69-4382-98e2-811a865b76ac",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d358412-717c-4104-b77b-09b7837907af",
        "cursor": {
          "ref": "b887171f-2b3d-449b-916e-240417efd8a8",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b3561b7a-7746-4176-8619-2730e5259e7f"
        },
        "item": {
          "id": "4d358412-717c-4104-b77b-09b7837907af",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c578cfe7-ad3c-4c36-9b39-7287afdaf96b",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8caf9c14-2851-46e4-b42b-184ff2c722ca",
        "cursor": {
          "ref": "ad895a10-529d-454e-8364-0ea646141e68",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a079d883-f541-4b79-8250-2d03203a44b3"
        },
        "item": {
          "id": "8caf9c14-2851-46e4-b42b-184ff2c722ca",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b6ac6765-be62-456c-87bb-7ece23089ca0",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-14T00:34:14.557Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-14T00:34:14.557Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ac3f7dce-bd06-4984-a8e0-3b57ff8c2e67",
        "cursor": {
          "ref": "9180c8c6-3396-4d27-88ac-f68db75d6ce7",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8c25d7b1-b486-4a27-93af-c950184223c4"
        },
        "item": {
          "id": "ac3f7dce-bd06-4984-a8e0-3b57ff8c2e67",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "50971550-1559-4303-b680-8300f160f26f",
          "status": "Created",
          "code": 201,
          "responseTime": 417,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ba1a9c-eb7c-4e74-8b20-a7614569e3b5",
        "cursor": {
          "ref": "fade6535-e665-47d1-824b-af26cb018c5c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a21b522a-fe30-4626-8e82-59709cbb64dd"
        },
        "item": {
          "id": "94ba1a9c-eb7c-4e74-8b20-a7614569e3b5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7c6da3d7-b3af-4a2a-96ba-28787ba7ba16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242127b6-dde4-432c-a184-e7a5f127476a",
        "cursor": {
          "ref": "f8cf81b4-00ad-4383-8fa5-d72db5e742c0",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b52924cb-6b1c-4618-bfda-fae0364a2689"
        },
        "item": {
          "id": "242127b6-dde4-432c-a184-e7a5f127476a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d3d3e3b4-4cf4-48b7-8b08-c9d5a7adb42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97001bf-e0c2-42d2-a0e6-3cb798ea6cf0",
        "cursor": {
          "ref": "1261c5bf-9e55-4e98-802a-7f358980d455",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "91336a57-ba65-4e03-a655-81931c5be954"
        },
        "item": {
          "id": "e97001bf-e0c2-42d2-a0e6-3cb798ea6cf0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "24a3c2cd-30f0-4ff0-b1d0-139a722ecb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db10f130-8256-4ce0-80bc-58f99c7a192c",
        "cursor": {
          "ref": "cdec2f5c-5bc8-4fa9-8e02-afd043f7379e",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e47a3a95-251d-4f88-a166-ada5ca83b168"
        },
        "item": {
          "id": "db10f130-8256-4ce0-80bc-58f99c7a192c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "44943f2c-5b14-4a97-9a0f-4f6c750c0348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7803c3b-ad38-402d-88fb-9db8adc51cd0",
        "cursor": {
          "ref": "1cc62cb1-5431-4d88-85e1-0b7b4f0e2366",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "477fc475-4234-444e-8ec1-e52665be324a"
        },
        "item": {
          "id": "e7803c3b-ad38-402d-88fb-9db8adc51cd0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1717849f-d99a-46bc-8d18-bb85311777e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd4dd7c-1365-4f9d-9304-17d9a65bd639",
        "cursor": {
          "ref": "9929667a-ede0-47f2-be40-772851971b1e",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d68d1f06-9396-4316-91a4-ad1f3e682a09"
        },
        "item": {
          "id": "5bd4dd7c-1365-4f9d-9304-17d9a65bd639",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f2dfb570-79cd-4614-96c8-4dc22dbb61be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ebfc1b-d832-40fe-9c46-c33307916063",
        "cursor": {
          "ref": "2d47249e-cf31-4d73-b1e9-0b76c684b2a7",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5ff15349-748c-49a5-9bde-eacc881b7769"
        },
        "item": {
          "id": "f0ebfc1b-d832-40fe-9c46-c33307916063",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5e777197-18ee-40aa-95b7-2c1591e2446f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e7ad2c-8774-417f-a6cf-536c63822c28",
        "cursor": {
          "ref": "1b03e1ef-d5bc-40be-92b5-525264fc588e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "74f92af7-033e-4a6c-82c7-d3be8355ca8d"
        },
        "item": {
          "id": "24e7ad2c-8774-417f-a6cf-536c63822c28",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dcd057a2-ee3c-497e-8d89-64c34fc71f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c754a13-ab5e-491d-be17-1641ebdd7449",
        "cursor": {
          "ref": "efbe8e87-ad41-4ec0-a913-c6c0006f3e6a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1ed2f0cf-53ff-4a25-bbdf-01a3e77e0869"
        },
        "item": {
          "id": "9c754a13-ab5e-491d-be17-1641ebdd7449",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e9341fed-e2c4-4fe2-a289-5ca12e9824eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae742651-962b-4bbb-9c70-f47bad3e1b62",
        "cursor": {
          "ref": "521484fe-6578-4f46-b834-ac5b0b9dd978",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4abf3e8c-5c77-458e-9b02-3d9a3e6c5efc"
        },
        "item": {
          "id": "ae742651-962b-4bbb-9c70-f47bad3e1b62",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d7cd2a0d-fa7b-4d98-b895-10bd34d88e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd814e7-1642-4202-b58a-2873dd8ae20f",
        "cursor": {
          "ref": "bc8b2cb5-8a82-462e-a27c-a8adc4740ce1",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6e7c9d1c-01c4-469a-9771-488c86d38822"
        },
        "item": {
          "id": "3fd814e7-1642-4202-b58a-2873dd8ae20f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "027fbe05-3485-4773-9964-91868e741388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86135c1-be3a-4187-923f-098b59498873",
        "cursor": {
          "ref": "249d52f6-010c-4334-b3df-b3be0d5c4d71",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d334df48-e348-4bf9-b43a-2bf7c03c8186"
        },
        "item": {
          "id": "e86135c1-be3a-4187-923f-098b59498873",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "01d70234-3be8-47d5-9657-558c5dcce5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88e2b3e-d890-42a5-899a-0a1c798349b6",
        "cursor": {
          "ref": "baa0c941-bfc7-439b-b311-f9bd035497d1",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f853035f-4216-41d5-af5c-4a81eb292348"
        },
        "item": {
          "id": "b88e2b3e-d890-42a5-899a-0a1c798349b6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7d11df31-dc55-45fc-8951-04eaecb71dfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7668f2a4-92d4-46ad-8a1f-3045779e4aa1",
        "cursor": {
          "ref": "3bed4f09-cec7-4d2a-a0f3-6e249b5eadee",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "21e77c25-a7f4-44f9-9dfd-878476dd44f3"
        },
        "item": {
          "id": "7668f2a4-92d4-46ad-8a1f-3045779e4aa1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1d0d27a9-a559-4266-8d66-a0c5f1952751",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4622f4fa-269a-4857-ab14-0d9e8317d10c",
        "cursor": {
          "ref": "b9b201f1-5adc-4aec-8610-9c14fae0a060",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "309ce38f-a9d0-46b3-b3a1-fc57647fdb6f"
        },
        "item": {
          "id": "4622f4fa-269a-4857-ab14-0d9e8317d10c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2b61c73c-7387-4283-a925-5416b28f99bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ce9a6f-fd17-44ee-9298-3013437d3187",
        "cursor": {
          "ref": "526d3abf-502f-4fa1-88db-41f0ed5dec6b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dc23d340-de2f-496e-ba64-1d0cf6bea34e"
        },
        "item": {
          "id": "67ce9a6f-fd17-44ee-9298-3013437d3187",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0736b73a-484d-4b15-9937-d604144ab13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054a05b9-0e33-410d-8a75-00c401aef9e5",
        "cursor": {
          "ref": "035ba735-ffba-41fa-8d8f-2bc8cd32f851",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fd54aa99-5607-4513-85f5-05d61c71f2a6"
        },
        "item": {
          "id": "054a05b9-0e33-410d-8a75-00c401aef9e5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "159a16dd-26b3-4267-afea-ef8bd0f008fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92567f9e-4a2c-4e65-8631-d9912b10da47",
        "cursor": {
          "ref": "42adcd61-059c-4153-b046-b6cc957c2df9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c96270e8-58be-48d6-b4c7-1fbcc3e74d48"
        },
        "item": {
          "id": "92567f9e-4a2c-4e65-8631-d9912b10da47",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "456f274a-154a-454b-bd55-8a3492b7f266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b48c4b-3787-44bb-9ce8-9f5da30ff023",
        "cursor": {
          "ref": "94df45b5-33bc-447e-b2cc-abf7d28b1cce",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "14f4a369-59a4-4fdc-a133-efe11b975bec"
        },
        "item": {
          "id": "13b48c4b-3787-44bb-9ce8-9f5da30ff023",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fdeac011-b4fc-48dc-872d-21ad735d508c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4d0980-58d4-42de-b76a-2174f55b9e18",
        "cursor": {
          "ref": "4f42cbde-c8fb-4da1-a9ad-a928e232192c",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3e99fc8c-b278-4580-95b2-1a50027251c9"
        },
        "item": {
          "id": "6c4d0980-58d4-42de-b76a-2174f55b9e18",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4376dd2d-3e45-4695-9c96-073daca6b1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5016fc08-c4f8-408c-80aa-923e94b1af0b",
        "cursor": {
          "ref": "5dcbe824-59b9-42ea-9127-df687fddeb6d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bed9b7e2-6a8e-4a88-88da-38b0daabcc77"
        },
        "item": {
          "id": "5016fc08-c4f8-408c-80aa-923e94b1af0b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ebd3758a-480a-41d0-8506-a51e08b50de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7dfbcb-7d7c-454b-a515-3145eaac8aeb",
        "cursor": {
          "ref": "361624bd-bce2-491b-b660-d805986266b2",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1dc364d0-97e4-48a8-ab33-237aa9750242"
        },
        "item": {
          "id": "2a7dfbcb-7d7c-454b-a515-3145eaac8aeb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "41560208-17e6-40c5-8ad2-763c854262a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621fdcf8-24b2-4e25-b004-491dbda94a60",
        "cursor": {
          "ref": "4544f648-93df-4c71-b66f-8e304624c3c8",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "05019aea-034b-465c-b8fe-c16cf3528b74"
        },
        "item": {
          "id": "621fdcf8-24b2-4e25-b004-491dbda94a60",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b8a85581-aa6a-4a21-9ca9-7f1c5bff4bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892bd467-cd42-4776-ba62-2dfd53720dc5",
        "cursor": {
          "ref": "37a26e14-7b9e-41cb-bbb9-e900e1289f4e",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "88bfee24-872f-4702-bce5-5a0ff46bd9ea"
        },
        "item": {
          "id": "892bd467-cd42-4776-ba62-2dfd53720dc5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3613d8a7-e318-4261-84b1-13c3b01b2fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd563c5-981a-4696-aa39-d372cca98944",
        "cursor": {
          "ref": "ca820d27-085c-4a3a-866e-8fd1d2b71780",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "69de1944-a9a2-4aec-ad0e-36ea86fb78f7"
        },
        "item": {
          "id": "0fd563c5-981a-4696-aa39-d372cca98944",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5db81401-b9ec-48fc-95cc-30c5b61b72e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111f07f8-3514-44fd-9d7d-1fceb490846e",
        "cursor": {
          "ref": "b0dad181-769b-4592-83fc-121c343ad339",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "02bf9bb2-40b5-4229-9d37-5aa91ca0f5c8"
        },
        "item": {
          "id": "111f07f8-3514-44fd-9d7d-1fceb490846e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5ce67bc2-e635-459f-b8b2-664150407801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5649aadd-3c06-442e-8c00-772c6fc67691",
        "cursor": {
          "ref": "cad71d61-a590-4af0-b321-9616ebe946dd",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "166cc999-9f8e-4ee3-812e-9513aadfea9a"
        },
        "item": {
          "id": "5649aadd-3c06-442e-8c00-772c6fc67691",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d274ceff-f292-4468-a25c-953eb492be5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8a9bdc-ba35-4eeb-88ed-4b5d12a0ed8e",
        "cursor": {
          "ref": "8f9b187d-12b6-42b2-8e05-b4ca2b3918a6",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "78e52f82-ccd4-485d-bc3a-580bb3e2de86"
        },
        "item": {
          "id": "4e8a9bdc-ba35-4eeb-88ed-4b5d12a0ed8e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3434f2e4-5012-43a1-b829-1e5e8714477d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8bbee1-ac76-4a09-9a82-4486afa53d82",
        "cursor": {
          "ref": "45456d1c-4d09-4988-a2d4-2bd7d4d5b54c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ac4e1fe1-d6a8-4848-8b30-cd923ff149ab"
        },
        "item": {
          "id": "fc8bbee1-ac76-4a09-9a82-4486afa53d82",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "73414bee-5889-4d7d-affc-193563d63e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb72b511-d3b0-4a04-b96a-d29503e02009",
        "cursor": {
          "ref": "305a8ff4-2984-4c7e-9744-eb0248f7a19f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "72035188-5e75-4885-90b9-28c81e020678"
        },
        "item": {
          "id": "eb72b511-d3b0-4a04-b96a-d29503e02009",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1ea4f39a-cf4c-4f1c-ad7e-7fc17b352e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f3a80f-9f2e-46c7-8b5e-1213bd629b20",
        "cursor": {
          "ref": "4c6a9a00-7ac3-47a8-9a96-e0092fad3f40",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c9d9d163-e1a8-4588-afb6-bc638c8f2238"
        },
        "item": {
          "id": "b4f3a80f-9f2e-46c7-8b5e-1213bd629b20",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7d088db3-b2a8-4b3f-b0bd-d8e10194fec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75aefae1-b15c-444e-bc5f-7a92a8e7c8b6",
        "cursor": {
          "ref": "b2a84a43-5312-41f6-a17d-a730f8dfdf23",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "de757239-4daf-4b46-9e85-2ce4ef44801e"
        },
        "item": {
          "id": "75aefae1-b15c-444e-bc5f-7a92a8e7c8b6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c3b2436b-8598-4027-a4cc-b54513e4da96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "131e8374-437d-4a3a-9d3c-ec5a7e84d056",
        "cursor": {
          "ref": "8879d1a6-e6db-4e1d-aa2f-f9a1b2ff0473",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "079ed10a-09c8-46d4-82f2-f2c63e891579"
        },
        "item": {
          "id": "131e8374-437d-4a3a-9d3c-ec5a7e84d056",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b9132032-390e-4c4d-a962-d04b6ff926a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c998412-5222-4055-9ecf-68b0bb50e5a8",
        "cursor": {
          "ref": "bc459f67-05cd-4851-99f6-2acc2c05cfa9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4385e76e-b3ff-40ca-bc97-50219f36c458"
        },
        "item": {
          "id": "6c998412-5222-4055-9ecf-68b0bb50e5a8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0ebc58e0-3a10-4eca-85e4-8e1be88295a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9d892b-12a8-4caa-8078-9af52ee76158",
        "cursor": {
          "ref": "c16ae405-ce58-4381-80da-891dad8b57df",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0bb74ff6-447a-4495-a2f3-5e049dcb363e"
        },
        "item": {
          "id": "9e9d892b-12a8-4caa-8078-9af52ee76158",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "df6a1249-33c5-482e-a291-c8d69e438b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81dd18a8-a2d4-494e-8003-cdb552b4fe8d",
        "cursor": {
          "ref": "f468be7c-316e-4b33-8c18-1a1a44aba255",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6c80db2b-6f02-4a97-a3e7-7213e7ebe47a"
        },
        "item": {
          "id": "81dd18a8-a2d4-494e-8003-cdb552b4fe8d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "06ad7d71-4b3f-4f6b-94df-e15e898a29ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63aa490e-f559-4936-9bf4-8f81d7bdb436",
        "cursor": {
          "ref": "c51478c1-b083-4975-bcfa-b7730f79f8f3",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f8c368d9-804f-48f5-b125-b4f92bcf68fb"
        },
        "item": {
          "id": "63aa490e-f559-4936-9bf4-8f81d7bdb436",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "81d06c57-64b0-44c8-8255-e0876b9a409c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f176d2-ed23-45ea-886f-e6f927724b20",
        "cursor": {
          "ref": "242200ba-87c5-409c-8a49-bedec7a0dbb9",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "22e566a5-01a3-41be-a050-065c7e5cd1ad"
        },
        "item": {
          "id": "44f176d2-ed23-45ea-886f-e6f927724b20",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1e504ffe-0e77-4bd0-9e99-76161734703f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8b0d34-887d-49d6-9252-2358972956b3",
        "cursor": {
          "ref": "66f32196-6678-4320-baa1-890aa693a920",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bbe2d7bc-efa5-4ea8-b281-e64deb1fa17a"
        },
        "item": {
          "id": "ae8b0d34-887d-49d6-9252-2358972956b3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "250abb2a-a854-4367-bc38-7c8169da7346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd31232-7c93-49e7-a22f-44156862ed25",
        "cursor": {
          "ref": "106e2c91-cdb4-472b-93c2-9f1d59f8ae27",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a54c76be-ba28-44bc-a6d2-25ad652ab3ed"
        },
        "item": {
          "id": "0dd31232-7c93-49e7-a22f-44156862ed25",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2d0d0630-49cd-48cb-a3cf-0cce38432e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e6dac5-0479-46e0-b62d-6ee1694bb12d",
        "cursor": {
          "ref": "03d49836-b572-4ed8-bd83-282524f07ce7",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "593cb1ea-5815-4750-8bb1-12fe6a24d6ad"
        },
        "item": {
          "id": "12e6dac5-0479-46e0-b62d-6ee1694bb12d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "35230a7c-a987-421a-96d8-a06d9427240b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea5fe23-d0ab-4396-be94-3dd7aeecf56b",
        "cursor": {
          "ref": "c90b250b-37fe-48e3-a2d7-d0b8230d1667",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a5ad90a7-e311-46c4-a78f-28aeccfcf0fe"
        },
        "item": {
          "id": "aea5fe23-d0ab-4396-be94-3dd7aeecf56b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "088de092-23c0-4bbd-a474-cf9b9399462f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07ef5a5-8f90-4007-9d1c-1c28a5bdc12a",
        "cursor": {
          "ref": "6996781f-2fc0-45a1-8c00-60899fbb2647",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "777024c1-7387-4ced-963f-c509086f53ee"
        },
        "item": {
          "id": "e07ef5a5-8f90-4007-9d1c-1c28a5bdc12a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0e2bc7e6-8ac5-4b03-bf6e-79d4d0328c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8e52b5-9847-4386-9acd-d20946951ecc",
        "cursor": {
          "ref": "dc6494c0-07b6-44fa-9708-addc256d7b9b",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "05c27052-e8c6-46cd-9ab6-ce8bb390ae33"
        },
        "item": {
          "id": "1a8e52b5-9847-4386-9acd-d20946951ecc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8332ba0b-ac4a-477e-ad46-6054e27931c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c464b59e-1146-40d0-9cac-ae27e9cc2bde",
        "cursor": {
          "ref": "d19cba26-36c2-4f94-9d01-1735d2258178",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2aad5493-d3ba-43f2-affc-617ce2643fd4"
        },
        "item": {
          "id": "c464b59e-1146-40d0-9cac-ae27e9cc2bde",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5f3dcc97-d510-4a63-85e0-635280f5124c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff602b2a-77f6-4f7e-b71e-0219ab5c7583",
        "cursor": {
          "ref": "f608235c-bd37-4e2a-9fb8-2ff1178dfd9c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6bd01dfa-16ee-427b-9c90-217dfd824102"
        },
        "item": {
          "id": "ff602b2a-77f6-4f7e-b71e-0219ab5c7583",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "731ea2c7-9dbc-4bfe-9984-383673e2e736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a241ca-7fae-4485-9ba0-d2ac3221eb4b",
        "cursor": {
          "ref": "8b13e9b6-cc5c-4789-8270-cc4c3a573b6e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c0fef7e2-6137-4a5c-b475-72e436f772c4"
        },
        "item": {
          "id": "54a241ca-7fae-4485-9ba0-d2ac3221eb4b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5b508482-2832-4fa1-ac53-5773c2501897",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "989279ff-9aca-490a-a087-b98ed70d8ee8",
        "cursor": {
          "ref": "20326701-4ffb-45c4-ba38-5b62c3232a70",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ae383163-4258-4211-b2d8-b9c761079511"
        },
        "item": {
          "id": "989279ff-9aca-490a-a087-b98ed70d8ee8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "49aff5ba-ceec-4ed2-ae12-22fa53230a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1406f134-c915-43b2-b017-b27bfe3b987a",
        "cursor": {
          "ref": "43c99ac0-a4c3-46ce-8473-62d55942c6c2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9e0ac463-4df9-4a24-b236-53a8997e5f04"
        },
        "item": {
          "id": "1406f134-c915-43b2-b017-b27bfe3b987a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e2ef2966-0ace-411a-be9f-f813a93b715d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc7d7f1-a21c-41b7-8933-4d4bed96a52b",
        "cursor": {
          "ref": "cec0891c-c603-4796-84e5-dd196740db3b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6d3f324d-8a09-4aaf-b914-938389962692"
        },
        "item": {
          "id": "7cc7d7f1-a21c-41b7-8933-4d4bed96a52b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "762bfaf8-e1eb-430d-b12f-0e9e25fa8c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d944999-6a0c-44db-987b-9040babe1e7f",
        "cursor": {
          "ref": "412d95e5-818a-4d7f-8de0-67ffee8e7e39",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a295c6ac-d889-47a6-96d3-00350710b3ee"
        },
        "item": {
          "id": "3d944999-6a0c-44db-987b-9040babe1e7f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ded232a1-7f56-4085-935c-76c13816ca49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f40dd6d-f38a-452c-b510-ff0d9718cb3b",
        "cursor": {
          "ref": "bfd7c74a-d391-4d13-bcb3-56daf85a0a63",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fea5fa68-0da7-4dcf-bdab-1a088f709b2e"
        },
        "item": {
          "id": "4f40dd6d-f38a-452c-b510-ff0d9718cb3b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8d80de2d-bf5e-4c1c-af9b-89a3e4499971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf12d70-9b13-4d46-a548-c74d7eae072e",
        "cursor": {
          "ref": "d5426291-3d8a-4e97-a25d-6b1709f9c9e5",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a372f52f-9635-4e57-a352-9e03b9bdf55d"
        },
        "item": {
          "id": "5cf12d70-9b13-4d46-a548-c74d7eae072e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0bbe5212-e186-4bc9-b402-2d826c313874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113f54c6-7531-4098-ac42-2c58bf5e0d77",
        "cursor": {
          "ref": "71ce3a47-0d28-4c6a-b579-0b79206de941",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2398f730-6dd2-493a-9f52-c26e31e2bf17"
        },
        "item": {
          "id": "113f54c6-7531-4098-ac42-2c58bf5e0d77",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f95bbbe4-aa17-4c82-ade3-f73d8c24cda8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf6281c-8ca8-436b-a562-b6d0c4091232",
        "cursor": {
          "ref": "748ead66-dcb2-4dba-9ef9-560fceaabdfb",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9dfd2de4-9057-4a7f-bb9a-9c43f3ca2288"
        },
        "item": {
          "id": "daf6281c-8ca8-436b-a562-b6d0c4091232",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7f329435-4560-4d7a-b466-787cad176bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16a8d60-ec8b-4dbc-9f54-ebb76610ee68",
        "cursor": {
          "ref": "0eab2d81-f279-4b9e-a0ce-0e4ac5eb0b31",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b4f49c4f-de13-40a6-8da7-3b2f58697e0b"
        },
        "item": {
          "id": "d16a8d60-ec8b-4dbc-9f54-ebb76610ee68",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dc217a50-50d4-4922-9e19-e286376920bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e8bc6f-3799-470f-924e-038c775ab7a1",
        "cursor": {
          "ref": "7c2bb83b-753e-4d7d-ab2f-29ce955de867",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b6c5c417-8b07-4d3e-a744-03e127b7aab8"
        },
        "item": {
          "id": "a5e8bc6f-3799-470f-924e-038c775ab7a1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bec02392-3997-4a29-ac43-2e248d00df29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542c4fa8-f897-4b08-8d33-d749c866f414",
        "cursor": {
          "ref": "102f180e-ec7d-423d-ba41-ca41138c6397",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "64e31378-e242-41d1-a7df-0add79bcab85"
        },
        "item": {
          "id": "542c4fa8-f897-4b08-8d33-d749c866f414",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5bd480b6-3fa6-4928-81fb-414dc1dccee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f74f2a-7971-46af-9f82-2698079a4149",
        "cursor": {
          "ref": "9df09afd-a555-4604-a4b6-d874267cbe8d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "61073fb7-21fa-459b-85e0-e99b728a78c9"
        },
        "item": {
          "id": "70f74f2a-7971-46af-9f82-2698079a4149",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "797e6442-4b06-4404-a8ec-8ec1997c16b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165368a3-52a8-4e88-a29e-9b96a6ea8fd8",
        "cursor": {
          "ref": "395231bd-a4ec-4da9-a43c-60a6224195c0",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1e44ecf1-0c2d-4cb3-8e25-c475c39a56e2"
        },
        "item": {
          "id": "165368a3-52a8-4e88-a29e-9b96a6ea8fd8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ba5ff2b6-e15c-4040-a29b-03c676b63b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccd94ff-bb37-4bfc-b975-1486ab140745",
        "cursor": {
          "ref": "462501d7-f0a6-4898-a884-32578c355a1f",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "daf2980c-c5c8-4f98-850a-10b81ad59572"
        },
        "item": {
          "id": "6ccd94ff-bb37-4bfc-b975-1486ab140745",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "90625caf-5d6a-4224-b48b-f8949f9e4c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416fdce4-916c-45d0-9b29-aecb0437e023",
        "cursor": {
          "ref": "694a30be-732e-4693-9321-cfe49b53d2b0",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "231656a0-a131-433b-a1f6-f0fb6756f499"
        },
        "item": {
          "id": "416fdce4-916c-45d0-9b29-aecb0437e023",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0996b108-6758-474f-a1c0-37d275f79b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d58376-b2e5-4d41-a999-66b4039163be",
        "cursor": {
          "ref": "65341498-edf0-4f26-b8e5-941ad0206fab",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "95a5ff1f-b851-413a-a538-4e75bcfccb3a"
        },
        "item": {
          "id": "c4d58376-b2e5-4d41-a999-66b4039163be",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5f62666c-7932-48b4-9008-aac02c35e77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf87fa2-d0f3-429d-a142-912b2e711978",
        "cursor": {
          "ref": "272bceff-450e-4fda-8028-2c6696d85845",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5b17dffb-df70-4ed3-ad4d-745c892feff0"
        },
        "item": {
          "id": "abf87fa2-d0f3-429d-a142-912b2e711978",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "09e680b4-3242-4287-8d0d-165f4bb3b720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82a202e-9661-4a61-813c-fc8bc9c4873a",
        "cursor": {
          "ref": "a5e51221-2941-42ac-a0f8-d50102915e85",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4974827d-817c-408e-941f-d75776194a16"
        },
        "item": {
          "id": "e82a202e-9661-4a61-813c-fc8bc9c4873a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2fa47803-27ab-4e17-bb5a-1f5220a3d6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397949ec-185e-4a6a-90d4-5ec32c851c2f",
        "cursor": {
          "ref": "2cb607cf-44b3-489e-872d-a9abf7c08582",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "707ef193-09a5-4a5f-bf64-cc2addd10a15"
        },
        "item": {
          "id": "397949ec-185e-4a6a-90d4-5ec32c851c2f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "309773dc-9b50-441c-92c5-294d6f432378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140ad144-1e20-416e-8f71-29c48a998076",
        "cursor": {
          "ref": "cf365c4d-42e4-4fc3-a0b1-7c862d789a20",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "98c808b7-3537-4b51-bcde-dfe6546b7cfd"
        },
        "item": {
          "id": "140ad144-1e20-416e-8f71-29c48a998076",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b9357c4c-f3fc-42f0-8040-580a80b7759d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9d6dbf-e4d2-4395-9529-c22034506010",
        "cursor": {
          "ref": "038019a5-1a86-49cb-b07b-c2668a99c862",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "32dcfb9a-f041-4e50-8d1c-45f4dd1236c5"
        },
        "item": {
          "id": "2b9d6dbf-e4d2-4395-9529-c22034506010",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0b3ae4b5-1bf5-4436-b104-52a141df3fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0e0df7-53ef-45c2-91a2-770584e32629",
        "cursor": {
          "ref": "e5c2bf65-8dd3-49a0-a906-cb515c1a52e0",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "80156270-8d81-40bc-8643-3cfa29e24985"
        },
        "item": {
          "id": "ea0e0df7-53ef-45c2-91a2-770584e32629",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "480f4f5d-6c2a-425b-b3b5-9043dc70f8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db352873-20a6-441d-9b7b-da8378980f5e",
        "cursor": {
          "ref": "b3a09a47-d2cf-47f1-ad53-2d80ff105a9b",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5c94f3a2-9091-4800-93b2-e668abb9f114"
        },
        "item": {
          "id": "db352873-20a6-441d-9b7b-da8378980f5e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2c6d6092-7e14-4cc5-9048-2da259f98b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27caaa8-65a0-4d18-91e3-b36aa6568145",
        "cursor": {
          "ref": "4d1fa918-657e-4981-a038-fa9a85f02c4f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3654c3be-2975-4a6b-88e1-0a3fe7a0b444"
        },
        "item": {
          "id": "f27caaa8-65a0-4d18-91e3-b36aa6568145",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "55dc934a-193e-49cf-a843-893588907677",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec91bfa4-812f-40e9-bc8d-fd6a5ef9a6e6",
        "cursor": {
          "ref": "7167f584-2866-4710-8757-064d521d3cfe",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a227181f-95a6-499a-ae9e-b22603fd4533"
        },
        "item": {
          "id": "ec91bfa4-812f-40e9-bc8d-fd6a5ef9a6e6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3443b445-0f6a-45cf-aef4-639381f5836e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779f44c8-1baf-4ae9-aeaa-5cee825f24b3",
        "cursor": {
          "ref": "3fef6225-974b-4a03-bee8-386c7e524b7f",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ab2f995e-4d6c-4e67-b5e8-9d0ba8b1e96e"
        },
        "item": {
          "id": "779f44c8-1baf-4ae9-aeaa-5cee825f24b3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "94e6c04e-a6c3-4c37-a9f7-4851bc616edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995ab384-56bd-4ae5-9b1b-aa84c5fd4ffd",
        "cursor": {
          "ref": "2095c371-6a6f-4f34-8b4b-eaedc6e566df",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "acf96dfb-4011-42c6-a6a1-e8ccbdc6dec3"
        },
        "item": {
          "id": "995ab384-56bd-4ae5-9b1b-aa84c5fd4ffd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bf42d012-6f45-44a7-a0f2-4114eecf4808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ccb362-7ad9-4902-9197-cf89371bccec",
        "cursor": {
          "ref": "a21ad8e0-a795-44c6-b61f-36b28f2c3be5",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "93a35195-5ff0-4580-ad48-d4e6d2777b85"
        },
        "item": {
          "id": "e4ccb362-7ad9-4902-9197-cf89371bccec",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "98eef7fa-e7f3-4980-ac65-a1a1dbdb93fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c93515-0eaf-444a-910c-73f77c9601fa",
        "cursor": {
          "ref": "58e296a5-2663-4825-b652-8f28600efdb6",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "faad1e59-9413-4358-a7c3-40735fa1c124"
        },
        "item": {
          "id": "c5c93515-0eaf-444a-910c-73f77c9601fa",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "576d0930-5bd0-4978-bbb1-f6670872188d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3fb265-6364-42f5-810f-80d2ef3507a1",
        "cursor": {
          "ref": "94ae443d-c655-415f-bd36-7e4e001ceb82",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "26f1bfe4-9796-4942-8a76-f953bc6bac55"
        },
        "item": {
          "id": "4e3fb265-6364-42f5-810f-80d2ef3507a1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4c4cfb0e-ca65-4e2a-987e-b63deb5633a7",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5c258f00-574c-48f7-9c53-5c1cc5c2b1d9",
        "cursor": {
          "ref": "50bd1fd4-2ddc-40a8-8415-a88ccf864a76",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dda160bf-3cce-4e2a-a145-6b63a7291627"
        },
        "item": {
          "id": "5c258f00-574c-48f7-9c53-5c1cc5c2b1d9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bb5475ea-92d6-487b-8004-66cb7801649b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c192269-4544-4a6b-b1d5-4d209d91bc00",
        "cursor": {
          "ref": "cc503973-2c30-4bf6-8734-50dcbc6ad612",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1c41fbe1-3067-43f5-b971-d7b5cf7ca980"
        },
        "item": {
          "id": "2c192269-4544-4a6b-b1d5-4d209d91bc00",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ae6fd27b-fba7-47d5-8ba1-8cfe2e4367cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d3eefa-e67c-4772-a768-6e1349f74d04",
        "cursor": {
          "ref": "496d3200-495c-455b-bfc2-66b309cb463f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "451d5e9b-07e4-43f9-823b-5b377124ae63"
        },
        "item": {
          "id": "23d3eefa-e67c-4772-a768-6e1349f74d04",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f835267e-d972-4a81-a546-5fdff6d27bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d22f8d8-a5dc-48df-bebd-8bed8ad77293",
        "cursor": {
          "ref": "3f7a785b-e46c-4258-973b-4e27d20c7e6f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "98cb52d4-5d85-4df6-ab43-5b80c532b2fb"
        },
        "item": {
          "id": "2d22f8d8-a5dc-48df-bebd-8bed8ad77293",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7b4fb9f0-3650-41da-8ad7-61bfe5cd53cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c59a72f-c1a3-4aef-b06b-77733ee12a99",
        "cursor": {
          "ref": "3c0ef9bb-57e0-4561-af77-9eef32e26f5e",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9397df59-9a5c-4be6-bd07-858d7c968d51"
        },
        "item": {
          "id": "6c59a72f-c1a3-4aef-b06b-77733ee12a99",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b2c9eced-e8b9-4a8c-a08e-8a6e39a90ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31f25e4-612a-4dfb-ab77-f6fdf2d3220b",
        "cursor": {
          "ref": "9e16de80-2b86-4ca5-8bd7-be942174a2aa",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ac83b6b5-b7e4-4e1f-a377-4a84c321c531"
        },
        "item": {
          "id": "b31f25e4-612a-4dfb-ab77-f6fdf2d3220b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "174a1adc-aa04-4852-b23d-b61889192398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b021cae-0807-4885-92ee-5e187693f14f",
        "cursor": {
          "ref": "d164660b-684c-45e3-8cc8-e4e993371dc7",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "98e79e35-22c7-43e3-8ffa-621f787370f8"
        },
        "item": {
          "id": "0b021cae-0807-4885-92ee-5e187693f14f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c0beff72-03f1-4996-9eb1-ad1637172021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41acc39a-49ec-4939-9a02-224741eaecdf",
        "cursor": {
          "ref": "8ebf2def-3ae9-4098-b12f-6d678876b192",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "831b9703-2088-4dd7-9274-b173d42d12be"
        },
        "item": {
          "id": "41acc39a-49ec-4939-9a02-224741eaecdf",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1b839512-102d-48bb-8456-91fa6b405cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d6bdf0-081d-47d7-9485-bceb8ee343e3",
        "cursor": {
          "ref": "25c68f3d-73b4-42d2-9b38-8db7df1ea09f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "de9c473b-ab6b-4124-826d-1a5916028100"
        },
        "item": {
          "id": "a4d6bdf0-081d-47d7-9485-bceb8ee343e3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ad2a52a5-360a-4aa6-b7cb-1c66204471b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4bbeac-0cb5-4738-b573-1fe073c9f8cc",
        "cursor": {
          "ref": "c7a60938-6e6d-46a2-bd9d-707177f29963",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "01ff443a-1d35-4314-b633-e270a005e007"
        },
        "item": {
          "id": "be4bbeac-0cb5-4738-b573-1fe073c9f8cc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "adcf7bba-20c2-44c2-b68e-0a8fd4ac3a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e55b859-3016-44c3-82d3-58f8099de15a",
        "cursor": {
          "ref": "abdba6c7-7e9d-412f-ad48-086f410de1b4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "62225f71-45fa-4e97-9eb1-02679fcee8c8"
        },
        "item": {
          "id": "5e55b859-3016-44c3-82d3-58f8099de15a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0d79c8ea-a224-43c3-b89c-59f180c8d4f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3c83e2-2dfb-4f6e-a557-889c4df43640",
        "cursor": {
          "ref": "e9ce6a4a-0431-429f-9dea-fb1fd6ad0337",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "270ed8b5-aa4c-4355-ba31-1703b93f0651"
        },
        "item": {
          "id": "2c3c83e2-2dfb-4f6e-a557-889c4df43640",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0187c0c9-b78d-4bbd-b76d-c4cbe3605701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b92610c-8d46-4546-9829-25121ff20599",
        "cursor": {
          "ref": "ec5531e7-1066-495d-b7f9-bebfa8c60d6a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ef233b2f-0273-4776-87c3-1c7e69baf75c"
        },
        "item": {
          "id": "5b92610c-8d46-4546-9829-25121ff20599",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7dcbf9fe-3e29-4654-a19c-f5f1b80b5017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0701938d-ec71-4617-a22f-b57ecc307e98",
        "cursor": {
          "ref": "418d7d46-d14f-46df-b147-b24a377e81cb",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "77e9f2fd-cd27-4228-93e6-26f002c7fbb6"
        },
        "item": {
          "id": "0701938d-ec71-4617-a22f-b57ecc307e98",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8e5f3726-d651-4457-9f90-66ff5fd2797a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff04440e-5501-460c-b1be-90fdd1380b53",
        "cursor": {
          "ref": "7777f4fd-7022-48d3-97c9-4f756ecf8025",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fd73c4a2-ad9d-4378-9d9e-41d4a5ccc615"
        },
        "item": {
          "id": "ff04440e-5501-460c-b1be-90fdd1380b53",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d2bdc47f-fc3e-4dcb-bcee-fadcccc6d629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60db9712-baef-448d-baa9-492f6d4287f6",
        "cursor": {
          "ref": "fa0d0e4b-fbd3-48bb-892c-a70ddd752699",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "15bf2cb3-de51-449e-b3b4-8e56d747699c"
        },
        "item": {
          "id": "60db9712-baef-448d-baa9-492f6d4287f6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d0fa2d82-ab9d-4130-b230-42c7963cc096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59925fb9-1013-4aaf-b89d-11de7cfdff5d",
        "cursor": {
          "ref": "e8fbe889-79ec-4bb8-bd0d-2167859a095b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b8b8af84-cd9c-4d70-8423-bad95ebe7d0c"
        },
        "item": {
          "id": "59925fb9-1013-4aaf-b89d-11de7cfdff5d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "081dd44c-2585-4144-93b6-0466ca4c2d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9aab532-36db-4ca0-b295-9307fd88808d",
        "cursor": {
          "ref": "ba14f418-64c7-4102-b044-9f38ac1eb017",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e126dcba-90d8-45ce-8690-ddc6ad0c3d19"
        },
        "item": {
          "id": "c9aab532-36db-4ca0-b295-9307fd88808d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "50d88c90-6a0f-4881-a11c-02bfbcd7becb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6101aba2-3a77-4247-a732-3ee1527fd8dd",
        "cursor": {
          "ref": "2685be5a-4c15-4dfe-8b16-7a8c92c87c38",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9597eaae-cdeb-4187-8c47-0bd802969097"
        },
        "item": {
          "id": "6101aba2-3a77-4247-a732-3ee1527fd8dd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "85071dd1-510c-4fe1-b8ab-3b733a90189f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd57420-1509-458e-8b6b-b7143b685d21",
        "cursor": {
          "ref": "e093d849-752b-4ea7-88db-4cf6624049ac",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fb7c6662-d630-49a5-817e-f248fede07c8"
        },
        "item": {
          "id": "1dd57420-1509-458e-8b6b-b7143b685d21",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0e19264a-30f6-4c57-aa2c-2c19599cd8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1993c848-6065-4bf8-b0b8-ffbb9ff4409e",
        "cursor": {
          "ref": "3a6c9bdb-081c-41fa-8f78-9ee975e9b03d",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bd678556-77d5-4a70-b730-d2a21e984853"
        },
        "item": {
          "id": "1993c848-6065-4bf8-b0b8-ffbb9ff4409e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1d06dbbf-9684-4156-9559-cc28d82d3fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17756e36-bd37-46e2-9b0e-aa56aa0949c5",
        "cursor": {
          "ref": "e802ec08-a9b3-4a86-a50a-817f7660e452",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "20c10057-db6e-489d-aa02-1d9fdd2b4e05"
        },
        "item": {
          "id": "17756e36-bd37-46e2-9b0e-aa56aa0949c5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ea465835-ed56-4eac-a8c3-7b7711c288fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7dbaf4-dde5-416f-bbdd-9dc6a6c7d466",
        "cursor": {
          "ref": "444376a7-1cfb-4c20-8d80-5978e72d924b",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "71eee98c-a644-4058-ba00-13b9ea2a7eac"
        },
        "item": {
          "id": "2d7dbaf4-dde5-416f-bbdd-9dc6a6c7d466",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1ba02707-14a9-4a9e-bbda-62d45da54219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13dfdb57-67ba-48ad-b8c1-600b041abb9e",
        "cursor": {
          "ref": "1f9b4307-b2a1-4152-ba28-963238f92aae",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1b6ded39-0cca-4c9d-812a-7f477cf56283"
        },
        "item": {
          "id": "13dfdb57-67ba-48ad-b8c1-600b041abb9e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b941b258-2c33-4096-b964-6e39ef1f9512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f696953-94d7-4a03-9250-44bbeaa8cc65",
        "cursor": {
          "ref": "97cf859d-9c5e-424d-b336-919eb42269db",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f15f60f2-200d-436b-b63f-8d0c8354f935"
        },
        "item": {
          "id": "5f696953-94d7-4a03-9250-44bbeaa8cc65",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "eda8e6c4-f7de-4f92-865e-f403cea9a8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee13119-a9d3-469b-8299-b3f57a9710e6",
        "cursor": {
          "ref": "393be269-a96b-41c6-a9cf-b54ba57afaef",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b6387d59-4f93-4909-9665-01ffcaf9d2f1"
        },
        "item": {
          "id": "3ee13119-a9d3-469b-8299-b3f57a9710e6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0bbe363f-5f6c-43ee-a295-28977a829997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece3a405-ccd4-4567-9ad8-f5628a3e6b8b",
        "cursor": {
          "ref": "2299c125-3324-4356-9b80-0eba80176d9e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f68c4828-f6f3-4364-af42-af0c637272a7"
        },
        "item": {
          "id": "ece3a405-ccd4-4567-9ad8-f5628a3e6b8b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "22bb97b2-e6bf-4d7b-8703-c56e676f78de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ca5d75-cc7f-4ec9-8113-257d8d38304b",
        "cursor": {
          "ref": "803ce87c-4acb-46f4-a76c-1bde8d089e8c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "18aabf21-3939-48e3-9e3d-4e15683a8bd6"
        },
        "item": {
          "id": "02ca5d75-cc7f-4ec9-8113-257d8d38304b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f52bb9e4-cba3-48d5-a458-3d0c4aeb3abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94580784-4283-4f76-a4e8-28db7b43afd4",
        "cursor": {
          "ref": "3b1474e5-9eb8-4ade-a7e1-d26d504ecdd1",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "825b826c-df41-4afc-b725-6736352620d2"
        },
        "item": {
          "id": "94580784-4283-4f76-a4e8-28db7b43afd4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0b476432-b462-4420-8551-0e6fd4188f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c305977-43ed-4ebf-ae83-4cf5286551b8",
        "cursor": {
          "ref": "a75a9f49-f087-421f-8b18-83b30333f225",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "18760da9-f8f9-4691-905d-216272b56699"
        },
        "item": {
          "id": "9c305977-43ed-4ebf-ae83-4cf5286551b8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "16eb24b8-b573-4e90-a37c-aac4d2ce4757",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f26eb729-a003-49f4-81c4-2547d4ca65d2",
        "cursor": {
          "ref": "66b295cf-a2c5-456b-9fba-288a4934cf42",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "68150ddf-3ea2-462b-8eb9-3388811a5099"
        },
        "item": {
          "id": "f26eb729-a003-49f4-81c4-2547d4ca65d2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "35b3e5d4-c4d6-43a7-900e-018cd9397677",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6facc92b-4a6f-4866-915b-01b2f1bc939a",
        "cursor": {
          "ref": "8bc91252-2839-40c3-8e23-1da9efb482c1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "539ac7f0-e9a0-40d0-9fe3-426d344584b3"
        },
        "item": {
          "id": "6facc92b-4a6f-4866-915b-01b2f1bc939a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a55bcb22-b09d-459b-b6c4-911ba6bb3b62",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "de9df85f-c8c6-41c0-95ef-f0883a80f25c",
        "cursor": {
          "ref": "8e5cebc2-def9-4d32-bef7-0bd495400b9f",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ba853489-e454-4f86-85e0-15c3373aecd7"
        },
        "item": {
          "id": "de9df85f-c8c6-41c0-95ef-f0883a80f25c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ebcc17e1-cf25-4071-85b5-d7f0d05c53d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca6dfa7-a249-49eb-8554-7fb1f4097925",
        "cursor": {
          "ref": "7b33e359-79bd-447c-8434-99213f88081b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "16e07cf8-fda5-44e6-a466-433fd72dfb4a"
        },
        "item": {
          "id": "3ca6dfa7-a249-49eb-8554-7fb1f4097925",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4b742f52-1c00-473b-bf13-7c88533c4d35",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4f114194-2900-4b1a-97da-4cb97d32e83e",
        "cursor": {
          "ref": "bd77c62b-541d-4aa3-9471-12a5bc4af9e7",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c62ab38b-2ed6-4e8a-9a4d-272a16d210f3"
        },
        "item": {
          "id": "4f114194-2900-4b1a-97da-4cb97d32e83e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "af7a7b52-0c42-4db8-a89f-c55b5b009d08",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "027b0f03-49be-4c46-b281-cc6f48ff2605",
        "cursor": {
          "ref": "411e0544-ec6d-4f7b-823b-319c181ecf99",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b91d8954-a4ee-4d79-b64c-e7f9f7606020"
        },
        "item": {
          "id": "027b0f03-49be-4c46-b281-cc6f48ff2605",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4730b120-eede-4aeb-bf67-94b619c1e70f",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1e4c59fa-a454-49c1-9b2e-722631279f32",
        "cursor": {
          "ref": "75154fc2-29ad-42b6-be5e-c5e8efbc5190",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3dd67e0d-87f9-4fb9-ba91-39d63ca05890"
        },
        "item": {
          "id": "1e4c59fa-a454-49c1-9b2e-722631279f32",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fc2178a3-c0d1-47c0-bbe4-132e12624854",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ad1dff24-869b-4087-9bc1-a92ae7d7ad9a",
        "cursor": {
          "ref": "fd4bfee4-1ad0-454f-accd-a57d216d93c7",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "82c68679-8455-4c0e-9cf8-84ea22e6a8ed"
        },
        "item": {
          "id": "ad1dff24-869b-4087-9bc1-a92ae7d7ad9a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8fcf7d93-9627-4460-b1ae-a09ccd805cb9",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "90e9711c-6a5c-4adc-b1df-7f052549c852",
        "cursor": {
          "ref": "97f54562-643e-4741-b2e4-66aad16c6f6c",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "457599d3-c886-4b98-bc23-97506bc4a4b2"
        },
        "item": {
          "id": "90e9711c-6a5c-4adc-b1df-7f052549c852",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b575404e-875c-4920-99cf-a6e690229303",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3650e87f-28a2-408e-827d-90a1d26d48a8",
        "cursor": {
          "ref": "36603e2b-f659-46ca-865e-312c3f323bec",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b733c17f-0bd7-4a4b-8b83-3dc3bd33d954"
        },
        "item": {
          "id": "3650e87f-28a2-408e-827d-90a1d26d48a8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "27a7db9d-290a-4900-a795-524e4daf66a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad121ad5-1a0b-472d-ae41-8f6982a18539",
        "cursor": {
          "ref": "4326b042-50a6-40eb-ba1b-9a2d6cd6d844",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "85b38134-dc64-43c3-ba7d-d396dcfea381"
        },
        "item": {
          "id": "ad121ad5-1a0b-472d-ae41-8f6982a18539",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fc67979f-3332-4a80-afe7-6e623039a3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f10e259-c61b-4d76-84f4-cde583e984e6",
        "cursor": {
          "ref": "03abdcad-21bd-44ce-afe3-82ab30d3e4f8",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "01c82dfc-adb8-4545-b18a-62fc54ed1c48"
        },
        "item": {
          "id": "4f10e259-c61b-4d76-84f4-cde583e984e6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "811d04b2-9e93-47e4-9a23-727d09117d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c291f4-1706-403a-9e84-bfc7df349a47",
        "cursor": {
          "ref": "af8fde16-9d67-4c76-ab08-b4bba038e74a",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cac4627b-da69-4458-a87e-0053a4f10b5b"
        },
        "item": {
          "id": "a2c291f4-1706-403a-9e84-bfc7df349a47",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2b398641-21ed-4513-b040-185ecc447083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2697ac3f-7e74-437d-8a23-8b8879806ebd",
        "cursor": {
          "ref": "4374814e-91ae-4716-a647-71c1e0cbd947",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "33965162-a2b4-40f5-9f30-f8e795cf9cb2"
        },
        "item": {
          "id": "2697ac3f-7e74-437d-8a23-8b8879806ebd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "61a6b98b-f56e-4551-be16-870d8be8dea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d65ffc-73b6-401e-878a-0ccd60d926fa",
        "cursor": {
          "ref": "908ea44d-77a9-469e-85d5-2c1ba0de2b11",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "005ba68b-046a-4751-aef5-e350a2f6293e"
        },
        "item": {
          "id": "a6d65ffc-73b6-401e-878a-0ccd60d926fa",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "de5a0cec-98a9-4c55-8955-84873e83f05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e641a145-8be6-44ef-b00a-75d78add2478",
        "cursor": {
          "ref": "5dc8f810-d94d-41ae-9d58-9f1f2084c51e",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c71df8fc-0290-4b61-aefd-d484c70d70f2"
        },
        "item": {
          "id": "e641a145-8be6-44ef-b00a-75d78add2478",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fd72eb36-0071-4ef1-be5c-b214c252a87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7d4598-0594-4232-9dc5-739090257935",
        "cursor": {
          "ref": "fd6054e4-6b5f-48e9-abf3-078901cf7229",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7d6f85ca-9cde-414f-8a9b-b1da0cfac44e"
        },
        "item": {
          "id": "5e7d4598-0594-4232-9dc5-739090257935",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "73d3f5f5-45a7-4e5c-aa65-af3bab826331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b53172-8c8f-4940-94e8-ca58cfdcb4e9",
        "cursor": {
          "ref": "2a882b59-cc73-40d2-82ee-deb0ea3f853c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "63b3630d-4069-4c0c-b3ad-c5cbc48832ae"
        },
        "item": {
          "id": "36b53172-8c8f-4940-94e8-ca58cfdcb4e9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5473307a-7a8b-43c4-976d-264fd89fcfc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fcc8430-5f4a-4198-a539-40041696ad0d",
        "cursor": {
          "ref": "e52b09a6-7d9e-4d06-a0eb-4bae7db14f81",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "86fc4a1b-cbe8-49bb-94f6-fdd70e5e94d3"
        },
        "item": {
          "id": "7fcc8430-5f4a-4198-a539-40041696ad0d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d361f410-616a-4e1c-b8f0-da7ac9433482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043b31d7-4ff0-48d3-9148-2b0486fa2122",
        "cursor": {
          "ref": "dd44a817-e045-46a7-ac87-dda603a6caa6",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ff063283-a16c-41a1-8b48-b5bed643675b"
        },
        "item": {
          "id": "043b31d7-4ff0-48d3-9148-2b0486fa2122",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7edc81c8-f501-4edb-9b21-cf62676010a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5198b6-b7ab-471d-901d-e89bcb22c55d",
        "cursor": {
          "ref": "571fc2ab-436a-440f-b1a1-44996ea0d770",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5b3fa478-7bc9-4aeb-a146-81b484df3838"
        },
        "item": {
          "id": "9c5198b6-b7ab-471d-901d-e89bcb22c55d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "81033a2a-6206-4abf-b938-04206b2ec7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f2ceb9-90dc-4304-b8f3-ae45bed30472",
        "cursor": {
          "ref": "e4cef9d6-0758-4a16-82db-388ebdd88caa",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a02aef92-6b01-471b-8d01-8dac35ae6d86"
        },
        "item": {
          "id": "c0f2ceb9-90dc-4304-b8f3-ae45bed30472",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6ce6e211-d308-4171-baaf-de7d88f674eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae6f111-acf0-4cae-a933-b4d912bc8400",
        "cursor": {
          "ref": "b4fa3edd-e6ac-4584-a189-4d6df2e3152f",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9ca5e1af-28c8-4725-a7bc-d7cf16d599da"
        },
        "item": {
          "id": "0ae6f111-acf0-4cae-a933-b4d912bc8400",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4fd3a838-1b3c-445e-857c-4a4b2cc9ea1c",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a7f65e16-4277-4612-b56e-676a923991a9",
        "cursor": {
          "ref": "399be049-5f42-469b-813a-3801fb686727",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8089b8c9-132c-4277-ad3b-e27f065f4dff"
        },
        "item": {
          "id": "a7f65e16-4277-4612-b56e-676a923991a9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c43c4f59-a18f-4747-a57f-c2dba877baf3",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "5db02111-59e4-4095-8bf4-8949d22c2830",
        "cursor": {
          "ref": "5c7be366-ddec-4923-8d07-411114748f52",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4abb6b56-0989-4f6e-a61c-6e10bf1ac978"
        },
        "item": {
          "id": "5db02111-59e4-4095-8bf4-8949d22c2830",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7d90c6a4-0844-47bd-8d9e-68a8fef55514",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c03048fc-2532-4e65-8553-c983767c18e5",
        "cursor": {
          "ref": "a57e325f-fba4-49c3-b2d4-56fb097aebfe",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8afc0003-6892-4286-bc08-6d1883320961"
        },
        "item": {
          "id": "c03048fc-2532-4e65-8553-c983767c18e5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bdf32456-0fac-4077-a0b9-96250e2793d0",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a5ea07fd-654d-4864-93b2-f73f1408057e",
        "cursor": {
          "ref": "ff40aee7-2c70-4ee3-a0bd-5bab1aa3ad2c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "723b6ac6-801c-41aa-9a67-c92df060cad7"
        },
        "item": {
          "id": "a5ea07fd-654d-4864-93b2-f73f1408057e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8126a0b7-f5ad-48aa-a094-39358233a5bc",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "38fe1e03-0368-4584-b9f9-9329e8e07b49",
        "cursor": {
          "ref": "abd329b2-4d28-4a78-933c-6cb4d00ff37e",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4bb5bd05-5882-4ecd-b6f6-a61ac2ab4dc2"
        },
        "item": {
          "id": "38fe1e03-0368-4584-b9f9-9329e8e07b49",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bef156a6-bfbb-42d2-bade-00f9e3dfbd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b987516-be83-4d6b-92dc-9b39d9cb103f",
        "cursor": {
          "ref": "5e36bfa2-a90a-442c-9236-f1434cb6696b",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0f6c27be-7b81-4658-8823-2db9ce04a672"
        },
        "item": {
          "id": "8b987516-be83-4d6b-92dc-9b39d9cb103f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1b6f2c25-3fa8-4aff-9687-b5f05de09e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e02e2d-fa34-4a0b-82b1-c334fc6768e5",
        "cursor": {
          "ref": "59357711-18ef-4405-ae78-82144a893d18",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a0541647-fa3f-4621-b2cd-56432b20c07e"
        },
        "item": {
          "id": "f7e02e2d-fa34-4a0b-82b1-c334fc6768e5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "64a4eb3d-9580-4c8d-bcb0-fa334235dfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953305ea-1f02-41c8-998f-fdd75c2459e8",
        "cursor": {
          "ref": "202cf183-3d51-432b-896e-22bf69633088",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c5c45708-14ec-42cd-a072-ebde34a353c3"
        },
        "item": {
          "id": "953305ea-1f02-41c8-998f-fdd75c2459e8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "22e5cd51-c457-4ce5-9a65-4b8097ff76bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa357c2-783a-426e-9a00-eab9ff7c49e1",
        "cursor": {
          "ref": "d1ff9a3a-339e-426e-9ad8-efd6f542e626",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9129386a-c026-47a2-b00c-ba603ac4a23d"
        },
        "item": {
          "id": "aaa357c2-783a-426e-9a00-eab9ff7c49e1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c9befcf0-a042-4898-84b9-a5320f507389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ab54a8-f537-4109-bbb3-42ae33750caf",
        "cursor": {
          "ref": "339b17e3-a7fd-49c3-a383-9620bb233097",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5f87f3fe-3a50-409a-9a73-7a46e7bd985d"
        },
        "item": {
          "id": "07ab54a8-f537-4109-bbb3-42ae33750caf",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d9d0428c-5c7a-4f76-a13e-75e2f48e5856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2954cff9-f2ed-49b7-9177-296c20c9b010",
        "cursor": {
          "ref": "a21ee673-d1a4-425c-a203-948e5b6335f4",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "70475d51-eaa9-412c-8424-831c7aa2989d"
        },
        "item": {
          "id": "2954cff9-f2ed-49b7-9177-296c20c9b010",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8a423f13-96d1-455d-a959-82823c9611a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd55194-e7b9-4c47-b108-be1ec37851c2",
        "cursor": {
          "ref": "f0399d3d-87bb-42fb-90f1-6632e706617d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cc80b25a-5015-4df9-a740-08e38fd87ca8"
        },
        "item": {
          "id": "bcd55194-e7b9-4c47-b108-be1ec37851c2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "03058d0d-e24b-48c5-8351-a1b1789fb1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d149f1d-28b1-4eee-b8fd-8328973b1d81",
        "cursor": {
          "ref": "ec006854-87f1-4dc7-a3ed-c20bd4fdf223",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "aea6a7f5-3fd8-4c31-accb-bae3ebc95fc8"
        },
        "item": {
          "id": "3d149f1d-28b1-4eee-b8fd-8328973b1d81",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ccabcf9d-5f3d-4a33-8d50-287e6602b44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38dec96f-78be-42a4-811f-d92b26777f0c",
        "cursor": {
          "ref": "406f3467-12c6-4a77-8ae4-3d8552d37303",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "396e9319-34f3-43ae-8352-23c1ebdd3d2f"
        },
        "item": {
          "id": "38dec96f-78be-42a4-811f-d92b26777f0c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d9170c3d-f028-4e62-9beb-dcc837d79e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697ae778-8d9d-42f5-90fb-7085c2393eae",
        "cursor": {
          "ref": "480605ed-0700-4a0e-a3a6-9c8b3810168a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "efb5fe8e-b821-451f-8d53-82552578063d"
        },
        "item": {
          "id": "697ae778-8d9d-42f5-90fb-7085c2393eae",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5b8bbe87-567c-4046-8849-bbca95537c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e60590-edf4-4774-827d-9bd21b801b2f",
        "cursor": {
          "ref": "6ab9b95e-5e33-47a5-b160-3cfea1a729e8",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7f85cb80-e818-4ff1-963c-76288ef82e88"
        },
        "item": {
          "id": "02e60590-edf4-4774-827d-9bd21b801b2f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "583c4a9c-5cae-4f06-8ba8-4f54139597f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b59680a-d385-415a-9494-ecf97c48416b",
        "cursor": {
          "ref": "c0873ab3-ac50-4e59-9032-3239b2fdabb2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "f1c1d8f8-0fab-482a-962d-2e8041900d03"
        },
        "item": {
          "id": "8b59680a-d385-415a-9494-ecf97c48416b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7a036da9-fac2-448f-acac-076e5e49368d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f8b0c3-6127-46bd-b488-f3017f436346",
        "cursor": {
          "ref": "997905f0-37c5-40bf-8de9-b1d3bed692d9",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "43f07441-9ecd-4f8b-8f7d-e28143503fb1"
        },
        "item": {
          "id": "67f8b0c3-6127-46bd-b488-f3017f436346",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "37ddd7ff-fbc5-47db-a5a3-b1747b237029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a418bc0d-36fe-4d1f-9f8c-7a30179af7c4",
        "cursor": {
          "ref": "c16b3972-45e3-4f34-9ebf-34331303372f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c3c30909-6b7f-4a95-896f-6e9d2f681ee3"
        },
        "item": {
          "id": "a418bc0d-36fe-4d1f-9f8c-7a30179af7c4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a3050b62-dfbc-4d1f-b25f-b0225f976ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0a6a97-05fa-4fe0-8ed7-5400a41c9e07",
        "cursor": {
          "ref": "7e85a98a-6989-48d6-a63e-700a977f9985",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "bc9c52b9-e67c-4a9c-95af-d5e717d3ad25"
        },
        "item": {
          "id": "be0a6a97-05fa-4fe0-8ed7-5400a41c9e07",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "af41907c-ecda-489d-9647-d41e3c49c646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185d65ce-4b6e-4053-956b-5113b2b23d6a",
        "cursor": {
          "ref": "ca820ccd-631d-425e-84ca-9b1b5df669ed",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e312e6d9-2e80-4ba9-bd25-2827a5cbd444"
        },
        "item": {
          "id": "185d65ce-4b6e-4053-956b-5113b2b23d6a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "79962b19-548d-41bf-adbc-d7c2c26fbf2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3f2365-4d61-4b3b-8d77-063daf43422b",
        "cursor": {
          "ref": "d0aeb3d9-16c3-4b92-adc3-cb0eac9180bf",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "571db943-2991-4cf5-9ead-6919b9cc0402"
        },
        "item": {
          "id": "2e3f2365-4d61-4b3b-8d77-063daf43422b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "652fb35e-23ec-4c72-8f51-637af626b377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1419ee39-5664-4068-88cc-e334ce7cacd6",
        "cursor": {
          "ref": "029441f8-3a0c-4415-8971-6ffc5c3d725f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "daa8af81-bdbd-419b-883a-f91b59c4932f"
        },
        "item": {
          "id": "1419ee39-5664-4068-88cc-e334ce7cacd6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b0fdd97e-9215-4946-8ee9-34e37f7babe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dcb08e-211d-4b4e-bdb9-cf8d8222a712",
        "cursor": {
          "ref": "f78b4dd3-91e8-46bc-b336-e0e7f29f3528",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8d1431f1-4fbe-4707-9488-617197657ce8"
        },
        "item": {
          "id": "31dcb08e-211d-4b4e-bdb9-cf8d8222a712",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a1ed8448-2244-44b2-9bac-a04b78353697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c192d2-87dc-444d-bf5a-6923397bfcfc",
        "cursor": {
          "ref": "701b3c4b-a883-4756-8c2e-e2f8be3dddad",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "27e0ab9b-9a91-43b8-9b5d-abdde6bfcdcf"
        },
        "item": {
          "id": "09c192d2-87dc-444d-bf5a-6923397bfcfc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "21ba8654-34ab-4b46-bf8e-519afd460746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c076b12-cef3-4470-af73-5a6652affd00",
        "cursor": {
          "ref": "407bc373-3fc4-4435-ae65-000ac1edc2f0",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9904842a-3916-4c41-87bb-09ec636300e3"
        },
        "item": {
          "id": "4c076b12-cef3-4470-af73-5a6652affd00",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "392e2829-4d10-4105-83cd-ca8989874856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697ca365-90e6-4a12-90ea-730c8b1d149c",
        "cursor": {
          "ref": "dbeb829a-24b0-42d6-8b40-64b42975d0f6",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "cc89f16c-4e2f-4f6d-896b-f926b8b4c02b"
        },
        "item": {
          "id": "697ca365-90e6-4a12-90ea-730c8b1d149c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5ee9bbdd-04f2-4e1e-a05f-ed60a71e908e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f078dc4a-97b3-4afb-9703-95497d53104f",
        "cursor": {
          "ref": "28099dd6-5a35-4c48-b111-c5d581c4a418",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b0bb3696-9b39-4733-ad75-101601706361"
        },
        "item": {
          "id": "f078dc4a-97b3-4afb-9703-95497d53104f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8f56d766-c6ef-4b4d-88d8-6336520a8aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88bca3e-d1a6-4c58-9404-0e90d1e17eb7",
        "cursor": {
          "ref": "6c8a073d-4435-4ebb-9bfe-9de761c3fa13",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "31c0b66c-178c-4ecc-95fd-131a50115d8d"
        },
        "item": {
          "id": "a88bca3e-d1a6-4c58-9404-0e90d1e17eb7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ef5389ee-18bb-414a-bc78-fc52bf9f6659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b444631e-fbf1-4cea-a710-760bb9653dff",
        "cursor": {
          "ref": "f2782841-84d4-4578-9371-6751350c2ed9",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "02688151-b098-4f1e-b714-540410f9ba9d"
        },
        "item": {
          "id": "b444631e-fbf1-4cea-a710-760bb9653dff",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2b9f0929-500d-47ae-80c1-ec605e482d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da13e6aa-2ec7-4887-89dd-d5e37cb720ae",
        "cursor": {
          "ref": "a7e7a9a6-4820-4dbf-996d-d1af225d5709",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6f039fa7-1dcb-4426-a25c-2b17e7f9c9bf"
        },
        "item": {
          "id": "da13e6aa-2ec7-4887-89dd-d5e37cb720ae",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3a825730-acde-4a91-a2cd-c23ab4a55fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a65f12-4fec-446c-9990-bb781cb693d5",
        "cursor": {
          "ref": "094d9674-5dbd-488e-9b1a-9d51fcb61e56",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "5edd6065-d1e9-4b76-8e2a-4ee74d847c27"
        },
        "item": {
          "id": "69a65f12-4fec-446c-9990-bb781cb693d5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a63c625c-226a-44bf-91f2-9da35f383c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824add05-e22b-44fa-8b51-9b79b42132df",
        "cursor": {
          "ref": "1e10549a-d8e6-4bc9-9169-516c3a1edc13",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "09098fbb-7703-4ca1-b3e5-6307b868138b"
        },
        "item": {
          "id": "824add05-e22b-44fa-8b51-9b79b42132df",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0fc80205-de1e-4290-9da7-05fa01ec098f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f3eb51-675c-4909-b7d1-1999f4751973",
        "cursor": {
          "ref": "42003a0d-02f3-488e-923c-6c9f3c9bbccb",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4646a85f-f0d4-4f99-b231-f7cf32992c69"
        },
        "item": {
          "id": "f8f3eb51-675c-4909-b7d1-1999f4751973",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "acf9059c-801b-43e3-83e3-f88197a2d95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a9fd12-4ed0-4cf4-8335-8131a636e23d",
        "cursor": {
          "ref": "e9f25bbc-a0ec-492b-8d67-902b79f5720d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "cf3ad664-e730-4cf5-85ca-ed6b45980113"
        },
        "item": {
          "id": "36a9fd12-4ed0-4cf4-8335-8131a636e23d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5edbb78b-5774-4106-bc24-b8928ad62842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75df99d-9772-4138-ac39-ea5b3557f728",
        "cursor": {
          "ref": "b0e2bdb7-d7bc-4ce9-8dbb-694359d28c55",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0bd6e12d-e432-4b5a-96dc-19c768a98b9c"
        },
        "item": {
          "id": "d75df99d-9772-4138-ac39-ea5b3557f728",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "95f82d27-268a-4d25-9cee-9b87e8169222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe0fb61-a36f-48d3-ab0d-c7c35846382a",
        "cursor": {
          "ref": "03b550a1-daaa-4d66-8348-a2caa987fccc",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "086e3ebf-37bb-430c-98af-62058fd4379c"
        },
        "item": {
          "id": "abe0fb61-a36f-48d3-ab0d-c7c35846382a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7ea276c9-9d8d-4a4e-880b-11032b64850f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2a2aa8-32b1-4fbc-9688-637623d3a59c",
        "cursor": {
          "ref": "e36c34b8-8c03-458e-b96c-ac8176dee430",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "dbe7e35c-285a-4f54-9da1-41a02f732a62"
        },
        "item": {
          "id": "5f2a2aa8-32b1-4fbc-9688-637623d3a59c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "de34ad15-532c-4df8-92be-25701b590c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df92c440-d534-42fd-ac26-0d8199290478",
        "cursor": {
          "ref": "d8f24769-67b8-4874-922a-e26a54d4b6c9",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "29fb633b-e9ff-444e-a0f7-419d658a7684"
        },
        "item": {
          "id": "df92c440-d534-42fd-ac26-0d8199290478",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "00711ee5-313d-4b91-89d4-f680368c92fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd7bb63-5e51-4e55-9143-51bf09a26922",
        "cursor": {
          "ref": "abd46d71-66d6-4e0a-a2d1-0e57723108fa",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "4a85ffcb-7fb5-43dc-92ec-01389a18be37"
        },
        "item": {
          "id": "ffd7bb63-5e51-4e55-9143-51bf09a26922",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c2349fa7-9774-45e3-b2ea-1b92f7f4ef85",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "6a5e567a-2c28-4944-8d9a-187eabb9ac0e",
        "cursor": {
          "ref": "737fa49e-5b61-411b-a34e-513673e1a5ff",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "75442275-ebfc-48f7-ad28-b6d96063acc3"
        },
        "item": {
          "id": "6a5e567a-2c28-4944-8d9a-187eabb9ac0e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "70b99644-5b5d-4bad-b35a-b0ee0d1e7104",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf1013d-273c-491b-b277-5793fcb1e639",
        "cursor": {
          "ref": "cc8b7faf-0e80-4dc7-a6f6-8e75cd77dc1d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9f53aaf3-c6de-4fd4-9409-f88ef91201d7"
        },
        "item": {
          "id": "fbf1013d-273c-491b-b277-5793fcb1e639",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "57953bab-315c-4b69-b52b-62b4d9750ea8",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cc68f9-2b1e-4bfe-b0bf-f7eeabdcbe62",
        "cursor": {
          "ref": "f3d36109-26b2-4f98-b68c-53ecab8c6227",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5c69c072-0699-4220-ae47-db033862160a"
        },
        "item": {
          "id": "88cc68f9-2b1e-4bfe-b0bf-f7eeabdcbe62",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0368a8b6-028e-4310-b3d2-b0dba6fe9cd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cc68f9-2b1e-4bfe-b0bf-f7eeabdcbe62",
        "cursor": {
          "ref": "f3d36109-26b2-4f98-b68c-53ecab8c6227",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5c69c072-0699-4220-ae47-db033862160a"
        },
        "item": {
          "id": "88cc68f9-2b1e-4bfe-b0bf-f7eeabdcbe62",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0368a8b6-028e-4310-b3d2-b0dba6fe9cd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba9aa56-4f9e-48ac-950e-14d80ef7729d",
        "cursor": {
          "ref": "c17c26e9-22e0-4437-9a27-18538586b4ad",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "4343d616-d13f-48f1-8e55-911a7d7c27a5"
        },
        "item": {
          "id": "aba9aa56-4f9e-48ac-950e-14d80ef7729d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "57b0836e-a28f-45f5-bb37-65e1aba51fd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7754ee-211f-4057-aafd-d870880bc0d2",
        "cursor": {
          "ref": "8a1304b3-8b54-4d0c-a836-3ca6fb7722d9",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "1e166c68-5549-44bc-bf3f-f541d643aaac"
        },
        "item": {
          "id": "ae7754ee-211f-4057-aafd-d870880bc0d2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "231e5f19-38d1-463c-8cf7-e00667dd75d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}