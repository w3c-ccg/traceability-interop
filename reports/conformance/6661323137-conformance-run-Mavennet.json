{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "102d76e6-090b-4cfc-94fd-2a39be4b6f58",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b4badcc6-2548-4fe9-80ac-eee1eafa7a3a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fba649f-bd33-4e97-8319-ec2e5b9d2b0f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ef3e27ad-6ae2-4c4a-8cfb-de26d94c579f"
                }
              }
            ]
          },
          {
            "id": "5521ec50-4b4f-4310-8039-15830646e6a9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bbff032e-2940-4b34-a88c-e0452a9c4f7c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f4cf05b9-2617-4348-bd6e-366a892c8042"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "39287190-db53-4f93-95ad-1a7c7073950c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "997200cf-0166-4d0e-bc7d-7e56c56e0947",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e425a8d2-8554-45b6-9487-c93403f2e8b1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f948fc23-3245-4c80-a4fd-949b41c641bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b69a180f-d1ae-459a-a4d5-4245e2c7f0ce"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89a48e6e-55d1-4bd6-bd97-525bbcc5af3a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44b0a97a-be6a-435c-9b9b-e8623ceb144b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33677cf7-f2f8-4ffb-955f-036c05817e8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "03e909f3-2691-4485-8615-b86a1b2bcdbc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "382d48cf-6475-4f50-898f-08d2ed76bcd0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7d453815-610c-42f9-83f3-7e099633fe08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dae62456-6a1a-4234-84fd-543479867e82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13f740da-7ed7-44bf-9c87-1a976da70c50"
            }
          }
        ]
      },
      {
        "id": "c8ebccdd-101b-4cb0-8c60-bcf92eab86ba",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2d14623f-4025-4cf9-b598-0e6ea8672d23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b7d155b-c3d3-439a-bb71-878a23636c46",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "daf9bc3f-56e7-42ff-ad09-04f6e5c98f4a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9a4c01-fb6a-4b0d-9646-1b65d186ed4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "487765ee-cf03-4070-be5e-95edd4099e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63036f26-cd37-4051-ae62-c2e4cfe1c5f5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166bf2ae-cd38-49ae-ac2b-480ae911f516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "849af27f-2dfb-4152-9835-9db1b3f63d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7660f629-4c01-4108-9475-aa42f3482209",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8dde050-7a8a-41fc-baea-171557a2916d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c895276-c15f-47f5-8cb0-8715a7af0e3f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98b32e63-5c85-4adc-96f2-6f798e27b5d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9bf0361a-d3ef-40bd-a73b-3d914c5f5ff2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3716e6c-0d1b-4bf6-933e-2d4ab41be313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "903fcf20-e136-4e23-8692-8e8c4195cd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e94719-3903-46c5-bc19-d1bd8e3a09b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a677b21c-acd9-4167-b415-2ed4196650b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "79c47e56-c35d-4b5a-9b5b-82008f9d0d50",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d4729b82-2ead-4eae-b011-6a6e651f9195",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "371c98f6-0517-4b2b-964e-3dd3c0e87804",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c275e2c5-c52a-43f9-80da-9f19a528ae97"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45b432ca-9f5b-4d21-b50c-534e3214716f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "098fe5b3-2f1c-4cb1-a2dd-4e917dc40dbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05305293-39cc-4f0e-a101-65482af685ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36eddb92-11cd-47a5-97c8-c26d24eda7f2"
            }
          }
        ]
      },
      {
        "id": "d03d2502-8153-4c54-bb52-108b66f60b20",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "53b83fb0-10cf-45cd-bedd-f93f35c5e6f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ccbe776-53d1-421a-8c0a-e3d9afb172d6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a0000e19-3671-428a-a0d0-2f225226ea9b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5d2b40-2256-4515-9609-fd5eeb03e19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d592e5e-d310-448f-9003-1d06c068f4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f0dd03-802a-454f-9dac-58c236d54b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1552e657-4061-4ec4-8325-18db2261d441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b604bae3-e591-4289-9b1f-cb5d8604eb89",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4219217-55da-49cc-b9db-b05c380495e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69643864-10ee-4d7b-b5b7-aca6a5013031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edb514e-6f0e-40d9-a393-4ad2543564c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2cb77e8-8237-4947-8984-5391dfe13266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8923894-ccf2-4e83-88c2-83ebd7fb8b14",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa9eece-c890-4bd9-b965-ab0e0de794c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a38514c-bcc7-4c3c-944e-4a44c04566ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2673b501-eb56-4e2e-b162-a46a02812ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f32ad240-9518-4e05-bea1-7d3c9d2f9310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6324ee2f-fa2a-49cb-aaf1-0c3c9225f161",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4bfc9e-e590-42b9-8974-a66fc6f36fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac59046-983d-479c-b64a-6319800a3354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2506f29c-be17-45db-9390-6ef5cf8a8321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3777f3d1-4a70-4bce-bf29-5c75bf8c86c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e17f4c4-6ec4-4e43-9309-2e17840487bc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb00c6b-3016-4ba5-aa28-de3333f19b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59acbe62-f62d-4b23-bad8-1324de6e927d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814a14c6-d4c5-473f-8a0f-cda58739cefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c35e4810-80aa-4669-a752-6e1a18cf3d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10110c6c-b778-467c-aa35-3f727b77423f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a598242a-5cee-420f-91d1-25a4154762e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84faa556-39b6-44e8-9af1-66fed0add3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b128a05c-14b1-423d-8f6d-0320d1c3f1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5a03531-3e5c-46ec-b0fb-51836b3f7998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5dbd75-cc02-443c-bc29-a6ddde372eab",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6314d410-7be5-46f3-8f62-465c9aa2a504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ba24f8-d7bd-4ad8-b35f-53a3f9b0c5d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2182b8f3-b79c-4757-917c-745568c2bfb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d79a25a-4b89-492b-bc06-d217a2489028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349234f1-7688-43ed-ae4d-20d2149fe7db",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c3baa1-e466-4a1e-a9f5-6531e8349a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb30b5b-feb6-435f-bb03-29405230c50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e85129-b150-4a95-bb08-2734f4dda540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7da3b762-26e8-4239-b3fc-ff37387604cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4bc1d92-0433-4539-87b3-d4a363c0392c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2bf18c-957b-45ac-abbd-416a25693e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21b53bf-ef81-4090-8a21-7238496c6d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98df6cbc-be41-4787-ab56-31bc2d16ebbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b904d6b-b1e4-4548-b9cf-791a36ad4e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9928c06b-f208-4e6f-8b77-30cc0e48e847",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627db773-d4c1-41b1-8e30-76f637f9516a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25509146-dd14-4a9a-806d-38ac59bc43e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c5f0ef-fa71-4d18-a9f9-2748eaa32f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "018422ff-6f47-4be4-8615-07544771162d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e13e30c-1ace-4ede-bfa4-e713ddba40fd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc64b9c4-0f86-4c84-a224-c939409a68d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c34cf4fb-5328-4ca8-b368-9558cc9cc5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e506617e-fa6e-43ad-a84a-db8407852a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b9f8dd5-a50d-4695-a4c7-a89b46d77b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b1621b-ee25-4bcd-9e84-6612a1b5563f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda42fac-5491-406b-a060-c5561a182c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b495e309-8c5b-43d4-b60d-9cf2f0a98b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecad309-d69a-4e19-b018-d81b14f19143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4673f626-8283-4dba-9e9b-47e399aa5876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58f9a11-be66-4068-bbc3-55238f5caff8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a90719-4974-4f43-b4e2-42f7be905425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68af1d3b-65ed-429b-acdf-632380b9e743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9967dfd-181b-439f-8795-f2f1b258dff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f93276c-2e73-47b3-b468-7df12e602dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e59ce9-4ac3-4bf5-a397-b8cf80d7d191",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061f1224-a2c7-4ca6-a7d4-9e9ee2219399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a850f491-a65b-4a00-8d0a-13e0c52f2a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95ade58-bf10-4cae-9d23-63fe9398199f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4e118c0-7a59-45ed-8f10-014d12d768d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0d8f9a-8b06-49ec-b2db-1d41ea3fb2c0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaf3b4e-5aa9-43af-a79e-8f0568f3c022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85141445-ef42-419c-b531-40bf51e7509a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ead4837-9f35-4da2-88f7-729f1f0ec471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5645880f-6b0c-482d-ba6c-c47e21b44f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474b2f97-70f2-496b-9c8a-3998d4058471",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce52f842-af98-4d8f-b185-1d0565258d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e976fd-f4e2-4352-8afc-4a321e196e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9c3a33-5e1e-42b3-b56d-cf48645e1817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e37cdf3d-1333-4c80-bc8c-fb6d43cc35d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2ee94c-589d-415d-85bf-d83d236250aa",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd20d736-22cb-474a-81a8-79c8f2153794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae5f015-e22f-4988-b24c-7ff41b7dd985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972f17d2-d420-42ad-95c8-1807eb2622f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc6b5a69-ef9d-405f-b5c9-5ee94ec28943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e6ec42-a348-454c-bb9b-8cc8e5f41019",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0b3031-4750-40eb-9ede-10816881bcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e992edf2-8846-4eed-8ebd-08d2beb3cee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d874cad-4522-4b4d-956e-e74dab63bc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "08ec5540-1471-40a7-ae00-64304651954e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd91be2-df50-480d-b95d-b66080312753",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bf978b-8480-4d1b-9b4a-5fe5a4ad8370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb983857-5e28-438a-85cc-8a2abfb298eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb228dc8-b4bd-4eaf-8ae6-da99b35d07b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13479152-92d9-4343-ba6d-a2b70ea3b4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63df7178-5ffb-404c-9812-8b09afe057c1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c5502f-4d5e-4da3-9adb-ab374f05515c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1076b1e3-f623-4ef2-a43d-45936b55214c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d1ae7f-4957-4099-817c-70d6a4b8d1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afd4295b-98a5-4b18-97a9-086c17093d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521aa64a-a0a3-43a0-82e4-536af995be15",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432e6b2e-8799-492d-aff4-a96af7b80559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946a72dd-dfde-41bc-a9c6-a7732a5b39c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e570a9c-0ec1-4713-97dd-2e56e987602e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b08cfb3-3d1e-42a1-ae48-4374d985bc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1d73b1-ea9e-467b-a506-eb415d9f7b78",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469a0d6f-8d60-49c9-b593-6476503aa0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957527d5-1ef6-4a86-aef2-a674b620d49a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa5ee84-ffea-49e3-b720-4b3ea0dbebc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e76e83-0dac-462f-a283-b55f9ee63b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df582edd-d83c-4aa7-98d6-fc3387a183e5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39afb7de-ed03-4343-bdb2-d19af9203e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fff4a08-c5b8-4ca8-98d3-7f85e8ca44cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfed905-416b-4b46-b513-5c0e6688d28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a03b19e3-9258-4ff6-a17c-997538e7c0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640db186-b83c-4504-9f76-5586dc637aab",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3375fcc6-7745-446f-bec1-d2cf67c70cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c357a10-6f46-4145-901d-f300f78a2d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50574bfb-0817-4489-8de5-465ec09e4f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "73227145-3f24-4af6-8df2-15508ca449c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6180adb-1a41-424f-b31b-9a4754ded574",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff837862-f3fa-4b5d-8721-ad1625a57206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ccc1243-0034-44ca-a244-520899fe4995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef509540-c7ba-4071-be9d-9f4fac9fffac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "980aa4fb-5ecf-482b-bd21-8edfd8b9fe7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dae6da9-e555-4006-ac1c-3349425630e5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6135e874-3af4-43c0-a7ca-078188cb1584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d62a77-1e04-43cf-9849-6629645eb7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b7c4cd-1795-48a7-9abb-2e2c74ad57c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "560c0c04-907b-4abc-96eb-83c0cb7c849c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbb8f03-8db5-4f15-876e-210c9fa1cf0f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52a63a2-43d8-44fa-b680-d5fbac708c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71c35c8-0503-4218-9318-025615a34f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7289ff15-9327-4d99-b75c-137ec69cfba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26f1d54f-beb5-416a-87b5-0ce50299222c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb04fa64-9bed-4374-b48b-971d3dec90e4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40418c20-8e8e-41f2-920a-2a12b1619421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2912bdee-d406-4042-8044-bf84fe4d8d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f14a86f-c52c-4399-9fc9-46ee940cd79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5163afa9-949b-4bc8-83a0-4cb49c5ded17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb66cd06-6a0f-4f31-906c-83f3c89706a3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddc489c-c0db-4aa5-a8f0-3c02e287f791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07162a1b-1c69-4f37-9cab-f70359346f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e4b8fe-a263-4e17-ad9e-de77699b453d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ceee1fe-6380-49ee-9853-fbafcb04a2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cadc9b-933b-4f00-8fed-aa77209a8d11",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0381458-0d93-4941-96e4-64832e817b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a637ff-eca3-4f04-a03a-aaeaa38171e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1283b5be-e6ba-4c89-aa5c-7a7101654b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c6a6aed-fbd1-49ea-b252-51ebb96a85b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4399206f-987c-4735-8e79-b359ada6c1ff",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79f9974-a7b0-4ca8-87f8-eba4f0a20518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed954658-7c99-4ea7-b34a-d993c39e8156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143c39b7-29a7-4249-9615-b4897ef81d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7da984e7-0640-4bd8-bf5d-914c3f877029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5febbfae-3ddb-42ab-acda-7b5030a73086",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d970ef7e-0bf8-4973-836a-82065782036d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b1f5c8-b8da-481b-8bb8-e80689a9cded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7626c01-2324-4de6-b765-8e45689ba535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5654bae5-6184-487b-b4cd-fc32f8ac6b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a8f69a-bd11-4baa-aedc-a1773e7d4f30",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c9bc8a-8a46-4828-a873-d29feabb07f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08046d9-a81a-461c-8e54-bf385585bc35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e022f1-0b2f-4d81-a9df-5e1ddae8995a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abba3987-3c1c-40e6-ae82-48f5a7eff372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14e1ccd-b8d9-4db6-92f7-90ed3abf7b81",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d235dff-e4e9-467c-8c3f-64c6ac2beebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138fd46d-792b-490c-90e9-470a1e609e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3872ce-b681-484d-96ea-89a06c4101ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e450eb2-e077-4c7c-94a0-eb0d70e27a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fc54b9-7e17-4533-a313-3c951a2951ca",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dea5e7-ccb4-4373-bc46-1118f7c80ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408801e4-e87b-470b-ac53-943017f072d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a67bc3-8222-4cc9-9063-eee0a5d9bcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b3587eee-310d-4179-90c2-5729a5ddd050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f440946d-3fbb-4e87-9572-672eea93b95c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cad6198-651a-4838-94b5-6f73dc9921bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dabc8a52-137d-49b3-a03d-db7f3e9728c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7297fd-86fb-421b-a8dc-fca0d8f929ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4613e65a-99ca-4be9-8830-b18d10848406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972f7bf3-c906-48a6-b969-44ff912109ae",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8836e845-841f-49f4-a248-186b4aedca3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8b9d6f-13a8-439a-9f62-2139319f0b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4f5aa1-fdfb-41d9-9de2-41e3872a2670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1c8202-e0bb-41b9-bbfc-0099da311c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e23499-92e0-4443-8ab8-845b8542a8d0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e556d0c-d09e-4fc3-85e4-98b177451ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6512f5cd-b82a-4a6c-9a76-287c47418d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f970f9e-66d4-43c2-802b-27dc21b8cf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "35a23744-66af-417b-adc2-180f096a1721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c1926c-bfb2-4c33-bbb4-fb9cbf2c56fa",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd646d9e-b082-4b75-b33d-469ce09bc460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1e7d7f-82c2-41dc-a15e-d14b25832ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7541c9-0560-4392-a943-10e9f9bbba42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5fb8e2-d945-4043-b12f-5b84bd68fd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d508c0-57d7-46e2-8d39-61262166546a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96827db-edba-4faf-9c4b-658a08831b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02623950-1464-47f5-b0b6-f48728d27f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a0d924-ab78-4c48-9538-1c2e1695f772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "982a62d7-b158-4357-a309-0432520bdbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282bd8c4-4276-4f55-a59e-973bf1a71068",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581b8f2e-c802-4ced-88c8-252b2e5fd169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e58dc3-9d63-498c-b43f-fc110421fe41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51130a69-37e2-44f3-ab5d-0438830525e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b780f733-cd46-42b8-98cc-64fd5dc2497a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70289397-0198-4156-b9ca-460c9785b5b1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec6a1b4-f5e6-4b3e-805d-18fa076ebe66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739bbd01-6a3e-4bef-866b-59440c6763ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b4fe56-9169-4d56-9cf9-f14db407673c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1b978ac2-b6be-4b16-b09b-fa2d69e74590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e45d324-46ef-40ae-86bb-337783d981cf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b11d479-59a6-46af-85df-b8205caef557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce427f04-6239-44f7-8728-db0796786f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349f7b21-8061-41b3-be17-8acbf8a31145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2855ff21-eb07-4e01-a8b8-caedd3133415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9400eb67-3b3b-417d-bb17-3b02ead67c47",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea62060-b850-42e9-bd3e-9fe7effdc7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecfa1ab-1b89-43fb-ab7b-8db2c91ebb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f059256-2d5a-4e63-a490-3c07f0a9d1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "39ce4940-0b79-4228-b730-a391f9202336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d756411f-ec34-4e7b-8646-0d76126c2e6a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ca719e-68c8-406b-a551-d6fa8f03f491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c8b879-154a-434a-882c-7c9326e503ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8a2adb-8b18-4db4-9b71-a20b48754e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b33ff5-b5d6-441b-bb87-5d692ccb3dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414f56fb-de0c-4604-92df-da8c7de76f79",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a948431f-8296-47a2-a7c5-399213b83a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1923db5c-a80c-46ac-a9a6-557882afb28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d29da10-96fc-48cb-a2bf-cbb57ec9e630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "100bbfa4-2cba-4f7b-b5af-0cf61b21eedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9347626b-59d1-4480-94b8-bd7f4f153f58",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a41c02e-d2a4-4570-869c-d2928c7ca0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105e0960-6602-489e-ac44-e3504201d20b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689ac754-b19e-464f-b911-75a7a1e95298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3660f1-3ab5-45ff-bd05-327446992b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9b286b-eda0-476b-a25f-62c0c4ea1cee",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c70710-e868-454f-969f-18ebfadd4760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ef428f-732b-4096-835e-bc8fed5f9af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4c3f0f-45e6-4d25-9202-fae3155ff792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8155593-3224-4165-8e5b-6a8813449336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad7602f-4470-430d-81ed-f7375d643ade",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1990bf12-cde4-4b19-845a-53384e2eaecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89b1cce-2af5-4587-953f-12a202a5d049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07335f25-4663-4a4c-b164-ba181e51c305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5a14b9-2151-4390-b4ee-3f209b1eac07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d911cfa4-8f08-4a2e-8eec-1d2eb51583b5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c82887e-b8b0-438b-bb01-d33d12b895bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6574f5bd-9df6-409e-a1d7-9b03e1254082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074f3e53-9085-4797-9175-7a5f00beac9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed9017c-8383-42b7-8688-364c891914a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb08067d-334d-4dbf-9c10-4e0a0f9b5de4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbffcea8-eeef-461e-aaa8-f75f7cd38911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2a3450-dbc8-4ef4-aafe-14872da94356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41cf356-1da4-4b6f-8b5c-efc23d303c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eadd625-1921-4e0d-b448-da8987c09b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c826b0aa-92bd-44d7-b245-c637f2c3ceac",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95f3c1a-85c8-4374-8657-50c4b4e4186b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6708836c-5c26-45c6-bdfe-e632ae8fbb73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36ec026-0ec8-4f33-9f48-6acc1d26e6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c8d726-bc64-4bf5-97a4-6b9a21585f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cade1fe8-4617-4098-b249-4d43b291af1b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1294cfa7-a85f-4f0e-82d0-7da3bacda687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2feb94c-0949-4ada-9680-37fea47abcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e2ed4b-566d-459a-82ec-00930c704ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfd4b36-1d0f-4934-93b7-ab0603f7deb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceed385a-54c8-49bd-b432-ed6c4eb2886a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1befdc-4f64-4ffc-8af7-4d3fecab478d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19f105d-faea-49d3-b821-cc603f01ecab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4895d607-f538-4be2-93ea-39e21004b4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f18f4397-f2f1-4190-9ae4-2a508cfba4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb44da0-4bad-44c0-8123-f2ebb492a482",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df1a609-834e-4aea-bcd5-1df2a10e6645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2faadef4-4910-42cb-94b5-733792a26e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a991318-a2cd-47b3-bf65-427a64185369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e89a57-4b78-4577-8c2e-1ecbd916166f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60da0aa0-9797-40ed-abfb-82201226e4b5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90648de4-25a8-4d4a-8e17-2614f983fc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211bb490-7fea-41fa-954e-4a17f9cfb291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f22f37-c2a1-4cc8-90f3-9b4e42afde34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "39bc25f0-3264-4c15-b79d-32e1b05bb1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec7bb56-9fa5-46aa-ac19-180347fa4ecb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecc7486-8128-40df-ab7c-aa14d7791a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee3b058-e2fe-44c6-9937-a04fc0a565c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d660cd-2a5d-466f-8fa9-6e154f79fcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a50cb145-211c-454f-be80-0b60c5f4b315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f260e8c-6f37-4b2c-9df2-47363322c58d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0539a83-55c4-4b55-8ddb-e986e081f080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c32eeaf-0af5-49e7-b168-12349d2acaf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266a4bd9-c359-4327-9507-123491360bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6aba1a34-df0f-42c0-8317-3575128f0700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ed88ea-06cf-4e25-9b34-16a1bd5e8767",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb9c93e-fbcc-435c-89c2-94763a6430f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3200297a-4ef1-4fd9-9d90-c01b5ae0dcd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7b81cf-3398-476d-903f-896a6359bd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "07afcc47-e6e1-4bc5-a860-8f9fedf95d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cadaa10-22b7-4abe-ad15-ef15a97ae10a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293b447b-0f2d-4126-9336-68a0492ee77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f2800b-e920-4769-98d2-80085b1f06b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2974d8-5012-4019-9ca6-a2f814aa2fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d71e5a59-8e5d-416e-829a-d8471c5abdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97efb6dd-ae68-420d-8c41-6e70f308c2ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2193d3-ead8-4df8-9d35-1da8da9d9f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27df5bd3-e3de-43db-bc55-8d87d89e6552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40495ea1-f61c-42f7-9470-42c75a84979b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "87445c7f-3de0-4045-a42f-d52b6777d3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96255e4-7d6e-4cec-8ef0-12e3a169b502",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a244b15-75a2-40f8-a3ef-7d6ff187b897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523cbfa1-ffca-4e93-9491-367303e94e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c14264d-b3ae-4db8-b288-2efc72272d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "864e9ab9-f762-44e9-ac97-9cba3a3bd083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b32b2b7-ca6e-4894-974e-3ee4ce9cc6db",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b27cb8e-573e-4b7e-95f3-521b44f20187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c105fe0c-6558-450a-88f0-313960160134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c420d6d5-bfe8-464b-a836-9d7c411e3c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d39f14-42dd-44c3-be64-9dd8f082d9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74592948-8a3e-4048-b697-47b4bf86301c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c0fdb0-7db0-4c60-b47c-a10e32878387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42dd69e0-ce4b-41b9-84d8-5279cd230739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01bdb09-f138-46fe-b38c-3cf2185db433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5174235a-0137-49cb-abb0-3ddc082f091e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0c1b28-b121-4f58-b2af-ea3ef6952998",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809ad10f-f962-407b-8c92-b89647af0e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3a91bf-7288-486e-a4b9-1956bccee934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5734ac-0936-4a19-9328-e61a95e7cd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40f7c74d-dda2-4e51-9daf-71b0985b6545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515de7bd-97aa-448a-9a2a-6463ed5bec04",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a97c00a-48ec-4eee-8dcc-50d41b1474e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "154b7a80-34dd-4076-ac97-c8fee2192f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9694d81-80b0-4914-b622-3d6cafadab57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf808041-51ee-4d29-9314-c4e502dfa801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8f4e72-b501-4076-a131-b6e019bd81ca",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7830d57-98ba-4c11-b267-67e92b03887a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d87f6e-fd5b-477a-91c5-9c89d405e6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a407fa-4d4e-49a5-95fe-280b0667b9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad2461b-1831-4402-99c7-2890f70f704c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e2b6c7-1be7-4f1c-90db-d4306de8b9fa",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1077ce97-8c73-4885-8446-8e9ad9f0ccd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30967064-658d-4d59-abf8-6eefafedf958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ee3c86-f840-48b1-820a-d6f3f2092707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8478e03f-d0b2-485d-a826-d22d53de0461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2875f48-f9d7-41f8-8b20-cd5c0bef4794",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3e405e-06ac-4f63-97ac-a769711017c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ab974b-124a-43f4-bb74-d9763d44f3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb3db14-43bd-48dc-bed3-fd3e00f65c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3b4d8c-be74-434c-a026-a5293a4d5e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555efc36-96f1-4e04-ab1c-dbd8ca13b72b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc2bbbf-be66-488f-a152-acb589f468a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be9bc0f-8dfc-4d29-8c29-f0c215da4c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafa0ed3-3fee-447e-a3b6-f2872a728d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06d9484d-9de8-4035-9760-72864cf04247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6636f9-4376-486c-8653-6ef7fd1b383d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d367d061-dcc6-4e9c-9706-723f58ff5465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38590a2a-331b-4ce1-924e-8281010e6174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec68dc4-39be-4702-a696-429e193f9e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8dd2380-8f81-4d72-a321-a90972a689be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d1eb67-b078-49ac-9646-80359309234f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a1b758-89b3-4217-9d83-43b5a17db511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb5142d-1942-4851-a360-db7b03df6637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc03fbd0-aa17-4a01-ae13-5125305de95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "554fc543-df92-44ae-a2a3-a8a2cc1c3920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77e7dab-2f2a-4f60-b8b4-ae3df0f74e3c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e071f792-8472-4125-9664-ced2f9a33fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6359be2b-0a35-4000-81d5-c60408978b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112ffdf0-e0bc-48a9-a7ae-568bbaf3c960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97aec833-1b1d-4a19-9730-338fd0fca4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbdfa80-1248-4803-b593-21eb861e395f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1707be-dffb-4a79-ba50-d6e043ef032e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1137ab-43a6-4f94-9f18-710171bfe859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77547fe8-dcf1-445b-8b52-39d72cc68bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4890a62-dc18-43e8-8faf-0c6d9a7a3108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47170bc4-8b44-432a-88b9-d4e34f0c98d5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a883bc-3fdf-4b16-a4a1-5af6f747affa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b88e0f-a3f3-4968-8353-2e4bfb8a1d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166d8fb6-b073-40cd-99f8-5c313a851c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6d2485-ca71-46a6-9261-a033a6e5f58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d76fde-1b08-4d5e-aeb9-eff862d098ba",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35e6f69-2a9f-4d3d-8cd6-57891058333f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0419d2e1-33a2-4294-9d98-b3e07475f15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa0d86c-3fb1-44c0-8502-a0d04a03b187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f93f4d-90ab-4c2c-b9c3-b4e0d9e94ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d07ec73-916d-4781-88ff-41eadf54aff1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a764d9d-38e5-425a-abfb-aa18a79d5de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a462dc-7733-41a9-989d-dbed435906fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03835df-0e8c-423c-a2cc-054027626b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e507a2cd-7e91-4f82-b894-e03fcb0a0a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f4299f-65a6-4492-afcc-514f545696ca",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c72426f-5ae6-47c6-a1c5-29e3fc079cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29204bcb-d0c5-4209-a6db-92526a2d0ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d258b3f3-0be9-4186-8342-1c14e0dda957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb48f72-b066-44d8-b1b6-521dc8f2e4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201f3fc1-cc00-4deb-b41c-ab488c201808",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5ff356-f68e-482a-9930-48b56eb96000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac854d1-db29-433b-918d-dc765337355d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f8545f-952f-4e34-a7f8-6a8f11ce417c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1160cb-e916-4df2-ad5e-8bc3b8210cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cea1ce-8494-4d8e-8ef0-088296ecae71",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1668f6-cae2-436d-aa49-c45afb0922c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df0bb9a-5db3-4f44-880f-2481a8569952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3b0b40-34b7-41f7-85e2-9e59dc38a4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "413e17cc-76e3-4c55-a657-548594fc312a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af8d79b-16d9-4ec9-97ba-e3638cb9ffea",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59537224-9148-451d-a1a5-e92ee767832a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e61a38b-251a-4da0-b3b4-b96447699b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fef1348-3747-44b4-8f5a-746125a2ccd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "caeb00e2-e8f1-431b-aeb0-39a377549ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66dc95b-9610-420f-979f-4fba110d43d7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e99831e-7acb-4c85-8299-d2f99d1ffa85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21e8c7b-2479-4f04-8b26-65fe75c37f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd897b5c-ed80-4fd8-852e-24e5ab398540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee647b1-8d84-4f43-8331-1767d297e5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4782955c-3a51-48f3-9b02-fd26d56b5f03",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5af4a3-76ac-450f-811b-ee8b9783f505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90de1fe2-fa45-41db-82d2-2a2f7a952eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da83fc29-630f-4132-ba78-f27e06652eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a19e65a4-16db-49e5-a455-bdd0d65317cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a99284-e677-4294-bdca-c5f4ea7e8a03",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58ae1fc-d664-4a42-ab0a-e80b342a3767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724914ae-1778-488a-bf5f-e57c9813c325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef91c94a-01ad-4d05-ab8c-13c086b6e7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f367250-5af3-4385-8b9b-5796256ecf79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e886e0-32a2-4a16-8ff5-5b7b1b35f875",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2346ede2-f3f5-4bb4-9787-2d7a03303736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e042f22c-f13e-4168-b1c3-85e4377c7c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95ff450-c4d5-4582-9660-153c6ed766bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c158995a-279f-4e57-a9da-4e1918a3ecea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870a0d0b-667d-4af4-bd41-0e7c5cc6218e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691d9c58-0d60-471e-83e1-f514c5472e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a18ee1-5060-4c33-b531-cfc78cbcaaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001776e1-f39a-45a5-ac36-a8ef9291bc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df2f5cdb-a103-4fdd-a607-a1ab0d857c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29e6bfa-cc86-4cd3-a8b2-1fab8008a121",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a217e4-310e-475b-8de2-433e15c11651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7ebb8d-8715-4648-80f8-e3e116aff62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c72e90c-5fb4-49c7-94fc-4a368fd3b896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "51b75db0-28b4-4cdb-86a4-f9b791acd1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc61319b-e959-4cad-a762-b077067af071",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3089790c-3745-4180-9747-ca8e9eac212d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4034fb7-a3a7-469c-8a44-a7c3ae97710a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d14ce31-eaee-405f-a429-5ed203130bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "abb3875b-366b-4abc-93ae-ff25be5e07eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd069eb0-11d5-42c5-9b62-210b4ba59f66",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbea31ac-306c-49d9-8e76-4d6e98493282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e87079e-c2f9-43c2-9458-bed3219e4707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cad1bb-f5cf-49d5-8d26-9c2904112985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a305a1b-6c11-414a-90bb-920551e6a51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c73ba97-5333-4cce-a072-aaa19fc8ec12",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdec79d9-9e6b-413a-8666-96b4242ea4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b215a82b-d93b-4c12-a169-ede694f95dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffde6fc-3aba-476a-a51b-ea68719f239d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "79ae592a-e11d-4c92-81d4-7aabf11b9ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28e0638-13ea-485d-82dc-c24d876baff5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c282cedc-a815-40f0-9123-5f45bf1b3f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e935912a-9692-4284-ad6f-5c7b3d52eb79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d255ee6-7fd3-4d9d-910a-7b9128097e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "feb8c729-1b27-4824-804b-ed40a5474e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201dbdee-9036-43e9-8194-bebea81fc19c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cc9151-ab31-4854-aabf-e945991f5012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "38f998b0-6dc6-4095-b40a-095a4f39693e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ec387b-74cc-4aff-9aac-b663b77f7b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "54d602e6-5c06-4047-8688-b04f02c3d771"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb95bfa0-e7d9-448a-8c21-70f141b0cd3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1037257-c2b1-4f5b-a189-9c20c17f0b5e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10d5a21-7e09-4f3a-b0bd-28610e00fa81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45453785-3aa2-4ddc-b5be-9cd50d8cd9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3cfad7-3b62-4887-bbb6-615f6ad6cc59",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c759b41-7320-4286-b73c-35beed504b46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec1951a6-33b5-4477-9751-be3782dfe8f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1890912f-aca4-49d0-83a6-b365044d4496"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f9412d7-4522-4002-8913-2446a04b32eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2d140b7-6ffa-4b19-bb4c-9a6e5894eb32"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ec21a72-ff36-4962-b926-2ed05bdd321f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c94ff8ab-2e4d-4c53-9eb3-ce0baa1bac81"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21cb280c-3de5-4adc-9688-2379e3448137",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4658fefb-3257-4bfb-ad9e-e6d14f2a770f"
                }
              }
            ]
          },
          {
            "id": "9321f484-d26a-4280-8fc6-d29537f81203",
            "name": "Positive Testing",
            "item": [
              {
                "id": "21d63cf7-2132-4003-b5b5-19bf1e635a4a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "24f436d9-7044-4153-8924-0c6ab4fbc5cd",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80ddf96-4b0f-4dbe-9d32-92ba7daae0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4ad03f4c-ddef-4ae4-8dde-b9f505d8461a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163de913-d08c-48a4-a3d2-93a96135c94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bc951b-a23c-4d7a-bdb0-8d11c89cf490"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "838693e1-565e-453e-868c-965279c81d74",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0491e2a8-9a11-4c38-baca-9e4ab5f5eca1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d81a1680-9a55-449d-8df5-a62f3e71a82d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04c35c88-c08c-4948-8409-294ad7eaec61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "67cf2b8a-2eb2-479b-b060-a1e9af07d1c8"
                    }
                  }
                ]
              },
              {
                "id": "832e4e34-d5d5-4f15-b087-ed4ceb572299",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2d675df-c146-4466-a5f3-b6f6e1aefbe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63145ba4-b914-4ac6-ba77-e3bdb179cea4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b74b8db-19f2-422d-8ba9-42bad2c0e75a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f67e9e46-a258-41a6-b1e3-8cbb5c8e4039"
                    }
                  }
                ]
              },
              {
                "id": "cba409ae-5588-467b-b7c5-d5563c088d1e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d8cbee7-cd8e-4590-a8ce-7ee199c94be8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f5ce4dd-59ff-4e0f-b25f-52d326104ab9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8d59dd8-039e-4b03-8adf-7c581348ad92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cfb9c544-0a3b-41be-a6fb-cf78f41b044a"
                    }
                  }
                ]
              },
              {
                "id": "bf7419d9-fb0c-4368-8ddf-c8fca707a027",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "159a06de-4b3a-41aa-849d-4338976fed1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ac47195-ee87-404c-bc46-3c772349f172"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfcf37ee-3ac1-44d9-986c-ce1df6a5181b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3122ab4d-b426-452e-ac36-f25475cbae4c"
                    }
                  }
                ]
              },
              {
                "id": "4afa68e1-4358-468c-97b6-eec902141ea6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "099000a9-a4ab-4f14-8e0d-cb60cf7df7a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef4549dd-df5d-42ea-9557-16bd1864d27e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad96a64f-d19a-4617-890a-752bd0582b43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6ecbfc11-e86a-4330-a99e-80d6316b4451"
                    }
                  }
                ]
              },
              {
                "id": "114e4565-3502-4da6-b415-14c31b16ca6f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71c80d37-e217-4afb-a95d-d69476602740",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d20eafc-ad92-458b-a792-e41ec33494d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ab55ee5-8772-44a4-88d9-e29db00d949b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a2ffee00-f923-403e-b7a7-f05debce52bf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6a10f40-1c1d-44b3-9d5c-4adc767fcc6f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c2e833b-b5cc-42b1-8612-2c999ca0e5bf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b6fc02bc-6442-4f5a-869b-02c35da2d68d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5eb8ecde-d65d-4042-acc6-2ca8f83c47ce"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e750f36-cfae-478d-a243-cf91f8706dd9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bf9200a5-6836-46d3-b11d-d7f2004a8136"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b171e002-e1a7-481a-bab6-10681efccf24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b084e75c-6e63-4b06-be98-dda735db607e"
            }
          }
        ]
      },
      {
        "id": "3e2c657d-8127-4629-89f9-7502dab9c115",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "eb681c08-64b6-4dd7-8690-5a180fdce0e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17bf5c59-a568-449a-8ae2-0589450a8e69",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ff485cbc-5b3f-4b87-894d-4460e8a52b22",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13eb39f8-92d4-4253-83ff-c6dff6d2cb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e047b4-b234-4c33-859b-47362e084b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00998eb8-f72a-4ea9-be5d-f1430a9fa5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "179950f2-1209-435a-894d-6e969ec490b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113a3f1c-8754-4f8d-a437-3d619f5e8df0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96652cf0-a4eb-42e8-b414-05a5c7d8d41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6277236-b14b-45e5-a94c-91bc342f4b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb67c76-605c-474f-987d-9cf646c0b0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0442f44-4e83-4d16-abfc-72f76d2de315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed5636b-13c2-4f71-a1a2-ebcfeef1ec52",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174c7fd7-a534-432c-870e-80648d248392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ccd104-4d75-4191-b622-8603ac9455d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d01e55-dbe7-4cce-a9ed-06972475f755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b393bee-a876-4f25-a25d-e6396e721d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cee2ec3-0f3a-49ac-a1b9-145f0cb26003",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569c5974-fe4f-47cb-b6ea-335082a3bc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11165f57-4305-4dd5-9740-787d3b23b934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a1f5ce-b0d3-4623-8da6-2e0166199162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97cfe453-c800-47c3-9509-021042e73806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d054890-fe92-4efc-a411-a7c66e5491cc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb314de5-14d9-41f7-8269-3f46d931ea4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fbb6e9-0c5f-4055-9491-573aa3b3b9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f536a8c4-b155-4b81-950e-c42772a2752d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "484d1f3a-84d9-4531-9e25-a6b3bb688cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c454ce-6bba-41c5-af54-257b08b347ad",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ebbfbf-1f6a-4785-a2d2-6b77cbdec831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906532d1-e484-48c6-a16d-49e467879d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bc46be-230d-4268-9b6e-a352bb45bd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f02fd8d-19c4-42b1-8957-30de2810536e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f57f91-89ba-448a-a173-81720aafebf3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230e1afe-62bc-4478-9caa-6edfbe283ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab3477f-7999-4495-a508-5ba236e40301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87fc876-b5e5-4d31-9d63-ea3db525e8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd69750-d4c4-4d15-b966-e1ec0e0b89d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c220640f-cd73-4994-aa2d-b7d8471299f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fe7c01-c153-44a6-a648-4a753ed33cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8825197c-ae6d-4b60-8c05-fafe976ee3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea5b2b4-be67-4ec7-9647-02db8e4edab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a19ef916-e11f-4f72-baf3-30448b77b2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2daa876-f1f3-4eed-8879-620c4214a452",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6e4e4e-0a04-4301-9a88-4121f3513491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5496c27-f4d4-470a-9743-1987a284be43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d7c5e7-6880-4c0d-8c54-30c3fefe8c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18500f7d-6c65-4b31-83e1-e42d0478f335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a3fb8e-0c28-442d-8524-9f6b9b679ee7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff156f54-34b9-4c83-9328-6c6a321f0e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b3a5d8-ef51-47c2-941d-3f32761c3377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6332915d-3761-4839-9f62-b9a3f2344fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c57a119-2701-40ba-a38e-a600f9b9482d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53f3d4c-5f4c-4ec4-b9fa-181f701b6492",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b571a43-a3fa-4c6b-84cb-ce5829936e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1e4450-f1ac-4473-8b21-4844cc334e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8539954-7bba-45a3-93a1-9dd2abbd1c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f19a76a4-6a6a-4116-8ebb-69c9012f5fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8caadd-b2e2-4330-8340-dccf3b0b9438",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3329290-d9ad-4e8e-badc-979ca70e8fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee0433f-7966-4590-8120-dbba9cd59764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd519681-dc5f-40c2-9f8d-9a6030535262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae94a71-3d55-4916-ac91-4aea9395068a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb3fdc3-d2b7-463e-9ba9-cd193975aede",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72c6e5e-e7d9-4e8f-aa49-a71a3b82c2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6d7baf-ccfd-4948-a3b1-e0e9d31153e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6799ecb-c276-454c-84fc-c6f24537f7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f031f2fd-29e5-4591-a4b1-ea033cf52e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2d7583-ee83-407b-8b83-5ec5e26dd7a1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c1d781-d02a-4cee-b6ce-2f32eaf06985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7047016-7841-48e5-9e00-89c83371ddfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4551e00a-3f40-4757-a72a-041ec7c43735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "606f4ebb-9219-493d-b2e0-76148b9b4b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2d1ad5-afc3-4eb6-8a13-7088d8393ced",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39b766b-5224-453e-85db-ba93cd32a952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9605a46-50bd-42fa-b48b-ea939292b6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addb6070-f5c3-4635-b1a3-67b2a80ad0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a55b557-ad68-4e6b-bbce-1966df6bb5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e494b2-d8d2-473a-a5c0-1ae6e4ab1648",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aabf2fe-1a3d-4fad-8081-26a2696f12cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32bdf2db-76cf-4b57-bc90-8ac16ce2e959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4942f0bf-97e5-4ee9-849f-7ba83357417a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b4d4ad-a835-40fc-9b1f-323b0a10c4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e14db5-ff89-4f82-9632-ec55ff893988",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ccc34f-0201-48f8-b973-d2d13ec86f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afea677-2b2f-4a4a-80b4-d2d2fb3e5cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad2ace4-8c08-4797-a971-ab06e87d0d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f307f31-e218-4d27-b893-79e059a2622a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6354efa4-2c48-4ed8-b4ce-0149e298aca9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07661009-222d-4cd3-89fe-2b679fc7d535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d6fb65-f01f-4855-abbc-19d03eecca55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d3845d-d95e-4259-a10e-93cb42aa101b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf8bb44-0716-4413-bbe4-b1ed9b7490f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ac3fe2-ce04-4f26-bad3-6dc4d2bca4c6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3606807f-e346-40c1-b6a0-3168125fa76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492b920d-875c-46e0-9845-f88b687a085e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a514df2-261c-424f-8e86-0ce0ce88ffe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a680f6-567d-4edb-a9bb-f10237c611e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e8f5f4-08e1-4059-abf1-88986fa847e5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3978d6-ae63-4ad8-b9c5-67fe2f126cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df261fc6-c4d6-4fa3-babe-efa0d575379c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5b5ce6-6e2a-4a65-b8a7-222469813974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ab1579-d9a0-433e-833c-b74d5472b88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb39aa16-bec9-4220-8f42-b83e12164b89",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af220905-c885-42ad-8960-f2b70d7cd25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8842af0c-bc33-4530-b6ea-24490aad3134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9eea035-a888-4e5d-8e32-9f72e16017b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b76f6493-3162-4339-95c1-d58f99340b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62d9191-8630-4b1e-a2da-fea8abeae325",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdc8d5f-5b6e-4367-acf5-c6504bf2d5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba498ff-5eb3-4e56-a7ef-c06debc530e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab06c10-fdc9-4176-abf0-d371a2381947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea58424-7315-4b44-ba4a-afb9d395d1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69533b8-9ac7-48f7-9641-15b22d1e71e0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e35b180-f9f1-4cca-8400-e1853cd3d59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701b13ae-0cae-4674-b227-bdea24171893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2047c06b-0ef4-4521-8049-be410e7a7e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a06874-5689-4d47-914d-5d60c6c59532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2b6c83-2b9c-4d96-bb40-3d8ff1527e6c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfaf378-6519-47a2-b689-7380509a6cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e548c9-1d7c-4fff-9346-e3b9b1b5a205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69326ad3-91d4-44e1-b026-2f427865aee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18ed15d7-55bb-4dc7-9c74-81dcc5c0cbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00305baf-9816-4070-880b-b8298bd15236",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d265ad-799c-4e8d-99bc-89435aeff7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997c6dba-268f-4c1f-8585-feda74894d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c877310f-4bd2-4d12-bebe-c65dcb058424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c3d8ec-90bb-4519-92d3-470f0fa2ac4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf44804-e978-4700-83a7-23ea040f3053",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23249d9f-c5e7-40fe-8568-798dec4d6a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d3d7e5-0e5a-479e-befb-97a0fbeafc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad15c160-8060-4077-b515-0ac56436e461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d628c2a-2a3e-43af-9330-42934f6eae3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddb19c1-72b6-44f7-8f54-4dcb187d2ba1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57123284-0aa9-4277-8428-aba8c58479ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94934af9-e98e-4e7f-93f3-d5de31c53ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc02659-b8b2-4dd2-9d15-6f039daaf618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f77e86-19f9-4f2d-97fe-e73f5dc682bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fe7025-505a-4cf7-a22e-0eca4eda434d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f976f6a-36b6-4209-bd2c-9e5b10100607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ce2a24-d037-4c94-9dea-d97b0b7a72c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09f7dd6-4154-44f9-8fb2-1aa8a54e117e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a61d403-be9d-45a1-9a6c-8058354ad076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3973c3a9-52a2-4d34-9564-44e1468a49c0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ed9a86-b287-4d06-a513-c61a25e0cb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff96461-3d91-473a-9a7f-1ce7ba8bdc2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee938c7-febf-4a9c-8126-6499f24dd10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d767dd2-e985-4b74-86a5-a49af0e825c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26320c02-a2df-4be2-9e6e-2f9891712699",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33aaacf-a737-476c-9a09-2b42c9143fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26aa1714-b50b-4bc5-8ac7-3c7ef71a9bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd649778-de70-406b-9cf5-9b2e05397b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b52c243-d060-4e70-b853-ccd18b61fdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89f61e5-075a-48e1-9af8-b627de420568",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9032f820-01ed-47aa-bc26-7bae2d4e0e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b84ba9c-a1db-4891-835d-cc892bf4dcd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc968a3f-2f0b-4d98-8c38-69fdb49e577d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcec34db-545d-4bc9-8e04-302a5ad0edc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5e4757-7276-42ed-9282-ab03afd2b3bf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6931efd-b596-41b8-963a-a3f23d016870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e60f73-dcaa-4a47-9c08-c376293d9311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45da6fbe-6a4f-4b78-9841-d43e7a2d0dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aae70edb-2ec7-4b51-b06f-57db0474d694"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e0f91320-8956-4f16-985b-a7c7c825a6fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ccfeae7-1327-4cf3-ab55-131bd253f627",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11793919-aad7-4755-80d2-70c02e7d3a2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8a41a63a-9b2e-4b68-98db-2eb7f4373ce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab5d9cb-41d8-4676-8fb0-64c72f4f4bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b89b9000-5f90-4000-ab56-922d88cba552"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36cff58e-b082-43a4-9eec-1454309b15da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f605efb-b57f-4c63-9738-a492e97ddfe4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8811674-e26b-44ea-8f1b-806d991b85dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a646e2b5-f700-4ee2-8db5-ff62d59659f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed90ec17-c917-4608-8dc6-a23e1e8a161d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "706a6ddc-cbd3-4667-9523-3bcb3fe1a0e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8e2fb86-6ba1-4180-a0f5-1c463fd77cd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e69a58bc-6bc1-4231-9c27-a894b7e70419"
            }
          }
        ]
      },
      {
        "id": "7d40b119-ecbc-4164-bd57-2ed23031a82a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "55411d2a-cdba-4f38-9c15-f007ce017884",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7fda4e7-5375-40fe-b499-82b2bf88c677",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0715a017-26fb-47ed-ab0b-52b8747c6f0b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44420bc4-a96b-4510-b516-4a322b5393b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3e867a-b721-4048-9a38-d90d56caf382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d86082c-5d1c-45f6-a859-d1d6a21d505a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1315b8-f7e2-4152-9d4c-c5eda42dbc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f78ae48-7e59-4b96-934b-309afb1bfaec",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9358b30a-bead-47b8-93f7-5a3c2768f0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1abd96-082b-4db7-bc80-8b897cc21de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8023f4-569f-44c7-b7c7-2fc35db4ef89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a57b3b21-4ff4-4cc8-80c1-c1ccd7dd249d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d05d8fd-07f1-468e-8649-59a3c10824fc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295b8ee9-8b4e-4e73-afcf-365f36bf2c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28466884-3e23-4352-a1f2-333b22651896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb39d5a-7e36-48dc-9b75-d5c5870d3692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4750b8b0-78d9-4c35-87ec-0d86806f2a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebb067b-1920-4bea-8f11-77f265ba3f30",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd96db8-8f3d-4280-847f-a37acbad2d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66df601f-4ad9-41fb-99fa-ee7f22225fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340d0ce9-27c6-4318-92dd-0a72db858efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b184236a-876d-40cf-97d4-96514ab6da89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0a0a50-a746-4b6e-bf5f-0cbf3e301c15",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd40af42-d6b7-4cc1-ba25-1daa3a463867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18364ec1-3e3c-42dc-a2b6-bbe092694e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92e4c4c-46ad-4ee8-a6af-ce78c025dfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c37b6031-546f-4678-848b-06f685baf876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fcc3b3-9649-432a-9ead-9fa7c6e4b6c7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67239a00-a8e5-4728-8ce6-6d2cf58e8e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c6ae69-53ed-4bf2-a4a4-4117bd80cd12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c1120d-3f64-49fd-960c-9b7154855e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71591418-827e-428f-a3ec-9b302d50db35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b961d2d-5012-4cde-8b66-7b68ee537194",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80df3b90-b323-4334-961a-b95014a752c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae9b31b-829b-46fd-b89a-4192f869c305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723cbc86-a972-4268-b86d-410bb4fcb6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8840476-d61c-4e80-9284-d9d4c7852b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838a0ba6-7a53-46e9-b69b-99b108f4ec44",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c94a90-7d0b-4816-b720-47a8fb2ac8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b018a3-0c2f-4fe6-b5a1-ff4d589a8005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3f6c17-96ef-4eca-8ac5-88b048834b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36d4aa59-8142-44eb-8e49-26ebcbce9189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d1f3b6-485b-4099-a850-d07b4c9000dd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb87b766-5926-4218-b206-c2ba66398a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb14ca8-6304-45b0-9ef0-7308308b7fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac96033-55e5-445d-8af4-9c1bd620d32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "247cac60-e947-4cfb-912c-b75b08e6bd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f308124-cd8b-4d12-8ff3-679c68838676",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0ec202-df96-4db4-a5d5-a75ec70af8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1afbcf94-2d2e-459c-afba-17481ce38ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10edc19-fce6-44ee-8b30-675cb3426a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9ced56-32ac-4b75-8a11-ded475bf9c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27770c4-21f6-42b4-8f93-774d3ad19df0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eee2c91-b0c7-4c32-b297-530bee81a0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b17af82-6f36-43b4-8078-847cd5cde850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be19258-195d-4105-af26-3d9abe081b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e8f889-dacf-4984-8be6-cb30eeb250e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f54e79-a51b-4f79-b6d2-2799ce6a6aa3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44035cc-3a61-47fe-96ca-0cb249c295a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75845116-d0b4-41ad-8675-2809ab874b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b886079-74ee-4835-823d-69baa1a7902f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85c4d20b-302f-4320-b43f-79e1b1157a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cb9920-0ead-4977-b91c-e44ed0e0d096",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d268b1-e503-4d95-8a83-83e9bcc96f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066385a5-54e3-4ea1-97e0-6ae8c956e092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35987f37-af99-44eb-9353-0cdc851f2619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "829a4082-319a-4a4f-8675-efc5038d7a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c527f07-6f91-4b02-9d61-28647e0d49d5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec5fc6c-86cb-452a-8abe-43b73d763928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53115640-d8b1-4f06-aa32-9802135541cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb85c74e-899c-416e-a089-7fdb7ebff46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7e04eb-80ab-472c-83ff-02620a0d903a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b603cc-710e-4201-aaf5-c8370e928ca6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684dec73-ea01-4fba-93ea-4ee5bf0509ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8997081a-e9af-4b18-884d-47005c0481a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cc6c0b-3a64-493a-9be6-2632b4d7e3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "62828821-fff5-4cf1-9e35-3c5cfbbd59a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108daee7-976f-4b11-a610-ea4ad57425f5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5abfed-a29a-47e2-b4cb-2d92627440f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20707e9f-5548-45ab-82d3-036798fdee2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244dbe05-86c6-459e-ab22-c174644b6652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "739a9bca-818c-4209-ab5a-0cfe3ac56381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a52273-7ea6-4bf2-acce-fce51e306045",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f416f69d-a247-4a2b-848b-ef48597ce6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8712cd9-b0f9-4b6f-8d26-77fc2a510b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdcefac-106e-4e86-beee-88cd7ae1adf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff766877-dde7-4488-b0a8-8e202cd3af25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e08ec59-6d81-49fb-9989-2aa30830f233",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902c43a9-7d1a-4de9-bb5e-b7eb1ced1e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44837d0d-c520-4fe3-8ef7-b0624e29e7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dc27ee-d3b1-47da-9232-7fd378250d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "13e44f67-a4dd-4a02-a012-1dff6bfee518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc2127e-07a7-497f-84d0-4b29e2fa090f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f86009-12ff-4dc0-84f5-40647c86897f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c3b2ee-7cee-4f30-b661-cce675cc6068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e926a922-a908-4058-9cc4-85de20084178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40785946-d5e5-4600-957f-7e2efda00367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1570a459-3f3b-480c-8f75-2e75e5b36692",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d662e23b-2534-4d18-a3d3-8c73bab72778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce77f81-1502-47b0-a912-648153fed270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02f22c4-2620-418c-be95-bf24132a315d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42ae0f58-dcb4-4ad1-ba55-8e3c6e453870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de618141-a949-4399-9795-da60dc640ccc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a733b6-515a-4cdb-9f67-602fdd716a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b0ab80-8948-457b-9ad4-5fa9eda03791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c9dc70-e12e-4031-9a0f-3422a384fbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8623670-0bff-4829-9c19-1ba6d7dad5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02825166-fe25-4b64-b286-c91b4978a69b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae40d11a-e9a3-48a4-a616-51eb9abc68ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2e5990-824c-410e-9734-91030af6a9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5711797f-7964-473e-84de-9ae14ccb3ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21229354-0475-4bab-8b71-5128ad17604f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b5c112-39f9-4535-8efb-f54afd336a32",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0f1dd3-8321-4e4b-a802-34fe4add288e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00b1072-dd75-4a01-9315-ebaa165e89cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b3da80-80ba-46cd-962d-d8b1d316e03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc38383-0998-413f-8e86-c601faab1c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e42b7b-2e8a-481b-b88f-56d9b0bdf3ed",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c43ddef-c85c-4990-beaa-a7009b583418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a41b57b-85a4-443f-93a3-bc0603c62df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15d74ff-7337-4d3e-9036-a17b05fce08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55543316-b9b0-48d0-ac8d-5c5e4e253dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2daeb9a1-0cbf-46ab-a5ef-36f5bd85e396",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317d6121-b6a7-42b7-9ac7-3d2682f2c70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774eb849-342a-413f-9f07-45f22ca53822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036e21e1-4191-4bfd-b65c-c5076ee85269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ac412f-f87c-4547-80f7-c71506751404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60be53bf-4e68-49ff-99ac-0672a10ac5db",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca368bfb-407f-47eb-9289-9ea90f0939ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34f62b5-1ea0-4fc9-9d5b-33b9a01aa5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a43395b-3810-496c-a4d8-e57fd1d98857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3072171-95b5-4e58-92db-be7ba34c24b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdefd857-c445-4653-ac03-c1e07e2b2d24",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75bfad9-7297-483c-ad3e-1ef8c98cb605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8950d822-3b1e-4c1e-a2a6-a220c0c399b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4486cd-da0b-429e-ba53-b26180944357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee15a243-b250-4e62-9ccd-17eea48b3bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97777a16-5ba6-4194-9a7a-45ee649cc699",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bad544-cffe-4046-ac1a-3e60db4ac973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c56736-6128-4b4a-974a-cd1c54a08dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7abbcb-76de-443a-b32a-de2174757a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2825c7-b5c3-4874-9471-edb6378f7a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c835d36-5c48-4633-980d-1f9da0a88853",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8207b7e-a6e5-481a-b879-106898990ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcd99dc-a0c9-419d-a5a3-fdf570ba9854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb67467-ea5b-4441-8db1-a0b1221d1300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4150412-7bc8-44b8-b542-e01392afd2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f672d48-0720-4bef-9554-2f93f98855f7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c355ec-8eac-42f4-bbbf-15814e9d239d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9c6d1a-f354-41f8-86e7-efd317512034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b931bd5-6ee6-4af3-9a1b-f6fa721221ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5afef20d-2368-4ffb-8ae5-4b66195a2c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31beb7c-3c64-4565-bab8-03fe3e0f1aea",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617f8baa-7fa8-4220-a43c-1f95176dbb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a07d41cb-f663-418a-8e60-afbca14e9931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42231ffc-1217-40b3-9fb5-da9d70880560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9dd6ec-087f-493d-b9bc-aae69549e9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff90847d-433f-4fb1-8860-3d4c76795fc5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a26311-9950-48af-8bd0-e0ebf608e5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8993d1af-e5fa-457a-ac3b-14366c3af2db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec6034e-4976-44be-93b9-082f3c560547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80ff15a7-7ef4-4293-9de6-9ea6f3b86499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff5755f-2872-4c39-9b1e-d44718232d75",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74445a0-bad4-4f4b-a7b5-6be9e68a74db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e39488d-9535-4852-a682-0be133590ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e8732f-64bb-44db-9318-69133583980c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b176ed0-38a5-4bc2-938b-2c6006714894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55734da5-b9f6-4876-8104-c34d025ce68e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbafb39-56d4-4dc4-ab31-dadce0e7c3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54277f3c-c011-40e5-9f62-71a42bfd716e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74930b2c-7aa0-4405-98b7-b47d0a185c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3efca8-d8fb-43a2-a69f-3e029d4808b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d219e293-2f4d-4a2b-8112-7ecf285eee7c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc159dbb-49ca-4960-8f9e-54ac8a6c0a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f7564a-fa27-4a42-ba30-dcf56350a63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307262ec-11fc-4efc-be85-daa3ac7c392e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "305ebd38-3d80-4aa6-9e77-8eb45a65af78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bec8a8-3deb-4ef3-9efe-c1452e782d33",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3ec71c-d8c8-4862-a5a9-a5b2f9bc1d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347ca501-ced2-466e-9eac-bff9a2b63e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f6dbe3-c057-4428-b12f-1a95349d9232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "376d23a0-924e-4234-a8b4-09b7a6befebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9113a377-57d7-4a58-a02d-e575a06c9b03",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae59ec6-9c1e-4a43-ad1b-a20eff6e9bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f490aee7-e020-4abf-9fa8-d39b581be0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c44630-eae4-4ecd-9130-a05d67b1c9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f40949c-a221-427a-a85a-e647a018f2cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ccd736e-f02b-4e4d-8597-b5d08e087b14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c339a5c-84aa-4368-90af-3808949b95ec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa78aa2-856c-4119-9486-09bfda949a17",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a1a8ab-04c4-41d1-ab2e-8bc11be55bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45532391-4b00-4beb-b5e8-2f23f1617199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a322093-ea25-43b1-b8e2-16bd38d13043"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6b34fc9-9249-48b2-bcec-95a7c0c789e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6c49ff2-6238-447e-aae2-c7de80644b5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ebb9833-384c-449a-9d17-6a59531a56d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5aacf445-b710-4350-95e5-7612e6b494be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e032080-b99e-4aa6-a46f-1ff35f7711cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f4b76dc0-1985-4f0c-8d1b-32f74ce64fed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2aa5796e-82a5-433e-81ca-0dadcd37cf55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "372d71ae-4c8e-4d25-bc74-3aa08698ced9"
            }
          }
        ]
      },
      {
        "id": "385e3321-d650-4620-87a4-13005818cbee",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0d830948-c7a5-4e27-8a9d-b106bc0614fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea546e67-fe79-4ebb-884b-ea039ebf2b21",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e713213-0fb4-4e2b-9ffe-9ff2d23434b2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b805839-232f-4e87-8116-18cc94ed430a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ba1795-6e84-4275-b104-733dca521da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50f3767-43a4-4e2f-8f23-063fc15e21bc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa027792-2034-4b32-9ac6-4d613f08f243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b1c6e3-006f-4561-97dd-2b46694c56ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f048c2-7b9a-4e1d-a5ef-9142af2e5818",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f675eeb0-cb91-4d32-8d33-f3d15212136c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdde8717-521c-4ace-93b2-f7f7d1f2687a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eace1c4-612a-4c48-aab8-1c41791dc933",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c604c8-3e22-4c39-aa49-9219e3bf3f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0661d677-b5c8-4197-b4dd-ca5ae51ef348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d86096-c012-4be8-bd40-98263f80ddbb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d5c7f4-8660-463b-9889-4aa22858ec3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c90fbc3-4e7c-4dd8-9831-5a8889f19872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c884ea9-5e36-4923-833d-35d526430be7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f1af30-3fc4-4ded-9beb-7af1c78f3030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0aa259b-7b52-4993-bbad-2cfb53eaf40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad00585-82b0-4fb9-a0bc-3c6c4b808860",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff6576f-5074-483d-9273-7bbc26fa7683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a1acac-b576-45db-8f62-c09a8b67d4e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c222e850-edeb-4e61-9bf2-b29df164390a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99f3b92-dbd1-481b-af5c-98250dad4ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52cdaa6-5743-4422-9c52-a89b5751732e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290e02c8-7502-48ca-95b0-7763dfd1c3dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfb75073-5886-489d-a29b-b7546901fd2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad496e23-fb64-4752-aa0a-dad6e17bd196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be97fcf-6322-4e19-99a6-1c6526ab808b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7da959-126d-4690-a42b-14cb5a021ec9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3864d0b0-5e56-42fb-b55f-3ba80e97f177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571f9e26-51b2-49e2-8d62-92850949ac3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "388d88d5-38b1-41fb-a622-55c17dd1dde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8ec4c5-4990-450f-960e-eaf252916ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbe6a0b-6566-4139-968f-dd3536ceab29",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb84deb-fa8c-4e09-b1fb-1f01e9182b53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c3e0e2-129a-455c-ac3d-c971ca9fc0a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2227eb09-d2b4-4dd1-a765-1badd534fe5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef80618-bffd-43ca-926f-8d00e751bb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87670ad6-6aeb-44d6-bd4d-55dda6808586",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a878b8-f30e-49c6-a43d-76713ee680c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e97dc0-0370-4e43-8d94-ac3aef50516c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0f8829-7ae2-403f-91f7-c8618fa6cc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f575579-fd0f-4702-ab8a-58e77a306653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54b4ee0-4cc9-473f-8acc-2ac91f96792c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f5ee4e-4c46-4035-ae15-7062eb102e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb7da0e-41d7-491f-84b9-00d627273092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9b0e7a-41ed-4c66-98b9-ae1b357d2971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba1ea4b-0136-4527-a2f9-9dc3f67dd9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d691720a-7717-4ef4-8aa0-22d70926cff1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434a3d10-baaf-4c91-aa38-7e6d3d107ea5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a0d2a47-d1d4-4e19-9d79-7eb3fec3bc96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7588b9b7-aac1-4c9d-bc71-0f774b593fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4040dae8-2aee-4236-b969-10bfde6aea50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e95bed-a472-4f14-8409-368ecdfd82ca",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b6269f-65c2-457b-8c77-1817aa452a6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc089a0-e436-4bc9-a77c-ec32dbc79c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c46818a-01dd-491e-974c-2420ddf88737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531ecd85-8aeb-4900-bc30-d8edcdb059f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d5edc7-942e-4977-bfcd-70711ac52578",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d15033-c1fd-418f-8d65-4c8accfea6a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b20f2ac7-793c-41ce-9cb4-78b1b9176809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7046bd7a-4f07-44ce-a144-2970850bb89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0949aa8c-7830-4c68-84f4-2808d5d94953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b4307a-132c-4c54-94ca-a4dd4cc1133f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72711d1d-c204-40d5-9aae-74e003cdacbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1fd6ede-da52-4bed-a1ba-030524fd585d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd518bfa-cbde-4619-8722-9a984a086953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b434617b-ec57-46f1-ab2e-558f2542b883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f6c1ad-e493-4b95-b707-cd5b3fe9e2fa",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7940898a-5ae3-4b9a-9f72-a5fe227eae16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531700e1-f941-4c3b-959a-956cb93aba80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f098fc9d-5809-459f-afdd-b68075df1c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225084c9-fdd6-4144-9ab5-208b75fe4f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbbca80-a355-4857-89b4-c84f7bb5ac5c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342b0775-e068-41b8-9132-1a4acfe10903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dee1a4b-86de-484d-a1b7-21b667237181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a408e297-2302-4e18-b71a-f9029482056a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55219041-7c6c-4360-b29f-b9a5ad34cfa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf80c9b1-3393-4622-8439-15e5e8271113",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4150b1bf-b0e7-4705-ab87-7931bcd78279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6fffb8-a1a3-4573-80a0-600a69358840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5008ce1-f81e-42c8-b60b-50df3e75ff55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf3f9df-de19-4f87-b9c5-ff05165d44d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369662b9-445a-4fe2-b054-0d0fbd2fb5e1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4423e3ca-f2bb-4673-b9cc-f8b193f6abb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2160719a-e110-4640-8f98-da8b3568df98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8cd012-e119-4283-a4fd-35afa8d36082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2cf52a-4482-4764-b083-e1c936dec073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696f9b3e-5003-4857-8558-9fea662e11cc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfac5a09-6abd-4c96-ae86-8854e243a143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ed00df-6b17-49c8-85ac-1f1b91f63a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b43cb8-fed6-4526-b390-5c5dab2ac1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a4af99-085c-4d14-b67e-b91b616cf6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d374b612-4852-467c-940e-edcf1d8b50a3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bd7199-59f7-4861-a415-5976dcf56967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563b9dc1-a7ef-414f-b152-3b7d2323f574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c82a83-7ded-4e77-acab-b7cd0793b61d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffeab2eb-586c-4cfe-8970-be26c150c3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b01aab5-7545-41a8-81b5-1d5d0a689db3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f491d4-dae6-4274-acee-2ca1c07c2435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c883a7-39bb-4861-8825-59e20e4f2ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105b7c71-c7bb-491f-847a-56bc49ad7a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd96b9e-5296-44c8-92d2-f4626f2cabfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c6608e-13ad-48b6-9588-eadb0bf15a60",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd6decc-c90b-4dc6-9f0e-082459bc372d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba544fa-a9bd-48e6-a62a-ad8fdcd19731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bd7ca4-5950-46a2-b72e-9cbf6ac4ec52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690381c6-c1ac-4a80-b6ac-5d513c4d813a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3430adf6-f1a7-416a-8f2d-6ddf8463ffcc",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf0de93-60b3-4435-9363-af04f9b6d664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790f57c1-032e-425d-a740-80ff49590bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db91e21-5267-4662-9901-404fbbf3278d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686f05e6-dc5b-40a2-9dbe-b7cc36e8f561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6ed79c-e0a0-4810-bf66-dd5386031726",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1aff2a2-3f1d-4aa1-aa71-925a8c38541f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc98f526-9e99-4c32-a446-97b059c62f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81ac3f4-2887-4646-a83f-0856f599c42b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279170e5-a75c-4bdd-b75c-3d6b463653b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fb2c21-387b-4da6-97d8-0311274f54c9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a4b66a-1c39-4a7b-bae4-248c5f4f1042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5adcba87-1a96-4810-b2dd-bd1a83d07590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ee33de-00d9-4a30-adf7-bbfeb620fe77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c800c61-7017-4960-9bec-c4b30b764bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155f24e5-cde5-4d5a-bb58-671b033d0af5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0a7426-6ee0-4fb8-9cea-d9ec12964a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771c31d1-1281-4c8e-bf73-de9ea5225f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85878ed-8de0-40c5-a171-38cf5375a4b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21426866-5767-4235-b9fa-06e3e447f5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a8ffb1-a901-40dc-ba24-1a8b5208b0b9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720644c8-5c80-44bb-91ac-286930f51336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14c80790-2ad2-4b66-adbf-0f4aee5b5092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ec663a-8237-42f7-955c-13639cb719e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906766b3-9b6c-46fc-8d61-f69f586b6dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca57da2-3f1b-40ed-96bb-3ce0654b1aa2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5df0e60-98d7-40b0-a9d5-0d6aa23f7006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44bda3be-1d25-4f88-9c91-98e236279c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4859467-a97d-40b6-8013-fda845b156f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fe98a1-2868-4234-8122-ea4f28ece03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8487614-f623-40be-ad67-52e32f1fc70b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdf4b5d-4650-4370-b435-b92ba283e04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4493e0ed-8f70-4242-ab3c-2139bae98dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2db114-687d-497d-b64f-d38e025c6fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edea62e-802c-459e-aac0-124d008fa318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3e6777-c0a6-4b70-a35c-07026717ed6d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330af7b3-4846-4f2b-ad45-054f1ef26de8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9053fe8a-b6c1-4dd7-bd1d-83d5f2887797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92339d5b-c5b5-4013-b4ea-43098ae6c2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7932c9f2-9503-4fa7-9b5e-a05729ec10de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d8694f-8d92-43f4-8d40-4a1dbaa9a75a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711bcf0e-0a94-4871-b142-c8b69481cf7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a953f5-947c-42c4-a91b-8dd9f821c6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c48460e-2ba4-45f7-8a9a-944491452da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a51aa6-adf1-49ef-b6dc-77d243b6c495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0aff33d-ece9-493e-855b-9788a8ddaf59",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0701a5-8876-4201-9559-4da09d96bec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59d5d06c-5c35-4b13-ae58-3be052b02a39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc7a8a5-afe9-4b62-a823-28bb81040231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec6440a-303d-4aaa-a721-8b3880590b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc89a5b-1f03-4b4b-877d-97ebb4fc4796",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6089a73f-5a97-4237-a904-e6a1d62e3639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00b2ae4-c272-44e3-ae57-a630dda40758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd10a8d-f495-4b7b-b84f-c88fb93ffbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5140363-a3da-4363-abba-73bd03cc7d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6899fed-7411-45aa-8600-68979d6ab73b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af1a5bf-8712-4db1-b9a1-69becf86d9f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46d2406-3af7-44a3-a128-833148ff1497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f517874-7054-49de-a5c8-34d8d6ed7a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc8694e-8120-49b8-b226-71694f87e06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f157e627-938b-4a55-b18e-f6b0d5c3e76f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec2899c-2726-4cf5-b539-407bb2395807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe618f74-515c-4354-aa85-3b726f1524e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da68443-49dd-4cd1-a8f5-a35b20ef03be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb059662-0472-4ee2-8eb0-50f04415ad19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab36b379-1704-4e93-a14b-52a139b3deff",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6001e7ba-68c9-40fa-b63c-157c49584242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c42ea1a-cf38-43dc-bcfa-3261f1deaaf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbef54ad-2faf-41b4-b147-3869bb33d76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02b0ddb-91d8-482c-aee5-8c586ca654e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d27140-8c3e-4365-b936-f6e4dea88753",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3fcb6a-29b6-473a-b0ec-196abf93421a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803969c0-61ad-4774-b1f7-cd818526a89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac87e07-cd39-429c-a114-bc743f23dce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d69ee3-22ae-4ea5-a62c-e847dfb6cb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d6df7f-d9ed-43bd-9ca1-18ebc1f302c1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216c6ae6-6058-44a3-9f52-8a27792f3e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ca2256-5788-4e07-b2bb-a6d79fb4c75a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "374ee546-96a3-4873-a501-aeedb70e4c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d8c1d8-991c-4c44-9100-1db547e2ff89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8911057-1625-4062-9693-166c9a5ee5e3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad0cf23-bd8f-40c0-910e-9db92a524edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bae2d73-92fb-475a-8bd6-65803be3525f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2612675c-09c1-406f-b40e-4ecb30deff7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e6857c-c08b-4a8c-9176-6d93d4d76670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22851ad1-b19b-4fbc-a6ae-0069fd826afc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8c5c8b-c2c7-4c6f-9cbd-2e21f1fdc42b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912dc30f-66db-4bbe-afa8-61df700b1a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2801475e-f135-48b5-80a3-daf365dbdef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3816ad14-be22-4d17-a2c9-ef9e2ec9c2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43caa0e5-a5d0-4dc0-8fdc-4d792c29e95a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2132f4-3754-41a6-a9ae-09c455f261fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22379bba-2c9c-4973-a23e-e6b35d46cad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8684b931-3fc5-455f-936a-631cbbb69df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b4ead9-071f-4693-9354-83128b1f8570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b82eae8-6dbf-46ba-ad75-180abdbc709a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40fe790-871b-4554-89db-97ab27dd2562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb8984c-ef4c-457a-9a53-1a3f3c2f4b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0cde85-8581-4a39-9e49-149a83cabc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a33a366-f6ad-4a9f-8444-32fc7b0024c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5d39eb-08c2-4988-a5c2-18224fdd89b5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b5f6bc-67be-4805-8f4f-a3805bd29d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f08137-d73b-4c4d-baab-8d77d5d44aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cddbd0-de5b-40fb-a5cd-b2cb88525093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7c23c2-3cfa-4afd-ad4f-61a666a0e708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0767a118-6810-419a-83bc-b357ba9fd337",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe678ea-11ec-413d-897e-1b60449d4948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba8c8ea-16b2-4500-be3b-35319f73de70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95d27b0-5837-4253-a3c2-dcf1c30fb71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75db8c88-721b-4860-9360-3d99a46aacf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da03285-4c78-432a-8c03-5b2ca3dd8941",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9b5432-3390-4663-8fb6-39f5f8265bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5d17ee-379a-4cbf-80cd-70c39e4ef470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "793bb53a-3d51-4885-bc56-c0c3ba2a4c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4e0c91-9a3e-47e4-b460-881482f2e509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c6a50d-36f5-4975-8d9f-7e91a834b8ba",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0868f4-5bdc-47b0-89cb-33e8a352ec20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2e2a95-8829-4f8b-b40a-17124ff866a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddeddce-bae9-48bc-a78f-3bc343e730c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fbd8259-7d27-4f89-96a7-04400cadb929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333772ec-3d24-4cba-be78-fe096fcf7fbd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e235dc44-0fa4-4b24-962a-8a4e14a10eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7660a44f-3df0-439d-a49e-eb0cf823dd83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6857b88-3602-485e-ae97-6b77688b970e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52f270c-7ac0-4c9d-bbee-fa0a3b3eec55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f706ce-0341-4da5-9ae3-d927929b5f6f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58646d9a-19a3-4b12-8df8-5a260dd2fbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2a57a7-884e-48b9-bf43-baf522db39de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5d4682-0c13-4c05-a263-ce1079b72acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb53644-4abe-4c3a-b26d-013050646ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f886a8-96df-410f-a60d-6bb80c01e347",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e09238d-5163-4c71-8c05-23d933f9ec26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd7697a-2b08-4619-a648-2a94c085bf51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6246764-b20f-4874-8d7b-30afb601c094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1916b8e-58bd-4eab-9731-b5450d0f6b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c68fbc2-a9a9-4ed0-856d-91af036a2885",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad2db57-feb0-4641-8e8e-46eed654b541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b59be5c-494d-4134-99cb-0c8c9e408d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7609d298-4b25-444a-9c66-a98bf01619df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346b6d36-5f7a-4c2c-9354-ee74783d29d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcccb76-594e-4d83-b5cb-7d8111789927",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139e8ba5-5fab-4ef0-a575-b236d801d783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d18a108-162c-4e82-b6e5-61109c16484f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246878b9-8af5-4fc9-a496-6067e218146f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd2a85f-c462-4d59-8409-c2dd4c215ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1ec504-2cd8-4123-aaf8-7126662712f0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b472aeb4-e736-4591-a39b-52beef0427f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25a711a-960e-41a8-b1cb-e20055bf9b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20d6d54-5587-4100-b43f-c61360b1b8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef27ad9-d1a7-4c5b-86b9-915013783113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af3197f-84cb-4f82-9e9b-2249054b8416",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc8ee3c-21eb-456b-89c6-5bbad4cd0fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a06470-bec6-41dc-b7ba-7055a2dd4fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9211ca8b-d8f1-4d6e-838c-99a54bd76abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ee3e7b-ccae-4985-a6fb-d9dded49354c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab3b565-01cd-4db2-900d-6c4c3418bbb7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ed7cbc-6716-4a7f-9b59-0986417c18e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f9aa37-c047-45d5-a4dd-f5b147c00086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d9aa9c-5f1a-4bee-b2cd-5b4255cb3145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d54e87-263f-4fec-ab8d-4e0333c9ea05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7d7d30-9eee-442f-86fd-8f8c130d64a3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e36e6f-fe9e-4d7f-b07a-94aaada52cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786fc658-f5df-4c2b-b13d-7668cdf8fd5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "453e7d72-ea17-4349-8855-a593ce67558a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2b47c8-b420-4c8c-b748-14481204f8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eca87f2-c71f-48a0-ad8e-69b1ee74fb12",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dad14b-aba8-4972-aff5-036dc8f555d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef54b56-5bd7-4668-90a2-e43fd1fc7ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45eb597-bd21-4b69-a882-8a32f12acb86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6cd2974-4de7-446f-8b42-f0f287cef07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c325614-943a-48bd-bf99-b4845a9bda93",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d813e0-6da4-4c18-8347-6e43798aa74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "519a8e8b-0306-4b2e-9700-59124d418356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf5ddd6-c47a-4593-9d32-9ca54a75ad58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949ca479-6977-45c3-a7e2-6436cccc6f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72096fa-5c35-49b6-a918-df4919ebd10c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24340e70-fce4-4377-8525-331cce2750a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6769320a-bfe5-4254-93d9-928ff3b76886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef04be7-1b32-4d98-ad76-781bbd8ce588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77a539b-0e00-4d6d-9c75-47a06f807df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a29d5e-c430-443f-a171-da06f152b0cf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea70c12-764f-4a9a-9a33-86a0c8517bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ab2250-3459-45d6-a0a6-edc33a783f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b9b963-3425-411b-b216-46f7ea896fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbab657-d358-4da0-a8ee-8df5b4209713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfb6121-73c7-45fb-8ab7-33e46a37a8e4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed46ae48-af1e-4bd2-9e38-7364921b88ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2b7e9f-4525-4db0-bf09-bacaea8d6ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f45f5b9-39ee-47d4-89c5-0349ca560f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85503740-cbb7-4fbc-8d1b-c90879cc4069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854ec7fa-1cad-41fb-a390-190abc50fc93",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba4c724-0b62-4312-ba1f-4b9e24b12ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d1e4b1-3089-4032-bb6d-6e37ac597e13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec63853-5b69-470f-a3c5-672c06bccc93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117d3bca-7be1-4aea-afd8-131353fd3764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb55afd-08af-41a4-8bef-325d0b4c79fa",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753dbccb-a55f-4f47-b8ec-14e527eab4cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f992fd-6fb5-4654-9edd-d9e9e232ff50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04e0b40-9d6b-48e6-849a-1f16c5205047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505e794e-c4b1-41d6-9dac-06106e684737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa662164-ae9e-4637-9171-c8de579339dc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3425fd9-28a6-4646-9739-8c23b64aa6b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9724da75-077b-4d02-8c53-4f4550c9dca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0033eff1-9710-41a3-923b-bbc1133b1f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ebb453d-fd38-4273-92f8-290eecbd5877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd37c9b-cc4a-4f1e-b044-1c5a4e0b160b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db52ae2-7d7a-435d-9d7c-f8b319e75520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cbd0309-f995-45b8-843f-05ca13bc7e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acaeb55-6d1f-473a-b085-acb23150d395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd73c460-9d22-4c39-9dbc-f3663c12a61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a31080b-5004-4e28-9fc2-23e115e24e3e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac396866-e5a5-4006-a478-7c3138c8940b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85252fbd-35e7-4938-a4c7-e2ee3972a52a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b9d5ae-19c6-4914-8b18-80c25b64c331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9c4545-09ba-4309-85ac-ac8b58c36187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05364e5a-4402-41ca-bc8c-9098fe4cd6f0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db0c869-229b-4eb3-9465-501aa4d84441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d779e51-92ef-42ea-923d-a8b1f3deffc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fac541-ce9d-4cc9-9511-fcd71344e208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5488b05d-0c14-4e0d-b919-3376b343ceca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf056edc-8b72-4384-a57d-5bb7e4fb19f7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0550a4-17dd-40d3-8a73-e45e11176e2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c08a701-5ce4-41cf-9852-8bbeec456c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6133aae-f25b-4ce9-9cfa-3661427e9e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb65f992-468b-4420-a0cd-cb86896ff5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8682a5-eda2-4bae-be9d-f6c7a266a8ef",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298493d4-d925-4084-92b9-30343e45c871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfd0a79f-a5cb-458c-a84a-49d9be8ff9a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34293423-9daa-4679-9a7c-4e4b648237f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6226201-fd38-4054-8902-7a9d8f9b1fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ce6873-69dd-4c31-aa90-3634bf5f9ba5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c470e8-d889-4d53-a552-490f41e9ef83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "062f4f00-3d73-491b-b015-f8d8ec73759c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf31283-af50-42fe-a16b-08f08d41d97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63b9a9a-93bf-4e8f-a5ed-eace588e01e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c39511-66b1-4edd-b2b0-941ac9decbc4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a28a54-e428-4327-801e-4ed1f40c07f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc35eb85-ea4d-4878-8553-a131120dd7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98530cbb-065f-46ff-8d4d-82051f24ea1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829d295d-7fa7-4eaa-81fd-6cb94decb166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af21a9f2-32a1-49a1-afd4-f3b6c97d5bac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70981ab6-2587-46bd-b60d-5f83dae71eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c16367fd-df0b-463f-b7e3-39726463836a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1306a92-a4af-4680-9c34-9936d85c4449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cfa7a1-e30a-4279-98de-6ec42d9fe92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f311939c-b9b5-407b-a5c5-a4cb2a191345",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8cf792-c2e2-40ce-be51-9b7b88430189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6102f3f-f1d2-4ad5-8e66-3087c3306e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee4fcdf-b655-4713-ac9e-4ddc84ad7786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf372556-2ec3-444c-ad40-b34df446923b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc0b406-56e4-41ed-b691-247188a359f0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5af4d52-023a-4518-a8c7-ed65c2f4cc90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e45aa142-715c-49c1-980c-682a36f2519d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc0fec9-a8b0-46c8-b6fb-327bb791a8c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3c275a-eba4-4e22-9401-772ed38aff62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed61ddc4-c1b9-403c-a24a-24dec04cdd5f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e1e267-8e7c-4634-94a4-afeb73b0ae80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "082401af-11e5-444d-94f4-de25abb73a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78c2298-fbb8-4adb-a9f9-bcae8bce6f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6a89d3-6ccd-45bf-a861-5a55b10c63e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e084b3fe-559a-41d8-9794-8167b16d00e3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8211d436-4c92-48c9-9de6-182cbace14dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1cb87b9-33de-46c7-8f11-0ebb9ee90b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec6b907-e820-4c30-9279-2ef0b1d7f2a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99dbf2d-b970-4d50-9111-656237c39465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2434526-e85f-4cc8-a283-fe02812846ec",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5de115a-da34-4911-a0e6-d2bb0607913a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b1ec75-d453-44e2-a114-8990a589d650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd173138-5a2a-4a74-98fc-92ea346fc4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632cdf19-c4df-4567-916f-d8a9eac5ca1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d898ee6-0dbd-4f1b-827d-55647d2cb741",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fd585c-6652-4371-900c-0b693b032305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb0c3e59-8f8d-40c4-bfc7-7325144b8feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "632104d4-d20c-4a3d-8b93-45afcccdbfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ea18f2-0f30-48b2-b3fd-7417dc83510c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca02f612-92da-49fb-b88e-123142e8fe62",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5cf0319-52cc-4758-b6da-7173552dfd3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b8cfe2-f7a8-46cb-8b63-b692cb283462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd40fc9-652f-4e9e-a473-bcc2fdfd4c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f25f56-da85-422a-8193-b24e204e275c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52de69b-dfee-49e7-85c0-f2d377ad0556",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa19d9cf-5171-4aaa-ac33-a9a3f5da0acf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cefbd54e-9a47-404c-872b-ac420ec1e780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6ffc25-7d87-472b-abbc-04ceaa655148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb712384-2b51-4e93-af3f-fcbcbcd7daf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c5e0e4-3384-4451-9e86-dbb81d9c2826",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de81b63b-a778-411a-b7f1-1bb41b487fde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09528b2b-ec56-46c2-b2b7-634574dad55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23c0d01-c0ab-4887-a6a7-b9954c069b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc987969-ee41-4802-8ea2-eaf82a60b66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83465ac0-8a81-4bb4-8e71-67fb53ebf6a6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0699f08a-e809-4c86-92c5-f397142a3c5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68186920-74c8-45f6-aaf1-208c42553b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6173d11b-a33c-42c0-88ef-70d5e622ea1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "011cfbf8-18fe-4b8b-a39f-756a01934edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a14d16-bc44-4fa3-9dd0-59203cce8268",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f818cb-35d0-453e-9fef-65619c4543a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90cdef30-5ef2-45bf-9c40-8457feff9a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2193e6de-603e-42ab-87c2-0cd8e601c054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ec0c64-73c4-400f-92ff-29f9399ff900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967d415c-cad0-4f51-8966-5e1898262d31",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e39512-2fab-4a12-a256-95460bfe00c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "964de613-8ea6-49de-9326-7bddd5c1f793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76668b6f-53bd-489c-81b5-cc6a7f5acf12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d8593c-94bf-4de8-8d5f-12049d7a2afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f503a7a-9d65-4355-b215-7089af41174f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4b40d7-eb12-44f2-9f93-f3153e2c4fe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7c5b132-8cd8-4ec0-ad80-35fc10a11e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abb7555-b827-4852-a3c8-903ed3bc78dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35ba88e-f861-476c-ae76-2da36314e49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dada5cc6-4fa0-4e13-86fd-f1f9e1a164ca",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d87ae73-1b6d-430a-b477-6b1403f8c4d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eed2060-246c-4d62-a12b-a0f7e405fe9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c367274-3809-4151-8105-f583f687e6b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfdea0d7-82e5-457e-8b39-8beeeb7332ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0193bb16-2c98-4b2a-9d75-24acc9f36080",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1b2b8d-7b8d-4085-b8be-e3acb05bb840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "192a0d8a-0e6b-489a-86aa-2444faf981c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51d8391-cdfc-4930-8fe9-11fd92b966c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ef4b21-abd5-4790-9df0-6e05652c947f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0b4b48-1e22-4bb0-92e0-8c0f0d2e2113",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8156cc99-65d8-437d-9e26-1ba6f43fe0c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ba3e521-4edc-4662-96ce-5417efc4b435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e98e2da-34fd-4029-8cea-0d29c0ee83d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbf34b8-dcab-4e59-a482-edb47981a3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5129bb8-a875-4f01-a723-dc664d6d0ada",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35d8888-165e-413d-ae02-ebbb2b085275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4198d42d-0066-41d3-9d57-cbfeb9b65cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f893fd-c294-4306-8ed9-4ee4c210dc9b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a8d4cb-763b-429a-8d9f-c009483797b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe7a136-97c0-4f37-be32-4f7d49f19c4e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63af9304-d390-48a0-8348-9bc21a0fd50b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "729fea5c-f1f2-4032-b81f-c57c73a9b445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2adf263-29ff-4677-b7e1-e054bf3df014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99a8adf-fe44-4e47-8981-a7b2129db661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d5a1ce-d28a-48ab-923e-188681063abe",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5280e2c-cbba-4816-9f66-2ef0047a5390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c6324cc-0ad5-486f-8286-333aba138c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4935bae-e00b-4210-99a1-80ee17464c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dff87b8-48f9-430d-aeed-750f0f913899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f5a0a1-007d-4e99-81e0-5e3dc5d4bfe6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a836fb74-582b-4e57-a71a-5e87e6b0331c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb30fe9b-73ed-4b9a-9fd0-6b5ffc7318c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b7031e-7fed-4575-a639-420f632484eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337ca68a-9097-4508-a2e5-25215dc85fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82015bd-89e8-4ff2-b341-f1507da5e279",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fcba4b-14bb-4211-9280-d0fdf0233bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "019112f1-f4de-4b1d-87ba-b0a17e7fab7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74b6fa8-6927-46f5-b74d-780fb55d5a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ce251e-bd1c-48ec-97ab-d04f066405ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49b19ed-6d5e-4c7d-a79e-1225856e07f0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f5221c-d1b6-4c4f-8a6d-a12f995ae43e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830525fd-84f9-419a-bc54-f8d8a01a5846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7b2f8f-f685-40c2-a52c-d3ca0f49e9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e7f147-fa62-463b-885d-4cb50dcfe1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11111d8-0a02-4378-a3cf-67f1434bb082",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36635c12-0904-4cfb-9c45-e7e4b1806f46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e9dba83-bc1e-42be-9e34-f0494196302d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35536ed5-4a01-4ddd-a0a5-322375710acc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852acb4e-8210-4e36-b3cb-0cfa5f860ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f59db6-e42a-439b-a395-d9efb4680c45",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20ec73a-25e7-47af-98af-a5da8ae3e45e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794ace55-a471-45d6-8727-d7497030df26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33dabe6-2ba6-47a1-8537-97da3502ccdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bfd7eb-0469-4269-b732-f106f0e747be"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b80df1b-0ba9-4bcd-a81c-658c772ea988",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16162b60-b1d3-451b-be8c-29c674979ea4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8fdd29c-09f4-492a-84c7-4e1a6fe4b601",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "705a63b0-bcd5-434a-a4bc-217341e9fcf3"
                    }
                  }
                ]
              },
              {
                "id": "b84f4205-20e8-491a-a76c-d3878fb3dfb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e50241d-730f-4ff5-8e61-83d9bea8f55d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f09674-e4fd-4856-9489-978a7129b92b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "892598fd-d83b-4a04-bea8-52060cc9c122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fdef9a-b3db-4111-bd0a-3a4ef5cbbd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcb0f3c4-2d0d-4f4e-b697-5bad19bc00af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c55200f-3400-4216-99d9-f9fc9511af28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "507e8a2d-527b-494f-be5a-85fca84a10eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7177e31d-a72c-439a-972b-9e9d61aac14d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab58984b-0353-4519-b210-51d85f1ec2e4"
                    }
                  }
                ]
              },
              {
                "id": "f8775913-4a04-40cc-bbad-234666b5a9c6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6256c376-83fb-4934-919f-137da184f34d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587ba16d-4303-44a1-ad10-94b97e50d867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8abcaf24-b79c-4399-a4a1-85ac568b28c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5998402f-86c2-4d86-83b2-a89d4b840a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b0e9ad-796d-4804-bdea-167014e99860"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c2013615-5cf4-41ac-85cb-8eafa7c0ca55",
            "name": "Positive Testing",
            "item": [
              {
                "id": "07314c25-e63b-48ae-b44d-da9b62ece2cc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "541a557b-9406-4ed6-9d02-3ffbcf48fe2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "46a63716-61e8-4543-84b0-31f00b6ab989"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc311335-53cc-4dbf-81d6-d91c6c2c9ad8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad374219-b220-48d7-ba39-fc8612970a36"
                    }
                  }
                ]
              },
              {
                "id": "3e21fb91-b52e-4a7b-8c73-1d5e0495f626",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "405b2bd2-d288-4044-a829-18399ee261e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ce29704b-98dc-43e3-a04a-74347e6b86f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58cef1ad-9917-4e86-b0d0-9df40a689b43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8955732-7ed9-4943-955f-b53e17c24a20"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3ba923b-335f-4c5d-bd0e-a3b74366d71a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c25a33d8-f792-4451-83b4-3c3c8474fbdb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35c2c04d-cc8d-4aa0-b94c-2297f8c887dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f9ce0ac-6bfe-48f5-b0e9-b4afae14af07"
            }
          }
        ]
      },
      {
        "id": "dbaea13f-346d-45a7-b153-f1cedf2e55bb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "462ed9ee-a6bd-4312-8730-29198a329710",
            "name": "Negative Testing",
            "item": [
              {
                "id": "905e772d-d970-49ed-ba94-0f56496dddd4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c45e7747-e262-4c6d-9b5f-f1f516c14d1b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3e47e8-a934-4cc5-8e47-940aa5cc0967",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8c042682-2df7-40ab-b123-43e60d4645f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e535ddd-b81e-4bf8-b191-5e3af7e34ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47d576c8-7665-4ddc-bbae-c17273a8e206"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6db2a1a3-7066-40ba-83d0-e58305a6adf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cbc1ec3-9c27-41dc-9072-e251bd480c8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83056319-4a8e-4ee9-a678-c7ac4353f1bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6f4b72a-de5e-445d-8234-c0b7f1c303b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2167ab56-d020-4f3b-a226-dde62cfd407d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e0007bb5-d15e-425b-913b-c879fb7eaa69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7768e968-5819-4bf4-848b-99260de8f71c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52104f74-c4ec-4d5d-bfcd-05a89f193f9f"
            }
          }
        ]
      },
      {
        "id": "1d0aef9b-3ffa-4745-b653-2b445a78bf20",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2a3fcac7-3989-474e-8501-8936971d19c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2e6199e-5d33-4d7d-bd64-2fcebe194193",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1bf7a9c-9ece-4382-9b7b-d0bf8c16dbcd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d96f80-77a9-4f0a-b8be-36fd834e9b04",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b395ffa3-598c-43ee-b907-9d55d2885026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc80b672-c637-40af-9236-beaa71efcddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fa1eb32-f1a4-45f8-9a8d-64fb68441e60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0ae0f74-1e59-4f4c-8fcd-b6ae90e40817",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "319a7f3e-0300-4b86-9dc9-55d7f435acc3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc6a03d9-e3ad-410f-9572-b807197f2c22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa6c1870-4043-42aa-9a8f-585b5e08eda1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdd1bd82-9be1-406d-ab6f-9907710dd58e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "88ad4723-7886-4e70-960f-ddd5a6b9b937"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ce495f6-5504-4548-b9d4-fd9fc1cd6895",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ce33e84-8e90-47be-a59b-bfee171a7c7d"
            }
          }
        ]
      },
      {
        "id": "b967ebc3-0285-4569-b552-76ee852fdce1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8e711d99-9d31-47e8-a259-4cdfcd6f3191",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2366baa7-4dd2-443e-870e-08c53aa896e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b1b2bb8-14ea-4060-9e67-c2c86904f494",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da449d0-1b84-42e6-b0fe-8da91efb1c85",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdfaf902-68cf-4680-af03-57e34d7ccd8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c23545-ed9d-4f4b-ae04-cb8abfd72785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d5b34c1-375d-440e-a17a-03a1a9511432"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be7886a7-f00e-4ebd-9e8f-117059cbc16a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd416350-758b-4ce3-88c9-07bf6ce5a317"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "576d0723-f5a6-4ddf-833c-3a9c5cab131e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "050c8622-4b82-4998-8ab8-47d8ce924695"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9acf303c-cded-4790-bd49-c8fa8bd2df9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c3673db0-949a-4a2e-b322-3b6b6ad01786"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf76f9a4-a00c-4d1b-8d98-049236bd12ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1e0d9b8-6fad-4789-98f3-94a9d430120a"
            }
          }
        ]
      },
      {
        "id": "8f072494-355a-4217-aa52-06bc35fcbc7f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "264dba8f-5111-4a17-a30f-2eee2c04b862",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7806350c-3fa4-4177-bbb9-10a89e8491ae",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b00f4f84-7ce3-4ae7-b9b6-8757f0703534",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0676e23-cc20-4a5a-963c-30e84dc6efd8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42c55379-4db2-4d89-841d-023c50dc1486",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.21754385964917,
      "responseMin": 11,
      "responseMax": 860,
      "responseSd": 82.68436098720308,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698366773498,
      "completed": 1698366805770
    },
    "executions": [
      {
        "id": "b4badcc6-2548-4fe9-80ac-eee1eafa7a3a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c3c02ca4-c2b2-4e24-b8aa-f89809d0eaef",
          "httpRequestId": "e714d147-553b-45ae-b5d8-8387a4dcb295"
        },
        "item": {
          "id": "b4badcc6-2548-4fe9-80ac-eee1eafa7a3a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d1826a5d-0827-4daf-ae18-1ec73ad21e01",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 0
        }
      },
      {
        "id": "5521ec50-4b4f-4310-8039-15830646e6a9",
        "cursor": {
          "ref": "b7fbce18-13bf-4de8-a496-40311d3a3290",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "79122d9a-5d6b-4951-ab28-15124454f619"
        },
        "item": {
          "id": "5521ec50-4b4f-4310-8039-15830646e6a9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "57cd84c6-2d15-4206-89c6-8eb609ab68b2",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "e425a8d2-8554-45b6-9487-c93403f2e8b1",
        "cursor": {
          "ref": "396e8720-e3a6-4dd0-aaa3-61088cb194a4",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "57381737-181e-4ee9-868a-6fc2db489cff"
        },
        "item": {
          "id": "e425a8d2-8554-45b6-9487-c93403f2e8b1",
          "name": "did_json"
        },
        "response": {
          "id": "1e82cea8-5fc5-4434-868d-88105795f97c",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf9bc3f-56e7-42ff-ad09-04f6e5c98f4a",
        "cursor": {
          "ref": "5de118c0-9e94-488c-804b-201f671f4ccf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b7545dde-3edd-435c-b8bd-8ba5e341637e"
        },
        "item": {
          "id": "daf9bc3f-56e7-42ff-ad09-04f6e5c98f4a",
          "name": "did:invalid"
        },
        "response": {
          "id": "d30572c3-a2be-4448-a14d-672bb93d4a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf9bc3f-56e7-42ff-ad09-04f6e5c98f4a",
        "cursor": {
          "ref": "5de118c0-9e94-488c-804b-201f671f4ccf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b7545dde-3edd-435c-b8bd-8ba5e341637e"
        },
        "item": {
          "id": "daf9bc3f-56e7-42ff-ad09-04f6e5c98f4a",
          "name": "did:invalid"
        },
        "response": {
          "id": "d30572c3-a2be-4448-a14d-672bb93d4a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63036f26-cd37-4051-ae62-c2e4cfe1c5f5",
        "cursor": {
          "ref": "9346a795-21d0-4500-aea2-67f269cc0d80",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ad00fe18-9daf-44ce-bce3-2f964ac2872e"
        },
        "item": {
          "id": "63036f26-cd37-4051-ae62-c2e4cfe1c5f5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "86c0e98a-9c82-4edc-9a54-3b26e05b9678",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7660f629-4c01-4108-9475-aa42f3482209",
        "cursor": {
          "ref": "3c5b09e1-51e0-406f-9c60-d1d069a8fb6b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c5709f91-1220-4077-949e-79476e1d5d3b"
        },
        "item": {
          "id": "7660f629-4c01-4108-9475-aa42f3482209",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d21e56ed-927a-49ad-90e2-dd36b3fdf389",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf0361a-d3ef-40bd-a73b-3d914c5f5ff2",
        "cursor": {
          "ref": "62c3ef50-8a4e-43e7-8883-321692f8e376",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3458145e-5126-4d70-be4a-f78dcad93b43"
        },
        "item": {
          "id": "9bf0361a-d3ef-40bd-a73b-3d914c5f5ff2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8747f2d3-6c37-4aa6-a5e8-072bce61de89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4729b82-2ead-4eae-b011-6a6e651f9195",
        "cursor": {
          "ref": "88bad62f-b6de-40c5-851e-06ec0c54722f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b32db2c-4922-4921-a21a-de74793fd23a"
        },
        "item": {
          "id": "d4729b82-2ead-4eae-b011-6a6e651f9195",
          "name": "identifiers"
        },
        "response": {
          "id": "c3221930-d793-4709-976f-307f24f25fbd",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0000e19-3671-428a-a0d0-2f225226ea9b",
        "cursor": {
          "ref": "7286ebd5-c50b-4ddd-a39e-7de182ac3924",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b3538030-ad8b-4654-9616-205caf182eb2"
        },
        "item": {
          "id": "a0000e19-3671-428a-a0d0-2f225226ea9b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d7557876-58dd-40f2-bf77-535d59264806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b604bae3-e591-4289-9b1f-cb5d8604eb89",
        "cursor": {
          "ref": "fac253b1-79f5-4cee-b376-8830c3e27cf6",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "198f9daf-2675-412c-bcc7-11cc598dcc28"
        },
        "item": {
          "id": "b604bae3-e591-4289-9b1f-cb5d8604eb89",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cabbece5-e1c0-415b-831f-997cc23cc51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8923894-ccf2-4e83-88c2-83ebd7fb8b14",
        "cursor": {
          "ref": "06269111-8f41-4a76-ad7e-5da26cb643ae",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0b2814ea-f437-4401-b22e-fc866b3a8543"
        },
        "item": {
          "id": "c8923894-ccf2-4e83-88c2-83ebd7fb8b14",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "493c7ee6-1d58-479d-b555-82c4e2e744c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6324ee2f-fa2a-49cb-aaf1-0c3c9225f161",
        "cursor": {
          "ref": "6e04d314-04e4-45c3-8e6e-7509344ce444",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5f96f37a-2341-4a72-8a44-5d51a01849c9"
        },
        "item": {
          "id": "6324ee2f-fa2a-49cb-aaf1-0c3c9225f161",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "901254ec-0dfb-480d-a3a7-b1e1b2dbc981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e17f4c4-6ec4-4e43-9309-2e17840487bc",
        "cursor": {
          "ref": "6640feba-65e7-41d7-bfda-185712583f88",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "74d642fb-38c7-4463-9c37-559bdcd8a122"
        },
        "item": {
          "id": "8e17f4c4-6ec4-4e43-9309-2e17840487bc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9f7f965c-9d1e-4e11-bff6-184dfe37d412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10110c6c-b778-467c-aa35-3f727b77423f",
        "cursor": {
          "ref": "c043ee3b-ea7f-45c5-9618-cb69ef66fc15",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "68c0dba3-83e9-4792-9b00-50cb7f3c3323"
        },
        "item": {
          "id": "10110c6c-b778-467c-aa35-3f727b77423f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c35ce0e3-b9d2-425d-9f2e-661aac1ad1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5dbd75-cc02-443c-bc29-a6ddde372eab",
        "cursor": {
          "ref": "b94acc14-eeff-4948-96f7-d411c24121ad",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5e227f2c-405b-4bfb-871d-6d181e26fffd"
        },
        "item": {
          "id": "cd5dbd75-cc02-443c-bc29-a6ddde372eab",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "55bc98f9-d3d2-41e6-8c4c-f4b63b3e6efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349234f1-7688-43ed-ae4d-20d2149fe7db",
        "cursor": {
          "ref": "1c500800-8365-4ffd-984d-1e631d2c9d05",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8dc7a2d7-b3b3-43ab-94c0-7968f085a810"
        },
        "item": {
          "id": "349234f1-7688-43ed-ae4d-20d2149fe7db",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "09f86c20-f476-4d40-b6e9-6ca8f9222607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bc1d92-0433-4539-87b3-d4a363c0392c",
        "cursor": {
          "ref": "cd9cbdb0-e0dc-41f7-9332-ff19e7243439",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2701df1e-82c4-4f59-917a-ea435c7aac59"
        },
        "item": {
          "id": "e4bc1d92-0433-4539-87b3-d4a363c0392c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "87c898f0-6435-451c-b11e-ed25cf6dcb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9928c06b-f208-4e6f-8b77-30cc0e48e847",
        "cursor": {
          "ref": "f36a8b09-4be1-4c44-9453-447a5d95a9fc",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "29b7864a-6874-4229-ae57-82c5e238b832"
        },
        "item": {
          "id": "9928c06b-f208-4e6f-8b77-30cc0e48e847",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "83072350-1a58-4ee3-9106-d20d86016b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e13e30c-1ace-4ede-bfa4-e713ddba40fd",
        "cursor": {
          "ref": "f1c77f1f-c7d1-4f29-be99-cce931d6ddb8",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7bd527d9-36a8-4d7d-a3a7-302b52d35497"
        },
        "item": {
          "id": "9e13e30c-1ace-4ede-bfa4-e713ddba40fd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e658b772-8304-4aca-8618-6c555acdc524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b1621b-ee25-4bcd-9e84-6612a1b5563f",
        "cursor": {
          "ref": "5432bf52-45c8-4d3a-b5c3-f9c41736c308",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f0f9c1c0-a3dd-4568-97f5-58bf354c2ca2"
        },
        "item": {
          "id": "d1b1621b-ee25-4bcd-9e84-6612a1b5563f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "df45b28e-5e8b-4900-9c02-6684233fd7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58f9a11-be66-4068-bbc3-55238f5caff8",
        "cursor": {
          "ref": "72f05f34-6979-4dc8-ab7d-9d34a41a0c09",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ad5b9351-ac10-4154-b668-d00659b64f63"
        },
        "item": {
          "id": "a58f9a11-be66-4068-bbc3-55238f5caff8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "178f4ae8-fc39-4e5c-a2f5-0a5b95ec7237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e59ce9-4ac3-4bf5-a397-b8cf80d7d191",
        "cursor": {
          "ref": "767eb089-baf2-4a71-a4ff-bc7e2d837522",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "46affd12-8b73-4a6c-8906-c6afd159ec0c"
        },
        "item": {
          "id": "63e59ce9-4ac3-4bf5-a397-b8cf80d7d191",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3a694c54-a674-4244-94f9-5127e0c5224c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0d8f9a-8b06-49ec-b2db-1d41ea3fb2c0",
        "cursor": {
          "ref": "f586c4e4-13f9-4113-951e-115e4313497b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a7ee8f30-db15-4925-a1d9-3ef0ab92b958"
        },
        "item": {
          "id": "fa0d8f9a-8b06-49ec-b2db-1d41ea3fb2c0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "94c6e3e5-5821-4aca-a00e-9cf54c2297e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474b2f97-70f2-496b-9c8a-3998d4058471",
        "cursor": {
          "ref": "ef305412-327c-444a-b5b7-7a851c029776",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "638d388b-b975-4d79-913d-7dea7e7675b2"
        },
        "item": {
          "id": "474b2f97-70f2-496b-9c8a-3998d4058471",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c1a27580-61a5-4647-96f4-3f8eb08f8de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2ee94c-589d-415d-85bf-d83d236250aa",
        "cursor": {
          "ref": "21432bb8-3680-4539-af00-c6998d7ab519",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "97c2689a-4870-4d94-bc08-598e47fef2ae"
        },
        "item": {
          "id": "ed2ee94c-589d-415d-85bf-d83d236250aa",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "49260d62-b1f0-4582-a9d3-2dfd02611a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e6ec42-a348-454c-bb9b-8cc8e5f41019",
        "cursor": {
          "ref": "2c840c4d-909b-4426-bf46-e503eebadbd0",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e408db0c-3be3-425f-8fd9-eb87c91236c5"
        },
        "item": {
          "id": "e2e6ec42-a348-454c-bb9b-8cc8e5f41019",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9e4d8be6-19ab-4555-a387-ddd1a009e85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd91be2-df50-480d-b95d-b66080312753",
        "cursor": {
          "ref": "b1784dc3-65c8-4ed5-a0d6-a27c46c4f8e8",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "386bc990-3680-43a2-b5f2-45ec850b50b1"
        },
        "item": {
          "id": "3bd91be2-df50-480d-b95d-b66080312753",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3b6d1faa-20b2-4b28-b781-bb3aad15c626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63df7178-5ffb-404c-9812-8b09afe057c1",
        "cursor": {
          "ref": "a752977d-13c0-46c3-bc67-770fa6332e7a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "afbc4c4c-f315-4830-81a7-058029f2b869"
        },
        "item": {
          "id": "63df7178-5ffb-404c-9812-8b09afe057c1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d577dd56-09b8-4041-a7bc-8016b9b4ebf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521aa64a-a0a3-43a0-82e4-536af995be15",
        "cursor": {
          "ref": "bb30da35-4091-4ef3-87b0-da416f0f12c0",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b872c2dc-7b41-47e5-ade3-089c9fcfe7bd"
        },
        "item": {
          "id": "521aa64a-a0a3-43a0-82e4-536af995be15",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "429442f0-8ef6-49f7-a03d-ef1671e855bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1d73b1-ea9e-467b-a506-eb415d9f7b78",
        "cursor": {
          "ref": "6a7043d8-593b-42a5-ae23-3b8c02ef6e86",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0429e847-6d95-4fa4-9bd4-7711f74c21b5"
        },
        "item": {
          "id": "fe1d73b1-ea9e-467b-a506-eb415d9f7b78",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "85efda01-ed59-4eff-abc6-bac86753d481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df582edd-d83c-4aa7-98d6-fc3387a183e5",
        "cursor": {
          "ref": "a085f2c5-2384-4b25-881f-3dd138031a89",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "63340e43-4fb7-4963-b04d-819537108bc5"
        },
        "item": {
          "id": "df582edd-d83c-4aa7-98d6-fc3387a183e5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8757fe69-eb33-4fab-bf71-024fd955ef01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640db186-b83c-4504-9f76-5586dc637aab",
        "cursor": {
          "ref": "e54affa6-7eda-4516-b8b5-630ea4564491",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "077c057f-2873-4e94-95d3-76e9706d6179"
        },
        "item": {
          "id": "640db186-b83c-4504-9f76-5586dc637aab",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7df653f4-4775-42c4-884a-8c754df0a7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6180adb-1a41-424f-b31b-9a4754ded574",
        "cursor": {
          "ref": "1b08ef69-5ff6-4522-9f0b-88bbe7a0a72b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0bee640c-f3e2-4643-93e7-ae228ef7f59e"
        },
        "item": {
          "id": "d6180adb-1a41-424f-b31b-9a4754ded574",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "252276da-f085-43c5-83c0-9b47e742a277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dae6da9-e555-4006-ac1c-3349425630e5",
        "cursor": {
          "ref": "524d295e-9d5d-4eab-a703-2c99db81b529",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1f5bedb3-c4b6-4780-ac1a-517eff726aed"
        },
        "item": {
          "id": "7dae6da9-e555-4006-ac1c-3349425630e5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "75172363-130e-402d-9620-2612e01ef30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbb8f03-8db5-4f15-876e-210c9fa1cf0f",
        "cursor": {
          "ref": "7cdf1ba7-4946-4f5d-b1a6-c939764a8a07",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "df5fb99e-536a-4bc9-8b91-d9b15c73023d"
        },
        "item": {
          "id": "fdbb8f03-8db5-4f15-876e-210c9fa1cf0f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9b89e5dc-ca35-4356-af69-a8f19bb05fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb04fa64-9bed-4374-b48b-971d3dec90e4",
        "cursor": {
          "ref": "5a486e28-c9ad-4966-a61f-906eadcb7a4d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3e6ab0fa-ff2f-4170-9449-ef0e8eb6c420"
        },
        "item": {
          "id": "bb04fa64-9bed-4374-b48b-971d3dec90e4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0444f817-1201-41c5-a798-991486d92817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb66cd06-6a0f-4f31-906c-83f3c89706a3",
        "cursor": {
          "ref": "d86c2c05-7246-4576-9f6c-a2372b22c121",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5198c3ca-abcb-41ce-afde-d867338f87fc"
        },
        "item": {
          "id": "eb66cd06-6a0f-4f31-906c-83f3c89706a3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a36b8d99-931f-408b-b37b-dbcd5faad6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81cadc9b-933b-4f00-8fed-aa77209a8d11",
        "cursor": {
          "ref": "a736927c-1c6b-4338-9dd6-5e1b586076b4",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b5e0e37e-5ffd-460a-88fa-117791a03302"
        },
        "item": {
          "id": "81cadc9b-933b-4f00-8fed-aa77209a8d11",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "53899e0a-f1a2-476a-b35f-6f83e229ae0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4399206f-987c-4735-8e79-b359ada6c1ff",
        "cursor": {
          "ref": "11b473e6-747e-470a-bc14-adfadf4b82dc",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cb7e9075-668c-4603-b3c2-776f72eb5d05"
        },
        "item": {
          "id": "4399206f-987c-4735-8e79-b359ada6c1ff",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d03444b2-b832-42a8-a1d6-2126203dce8a",
          "status": "Created",
          "code": 201,
          "responseTime": 860,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5febbfae-3ddb-42ab-acda-7b5030a73086",
        "cursor": {
          "ref": "821ad44b-8096-4645-862f-e74dd1f39f38",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d36214d3-2d77-407a-a988-83eec325eeef"
        },
        "item": {
          "id": "5febbfae-3ddb-42ab-acda-7b5030a73086",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d531f7d2-fb05-4a27-a24b-bc6ae43aea16",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "23a8f69a-bd11-4baa-aedc-a1773e7d4f30",
        "cursor": {
          "ref": "f5986aee-ac2b-4adc-8dc2-d71baae6edf3",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3001344e-6290-4430-adbc-c71da8aee16b"
        },
        "item": {
          "id": "23a8f69a-bd11-4baa-aedc-a1773e7d4f30",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f612a2c9-6e20-4da7-8334-1614ae224763",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c14e1ccd-b8d9-4db6-92f7-90ed3abf7b81",
        "cursor": {
          "ref": "05abc5c4-3f01-4383-9465-3636b69c4989",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "422d63c4-a187-41c4-aead-bcc29145387d"
        },
        "item": {
          "id": "c14e1ccd-b8d9-4db6-92f7-90ed3abf7b81",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5d216ef8-f213-4d22-a975-f4edce992323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fc54b9-7e17-4533-a313-3c951a2951ca",
        "cursor": {
          "ref": "c1e958d6-98cc-4999-aa0a-a5cf0e871c8c",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0e219979-760e-41c0-a43f-7e3b47e03b07"
        },
        "item": {
          "id": "b8fc54b9-7e17-4533-a313-3c951a2951ca",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b0dc8910-05eb-419a-8994-5f6317c36c13",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f440946d-3fbb-4e87-9572-672eea93b95c",
        "cursor": {
          "ref": "f245612f-c934-4833-bd68-964e98a577d7",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "08895f1f-fb65-4674-85b4-bed7f7fc2cb5"
        },
        "item": {
          "id": "f440946d-3fbb-4e87-9572-672eea93b95c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eddb3f75-7b28-448c-b1de-732898579ce6",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "972f7bf3-c906-48a6-b969-44ff912109ae",
        "cursor": {
          "ref": "eeca14c6-5f32-4a67-bc26-754a44a9d5ef",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4fa061ce-9296-4b49-ac46-eb58f14a203a"
        },
        "item": {
          "id": "972f7bf3-c906-48a6-b969-44ff912109ae",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ed7b026d-2801-4e4c-8df7-5e483b796c21",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "44e23499-92e0-4443-8ab8-845b8542a8d0",
        "cursor": {
          "ref": "97c51ac4-d860-4e87-ae77-37fa1c8b646b",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a573b2d5-501c-4d57-8054-16a4a6e3ef0d"
        },
        "item": {
          "id": "44e23499-92e0-4443-8ab8-845b8542a8d0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "70371c3a-3f93-47ee-b852-db576609d9a6",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "23c1926c-bfb2-4c33-bbb4-fb9cbf2c56fa",
        "cursor": {
          "ref": "f0688d28-6f5a-4f34-b7fc-0d4ac218e7ff",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1bbe3714-b3aa-4cd9-8359-735e79f63542"
        },
        "item": {
          "id": "23c1926c-bfb2-4c33-bbb4-fb9cbf2c56fa",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a45b1b0b-d549-4412-91b9-7e2161bb808f",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "45d508c0-57d7-46e2-8d39-61262166546a",
        "cursor": {
          "ref": "bf24e7ee-cdcc-4343-b9d7-f1e782b675d5",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ab51e42c-5c8b-42b6-b773-a8dc09d9a528"
        },
        "item": {
          "id": "45d508c0-57d7-46e2-8d39-61262166546a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9e5ea345-c315-4da9-9000-ccb192adc79c",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "282bd8c4-4276-4f55-a59e-973bf1a71068",
        "cursor": {
          "ref": "e6c0de8c-54b7-4e8e-bfb7-29822bf39685",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1ba63a17-d5ee-4572-9615-f0c5f1cc0dcc"
        },
        "item": {
          "id": "282bd8c4-4276-4f55-a59e-973bf1a71068",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2388b4e2-2ecc-4d7d-ae10-f6023059d4cd",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "70289397-0198-4156-b9ca-460c9785b5b1",
        "cursor": {
          "ref": "6725723d-e492-4a68-8e16-bd4a47b2a39b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3e1c604e-5b1f-403f-9246-228d65dd0e12"
        },
        "item": {
          "id": "70289397-0198-4156-b9ca-460c9785b5b1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8ca7d140-3f05-4833-8542-3ce9be5fee8e",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0e45d324-46ef-40ae-86bb-337783d981cf",
        "cursor": {
          "ref": "7e623deb-2011-444d-9539-602240f7af5f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b1b64e92-da44-4a8a-9db1-668928c20cb1"
        },
        "item": {
          "id": "0e45d324-46ef-40ae-86bb-337783d981cf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "31744626-3936-4335-8cec-c8888be88b9d",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9400eb67-3b3b-417d-bb17-3b02ead67c47",
        "cursor": {
          "ref": "94b3eeaa-7f49-49c9-9b26-4c04a5f6c90a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dddf916d-b04d-442e-b094-2188b6f569aa"
        },
        "item": {
          "id": "9400eb67-3b3b-417d-bb17-3b02ead67c47",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5fd606a9-708b-4f78-8a94-3edaa2fd8cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d756411f-ec34-4e7b-8646-0d76126c2e6a",
        "cursor": {
          "ref": "5ed6f08d-467f-4e09-b074-889ff13554d7",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "336b9675-67e0-4e0b-af64-c70b63f801a2"
        },
        "item": {
          "id": "d756411f-ec34-4e7b-8646-0d76126c2e6a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f06bb8a8-13e2-4de9-86b4-08c009c21c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414f56fb-de0c-4604-92df-da8c7de76f79",
        "cursor": {
          "ref": "98def96f-7042-4b6e-a1ef-b991ab622e96",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "533baeb5-1224-4209-95f9-ff46f6343a8d"
        },
        "item": {
          "id": "414f56fb-de0c-4604-92df-da8c7de76f79",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "48ad7424-3c2b-422e-b63f-3fbdce519eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9347626b-59d1-4480-94b8-bd7f4f153f58",
        "cursor": {
          "ref": "9dfab8e2-d068-4f93-99f0-bd290d4df5db",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fe53757e-7386-4dee-9b5a-ceea0819d206"
        },
        "item": {
          "id": "9347626b-59d1-4480-94b8-bd7f4f153f58",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "feac9e9c-ad39-45be-8810-4d9d10c45833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9b286b-eda0-476b-a25f-62c0c4ea1cee",
        "cursor": {
          "ref": "ddc9b356-65f0-477f-b0cd-bb11b8d87fcb",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6cf4ef11-d727-4ddb-a73e-afb798aa4eab"
        },
        "item": {
          "id": "7d9b286b-eda0-476b-a25f-62c0c4ea1cee",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8c84722a-c772-42c0-88a8-115a9b7c3363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad7602f-4470-430d-81ed-f7375d643ade",
        "cursor": {
          "ref": "d9f6621c-88c2-4bd6-b71d-2542c8457213",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a4e6c08a-39f0-4379-b4ca-763a34f2fcae"
        },
        "item": {
          "id": "1ad7602f-4470-430d-81ed-f7375d643ade",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c5917ca0-e3c7-40b9-9696-84b99db977c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d911cfa4-8f08-4a2e-8eec-1d2eb51583b5",
        "cursor": {
          "ref": "2d834ae2-dbb4-490f-9fa3-1c0b1e6fdf13",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3116867e-e2d7-43e0-8699-78d51fd20f6f"
        },
        "item": {
          "id": "d911cfa4-8f08-4a2e-8eec-1d2eb51583b5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b3da95d6-0f11-4401-b833-2f4464bd1051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb08067d-334d-4dbf-9c10-4e0a0f9b5de4",
        "cursor": {
          "ref": "0898cbf7-f702-4191-92bf-430debda1e45",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1c7beca9-d135-4108-ac66-67df330d2826"
        },
        "item": {
          "id": "cb08067d-334d-4dbf-9c10-4e0a0f9b5de4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "58fa2397-d1da-471f-9784-a2b988aaa587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c826b0aa-92bd-44d7-b245-c637f2c3ceac",
        "cursor": {
          "ref": "51c249be-622b-4b38-a233-c0355f239053",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "af8e02b5-7bb9-4c8b-9bf7-ec84f8320fbd"
        },
        "item": {
          "id": "c826b0aa-92bd-44d7-b245-c637f2c3ceac",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "307a9c3b-ef10-4a06-92a7-29e9fce8d7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cade1fe8-4617-4098-b249-4d43b291af1b",
        "cursor": {
          "ref": "dd1c8a1e-6c7d-46a7-a74b-f1fd6f8454d3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "dc80ef8f-b39f-4c04-a586-1f7dc717358e"
        },
        "item": {
          "id": "cade1fe8-4617-4098-b249-4d43b291af1b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "68fae1a1-d56e-4d0a-9a20-33bb4cf7506c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceed385a-54c8-49bd-b432-ed6c4eb2886a",
        "cursor": {
          "ref": "03671d4a-01af-433f-9405-e7558702b432",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "04d0fe8c-48a7-486b-87a1-468c13b8a33c"
        },
        "item": {
          "id": "ceed385a-54c8-49bd-b432-ed6c4eb2886a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6e6a1bad-ff1d-4a69-8d84-db286627458e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb44da0-4bad-44c0-8123-f2ebb492a482",
        "cursor": {
          "ref": "8c96bb5c-de89-4f59-8017-73614c6c283e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "376ac41d-7a25-4e8b-9536-8d21c772168b"
        },
        "item": {
          "id": "1bb44da0-4bad-44c0-8123-f2ebb492a482",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e50c679e-a642-42c4-8468-372cf6db237e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60da0aa0-9797-40ed-abfb-82201226e4b5",
        "cursor": {
          "ref": "925d116f-39e5-4a12-845e-b370dff97314",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "455ada27-16da-4ba0-8c30-d038ffccd352"
        },
        "item": {
          "id": "60da0aa0-9797-40ed-abfb-82201226e4b5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5f9536c7-3bc4-4da2-9674-febaed3990ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec7bb56-9fa5-46aa-ac19-180347fa4ecb",
        "cursor": {
          "ref": "5d730e18-4fd9-4f76-a8e4-8e2c66927fdb",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c40b6138-47c2-48e5-accd-fbe65148a8be"
        },
        "item": {
          "id": "8ec7bb56-9fa5-46aa-ac19-180347fa4ecb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7e1e4b91-3d82-4e00-b85b-f180e7778838",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8f260e8c-6f37-4b2c-9df2-47363322c58d",
        "cursor": {
          "ref": "b7fdd6dd-4941-4f49-8ce9-6599851e17a7",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8b2e967d-9135-4139-88f1-dad4c7e4770a"
        },
        "item": {
          "id": "8f260e8c-6f37-4b2c-9df2-47363322c58d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "45afed4a-beb1-4b8d-b5db-938a174fdbf9",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b8ed88ea-06cf-4e25-9b34-16a1bd5e8767",
        "cursor": {
          "ref": "7230be92-d9a6-4fb5-8a39-3a6eb07fa519",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "26f6164e-e818-4313-8c81-73e95081d3a5"
        },
        "item": {
          "id": "b8ed88ea-06cf-4e25-9b34-16a1bd5e8767",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7267571d-ff55-4c75-9bf3-408a2f73487e",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9cadaa10-22b7-4abe-ad15-ef15a97ae10a",
        "cursor": {
          "ref": "fb6ae196-da96-4ed6-9862-11ca4f8a944e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c96b312c-c498-43e2-ab1a-de7271caa76f"
        },
        "item": {
          "id": "9cadaa10-22b7-4abe-ad15-ef15a97ae10a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e5aff1cb-9dfb-4f3e-bf83-683bf656b1a9",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "97efb6dd-ae68-420d-8c41-6e70f308c2ce",
        "cursor": {
          "ref": "fe88af9d-16fa-46df-b9f2-25714e6c62f2",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "015d027a-6731-4664-85ec-2fe40779b223"
        },
        "item": {
          "id": "97efb6dd-ae68-420d-8c41-6e70f308c2ce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9886e82a-3eca-408c-ae86-1384d968758d",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a96255e4-7d6e-4cec-8ef0-12e3a169b502",
        "cursor": {
          "ref": "71d80033-38f0-445e-8907-6f4796e09ec6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "15be97ec-6258-40e8-aa29-5620c6ae9d65"
        },
        "item": {
          "id": "a96255e4-7d6e-4cec-8ef0-12e3a169b502",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d8e9efdf-5d18-43be-84ec-3a2edd12c643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b32b2b7-ca6e-4894-974e-3ee4ce9cc6db",
        "cursor": {
          "ref": "ccfdf63b-2113-44fc-b87a-ec70b293c430",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ea90d744-bf65-4300-9e9a-d4b5daa26362"
        },
        "item": {
          "id": "4b32b2b7-ca6e-4894-974e-3ee4ce9cc6db",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5f74b636-0990-4767-a11d-8d202951abcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74592948-8a3e-4048-b697-47b4bf86301c",
        "cursor": {
          "ref": "6862275f-19d4-4cfa-bfd7-790d65239d3a",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f5e6018d-2271-4ac8-ad58-cc01fdbea3a3"
        },
        "item": {
          "id": "74592948-8a3e-4048-b697-47b4bf86301c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b7ad7006-ac6a-4670-ad0c-25785b9bb660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0c1b28-b121-4f58-b2af-ea3ef6952998",
        "cursor": {
          "ref": "bf37bc95-8f11-4673-b919-8c6969dfdde5",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8c354211-984b-4e2f-989f-6eb5f7d07e3d"
        },
        "item": {
          "id": "bf0c1b28-b121-4f58-b2af-ea3ef6952998",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d0096079-651a-4696-99ae-6ea21d6a6265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515de7bd-97aa-448a-9a2a-6463ed5bec04",
        "cursor": {
          "ref": "0930d520-4990-46d0-8ee5-306a3e5c6c70",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fe939678-04fc-482e-9185-3e5bab55d0b3"
        },
        "item": {
          "id": "515de7bd-97aa-448a-9a2a-6463ed5bec04",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "05e8c89c-ab73-49e7-9f3c-2612d2f63f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8f4e72-b501-4076-a131-b6e019bd81ca",
        "cursor": {
          "ref": "7b16d6c9-d67f-40fc-8a3f-c2dcdd0e8203",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6d9ba312-8d29-47f5-8015-c5417b94100c"
        },
        "item": {
          "id": "bc8f4e72-b501-4076-a131-b6e019bd81ca",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6a0480fb-9b61-455c-acd7-91b16423a5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e2b6c7-1be7-4f1c-90db-d4306de8b9fa",
        "cursor": {
          "ref": "6f266be2-7103-4d15-8515-6199474b4a34",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "42690646-a67c-4e2a-9f25-c0c53b748183"
        },
        "item": {
          "id": "33e2b6c7-1be7-4f1c-90db-d4306de8b9fa",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8a4f7d0e-170c-419d-9fac-ae7cfa889288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2875f48-f9d7-41f8-8b20-cd5c0bef4794",
        "cursor": {
          "ref": "d50cf413-e710-44ea-ab00-b894f6625cd1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "98c1d7d2-c50e-41fe-9546-8aa829b71221"
        },
        "item": {
          "id": "a2875f48-f9d7-41f8-8b20-cd5c0bef4794",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6cd2fb62-278d-448f-bd09-977020bb70f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555efc36-96f1-4e04-ab1c-dbd8ca13b72b",
        "cursor": {
          "ref": "bc149beb-b1cc-4932-9b82-7faab2a30d9e",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "76ca505f-0498-4e17-a8e1-63e7106e994f"
        },
        "item": {
          "id": "555efc36-96f1-4e04-ab1c-dbd8ca13b72b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "996712fd-9522-460a-bc63-8e74090c8f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6636f9-4376-486c-8653-6ef7fd1b383d",
        "cursor": {
          "ref": "a3914298-b438-435f-a5a5-8bd890e11c32",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a87a73be-9702-447d-9e9a-0bd092014c4d"
        },
        "item": {
          "id": "6f6636f9-4376-486c-8653-6ef7fd1b383d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "316b3a94-a50e-471a-b9ad-4689067f92d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d1eb67-b078-49ac-9646-80359309234f",
        "cursor": {
          "ref": "18e418f8-f9ad-462e-86c4-e04e9118942e",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7b21cb12-ef0b-41e0-bf3f-7b6a3c037c03"
        },
        "item": {
          "id": "48d1eb67-b078-49ac-9646-80359309234f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f787f996-56ac-4587-81c6-2dfb8d0dfe4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77e7dab-2f2a-4f60-b8b4-ae3df0f74e3c",
        "cursor": {
          "ref": "961f0185-1354-4b74-8acb-e006e6fb9f9a",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "928b195c-e685-45c5-a3a1-fb14e87f8284"
        },
        "item": {
          "id": "c77e7dab-2f2a-4f60-b8b4-ae3df0f74e3c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c57c512d-7d4a-4f47-9785-2edf59677572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cbdfa80-1248-4803-b593-21eb861e395f",
        "cursor": {
          "ref": "0f885fa3-4d64-4960-88c5-2978512354e1",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0a3ccf3b-9bb9-4c43-94e7-0996906130c0"
        },
        "item": {
          "id": "4cbdfa80-1248-4803-b593-21eb861e395f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a8688f65-58f8-4a52-8c99-8cf96aa08864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47170bc4-8b44-432a-88b9-d4e34f0c98d5",
        "cursor": {
          "ref": "b8985e1c-90ea-49b8-9138-728cdfc40dc4",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5de0d640-cf8e-4b05-80fc-220dadf0bc41"
        },
        "item": {
          "id": "47170bc4-8b44-432a-88b9-d4e34f0c98d5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "834a4a0d-4aa9-4b2d-bb14-7f4c107cf604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d76fde-1b08-4d5e-aeb9-eff862d098ba",
        "cursor": {
          "ref": "a2a11e07-6523-4e10-90e6-65a8a07dac3e",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b7969e7e-6600-4d81-9bab-939b20184bbd"
        },
        "item": {
          "id": "a0d76fde-1b08-4d5e-aeb9-eff862d098ba",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8612fb59-07a8-47de-b54b-a4d0512d555e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d07ec73-916d-4781-88ff-41eadf54aff1",
        "cursor": {
          "ref": "b46c9f97-b66f-43c9-bc18-4001b4189dc0",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9076939e-9a52-4b79-8f7c-39ebc85ce804"
        },
        "item": {
          "id": "8d07ec73-916d-4781-88ff-41eadf54aff1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c76cfe46-d97b-417f-bd66-c8a55d65b151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f4299f-65a6-4492-afcc-514f545696ca",
        "cursor": {
          "ref": "49c84fcd-b5e5-4502-a144-13b247ec71c8",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d3f09e4d-a4e4-4c9b-930d-450456dba2b6"
        },
        "item": {
          "id": "94f4299f-65a6-4492-afcc-514f545696ca",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4b2f3464-beb9-4e14-b2b4-f8f1361218e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201f3fc1-cc00-4deb-b41c-ab488c201808",
        "cursor": {
          "ref": "44cc290c-488a-43db-9b54-f54928b302e9",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "741bd590-ec01-48b0-98c8-61b8597e2979"
        },
        "item": {
          "id": "201f3fc1-cc00-4deb-b41c-ab488c201808",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "45cf7c97-be79-49b0-930f-891b062457b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cea1ce-8494-4d8e-8ef0-088296ecae71",
        "cursor": {
          "ref": "582cfef3-a4c6-4583-99a9-deff6dcdeba4",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "670549ff-6794-413c-bb6f-2557d15c3d44"
        },
        "item": {
          "id": "f0cea1ce-8494-4d8e-8ef0-088296ecae71",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a72e41a4-18ea-48e4-b54e-d35a2128b8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af8d79b-16d9-4ec9-97ba-e3638cb9ffea",
        "cursor": {
          "ref": "0a99bb4b-f2a0-487b-8c27-d4257d589e63",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "85e9274a-413e-4968-a0e5-e6cec747c8f9"
        },
        "item": {
          "id": "0af8d79b-16d9-4ec9-97ba-e3638cb9ffea",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "252ae5bc-b6db-454a-a303-ebda8a399bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66dc95b-9610-420f-979f-4fba110d43d7",
        "cursor": {
          "ref": "1e017ebd-42c4-405f-979d-db133f585b6d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1aebf64f-6e9c-4189-8538-bbafe4b95c2b"
        },
        "item": {
          "id": "b66dc95b-9610-420f-979f-4fba110d43d7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4d785156-7450-428a-b319-04f5d1b15d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4782955c-3a51-48f3-9b02-fd26d56b5f03",
        "cursor": {
          "ref": "2646d8e6-1004-4846-a508-d3e0302d2d52",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c3a68204-e6da-4813-9b8f-64ea7e12b96a"
        },
        "item": {
          "id": "4782955c-3a51-48f3-9b02-fd26d56b5f03",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "35683285-983e-4a60-9607-91d9f07109db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a99284-e677-4294-bdca-c5f4ea7e8a03",
        "cursor": {
          "ref": "e71d1300-d729-4641-bfa2-6eab690e3232",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "864027ab-4198-415e-94e1-74cb6a3fd6c6"
        },
        "item": {
          "id": "b3a99284-e677-4294-bdca-c5f4ea7e8a03",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2471706f-1aaf-4851-bee9-95a170487d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e886e0-32a2-4a16-8ff5-5b7b1b35f875",
        "cursor": {
          "ref": "e19bceb7-947c-4a30-ae88-eff5e32fc830",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "dc59b6fd-d7be-40f6-bf66-142e7f81ac9c"
        },
        "item": {
          "id": "11e886e0-32a2-4a16-8ff5-5b7b1b35f875",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f2109a06-bb79-43a2-9086-5a8b5e105dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870a0d0b-667d-4af4-bd41-0e7c5cc6218e",
        "cursor": {
          "ref": "34f69e61-65cf-4ce4-a089-b4d5ea7fb646",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e71c9199-3758-40fe-bf44-1214724a1fbe"
        },
        "item": {
          "id": "870a0d0b-667d-4af4-bd41-0e7c5cc6218e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "24bce903-1385-4f80-b46c-2f3591c4e7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29e6bfa-cc86-4cd3-a8b2-1fab8008a121",
        "cursor": {
          "ref": "746700a7-ec0c-49ec-b206-617a62f647cc",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0dc0b67e-4ed3-4e0c-9f42-aa816154a8cd"
        },
        "item": {
          "id": "f29e6bfa-cc86-4cd3-a8b2-1fab8008a121",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8188ae08-7c6b-4b19-a1fb-5c9c9e81c3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc61319b-e959-4cad-a762-b077067af071",
        "cursor": {
          "ref": "cd60bd7c-8306-4a88-bf5b-ec2e26690a25",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d55c3d7c-0e0f-4a77-93db-853a5b4a27d5"
        },
        "item": {
          "id": "fc61319b-e959-4cad-a762-b077067af071",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "259744ae-a820-439e-b9f1-e3a53be36de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd069eb0-11d5-42c5-9b62-210b4ba59f66",
        "cursor": {
          "ref": "ab1afddd-6317-4c60-8196-582a780d5202",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2d8d6af0-7533-4f42-82c7-a2c0825390a7"
        },
        "item": {
          "id": "bd069eb0-11d5-42c5-9b62-210b4ba59f66",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0f2720a5-9a9d-4ce1-bc35-6cd08785f2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c73ba97-5333-4cce-a072-aaa19fc8ec12",
        "cursor": {
          "ref": "6efb715c-50bc-4dad-b7b6-2f0d768275ba",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8971abd9-e1be-432b-b237-ae062a2e76f0"
        },
        "item": {
          "id": "3c73ba97-5333-4cce-a072-aaa19fc8ec12",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c35217c6-a0c7-43a2-889d-d8e98fe9a87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28e0638-13ea-485d-82dc-c24d876baff5",
        "cursor": {
          "ref": "2240f2f7-c776-4a2e-a354-008921868427",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e56651b0-7c20-4fd2-8835-b75a89774274"
        },
        "item": {
          "id": "a28e0638-13ea-485d-82dc-c24d876baff5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a1557f73-e055-478c-9860-0251d7ffe98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201dbdee-9036-43e9-8194-bebea81fc19c",
        "cursor": {
          "ref": "94c7fd0e-b108-41da-80a7-06e376f5c684",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0fb846c4-85d6-4552-83e2-0b6185026e97"
        },
        "item": {
          "id": "201dbdee-9036-43e9-8194-bebea81fc19c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "094f989c-6ddc-4f25-9c84-e44bad74be4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1037257-c2b1-4f5b-a189-9c20c17f0b5e",
        "cursor": {
          "ref": "64b22dae-7482-4e5b-850c-ce18ae5535f6",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "befe94fa-f899-47bf-b57f-b7a7b45fff83"
        },
        "item": {
          "id": "b1037257-c2b1-4f5b-a189-9c20c17f0b5e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5af460eb-d5e4-4cbb-8085-c8cd16ed5651",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f436d9-7044-4153-8924-0c6ab4fbc5cd",
        "cursor": {
          "ref": "a8bafb4d-009f-4745-b7bc-d748fec83347",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a84174da-4982-4c33-815f-1b6663f71663"
        },
        "item": {
          "id": "24f436d9-7044-4153-8924-0c6ab4fbc5cd",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9320e63d-1d43-48c7-94bf-bc0addcb3bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "838693e1-565e-453e-868c-965279c81d74",
        "cursor": {
          "ref": "28f5f3cf-61d5-4b0d-a649-e37d088ba554",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "dbd7aa68-c054-4551-8fd9-a6be2037f137"
        },
        "item": {
          "id": "838693e1-565e-453e-868c-965279c81d74",
          "name": "credentials_issue"
        },
        "response": {
          "id": "82bcb5d0-6a0d-4fa8-b94a-b362fe55f173",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "832e4e34-d5d5-4f15-b087-ed4ceb572299",
        "cursor": {
          "ref": "104a703a-edab-48f9-aee7-2deb62cafb33",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0e4d57bb-541d-4154-8db7-7f7e10f26897"
        },
        "item": {
          "id": "832e4e34-d5d5-4f15-b087-ed4ceb572299",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "374ef723-7e44-41b1-8855-dc23b6d82c5c",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba409ae-5588-467b-b7c5-d5563c088d1e",
        "cursor": {
          "ref": "5baf0125-804d-4594-a11a-48e179b41910",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7566ee86-5663-4b17-9526-749a6db54648"
        },
        "item": {
          "id": "cba409ae-5588-467b-b7c5-d5563c088d1e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6b6d7f73-43f9-4c27-9500-7dee91e93171",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7419d9-fb0c-4368-8ddf-c8fca707a027",
        "cursor": {
          "ref": "225b0f83-1089-4ebb-acf7-2ece555dfcdf",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7c844ace-262d-4e6a-8107-071fb7f8f67c"
        },
        "item": {
          "id": "bf7419d9-fb0c-4368-8ddf-c8fca707a027",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e235cf3e-891d-40e9-b493-4e3c5c76a55f",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afa68e1-4358-468c-97b6-eec902141ea6",
        "cursor": {
          "ref": "118de058-f3e8-42e8-b5f2-4ea437133794",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1336f5dd-da94-4f12-b8e0-f10da40d147d"
        },
        "item": {
          "id": "4afa68e1-4358-468c-97b6-eec902141ea6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cb50226d-14df-485e-8848-94a2373ca3eb",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-27T00:33:09.308Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-27T00:33:09.308Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "114e4565-3502-4da6-b415-14c31b16ca6f",
        "cursor": {
          "ref": "12ec8c58-3b8e-4ed3-b4f5-0b3cc8dc192a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6cc1d0b9-fbd1-4dd3-93b7-933b39546096"
        },
        "item": {
          "id": "114e4565-3502-4da6-b415-14c31b16ca6f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d60e095f-fc84-4e1b-a25b-cd8d5a53ff73",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff485cbc-5b3f-4b87-894d-4460e8a52b22",
        "cursor": {
          "ref": "8647c944-ac65-471d-b670-6e3f25ab53d6",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "eb222638-bc1d-454f-b9f3-ff8b6a507bb1"
        },
        "item": {
          "id": "ff485cbc-5b3f-4b87-894d-4460e8a52b22",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3c880579-1229-4622-b07b-27464671a8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113a3f1c-8754-4f8d-a437-3d619f5e8df0",
        "cursor": {
          "ref": "493c0992-e945-4d45-8ee5-8d86bb406363",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "732e2b2c-ae5c-45f9-a55d-deebb5bd3ba1"
        },
        "item": {
          "id": "113a3f1c-8754-4f8d-a437-3d619f5e8df0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e208cb5e-a4f4-4040-85df-eec320262550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed5636b-13c2-4f71-a1a2-ebcfeef1ec52",
        "cursor": {
          "ref": "031d0a3f-831a-40be-8091-2bf01a327d70",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "15942281-0de7-41a0-85c4-82251b18fd2d"
        },
        "item": {
          "id": "4ed5636b-13c2-4f71-a1a2-ebcfeef1ec52",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b5100221-7be9-4b95-8a33-978ce52cfefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cee2ec3-0f3a-49ac-a1b9-145f0cb26003",
        "cursor": {
          "ref": "15eb37a1-e6e1-46e0-b8eb-610a649d43e3",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b923e921-5747-4360-8502-05e0eab5e1ab"
        },
        "item": {
          "id": "4cee2ec3-0f3a-49ac-a1b9-145f0cb26003",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9be5b9f0-9ef4-4c53-a3ed-d1654dd96473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d054890-fe92-4efc-a411-a7c66e5491cc",
        "cursor": {
          "ref": "4e6dd2e8-abad-4013-b799-82573d6ea451",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "acc45cfc-6f80-409c-b40f-038788ff065b"
        },
        "item": {
          "id": "1d054890-fe92-4efc-a411-a7c66e5491cc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8ad5b36e-cb83-41b8-8893-e61f3f862d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c454ce-6bba-41c5-af54-257b08b347ad",
        "cursor": {
          "ref": "5129c385-b8c1-425e-bce7-08c9f08428da",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "12bec7a7-b0a0-4c85-a2fb-6251c6dd9674"
        },
        "item": {
          "id": "75c454ce-6bba-41c5-af54-257b08b347ad",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "21eea701-2b12-4ac8-a56b-ce5e7898f391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f57f91-89ba-448a-a173-81720aafebf3",
        "cursor": {
          "ref": "bd1bd773-6a77-4128-a79f-42df91e40bd7",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6a6ae3c8-d0ed-4d86-83e0-0f2f957a57f1"
        },
        "item": {
          "id": "11f57f91-89ba-448a-a173-81720aafebf3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0a4a367d-fe50-4c4d-8168-c8e3e65ca9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c220640f-cd73-4994-aa2d-b7d8471299f6",
        "cursor": {
          "ref": "3bfc953e-5272-4681-b519-f016ddcc5e49",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "65627cef-3eb4-4078-a450-692f499dc3cb"
        },
        "item": {
          "id": "c220640f-cd73-4994-aa2d-b7d8471299f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2c3e21c1-0aeb-4e2d-ba07-166ba027bb78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2daa876-f1f3-4eed-8879-620c4214a452",
        "cursor": {
          "ref": "fc1cd622-6afa-49b1-ac3b-6e8e1172d171",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9fc5b377-8329-491d-a1fc-0c11a4d81123"
        },
        "item": {
          "id": "e2daa876-f1f3-4eed-8879-620c4214a452",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8c303965-cfb7-4af7-8d7c-5835a689cab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a3fb8e-0c28-442d-8524-9f6b9b679ee7",
        "cursor": {
          "ref": "35ab04a1-8f66-40d7-bda5-b524c9244238",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e03c42b3-b8fa-443a-8389-13c7af45755c"
        },
        "item": {
          "id": "e2a3fb8e-0c28-442d-8524-9f6b9b679ee7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "48662969-b53b-44f8-be98-11cec251225f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53f3d4c-5f4c-4ec4-b9fa-181f701b6492",
        "cursor": {
          "ref": "fed411fd-c307-48a9-9e62-ad2f9371c0ac",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8fc7a670-8054-436e-9163-58e7084c0cda"
        },
        "item": {
          "id": "e53f3d4c-5f4c-4ec4-b9fa-181f701b6492",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2955840a-d85a-4054-a24d-b03f24637aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8caadd-b2e2-4330-8340-dccf3b0b9438",
        "cursor": {
          "ref": "2469d3d4-0902-4e66-96c9-da7643760d8d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6abc73fe-adee-4f52-8cda-fc387e3a22e2"
        },
        "item": {
          "id": "3f8caadd-b2e2-4330-8340-dccf3b0b9438",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fea81a31-1d45-4a7d-b6de-6020fd26b329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb3fdc3-d2b7-463e-9ba9-cd193975aede",
        "cursor": {
          "ref": "0d9a3176-0cce-4bbe-9eb0-33cadc470424",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4cfc4a70-8ae7-4ef9-b48a-81ad39faf24a"
        },
        "item": {
          "id": "bfb3fdc3-d2b7-463e-9ba9-cd193975aede",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f694c1cf-4a79-4ffb-a779-d74e0d342f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2d7583-ee83-407b-8b83-5ec5e26dd7a1",
        "cursor": {
          "ref": "fc419ee7-a758-4906-b18c-cb791b94870c",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "36bf57e3-4c54-4b69-aaa4-4e5e80b92d7e"
        },
        "item": {
          "id": "3c2d7583-ee83-407b-8b83-5ec5e26dd7a1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "95d0b1e7-3574-4743-98c1-568bbd3ba980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2d1ad5-afc3-4eb6-8a13-7088d8393ced",
        "cursor": {
          "ref": "4be16603-4941-41a7-a8d4-72e0c6166198",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "24e4c9bc-0e71-4665-93c3-c037e16404e8"
        },
        "item": {
          "id": "7f2d1ad5-afc3-4eb6-8a13-7088d8393ced",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "be0fd997-55fe-4134-932a-cd26e8bb8e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e494b2-d8d2-473a-a5c0-1ae6e4ab1648",
        "cursor": {
          "ref": "03dab7e8-ace7-4d4e-86d9-a633c708ca97",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "571e91a1-36f7-4d2c-aa10-ca2a7760ea22"
        },
        "item": {
          "id": "78e494b2-d8d2-473a-a5c0-1ae6e4ab1648",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aa714491-4ede-4a41-a7ef-07923ff265a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e14db5-ff89-4f82-9632-ec55ff893988",
        "cursor": {
          "ref": "6d3633ee-2257-493d-a11c-67ef7126f70d",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5261c136-3822-4e78-9104-15794f40cac2"
        },
        "item": {
          "id": "b1e14db5-ff89-4f82-9632-ec55ff893988",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9afdc770-72e7-44df-9aed-3f0237936027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6354efa4-2c48-4ed8-b4ce-0149e298aca9",
        "cursor": {
          "ref": "67a7c28b-96ac-4135-b30c-c46f502b2859",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e98bc09b-0f4b-433f-9195-55440af71699"
        },
        "item": {
          "id": "6354efa4-2c48-4ed8-b4ce-0149e298aca9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "03f9b481-f0e9-4645-9382-0393fe1276b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ac3fe2-ce04-4f26-bad3-6dc4d2bca4c6",
        "cursor": {
          "ref": "6a79a728-ab1c-4888-93ea-ffcbdfe231e7",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2936d10c-cc28-4c1d-897a-90588e362135"
        },
        "item": {
          "id": "07ac3fe2-ce04-4f26-bad3-6dc4d2bca4c6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a9f07f46-03f6-48d0-aa9b-2b03d3d1e009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e8f5f4-08e1-4059-abf1-88986fa847e5",
        "cursor": {
          "ref": "634d59b4-1864-4a29-95ce-73cd8ae4cda8",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dac37913-fe2d-48dd-bdc7-4791225f25e1"
        },
        "item": {
          "id": "a9e8f5f4-08e1-4059-abf1-88986fa847e5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5802cd24-19ec-40cd-8514-3d7557f46ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb39aa16-bec9-4220-8f42-b83e12164b89",
        "cursor": {
          "ref": "9cd2503e-2f36-486a-9b17-7387e4caccef",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "21809ba7-df16-460e-813d-db5e38924284"
        },
        "item": {
          "id": "fb39aa16-bec9-4220-8f42-b83e12164b89",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "61c31be4-2099-47a2-ae93-219f73d2af21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62d9191-8630-4b1e-a2da-fea8abeae325",
        "cursor": {
          "ref": "f0d6e145-821c-4cee-b4e6-75cc1d882d6e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3b8a8372-fbcc-4bfe-b17e-91d087e64854"
        },
        "item": {
          "id": "a62d9191-8630-4b1e-a2da-fea8abeae325",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fd414efe-496a-4fa1-880a-e89a77dcfbce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69533b8-9ac7-48f7-9641-15b22d1e71e0",
        "cursor": {
          "ref": "3a72c229-cc07-49fc-b2e2-9fa854accc8a",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "49699c3a-0449-49f1-93ea-4c045858a2c1"
        },
        "item": {
          "id": "e69533b8-9ac7-48f7-9641-15b22d1e71e0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fc80bca5-2381-413e-9605-c1354a562d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2b6c83-2b9c-4d96-bb40-3d8ff1527e6c",
        "cursor": {
          "ref": "e773553c-aebd-4b53-afe9-1af8e2d6b3c9",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "28dbd786-b339-48ef-b40d-d7802ae6d96f"
        },
        "item": {
          "id": "fc2b6c83-2b9c-4d96-bb40-3d8ff1527e6c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4d4b1ecb-ce69-4fee-87fd-b378e15a1dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00305baf-9816-4070-880b-b8298bd15236",
        "cursor": {
          "ref": "e3c9f3a0-a812-42a5-8300-a77dc7c6998d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "32adb8ce-a133-465a-9a5e-39490f40e48c"
        },
        "item": {
          "id": "00305baf-9816-4070-880b-b8298bd15236",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2e7b7e5e-71f5-40ba-a232-d271b7ba5aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf44804-e978-4700-83a7-23ea040f3053",
        "cursor": {
          "ref": "0aba0c07-842f-4de2-98d3-132fe9e9e722",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b6a1ed90-fec6-4c23-8052-9c1e1fcc6c44"
        },
        "item": {
          "id": "cbf44804-e978-4700-83a7-23ea040f3053",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2be94662-e7a3-48fa-ac88-fd003a7abb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddb19c1-72b6-44f7-8f54-4dcb187d2ba1",
        "cursor": {
          "ref": "a383ce3f-bf93-4ade-8839-f06a655da8a2",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6a6d4f74-5c46-4a47-838c-1a35b6414b0f"
        },
        "item": {
          "id": "4ddb19c1-72b6-44f7-8f54-4dcb187d2ba1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b1bfc1e4-c442-4459-998e-490f3695ca8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fe7025-505a-4cf7-a22e-0eca4eda434d",
        "cursor": {
          "ref": "e9574e0d-9f30-4ec1-8c1f-c32ab6edb62c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d18222b9-7905-4514-89c4-02939898116f"
        },
        "item": {
          "id": "b8fe7025-505a-4cf7-a22e-0eca4eda434d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "73a51649-98a2-4208-9ea2-aa51242fea7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3973c3a9-52a2-4d34-9564-44e1468a49c0",
        "cursor": {
          "ref": "b0692ba1-31b2-4914-a762-e684ab24d2fe",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ecb55461-c301-44d2-93ba-9cd635f8cee9"
        },
        "item": {
          "id": "3973c3a9-52a2-4d34-9564-44e1468a49c0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "738f714b-b771-40cf-96f1-1610f24d016e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26320c02-a2df-4be2-9e6e-2f9891712699",
        "cursor": {
          "ref": "17dfa4fc-8cf3-4665-ab86-a1092c4b1d27",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6d8ce780-e505-446b-a2e2-788d75a8bd73"
        },
        "item": {
          "id": "26320c02-a2df-4be2-9e6e-2f9891712699",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a4856b73-f134-4fca-92a8-94e71e1e493e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89f61e5-075a-48e1-9af8-b627de420568",
        "cursor": {
          "ref": "aea33a78-46f6-47e8-af0b-0c2177720297",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7677d1ae-7485-4681-90b6-c4fc55bda058"
        },
        "item": {
          "id": "c89f61e5-075a-48e1-9af8-b627de420568",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "695c8090-1d5f-404f-985c-07c345356a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5e4757-7276-42ed-9282-ab03afd2b3bf",
        "cursor": {
          "ref": "faa8fc0f-3833-4c0a-ac7d-c0af399fd94d",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1b3616b5-8ec8-4469-a0f1-2850b7c2d25d"
        },
        "item": {
          "id": "df5e4757-7276-42ed-9282-ab03afd2b3bf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f178af7d-0587-4950-a23c-57c2a94eae83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccfeae7-1327-4cf3-ab55-131bd253f627",
        "cursor": {
          "ref": "d74e2fc5-5f30-4d25-a3fb-7be0ee6eedae",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8ada07c7-9867-4ee5-9153-340c2000d396"
        },
        "item": {
          "id": "9ccfeae7-1327-4cf3-ab55-131bd253f627",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "88ef4490-5354-4d1f-87bf-a19c7f2458a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0715a017-26fb-47ed-ab0b-52b8747c6f0b",
        "cursor": {
          "ref": "dfe3fbe7-c119-4e05-a083-5d1189b5e21f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d52707e3-e434-4cb1-8086-58ba571c765d"
        },
        "item": {
          "id": "0715a017-26fb-47ed-ab0b-52b8747c6f0b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c145c310-e4b4-45ba-9e1d-59cfe0ec976a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f78ae48-7e59-4b96-934b-309afb1bfaec",
        "cursor": {
          "ref": "d3ad2772-3c9f-4a83-9f74-a50a903ef13f",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1f058b47-9c89-4aca-ae4c-3478c78af6b6"
        },
        "item": {
          "id": "0f78ae48-7e59-4b96-934b-309afb1bfaec",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5c5c3716-ec39-4fb8-aa51-e9d7fe6d8920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d05d8fd-07f1-468e-8649-59a3c10824fc",
        "cursor": {
          "ref": "59317f05-10c3-4309-a4b2-c2518b328917",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "65ebab34-4ff9-46cf-9f56-c38a6a6d8120"
        },
        "item": {
          "id": "4d05d8fd-07f1-468e-8649-59a3c10824fc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6d0818b8-dd37-4d45-bb9d-b71d39b793e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebb067b-1920-4bea-8f11-77f265ba3f30",
        "cursor": {
          "ref": "37934395-a4c9-415d-baaa-138d2fde512b",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1a428b20-7868-4e12-942a-5e67caf7d3f4"
        },
        "item": {
          "id": "cebb067b-1920-4bea-8f11-77f265ba3f30",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "af359503-d93e-4056-a4ed-b4a1b07efa1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0a0a50-a746-4b6e-bf5f-0cbf3e301c15",
        "cursor": {
          "ref": "b667ac33-ea2a-4b9b-906e-27675a6f9368",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6d909091-6078-496d-b0b2-7d2a5342956a"
        },
        "item": {
          "id": "aa0a0a50-a746-4b6e-bf5f-0cbf3e301c15",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "99161dae-37f7-4c28-a804-7b0f261f3067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fcc3b3-9649-432a-9ead-9fa7c6e4b6c7",
        "cursor": {
          "ref": "79edb091-879e-401a-bb21-930dcb33ea32",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0c8a700c-c681-4b9b-8f31-d5eda736eee0"
        },
        "item": {
          "id": "47fcc3b3-9649-432a-9ead-9fa7c6e4b6c7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e947c550-5d22-4d51-a5fa-740ee27f74c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b961d2d-5012-4cde-8b66-7b68ee537194",
        "cursor": {
          "ref": "b1be694b-fdd3-409e-8e00-8a388e8e71e2",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bd428af9-9b8f-43f2-bb30-194c4c322c3b"
        },
        "item": {
          "id": "0b961d2d-5012-4cde-8b66-7b68ee537194",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fd597763-3e5f-4024-bcba-0dfc174569c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838a0ba6-7a53-46e9-b69b-99b108f4ec44",
        "cursor": {
          "ref": "105fa150-a225-431f-a33a-254d8202504a",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "133c6061-a006-4573-b3a5-f354d3caf2da"
        },
        "item": {
          "id": "838a0ba6-7a53-46e9-b69b-99b108f4ec44",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5781ebd1-b160-4dc2-8ccb-24c4e163567d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d1f3b6-485b-4099-a850-d07b4c9000dd",
        "cursor": {
          "ref": "b9e908fe-8ba4-498a-8d51-0cd120a22fd1",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8bd915f1-0ceb-4668-9926-7f2b7ca91dd4"
        },
        "item": {
          "id": "b2d1f3b6-485b-4099-a850-d07b4c9000dd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8c3b081d-e9bc-4f24-8e02-0921c26b8667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f308124-cd8b-4d12-8ff3-679c68838676",
        "cursor": {
          "ref": "ba9b4c92-6478-4a2d-8134-90b63a6af2c7",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d5e99e21-f320-4e32-a9c2-d2a253812688"
        },
        "item": {
          "id": "4f308124-cd8b-4d12-8ff3-679c68838676",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f1436c84-bd21-4c6f-b229-a45551a9c7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27770c4-21f6-42b4-8f93-774d3ad19df0",
        "cursor": {
          "ref": "a1807f69-a824-4dd7-85e8-a8c03f1faa49",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "06bccf4a-c893-4fcb-9c10-ffc2624c2b04"
        },
        "item": {
          "id": "f27770c4-21f6-42b4-8f93-774d3ad19df0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3ba353a0-d4bc-4f2f-9d4f-129f8b2dc26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f54e79-a51b-4f79-b6d2-2799ce6a6aa3",
        "cursor": {
          "ref": "f98f1d81-5fa7-457e-93bf-0c1b730bccbf",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "331b3b23-3209-4981-b626-c62701d09296"
        },
        "item": {
          "id": "87f54e79-a51b-4f79-b6d2-2799ce6a6aa3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c2a5df46-867f-49bc-8071-ed6f5b534df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cb9920-0ead-4977-b91c-e44ed0e0d096",
        "cursor": {
          "ref": "9c33d075-c1b0-4c8f-ac9b-a2decf8dbcb9",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9950a421-3662-4697-be19-4ceedfd8511d"
        },
        "item": {
          "id": "21cb9920-0ead-4977-b91c-e44ed0e0d096",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9494bb10-b377-48ea-827b-4a0adc5b48fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c527f07-6f91-4b02-9d61-28647e0d49d5",
        "cursor": {
          "ref": "ad8473b6-07ec-4b0a-a473-176ae0328914",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5ee42c28-33fb-4ed9-9f32-63ee1033899b"
        },
        "item": {
          "id": "8c527f07-6f91-4b02-9d61-28647e0d49d5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3da7b3ac-7e80-4e84-97c5-e60c8a66d8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b603cc-710e-4201-aaf5-c8370e928ca6",
        "cursor": {
          "ref": "b3dde73b-f54a-4a99-b8c8-37561fd130b5",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cc6e7722-d68d-41c2-be9c-260729821359"
        },
        "item": {
          "id": "32b603cc-710e-4201-aaf5-c8370e928ca6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "66bedcee-831c-4a23-9ffc-65018ce72548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108daee7-976f-4b11-a610-ea4ad57425f5",
        "cursor": {
          "ref": "ef56d5e7-4017-4f05-a0f5-01cdd64e40f1",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "993997a5-fd62-4713-9ea2-d835ead7b7b5"
        },
        "item": {
          "id": "108daee7-976f-4b11-a610-ea4ad57425f5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cc6c8425-a5d8-4d22-afd9-f8714c1397e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a52273-7ea6-4bf2-acce-fce51e306045",
        "cursor": {
          "ref": "9d54ecc3-e61b-43a7-b377-a1ccb8cb7ced",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "173b962c-2acf-4f50-8b61-68e8532521ad"
        },
        "item": {
          "id": "89a52273-7ea6-4bf2-acce-fce51e306045",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4aa3747a-e148-40d0-b1aa-cd40070c712b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e08ec59-6d81-49fb-9989-2aa30830f233",
        "cursor": {
          "ref": "84d2b418-3224-40b3-b15c-09c56b6031e5",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "692dcfd6-d94c-4996-8823-8590b24518f9"
        },
        "item": {
          "id": "9e08ec59-6d81-49fb-9989-2aa30830f233",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fdb58345-f716-4cf9-aa99-316e6a3b2371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc2127e-07a7-497f-84d0-4b29e2fa090f",
        "cursor": {
          "ref": "1d3ba156-2829-4ab4-9544-8d15ca4e5bb5",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b053ad2f-3694-4913-841d-0612793cc965"
        },
        "item": {
          "id": "8dc2127e-07a7-497f-84d0-4b29e2fa090f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "900841d3-6bc5-448d-889c-b87a95f95e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1570a459-3f3b-480c-8f75-2e75e5b36692",
        "cursor": {
          "ref": "e9217f84-fc41-448a-9d1d-50b6f0fd3809",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f3705d1a-b45e-4ff9-a209-411084deb822"
        },
        "item": {
          "id": "1570a459-3f3b-480c-8f75-2e75e5b36692",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "37ce52d7-5d48-4307-b7d3-3bcb5c03dcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de618141-a949-4399-9795-da60dc640ccc",
        "cursor": {
          "ref": "2bb8bf27-7d95-4d24-9711-cc69ad944dd9",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "94c7ca98-edfb-45e4-a788-d5bad9e4c728"
        },
        "item": {
          "id": "de618141-a949-4399-9795-da60dc640ccc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d79646d4-8e2d-4bd7-ae48-c97c72807fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02825166-fe25-4b64-b286-c91b4978a69b",
        "cursor": {
          "ref": "5889c39c-8e7e-488d-8689-67dfec13166b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d62c27c4-08c6-40a0-b46b-3386bb11b515"
        },
        "item": {
          "id": "02825166-fe25-4b64-b286-c91b4978a69b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cabbcc0d-b584-4c55-ae7d-659c37e29b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b5c112-39f9-4535-8efb-f54afd336a32",
        "cursor": {
          "ref": "42273add-e28e-4372-8fa6-e92d64f4c000",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8f73ee09-4672-423c-9fc7-f3b73aa19a08"
        },
        "item": {
          "id": "69b5c112-39f9-4535-8efb-f54afd336a32",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ac8b7020-93df-4191-b4db-ae182d3379cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e42b7b-2e8a-481b-b88f-56d9b0bdf3ed",
        "cursor": {
          "ref": "3d7d4a56-15f6-4bcc-b569-9823e7afbdc9",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "903a6318-c579-497d-b880-11a6772ef50a"
        },
        "item": {
          "id": "80e42b7b-2e8a-481b-b88f-56d9b0bdf3ed",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "10000fb9-b88c-4e6d-92e5-2a979045e106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2daeb9a1-0cbf-46ab-a5ef-36f5bd85e396",
        "cursor": {
          "ref": "1358d31b-0b79-49f4-a6d6-8ea9e443376e",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e9806a5a-dbb6-4e40-be07-07ee2e956662"
        },
        "item": {
          "id": "2daeb9a1-0cbf-46ab-a5ef-36f5bd85e396",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7b91c35a-793c-4da1-a5a6-acfb9e77ed68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60be53bf-4e68-49ff-99ac-0672a10ac5db",
        "cursor": {
          "ref": "7458ee83-3fe5-444c-8a10-961942630401",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "49b1af34-402c-4bb7-9f29-76801ecaf6f4"
        },
        "item": {
          "id": "60be53bf-4e68-49ff-99ac-0672a10ac5db",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f697a61d-a7d3-4c52-8aef-e856b135915c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdefd857-c445-4653-ac03-c1e07e2b2d24",
        "cursor": {
          "ref": "0fe7356b-54d5-46d4-807c-bdecfaf34f11",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0b0ac3ff-4166-432a-a83b-0ce0edd4c55d"
        },
        "item": {
          "id": "bdefd857-c445-4653-ac03-c1e07e2b2d24",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f38e4e82-a0be-44fc-aa7f-e5903401d66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97777a16-5ba6-4194-9a7a-45ee649cc699",
        "cursor": {
          "ref": "ea4bea39-9a0c-4eba-8622-e196bfe51d7f",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e1b01d41-e02e-43e1-9c63-76e9876daa6e"
        },
        "item": {
          "id": "97777a16-5ba6-4194-9a7a-45ee649cc699",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "089aad6d-37b1-47b2-9cc6-ce9a6f64edc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c835d36-5c48-4633-980d-1f9da0a88853",
        "cursor": {
          "ref": "34c88224-7be8-4fcb-8459-bde12b35f3c2",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "141e4d3e-9941-41df-8b8d-4c9fe6acdbcd"
        },
        "item": {
          "id": "8c835d36-5c48-4633-980d-1f9da0a88853",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "18059cdb-0406-446f-ac72-f26021bedd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f672d48-0720-4bef-9554-2f93f98855f7",
        "cursor": {
          "ref": "521bb911-2b1d-4c75-98a7-d5de6ef0574c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7969144c-b5db-41ff-a2a7-e3604e572361"
        },
        "item": {
          "id": "3f672d48-0720-4bef-9554-2f93f98855f7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d3c4b38b-14bf-44ef-9d7c-9d81ca4cef3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31beb7c-3c64-4565-bab8-03fe3e0f1aea",
        "cursor": {
          "ref": "f691c1bc-260c-4263-ae89-29a4d5c5ee15",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d004bbef-9e93-45b4-807d-653ec3d65092"
        },
        "item": {
          "id": "a31beb7c-3c64-4565-bab8-03fe3e0f1aea",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c833bc9a-62a4-4efd-ba98-91d6c30f371b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff90847d-433f-4fb1-8860-3d4c76795fc5",
        "cursor": {
          "ref": "4a324915-3ba7-4303-a9e5-b09d2cc23aff",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cb0ae566-0599-4878-ada7-e2569c790d09"
        },
        "item": {
          "id": "ff90847d-433f-4fb1-8860-3d4c76795fc5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ddef2c87-fbd2-4e43-89d5-fa98a4bea469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff5755f-2872-4c39-9b1e-d44718232d75",
        "cursor": {
          "ref": "851dd6dc-2c03-4dd8-bc5d-2b6bcf017c70",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "69c93c7b-b50e-469c-a4f0-371e0816f1ff"
        },
        "item": {
          "id": "cff5755f-2872-4c39-9b1e-d44718232d75",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "19044d44-4987-470b-8984-b34fc3b7dd85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55734da5-b9f6-4876-8104-c34d025ce68e",
        "cursor": {
          "ref": "77b776f2-579a-4a3e-88c7-c16f0b359369",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "25572e2b-cc5b-4a9d-b751-b99ae6766820"
        },
        "item": {
          "id": "55734da5-b9f6-4876-8104-c34d025ce68e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a8c49677-1ddc-438f-a781-09dfc98decc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d219e293-2f4d-4a2b-8112-7ecf285eee7c",
        "cursor": {
          "ref": "2146cc83-141d-4950-8c09-d66aa7da866e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f62ffebe-666b-4a33-afa5-48bd7600a57a"
        },
        "item": {
          "id": "d219e293-2f4d-4a2b-8112-7ecf285eee7c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "521c83e0-49de-49ce-b51b-a967df0bd896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74bec8a8-3deb-4ef3-9efe-c1452e782d33",
        "cursor": {
          "ref": "476e6bbc-3deb-4ad5-82a3-3734dcaa2281",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c70e1c06-7767-4f0a-8431-eea3ef2b5b2b"
        },
        "item": {
          "id": "74bec8a8-3deb-4ef3-9efe-c1452e782d33",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4d7e1416-49c2-4030-b3ed-22483c771ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9113a377-57d7-4a58-a02d-e575a06c9b03",
        "cursor": {
          "ref": "34fed289-0669-489e-b183-8de7d950a838",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "04c2aa25-d1c7-4e7f-991f-4492d7810d65"
        },
        "item": {
          "id": "9113a377-57d7-4a58-a02d-e575a06c9b03",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "748dc2f1-1414-482c-999a-ebb1f553a038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c339a5c-84aa-4368-90af-3808949b95ec",
        "cursor": {
          "ref": "f6c54a96-bdfb-4759-9605-8a23d77a1aeb",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ca241771-692f-459d-91f6-1f5b9fde40f9"
        },
        "item": {
          "id": "9c339a5c-84aa-4368-90af-3808949b95ec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d60612f6-354d-47bb-bf5d-9fc776b32d25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e713213-0fb4-4e2b-9ffe-9ff2d23434b2",
        "cursor": {
          "ref": "8284bb3d-da16-414e-a0fd-8efcd7501692",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1c280b22-0f30-40be-8ece-47ed7afbae36"
        },
        "item": {
          "id": "3e713213-0fb4-4e2b-9ffe-9ff2d23434b2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "55f562fa-82be-41cb-b317-6f180713fadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50f3767-43a4-4e2f-8f23-063fc15e21bc",
        "cursor": {
          "ref": "2327bce8-95fd-44ac-9104-10ed233d6e02",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3cec4cdd-9d6c-4892-9f8f-8462c756d997"
        },
        "item": {
          "id": "a50f3767-43a4-4e2f-8f23-063fc15e21bc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "681832c9-12bb-4af2-8fa3-8e37f2404720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f048c2-7b9a-4e1d-a5ef-9142af2e5818",
        "cursor": {
          "ref": "28e8dc45-839e-45d9-9900-0901c04c2c94",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ffb75141-b24a-4097-9857-b4db3be7bf74"
        },
        "item": {
          "id": "97f048c2-7b9a-4e1d-a5ef-9142af2e5818",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bad0976b-839f-4732-acf9-c3f12ea3e9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eace1c4-612a-4c48-aab8-1c41791dc933",
        "cursor": {
          "ref": "1e9e9085-f7e9-46b6-b745-1e249e69a5a5",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b7516aed-fbf6-49b5-bdd1-359dbb2ce193"
        },
        "item": {
          "id": "3eace1c4-612a-4c48-aab8-1c41791dc933",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ba99227a-b15f-4659-bf67-b6872c1c032e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d86096-c012-4be8-bd40-98263f80ddbb",
        "cursor": {
          "ref": "4621bfbf-1b44-46b3-bec7-66b7d691ce33",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "158510c3-bd21-41ff-9478-1a62d8f8afc0"
        },
        "item": {
          "id": "75d86096-c012-4be8-bd40-98263f80ddbb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "75c665e0-1eec-4eb4-b726-33accf266101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c884ea9-5e36-4923-833d-35d526430be7",
        "cursor": {
          "ref": "8e4df807-1a99-4c6c-9ff2-e6d16b8fbe03",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "99e08805-04a2-44b8-8bea-51248c802331"
        },
        "item": {
          "id": "1c884ea9-5e36-4923-833d-35d526430be7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "35375294-9da1-4177-99ea-e4f8cb0bbb50",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9ad00585-82b0-4fb9-a0bc-3c6c4b808860",
        "cursor": {
          "ref": "af53b63e-cd8b-4b79-bbaf-66d76d65005c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "87e3dd0c-db36-4599-b787-34e2ccaef733"
        },
        "item": {
          "id": "9ad00585-82b0-4fb9-a0bc-3c6c4b808860",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "05589baa-c3d2-4e5c-9719-a58e702f5b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52cdaa6-5743-4422-9c52-a89b5751732e",
        "cursor": {
          "ref": "6eb1fabc-4089-4691-8450-ed6dc1a9a16c",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "44a988db-c962-4905-a77f-73e401fc9b67"
        },
        "item": {
          "id": "b52cdaa6-5743-4422-9c52-a89b5751732e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4b5a1030-eb25-4490-b916-6ff13a725106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7da959-126d-4690-a42b-14cb5a021ec9",
        "cursor": {
          "ref": "a7caae32-9492-4595-a6ac-16deb69f85ee",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "96f28f62-d146-45b5-9af1-0a356147632c"
        },
        "item": {
          "id": "5f7da959-126d-4690-a42b-14cb5a021ec9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f821d376-a033-4c5c-9187-0705730c1551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbe6a0b-6566-4139-968f-dd3536ceab29",
        "cursor": {
          "ref": "ed674e0d-7e15-4072-afac-140645d60a21",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "daba1924-23b4-4624-a715-8551bcef753a"
        },
        "item": {
          "id": "afbe6a0b-6566-4139-968f-dd3536ceab29",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cb482d19-6797-4af4-91b7-dace7f8ab5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87670ad6-6aeb-44d6-bd4d-55dda6808586",
        "cursor": {
          "ref": "e9e8ee5a-91d8-4511-a1b5-83bdbbd93d8b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c2b07b6f-3cfd-44e8-b992-b9474a1917ad"
        },
        "item": {
          "id": "87670ad6-6aeb-44d6-bd4d-55dda6808586",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a9dfa313-400e-4799-88e0-e969c0d2ee0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54b4ee0-4cc9-473f-8acc-2ac91f96792c",
        "cursor": {
          "ref": "e6512c93-535e-4dd4-b6a4-6a9a6e270d25",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "301c031c-7761-4179-bf78-f13f5d990a60"
        },
        "item": {
          "id": "a54b4ee0-4cc9-473f-8acc-2ac91f96792c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "213d135b-c7f2-4103-850a-c39bf950f3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d691720a-7717-4ef4-8aa0-22d70926cff1",
        "cursor": {
          "ref": "78013155-4a92-4f87-8102-21e7b2b861bb",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fd30abcb-22a9-4389-bc8c-814b35a4051b"
        },
        "item": {
          "id": "d691720a-7717-4ef4-8aa0-22d70926cff1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "145d8212-bd3e-4cf5-89b0-5da5863123de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e95bed-a472-4f14-8409-368ecdfd82ca",
        "cursor": {
          "ref": "3bb2afb1-76ea-4878-a0aa-7f476c1628ad",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d50c4e97-e97d-44aa-9c3c-3c7f9247984e"
        },
        "item": {
          "id": "54e95bed-a472-4f14-8409-368ecdfd82ca",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "932c57bc-ff4a-40e7-99e0-c57a20d604f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d5edc7-942e-4977-bfcd-70711ac52578",
        "cursor": {
          "ref": "41153e1e-17e4-4572-9a3b-84e65a8d99fb",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "32436543-62c4-45ff-b501-c13aa2f8aadb"
        },
        "item": {
          "id": "84d5edc7-942e-4977-bfcd-70711ac52578",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "404c7a75-885f-4ae4-bcb1-a8fa45e79a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b4307a-132c-4c54-94ca-a4dd4cc1133f",
        "cursor": {
          "ref": "b2f54993-51a2-460b-9bdc-fda1630508b8",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "85c588ec-0d6f-4e39-a230-000f68ff536f"
        },
        "item": {
          "id": "88b4307a-132c-4c54-94ca-a4dd4cc1133f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7c147386-c5fd-417d-b2b5-9e68af8c2fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f6c1ad-e493-4b95-b707-cd5b3fe9e2fa",
        "cursor": {
          "ref": "79de98d1-510c-4360-a029-b7a17d123028",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2c87ccc0-d530-4778-a1ef-8ad10edb4960"
        },
        "item": {
          "id": "f4f6c1ad-e493-4b95-b707-cd5b3fe9e2fa",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "23e6c4dd-5c57-4bc2-a36a-ef64248a20f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbbca80-a355-4857-89b4-c84f7bb5ac5c",
        "cursor": {
          "ref": "93f553fa-65d7-43ba-a291-87d22169e6ec",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "78608c95-9a5d-4822-8d18-1cd649da2f1b"
        },
        "item": {
          "id": "bbbbca80-a355-4857-89b4-c84f7bb5ac5c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a5f58bf3-d42a-4024-b742-914174f01250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf80c9b1-3393-4622-8439-15e5e8271113",
        "cursor": {
          "ref": "b1e15619-2571-48a2-90c6-1cfc9033ccda",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cc81ce9e-1a40-4e6b-a017-b3df38fc49ce"
        },
        "item": {
          "id": "cf80c9b1-3393-4622-8439-15e5e8271113",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6ce488a2-6fb8-4ea1-bfb0-4a928c8d102c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369662b9-445a-4fe2-b054-0d0fbd2fb5e1",
        "cursor": {
          "ref": "56800d57-68a9-4bbd-8f30-7f0165af1792",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8672ef5f-20b6-4710-a783-ec30fa9f56b1"
        },
        "item": {
          "id": "369662b9-445a-4fe2-b054-0d0fbd2fb5e1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3d63c7d6-641a-4ca1-ba7a-f0cc6d566dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696f9b3e-5003-4857-8558-9fea662e11cc",
        "cursor": {
          "ref": "80d74205-4ee6-41f4-95c1-d32426705812",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "eec09b3c-1f13-44fd-be3a-8ec9d1977171"
        },
        "item": {
          "id": "696f9b3e-5003-4857-8558-9fea662e11cc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "003edab5-8739-4538-90aa-bcfbff65c5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d374b612-4852-467c-940e-edcf1d8b50a3",
        "cursor": {
          "ref": "b31af3a7-8678-4b7e-b570-1ad61334456b",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4ad24c93-48bf-417b-808e-f0f7e5130da8"
        },
        "item": {
          "id": "d374b612-4852-467c-940e-edcf1d8b50a3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "56d43d07-f5db-4efd-9d79-4b4534b702bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b01aab5-7545-41a8-81b5-1d5d0a689db3",
        "cursor": {
          "ref": "9a3bfed4-9667-4be1-b339-4de0f2019e32",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "53f2f195-2a83-4135-b54c-4612fa71547d"
        },
        "item": {
          "id": "9b01aab5-7545-41a8-81b5-1d5d0a689db3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "98bb77d7-65a1-433a-bf69-47221937d360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c6608e-13ad-48b6-9588-eadb0bf15a60",
        "cursor": {
          "ref": "99b00d73-ca9c-4fc3-9b48-84cd8999fb01",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1f03dbeb-8b5c-4202-94bb-8035358a9c3d"
        },
        "item": {
          "id": "f9c6608e-13ad-48b6-9588-eadb0bf15a60",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2e8bd5fa-4921-4744-81c0-df300da2b5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3430adf6-f1a7-416a-8f2d-6ddf8463ffcc",
        "cursor": {
          "ref": "598b2a83-94d9-47cb-8ef8-7caffaf1d0f7",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3235c358-b473-42b5-9ce6-cf81a140ac8a"
        },
        "item": {
          "id": "3430adf6-f1a7-416a-8f2d-6ddf8463ffcc",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "19230791-830f-41b5-bba9-b83cb46d50df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6ed79c-e0a0-4810-bf66-dd5386031726",
        "cursor": {
          "ref": "5dae49f6-35d8-47a4-8db3-23294b620abd",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f8ce286b-8728-45b9-bbaa-f9abf522ecdf"
        },
        "item": {
          "id": "ca6ed79c-e0a0-4810-bf66-dd5386031726",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8247f5b9-168c-4cac-833b-03d14e4639c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fb2c21-387b-4da6-97d8-0311274f54c9",
        "cursor": {
          "ref": "e5325d21-f837-41a8-b287-0ac84e0a0b56",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "16791704-5671-47e1-99aa-d78be2b08bac"
        },
        "item": {
          "id": "21fb2c21-387b-4da6-97d8-0311274f54c9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f9a557f6-782b-4709-b537-96b7ad9237c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155f24e5-cde5-4d5a-bb58-671b033d0af5",
        "cursor": {
          "ref": "b1fbb64a-cdb1-4f17-b545-73db4ee27e8a",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "98f28019-ca9a-48dc-8be7-b47ecf63e1bd"
        },
        "item": {
          "id": "155f24e5-cde5-4d5a-bb58-671b033d0af5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ad244c1c-d23e-4ac4-a776-c1b2e54ef715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a8ffb1-a901-40dc-ba24-1a8b5208b0b9",
        "cursor": {
          "ref": "fed12f1f-024d-49f2-9c0f-2113f5a3eaea",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "00b9d811-ab08-474f-ae41-0156d3cd59d7"
        },
        "item": {
          "id": "29a8ffb1-a901-40dc-ba24-1a8b5208b0b9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4d9a1429-bd3d-4276-a2eb-c74b0df3cc15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca57da2-3f1b-40ed-96bb-3ce0654b1aa2",
        "cursor": {
          "ref": "0e1c8638-1aa5-4457-9b8e-ea919a2954c5",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f4f650c6-09ac-4b63-8923-b4ddf47bd4dd"
        },
        "item": {
          "id": "dca57da2-3f1b-40ed-96bb-3ce0654b1aa2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2ea016f7-33e7-4deb-ac2a-8a355c021ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8487614-f623-40be-ad67-52e32f1fc70b",
        "cursor": {
          "ref": "a64a141c-0e06-4bf5-a3ab-afab427ac5d6",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5339709f-a77a-4ccd-9b73-901ccc292205"
        },
        "item": {
          "id": "d8487614-f623-40be-ad67-52e32f1fc70b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "172bc3ae-d250-4266-b0a7-737b5b9caa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3e6777-c0a6-4b70-a35c-07026717ed6d",
        "cursor": {
          "ref": "470e01c4-024e-442b-903f-2e9cf1bfce7e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3b8c5481-b8ad-46e9-9263-2f709c4fe7c0"
        },
        "item": {
          "id": "bf3e6777-c0a6-4b70-a35c-07026717ed6d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3ea68c1b-00ea-4228-aa9e-3bc9ad53f314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d8694f-8d92-43f4-8d40-4a1dbaa9a75a",
        "cursor": {
          "ref": "93fe316d-4ea8-4736-a543-4e069895b21f",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2d598878-5e47-4a70-8f65-9ba3f4bc4c4c"
        },
        "item": {
          "id": "62d8694f-8d92-43f4-8d40-4a1dbaa9a75a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e49cd28c-e3cd-4b38-9984-8692266bc1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0aff33d-ece9-493e-855b-9788a8ddaf59",
        "cursor": {
          "ref": "c20825bd-2760-4ca8-902f-faa4caf84278",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fbf86235-ab51-49eb-ae13-83dc69f323bf"
        },
        "item": {
          "id": "a0aff33d-ece9-493e-855b-9788a8ddaf59",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "14db148b-5191-4d28-9ca3-1a5557f6c572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc89a5b-1f03-4b4b-877d-97ebb4fc4796",
        "cursor": {
          "ref": "b2b86fe7-8f41-419d-be9c-3b7ea3e585c3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f6005fa7-0b3b-4ce4-a721-1bbe74746282"
        },
        "item": {
          "id": "9bc89a5b-1f03-4b4b-877d-97ebb4fc4796",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dbb9549b-33b4-4621-97da-f5c249cfe2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6899fed-7411-45aa-8600-68979d6ab73b",
        "cursor": {
          "ref": "97d51924-1904-43ea-a7e0-0abd355ca4f6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "10336017-12ad-45fc-837d-2dc2a18c1907"
        },
        "item": {
          "id": "d6899fed-7411-45aa-8600-68979d6ab73b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "05763d37-cf47-4586-81f2-0f421e2e1417",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f157e627-938b-4a55-b18e-f6b0d5c3e76f",
        "cursor": {
          "ref": "4aff8cb5-ab11-4d67-81b2-1c06b635e7fc",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "233610d2-f6db-4f09-af3c-af9ac8fd2825"
        },
        "item": {
          "id": "f157e627-938b-4a55-b18e-f6b0d5c3e76f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e091a11c-494e-498f-a10b-1fedddd1336b",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ab36b379-1704-4e93-a14b-52a139b3deff",
        "cursor": {
          "ref": "acafdf78-46ab-45bc-9fcd-20cc74a5b6c1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fba1a579-a5e2-4639-b8a5-b81c55039649"
        },
        "item": {
          "id": "ab36b379-1704-4e93-a14b-52a139b3deff",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c94c9004-05f1-46c5-8c02-90dddd8ba623",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "32d27140-8c3e-4365-b936-f6e4dea88753",
        "cursor": {
          "ref": "cc946930-c025-4fc7-bdf0-6b12ffbf0435",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "07dbdb50-cef0-4d4f-bade-d7a5bb8cd2e3"
        },
        "item": {
          "id": "32d27140-8c3e-4365-b936-f6e4dea88753",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f1af05c4-2781-4d59-bb18-7eb95b17aa2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d6df7f-d9ed-43bd-9ca1-18ebc1f302c1",
        "cursor": {
          "ref": "07b0226d-9662-4f89-bf89-683299d2e817",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "71b7dc96-63cd-43c5-9345-0bcf2e7f96db"
        },
        "item": {
          "id": "58d6df7f-d9ed-43bd-9ca1-18ebc1f302c1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b1c9c81c-6016-4c10-8426-49bdb60881af",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b8911057-1625-4062-9693-166c9a5ee5e3",
        "cursor": {
          "ref": "b3f48016-5067-4a29-a671-d382e195220c",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "510d7378-e517-4336-8bd5-deb87d3a5fee"
        },
        "item": {
          "id": "b8911057-1625-4062-9693-166c9a5ee5e3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a1289497-1e60-4612-8864-ece37dc83a3f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "22851ad1-b19b-4fbc-a6ae-0069fd826afc",
        "cursor": {
          "ref": "c2add326-08ee-4aec-b239-bb3d052eac85",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "08599dfd-632e-40ae-ae03-0f3ce626c0f1"
        },
        "item": {
          "id": "22851ad1-b19b-4fbc-a6ae-0069fd826afc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "09ad870a-8daf-4197-bc9a-53d668e5260e",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "43caa0e5-a5d0-4dc0-8fdc-4d792c29e95a",
        "cursor": {
          "ref": "0c35c816-593d-436b-aec8-dcfd8cf8c512",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "688b0529-b712-4539-ad05-8f26508f9fd0"
        },
        "item": {
          "id": "43caa0e5-a5d0-4dc0-8fdc-4d792c29e95a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2a42868a-c0bb-43ed-b2ce-1e287af1f8b1",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "9b82eae8-6dbf-46ba-ad75-180abdbc709a",
        "cursor": {
          "ref": "3049c424-b041-42c0-9066-58ad91589524",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "55989d40-af6c-46a3-aa1e-214f71ad13c3"
        },
        "item": {
          "id": "9b82eae8-6dbf-46ba-ad75-180abdbc709a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3182a648-cf52-425d-b6ba-13d58ef60e95",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "dd5d39eb-08c2-4988-a5c2-18224fdd89b5",
        "cursor": {
          "ref": "b716db25-3085-48fb-80c3-266cee00ac53",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "535eaeae-f482-40e2-a122-8dcc8dc24f98"
        },
        "item": {
          "id": "dd5d39eb-08c2-4988-a5c2-18224fdd89b5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "99cf6ac3-d942-46d7-b43a-68ad34b6e9bf",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0767a118-6810-419a-83bc-b357ba9fd337",
        "cursor": {
          "ref": "a9f52d2a-695b-4fa9-a689-775247ebad92",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c57e5efa-46d6-449d-a77d-467258798ad3"
        },
        "item": {
          "id": "0767a118-6810-419a-83bc-b357ba9fd337",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5ac46fee-c279-4188-bc0b-19ec6c6a8895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da03285-4c78-432a-8c03-5b2ca3dd8941",
        "cursor": {
          "ref": "59f1137e-8a61-4373-9d2b-46f33c3fb1d0",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6fd9fec1-766a-40aa-9e2b-dc1d36762189"
        },
        "item": {
          "id": "3da03285-4c78-432a-8c03-5b2ca3dd8941",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "32c7bf18-6952-4e35-8152-0411f089e2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c6a50d-36f5-4975-8d9f-7e91a834b8ba",
        "cursor": {
          "ref": "7b5c8702-968c-405b-9664-8dcb765ce6d7",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "20dbde7f-3d7d-4e71-94c3-8f732724c942"
        },
        "item": {
          "id": "89c6a50d-36f5-4975-8d9f-7e91a834b8ba",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7ee46a0d-b426-4e29-b520-0a199355b80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333772ec-3d24-4cba-be78-fe096fcf7fbd",
        "cursor": {
          "ref": "f42f76f6-bec8-4f05-a8ef-64d52b86931a",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ab0b6dbb-1a71-44d8-8791-6658149c949a"
        },
        "item": {
          "id": "333772ec-3d24-4cba-be78-fe096fcf7fbd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aa4639c5-c14f-4904-9b76-05ea5f488f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f706ce-0341-4da5-9ae3-d927929b5f6f",
        "cursor": {
          "ref": "ec321085-512f-41e8-97b7-6406241ed870",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fb2caf3a-7298-4341-9abf-c49c8769087f"
        },
        "item": {
          "id": "38f706ce-0341-4da5-9ae3-d927929b5f6f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9b15027c-def9-4025-b387-4439b2e3e996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f886a8-96df-410f-a60d-6bb80c01e347",
        "cursor": {
          "ref": "9b751053-5835-4a21-9b3a-113878952d04",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bef3a960-0875-4d38-9a73-58c0d96989e1"
        },
        "item": {
          "id": "26f886a8-96df-410f-a60d-6bb80c01e347",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "852e75ac-f894-4f42-97a6-cde7d8fd4e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c68fbc2-a9a9-4ed0-856d-91af036a2885",
        "cursor": {
          "ref": "1585bbfc-6719-43d7-b809-6394958cac97",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "69d93929-6d8e-4753-8a3a-aeb197d3d82a"
        },
        "item": {
          "id": "0c68fbc2-a9a9-4ed0-856d-91af036a2885",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bafb60a6-b220-4224-8095-d57252fbf358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcccb76-594e-4d83-b5cb-7d8111789927",
        "cursor": {
          "ref": "d2ef2c21-b9e1-4582-86eb-42f1d68118d8",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "24aec1d8-d932-4234-a48e-729691adeeae"
        },
        "item": {
          "id": "0bcccb76-594e-4d83-b5cb-7d8111789927",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cfe90b96-bf13-4255-8abf-71f61fe08743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1ec504-2cd8-4123-aaf8-7126662712f0",
        "cursor": {
          "ref": "1d65c304-99e2-49f7-8310-dbd296a8164f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d279a79e-c81d-4385-a4b5-3e28e37e83ea"
        },
        "item": {
          "id": "6f1ec504-2cd8-4123-aaf8-7126662712f0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e0cf6fb7-3d4a-4989-bb72-83a0100b73df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af3197f-84cb-4f82-9e9b-2249054b8416",
        "cursor": {
          "ref": "00f98ab8-9c3b-4e3e-8725-679a1177d978",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e3c36060-8c47-4457-94e5-8396a9e2e028"
        },
        "item": {
          "id": "6af3197f-84cb-4f82-9e9b-2249054b8416",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a34872ff-ba61-47db-b799-3b21f4edc18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab3b565-01cd-4db2-900d-6c4c3418bbb7",
        "cursor": {
          "ref": "85ec185b-ec95-4647-bf06-7bf88623a314",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2dd873a7-1df7-4773-bf37-43455850273e"
        },
        "item": {
          "id": "2ab3b565-01cd-4db2-900d-6c4c3418bbb7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d86e84b2-1de4-4bcd-a22d-d07335f96fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7d7d30-9eee-442f-86fd-8f8c130d64a3",
        "cursor": {
          "ref": "6a10009d-f8e4-464b-9de2-4d2eed2cb48e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ff4eae37-a6b5-4c87-94ad-1c37acbd7bd6"
        },
        "item": {
          "id": "1e7d7d30-9eee-442f-86fd-8f8c130d64a3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c79aaf73-268e-4682-a1ee-9b5adf31b7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eca87f2-c71f-48a0-ad8e-69b1ee74fb12",
        "cursor": {
          "ref": "59473900-73f6-4db9-8399-2d3483a9dc79",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6f79b9a5-7c66-4053-824c-0f006a0f2e7e"
        },
        "item": {
          "id": "1eca87f2-c71f-48a0-ad8e-69b1ee74fb12",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9b7d823c-4d74-4184-ad00-1a73e1de6019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c325614-943a-48bd-bf99-b4845a9bda93",
        "cursor": {
          "ref": "2ae822b6-3cfb-4082-8523-322c709930be",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fe4aa89c-2e5e-4e6c-9909-0ea75d89d848"
        },
        "item": {
          "id": "5c325614-943a-48bd-bf99-b4845a9bda93",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6b9cdce5-e462-4f1a-9a0a-e0a1492f794c",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b72096fa-5c35-49b6-a918-df4919ebd10c",
        "cursor": {
          "ref": "8b3d4aab-8533-4dea-a9a7-35fea787b8a7",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e5733c79-2cde-4b16-b272-95a7a4e4bdb7"
        },
        "item": {
          "id": "b72096fa-5c35-49b6-a918-df4919ebd10c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ad5ffed3-8ad9-4773-aa5e-41da9077caff",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a8a29d5e-c430-443f-a171-da06f152b0cf",
        "cursor": {
          "ref": "9e1aea51-3ea1-484f-a3f0-6703d35c038b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "93b70f13-b9f2-48df-91ac-1f45e6991771"
        },
        "item": {
          "id": "a8a29d5e-c430-443f-a171-da06f152b0cf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8defa6a9-927a-4373-8d31-6e8cfc037940",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fcfb6121-73c7-45fb-8ab7-33e46a37a8e4",
        "cursor": {
          "ref": "1fd8d898-ae78-44cf-a204-09b14d9d9beb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9ad8ee5d-3bff-439d-a3d7-a9d199c2af89"
        },
        "item": {
          "id": "fcfb6121-73c7-45fb-8ab7-33e46a37a8e4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "617c5ac0-7b5f-4891-bd8c-1b64960cd74e",
          "status": "OK",
          "code": 200,
          "responseTime": 327,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "854ec7fa-1cad-41fb-a390-190abc50fc93",
        "cursor": {
          "ref": "fdb74a80-654c-42e5-bb10-2de20661e9aa",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6c0134e5-49ef-4569-bcf7-9507e4fa76d6"
        },
        "item": {
          "id": "854ec7fa-1cad-41fb-a390-190abc50fc93",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dcc32dec-62de-4d9c-b78c-265ec8bae9af",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "abb55afd-08af-41a4-8bef-325d0b4c79fa",
        "cursor": {
          "ref": "082064b9-642f-479a-9f4f-d1d83c579d82",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5a6c0ac9-ab39-4931-a8d5-9ccdc68a940c"
        },
        "item": {
          "id": "abb55afd-08af-41a4-8bef-325d0b4c79fa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "147a0e39-0fc9-4280-8c24-d2cac7d2f544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa662164-ae9e-4637-9171-c8de579339dc",
        "cursor": {
          "ref": "f8889f65-6778-4583-922a-17ebfbde26a3",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0543fc25-3fea-4996-9047-3e64a22c6748"
        },
        "item": {
          "id": "fa662164-ae9e-4637-9171-c8de579339dc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3038b955-4db3-4fd5-8ff0-7b20d7ef72bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd37c9b-cc4a-4f1e-b044-1c5a4e0b160b",
        "cursor": {
          "ref": "bf95a124-4bf9-4af1-a86e-dc6f6af850ce",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ff2eb86b-7009-4776-ae16-e75c1e722907"
        },
        "item": {
          "id": "4bd37c9b-cc4a-4f1e-b044-1c5a4e0b160b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6b38edd4-9720-4903-bfb2-ba87063923f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a31080b-5004-4e28-9fc2-23e115e24e3e",
        "cursor": {
          "ref": "cc6346a3-d3c6-4a0d-9a5c-ff075dc2b21c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9b41f96f-a0ff-4983-bf91-f7aa08570fac"
        },
        "item": {
          "id": "8a31080b-5004-4e28-9fc2-23e115e24e3e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "755d577a-9f33-46b8-a235-b31ea2282a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05364e5a-4402-41ca-bc8c-9098fe4cd6f0",
        "cursor": {
          "ref": "559b0027-7c11-455c-b1ad-2399ad449ee2",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c93944f1-4b4f-4040-a072-acfe0df3f9ea"
        },
        "item": {
          "id": "05364e5a-4402-41ca-bc8c-9098fe4cd6f0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1f6a5e86-8dc9-4eef-aa95-e5afbb41cb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf056edc-8b72-4384-a57d-5bb7e4fb19f7",
        "cursor": {
          "ref": "1a48fea7-1d4b-4361-ae63-4b5a3c9f07f5",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fdffafec-346b-4776-9549-587d910127d2"
        },
        "item": {
          "id": "bf056edc-8b72-4384-a57d-5bb7e4fb19f7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4fa4a6be-e83e-46a0-aa41-ba3ce5e6af26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8682a5-eda2-4bae-be9d-f6c7a266a8ef",
        "cursor": {
          "ref": "51d0c9f1-e3d8-46b0-870e-f76d273e3b27",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f63e661a-c76a-4e79-acc5-c37b7fa2e590"
        },
        "item": {
          "id": "6e8682a5-eda2-4bae-be9d-f6c7a266a8ef",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6d818165-58a3-4a63-b952-ad0f6e9071b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ce6873-69dd-4c31-aa90-3634bf5f9ba5",
        "cursor": {
          "ref": "49baf857-d4e2-4406-8497-af318ed719f8",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8bbf9c1d-9575-4d5c-a9dc-5aa7003684a9"
        },
        "item": {
          "id": "e3ce6873-69dd-4c31-aa90-3634bf5f9ba5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4cd59790-18a0-47fd-ac8f-152e1fef87f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c39511-66b1-4edd-b2b0-941ac9decbc4",
        "cursor": {
          "ref": "3d990935-66e1-4921-ab8b-9d9d122252fc",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d3f509a5-3654-4765-a6dd-0e8d1c69653d"
        },
        "item": {
          "id": "59c39511-66b1-4edd-b2b0-941ac9decbc4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bb152332-529a-4a28-b1f8-049da5d77ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af21a9f2-32a1-49a1-afd4-f3b6c97d5bac",
        "cursor": {
          "ref": "e6f3b9f6-4f94-4dde-bf27-c27deda917be",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6b205413-642d-4832-9ee2-d4bcd04cca0b"
        },
        "item": {
          "id": "af21a9f2-32a1-49a1-afd4-f3b6c97d5bac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "278bfca2-6fdc-4bd3-9500-e1c58350b3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f311939c-b9b5-407b-a5c5-a4cb2a191345",
        "cursor": {
          "ref": "3f800030-7b5c-428a-94a5-d04096f2b48c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "990ae80e-cdf8-458a-9b00-b2cc3d239145"
        },
        "item": {
          "id": "f311939c-b9b5-407b-a5c5-a4cb2a191345",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ee388dd8-4a30-4a36-bcab-ee87e4a1dd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc0b406-56e4-41ed-b691-247188a359f0",
        "cursor": {
          "ref": "0cd1b4de-0fa6-4dad-8a90-1c8ddfe5bc31",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4b343288-9561-4924-aa9d-958b8790afa1"
        },
        "item": {
          "id": "0fc0b406-56e4-41ed-b691-247188a359f0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f0f237ea-089c-4bfd-a34f-010466814e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed61ddc4-c1b9-403c-a24a-24dec04cdd5f",
        "cursor": {
          "ref": "47594d5e-642c-48f3-9f64-236e310420a2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6a6712af-2dd6-414b-8f0d-f11ed2ab4ae9"
        },
        "item": {
          "id": "ed61ddc4-c1b9-403c-a24a-24dec04cdd5f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "44563ad0-6cf9-493a-91f9-46d4f677013c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e084b3fe-559a-41d8-9794-8167b16d00e3",
        "cursor": {
          "ref": "60ddd0e9-14e4-4811-b27b-060a8e15d8fb",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "952ec529-8aaf-43a3-a1f0-fdb329308d7c"
        },
        "item": {
          "id": "e084b3fe-559a-41d8-9794-8167b16d00e3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3234f359-0b8c-4f36-867e-9ad09c0df8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2434526-e85f-4cc8-a283-fe02812846ec",
        "cursor": {
          "ref": "aa80c50e-3b73-4821-9fd0-07b4be8fb779",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "15df5d2e-cd44-4d6f-a1c7-8e8681d54da9"
        },
        "item": {
          "id": "f2434526-e85f-4cc8-a283-fe02812846ec",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c3189f24-2073-4d4e-96c0-e26075bfcba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d898ee6-0dbd-4f1b-827d-55647d2cb741",
        "cursor": {
          "ref": "2d145538-9e22-428f-b024-4d3e6b242f95",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "48491e36-039b-427a-a2f0-cc94cd0c47e8"
        },
        "item": {
          "id": "9d898ee6-0dbd-4f1b-827d-55647d2cb741",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e1547980-1849-44b9-b1d3-af113cde84b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca02f612-92da-49fb-b88e-123142e8fe62",
        "cursor": {
          "ref": "5a390984-8861-4a01-894b-f8d87099c1e8",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "164b1b6a-e971-414a-8d98-7e25727e08f5"
        },
        "item": {
          "id": "ca02f612-92da-49fb-b88e-123142e8fe62",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a55bf374-3618-449b-b1a2-c87514564d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52de69b-dfee-49e7-85c0-f2d377ad0556",
        "cursor": {
          "ref": "b7e051c4-f476-4fe2-9263-017fa1b487b5",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9e76194a-32ef-4a72-ac66-3cef228a5fc5"
        },
        "item": {
          "id": "e52de69b-dfee-49e7-85c0-f2d377ad0556",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "af033317-2aeb-49c5-b929-d857040d8b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c5e0e4-3384-4451-9e86-dbb81d9c2826",
        "cursor": {
          "ref": "ae4e3beb-532d-4f71-9aa4-6d8d52b87c6a",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "36b0d1e3-3449-45e2-961d-3c29d782db98"
        },
        "item": {
          "id": "d4c5e0e4-3384-4451-9e86-dbb81d9c2826",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a64722e9-ee5f-4eb7-be7a-268e54e13d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83465ac0-8a81-4bb4-8e71-67fb53ebf6a6",
        "cursor": {
          "ref": "e9a65ff4-c719-4cea-b081-a7e96617eb7a",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "9a2891a5-a6b1-4cdb-9fbd-6f62a7d6e024"
        },
        "item": {
          "id": "83465ac0-8a81-4bb4-8e71-67fb53ebf6a6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "324fb7ba-9303-4f9c-adeb-036296367fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a14d16-bc44-4fa3-9dd0-59203cce8268",
        "cursor": {
          "ref": "9fc112d8-94c2-41de-b94e-c4e658be4f6d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "72c92ef9-dd25-4c70-af43-ef3d6ca3a498"
        },
        "item": {
          "id": "79a14d16-bc44-4fa3-9dd0-59203cce8268",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7259f9e2-ecfc-4053-95d0-b0a6e5850bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967d415c-cad0-4f51-8966-5e1898262d31",
        "cursor": {
          "ref": "739f89f7-fa29-4d53-accd-5e942e7a35cc",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9a25e091-a3c7-4fae-85e0-8576075ec8ae"
        },
        "item": {
          "id": "967d415c-cad0-4f51-8966-5e1898262d31",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e63143f1-7858-4776-b1e8-4d383c1511a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f503a7a-9d65-4355-b215-7089af41174f",
        "cursor": {
          "ref": "c4ccc34c-87de-400a-a8d9-65047a67bb07",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "487e1728-d593-4cf9-8e40-738e249a9d86"
        },
        "item": {
          "id": "1f503a7a-9d65-4355-b215-7089af41174f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "83dacac4-232a-483a-a4ac-6f973e0b674a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dada5cc6-4fa0-4e13-86fd-f1f9e1a164ca",
        "cursor": {
          "ref": "9d493ac4-654a-484f-848a-0b4e4b98263b",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "99782c86-92eb-4da9-9faa-586db8989711"
        },
        "item": {
          "id": "dada5cc6-4fa0-4e13-86fd-f1f9e1a164ca",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "75c7ecb7-9e94-4577-8185-c8fd0dd31cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0193bb16-2c98-4b2a-9d75-24acc9f36080",
        "cursor": {
          "ref": "e48ca98d-91c2-4db4-a49e-97a992dad686",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ce4e6bc1-ef35-4c50-8175-7694a75fe0c6"
        },
        "item": {
          "id": "0193bb16-2c98-4b2a-9d75-24acc9f36080",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2eca5fb4-de0e-4ee6-aecd-e2329ef06a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0b4b48-1e22-4bb0-92e0-8c0f0d2e2113",
        "cursor": {
          "ref": "1f3bdd24-5856-4a2e-a15c-eebc3a5b561d",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "dc8b60c8-704e-45de-b26b-d18b14211dcb"
        },
        "item": {
          "id": "0b0b4b48-1e22-4bb0-92e0-8c0f0d2e2113",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "35277f6c-8893-416e-8433-6af4a5cf46be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5129bb8-a875-4f01-a723-dc664d6d0ada",
        "cursor": {
          "ref": "718a38fd-d89a-4408-ba26-d1e94a5c96da",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "16b0524d-a481-47b4-9e38-293e76ae4490"
        },
        "item": {
          "id": "b5129bb8-a875-4f01-a723-dc664d6d0ada",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8379c6ca-3255-43ad-ad15-42b3ff61a961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe7a136-97c0-4f37-be32-4f7d49f19c4e",
        "cursor": {
          "ref": "fbb4e900-5881-4a7b-9f19-5a86b0a60bfc",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c0543869-2ab4-4e5f-ac3d-a5378fdd46f1"
        },
        "item": {
          "id": "abe7a136-97c0-4f37-be32-4f7d49f19c4e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4fd04db4-477a-49dc-a699-b693bb30bb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d5a1ce-d28a-48ab-923e-188681063abe",
        "cursor": {
          "ref": "fa85ab5a-a428-4265-9850-518cc4f215ba",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "cff2dc05-29c4-4837-8863-8ae6fb429348"
        },
        "item": {
          "id": "54d5a1ce-d28a-48ab-923e-188681063abe",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e97e8b76-6f4d-49de-af25-8b1da8c68d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f5a0a1-007d-4e99-81e0-5e3dc5d4bfe6",
        "cursor": {
          "ref": "8f068a4c-08e9-49f2-ad0e-5063834708da",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "dd9b73a3-133f-49c5-a691-ebad88e436c0"
        },
        "item": {
          "id": "27f5a0a1-007d-4e99-81e0-5e3dc5d4bfe6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c9ca0962-d332-4596-8b4f-f541726dd7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82015bd-89e8-4ff2-b341-f1507da5e279",
        "cursor": {
          "ref": "8d8ed682-7de4-41f9-af64-a92b151528e3",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2607b44e-6c8e-4641-a8c8-613f6acd407a"
        },
        "item": {
          "id": "b82015bd-89e8-4ff2-b341-f1507da5e279",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4eec2081-c14b-4b82-9965-1c722a8f8942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49b19ed-6d5e-4c7d-a79e-1225856e07f0",
        "cursor": {
          "ref": "bd33fd4f-8bd4-4c9e-9dff-0ad553c22dab",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "282dd659-471d-4b08-badf-beeded49626f"
        },
        "item": {
          "id": "e49b19ed-6d5e-4c7d-a79e-1225856e07f0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fb97db9b-073f-4fb4-879f-9556096e9371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11111d8-0a02-4378-a3cf-67f1434bb082",
        "cursor": {
          "ref": "8ff6d4e2-0fd3-459b-a2ed-f0b028936f1e",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "332c1971-bcc0-45ba-a681-fb2f330a14b2"
        },
        "item": {
          "id": "f11111d8-0a02-4378-a3cf-67f1434bb082",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ebb1a86a-7766-4218-a89d-6bf68adc3b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f59db6-e42a-439b-a395-d9efb4680c45",
        "cursor": {
          "ref": "e8d336bf-52e9-4947-b173-a93ee6ecd460",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "35c01843-8d52-497c-b215-ceeef1b5f6f3"
        },
        "item": {
          "id": "f7f59db6-e42a-439b-a395-d9efb4680c45",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0177cea2-0b6b-4517-8561-b3b143e01d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e50241d-730f-4ff5-8e61-83d9bea8f55d",
        "cursor": {
          "ref": "93cf5103-934a-44fe-8583-d97b538c2664",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "5aea4207-b160-4a66-a5a4-c690d13ce429"
        },
        "item": {
          "id": "7e50241d-730f-4ff5-8e61-83d9bea8f55d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "76dba452-c486-4565-9b6e-84405c39857a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6256c376-83fb-4934-919f-137da184f34d",
        "cursor": {
          "ref": "89cc6377-3315-42bb-bf2b-83a2c6d918e7",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d4e78c79-bf1e-4828-a5c7-26050c67089a"
        },
        "item": {
          "id": "6256c376-83fb-4934-919f-137da184f34d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "62872abe-afe2-413b-99a6-ce6ebba3324a",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "07314c25-e63b-48ae-b44d-da9b62ece2cc",
        "cursor": {
          "ref": "d7fea671-74c8-4053-ba3d-a9006ba2f75f",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9c6415f9-dfe9-4214-b4c7-d2c2190e5556"
        },
        "item": {
          "id": "07314c25-e63b-48ae-b44d-da9b62ece2cc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cb1f7167-e53f-4ed9-b74e-2653ecfe21d7",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e21fb91-b52e-4a7b-8c73-1d5e0495f626",
        "cursor": {
          "ref": "db5a352b-1be5-40a7-8a47-a60d82ead341",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9274aaea-8381-4ef9-b64d-1356359ee83a"
        },
        "item": {
          "id": "3e21fb91-b52e-4a7b-8c73-1d5e0495f626",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3984335b-1f7d-4025-b18d-479cd6cd60d6",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45e7747-e262-4c6d-9b5f-f1f516c14d1b",
        "cursor": {
          "ref": "b74ec543-d7d7-4ca8-8633-e5f68c1ad7aa",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ba6e94c0-f305-415b-9587-1f82a4581578"
        },
        "item": {
          "id": "c45e7747-e262-4c6d-9b5f-f1f516c14d1b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dc640bc7-0b6f-4614-8e56-f8d3aec0adbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45e7747-e262-4c6d-9b5f-f1f516c14d1b",
        "cursor": {
          "ref": "b74ec543-d7d7-4ca8-8633-e5f68c1ad7aa",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ba6e94c0-f305-415b-9587-1f82a4581578"
        },
        "item": {
          "id": "c45e7747-e262-4c6d-9b5f-f1f516c14d1b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dc640bc7-0b6f-4614-8e56-f8d3aec0adbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bf7a9c-9ece-4382-9b7b-d0bf8c16dbcd",
        "cursor": {
          "ref": "e860dcad-a81d-40c9-9aaf-5a8a57549823",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "165f562e-c124-4431-a11e-7414585a80ce"
        },
        "item": {
          "id": "b1bf7a9c-9ece-4382-9b7b-d0bf8c16dbcd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c48e03d4-024f-4c51-a17f-11162df19034",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1b2bb8-14ea-4060-9e67-c2c86904f494",
        "cursor": {
          "ref": "f52ebf0e-c85a-4a2a-8fce-f116ac626149",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "140c8012-b292-47d3-b02f-8dc20e8353b1"
        },
        "item": {
          "id": "0b1b2bb8-14ea-4060-9e67-c2c86904f494",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3bb124d0-cc70-4912-abd9-8c0db522da86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}