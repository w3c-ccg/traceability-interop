{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b7f74b02-c1e5-4bad-bc74-ff4eb3473027",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b0bbf75e-e15d-47b5-b51f-fa8b71f71f56",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c158459e-0887-4d66-8356-4406daef7169",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b633ec8-3824-4248-9396-8a0fb1ed9e2a"
                }
              }
            ]
          },
          {
            "id": "cc74e237-ff9e-4c36-8455-a81a76dbf22c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9aeda339-c65a-4133-aaf1-b64e6ffa4565",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f2a3f362-eaf5-4cf5-8dbf-67d7a0658e9f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "53f8b33d-23b1-4466-9755-6975e6f81e5f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "78fa7d5c-6eb4-445a-87a2-ade6be54c276",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8468a4ca-4975-4493-a557-90ed8f9ce1bd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cbf9e11-e334-417d-bffd-4ea20739a88d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "228f4ded-77af-48b7-b3fb-b6ba877d963b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "831a4729-e05e-44b1-b024-963e296aa309",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e23a2aa5-52c7-471f-b7b3-cffeaecadca6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ea640d0c-3e62-4d7e-bd3b-f0a1442d40fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d2203df-679b-4821-814c-d15fdc4fb90f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2d91146-664a-4510-bda1-70050e3834d0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "afdcaa97-b72a-40c6-ae0a-48b6ecd105b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4d48780-88c1-4d69-920c-a948f9ebd0b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa3c7efb-6d92-4526-aa56-b4bb9344c1eb"
            }
          }
        ]
      },
      {
        "id": "4772b78e-ae76-4ac3-a11d-e6db76cfb0ea",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "178f6584-899e-4513-a615-de1709e967e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1aa00123-886a-46bc-b782-d7122499c7e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "613ea1d8-0b4a-435e-bae1-03744aa587f5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4e8c36-c752-4b0c-b3cb-24f8414c411f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76d70404-489a-4f6e-98ff-232598f84cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0156e4b5-901b-4d9a-8da0-2385603b2324",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c032b5e7-5c65-4ee5-b8d1-1d045e90f49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11a650e0-fc9f-4ef6-b4db-3950dffcb609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151d8cc3-bd51-4f0c-898d-1dd5c0b16ff7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668086a2-114f-4873-8c7a-94e86a1a9f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25811dff-1667-446e-ae8d-8e86bd35ba8b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "07b78b40-2fb3-444f-82ac-3d2c572ba9eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2551711e-f907-4302-90b7-cb390b5d7f70",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7e9e58-86bf-43e3-9c02-8d4a46093d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec9e4436-999f-409b-a0cc-32c28bfca826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093d93c5-c678-4d58-a99e-cfa9ace0ea7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b6296e-ea29-41df-9b56-eba238928674"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4dd33779-7c68-408d-98fd-e19664ab7de0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c837080-72b1-4cb5-8dcf-21c9118deec1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dcfc7fe-d66b-4ace-9edc-97f030ba6375",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4752f14e-9da6-43f3-9b68-85b07013d846"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db4f36ca-71d2-4767-baae-fc0d8c9c5f84",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4980e6bc-8ba5-49b3-8221-45b30c0a1688"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eedb8310-b1e3-4962-a9ba-ecf30b310d5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f0c6e5d-7c89-4d64-b928-7405ee2217c6"
            }
          }
        ]
      },
      {
        "id": "67bc99b9-b38c-43ee-9617-05e448bddb02",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "af6a5c6a-1818-4df5-8621-94907ee704c6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4024d9a5-8128-40cd-b2ba-03173a6caeba",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e414776c-3399-4d2f-a00b-f364e67f3f62",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0a2b04-ac27-401d-84b3-2e95facd8629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9371213b-263c-49f0-93e3-d28f561b0dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54922fbe-5ba7-4136-887a-927cbeb11ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2702e82-50cb-4b64-ac6c-92ddb32f6195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0e4ba5-d118-4bb2-a9e4-55bb46765fa5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7cc935-97cd-492f-9335-8068335a7f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f952df1-2b87-40f8-80cf-208ce0e1fcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528b2150-f49f-47af-82eb-19b0d7c80e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee7cd9da-8b7c-41c8-ba31-4c293e79be69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1567145a-da58-4e93-91e7-6dea67779904",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1558b08f-7942-4be4-a0f6-a8c55ee493c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab9ef97-937e-4eb8-9e34-6768afd5e501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2e1f3d-cf97-47c0-928c-1bc6c096b74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "549f4ae8-5028-4dc0-9790-4e03dfadcceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446bd6ef-b1a8-4abb-8280-7ab030499df0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b45a8c-13f4-44d0-85cb-2a8782e750bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d091b9ae-7ef7-4446-80eb-c616bd593b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ed1ea4-3f7b-4d94-88d3-426e773e0549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c2e6436-5dcd-4b00-9b55-ce47ff0a4bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0e9757-494f-4d7d-af4b-b56a30e223bf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b964bc-3e3c-475e-b297-6ce21f5bc563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb18490-98ad-46df-91f0-c871642810ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11dc84f-4343-49a9-bc2e-174b9bac7ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1b8b0f2-7ec8-4ef2-b65c-6b861a89da66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726ead58-d743-4925-9d65-64ef36d0b011",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6213238-b209-4043-940b-c95b26e20434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840dfb46-6992-4e7a-99fe-1ec59c9404a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac62616-7e80-4fdb-903a-87a1381e9dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eeeeecae-28a9-4c93-8ed3-d1510ef18730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97177ea3-694d-45ac-84ce-4cb64418cb2c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff4fb98-5c87-4e8a-992a-ccb3aa2d838b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02ecd25-dc44-4a7e-a080-6a028af041a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060edd9f-c955-4d3c-b775-f2d4200185ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c5d6344-7680-40ad-919a-7907e39b4107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa76c41-7c24-48cf-a0c7-412f5a5bced3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd8ac5d-0cd1-4718-8323-26a0463de16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e622191-48f8-4015-ba37-7b91c034b955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5beabb-02e7-40b3-b193-c9176cb78dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ff8a6fe-0deb-4407-b170-db464c557b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d26b91-7182-4f94-b47b-2bfbd4a9f918",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ea480b-2278-4233-bda1-9baf9cf4e8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09742ac-6aa8-4585-838e-d647a33cb263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae6c474-9ed9-4548-a193-ec7255fa86e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60c2f8eb-1cdf-4391-b777-727682248b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b956e6-0b72-480c-acef-e3ff22709dd8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dc0de0-3415-4038-9b29-5cb36c6125fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4f5a9f-447a-42ff-86f9-21ffb61284c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef26200-521f-4530-bd34-694aeb620438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea09e8ef-bdb2-4277-bb61-971e3be699cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabfc0af-ebd6-4d4e-a265-1e7f90034c59",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfe897c-e29c-4d76-86f6-6288021035fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89284ced-503b-4be3-9812-2e4b6f72c7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52fc625-8d99-4001-ad08-7b22c2b28261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38ee655e-7125-42ed-80c1-4da6ed0d41c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a1caec-1bee-486a-9f6c-12b96fb3f8e6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e37728-de40-4b4c-886f-c1705fb24890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da4267a-7f80-4997-b18c-43a13abdb822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2092a7d0-94d5-4e1b-8e6a-e1a943f8d791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8044a35-228c-4382-a5b3-3b2a1da692c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae717e81-6bb6-43f9-9ee2-dc25fd7cb509",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350ec475-4208-4859-a945-7b1ce91cd4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e611a658-3719-40bc-ad64-511b8ac63ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6755d478-222c-4a0c-b479-b77cef35fd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1029e57-5c6f-490a-8c54-1ef237389c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3e2379-4a8b-43a9-bfba-0ebae2486465",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bc9c7b-eaed-4a80-9dfd-c7e8f2cb26d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a861739e-5c1a-419f-9945-7cbba0db6e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c45bdb-1f7c-44d4-a242-bd3921260586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36092ec3-11a9-4df5-a986-38cf70124680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e0c45e-4cf5-4ce2-a2ad-7049f39dc88f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d7b058-7af5-4103-8659-f7dd30c511ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298d03f3-abad-4619-ab9f-eef3b4fec912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c03903-8a11-4b8d-8ed2-28486cc94104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1782e74b-0a5b-4c7b-a5f8-ff6ea61bdda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931e9c81-87e3-4d68-8d46-ea0aa5840faf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69495c40-f595-46d3-b9ef-559f03d1b054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c538fc-a6b3-4a3c-b633-03de5275b1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4a961d-f9ee-45fe-8222-bc7500553a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c11436be-8f00-4c6e-aeab-4f2536f04cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeafa688-a773-4de3-b73b-0125e7cf2452",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7407d362-ef83-4768-8b38-a6d15b61f34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c3bdf5-1eef-4769-a5e1-3be7f7742abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ccf323-60e4-4544-9d87-42141db41a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43aaffb0-5c25-414c-a397-ea864c5ef1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac746ed-0d22-4784-aec4-a1687fd25cef",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a9579b-8de3-47d2-8b5d-789c92c51d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99d8d23-f742-4396-9bd8-3697c6b9d1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dd76c0-ae86-4818-ab88-8cff3138f21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8514967b-8b57-413d-a813-5d2c4d548457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e963ff-abd1-4135-b7e6-14bb0adf1ef6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f71ab92-af9e-4d05-98ee-baa35627d655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ab7cc6-9177-4ff2-bdb8-f7fc7bdc8bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e6c296-8993-4850-bb7d-850f7046aecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74f6dbe4-7f06-4621-8885-90b4bdbd86a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc58574d-fd03-4367-a32a-5cbe9ed41ef9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e27503b-8a36-4263-900c-5366806bd605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4438678e-fb91-4a59-be58-ff8e2d0cf1aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70592413-07a0-40d0-b5a7-0b4cbe889b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32a78ad8-1412-4d9b-afb8-6565692b43b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc256277-fe94-456a-9035-b7682e49fc84",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42e4055-41d8-43dd-89c1-f29137c9ed7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c003e9-747f-4043-914e-cb534aab79f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec93b9a-f4c6-4bfb-ab58-03e1e731f058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcd4fad-5e80-43d9-9c6b-ee22297ff2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0b1828-9269-4534-8258-a1e45a8d8d75",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75157438-b70d-48b3-8828-3ec1048ffe65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b354ca96-862d-4ec7-939a-7fbacb67d868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622b5f37-3a26-4624-aaa0-0e77e53bc32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e486eb1-ea08-496b-86f4-b366fc2fdc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1fcf5d-ee0b-44ed-a96a-7e828fb10653",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413da4f9-a58d-4407-996a-4f2863a63f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65cce020-b510-479e-b98a-d1f47d6d1d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f702ef-a008-47e3-9666-f0cc775fa8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1229584-a5aa-45a9-821e-68155f0b04d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd53ecbf-9d58-4d72-a6b5-6bd57acf00c9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de1e5ee-0e64-4641-b773-031b73b21b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ddd7b41-7274-41f5-855f-7bdadaed87b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad239fc-5ce2-4782-b899-da9674eed72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "96b50e3f-89ee-4d23-9916-5dc4b4d96a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a01df58-7413-473c-99cc-9e1e82482dd2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efdb67c-26f3-4146-b2df-85b56acf8ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a820647-fd81-4d36-afd4-7b7817d73ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b77756-4fca-4807-b4a2-1aa2a8809149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad0ff86-54bc-4535-ac32-195ef80329f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e684c23-ba9f-4a9d-b397-c78435e013ad",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2acf07-d7b9-4015-9543-ec7a0d1243af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f116ce0f-e33d-44ea-af57-541630cb15c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0622a35-56a9-4dff-aa85-036b4a3df7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f35aa43-cfbd-4f52-8afa-f779586c7217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3d3902-ffe3-4acc-9423-fc0e22493c9a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de2bd26-6469-424a-be6f-a933d7d552f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241cf35d-5b36-4e50-9959-2d08f4b99f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610dee61-3739-4dd1-bb78-033f98b3bc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5794c6c-c0ca-4b30-bbd1-b1827a23f2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0cc137-ed33-4280-9c2b-a6bd459e697b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224a8304-91e8-47c0-b2e6-9e0f0a10c809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188c7784-4ebb-42f8-94cc-df02bce52f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49924cb6-b10a-4064-a656-0867747dc876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ab7102-b0ae-41cc-bcc2-289fed3a5b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e39b70-a09a-4c93-a3c0-1a296348fe1b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2983bf-18a0-431e-a586-c8095f22347c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8e8cb2-b1a6-4474-9bb2-27bce9c0dcb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf93342-2bfe-4f0e-8bf2-79c50982ce01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63cda7b5-3e85-431b-8045-7d6f0586a0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dea53ba-0bf5-4327-ab31-80f40d2edf40",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f0be4b-3d0a-4844-9e86-513efc2ef7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf3bdd0-31d6-4157-90d0-260114f98c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5c6a91-4f70-4550-b914-5619fe218edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba972492-2645-4358-9494-3879598c469f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9a5b8d-1cb9-4020-9e1a-b3d9ec940eb9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2225fd-0245-4ac7-984e-7276af53c230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe6762d-9387-4747-a678-ecf0b1a4a587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76adcd2-049a-4419-ac81-287e7fded1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4846e986-540f-4012-ac88-2dc7dd4b8162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b9666d-8870-4b35-b8f6-08ab08496896",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077714c8-c9de-4c33-ad04-bdf6bc52df7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01241e47-52d7-4ba0-b605-7dd48e954c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658474a0-e5c5-4be9-b59f-09f3c2aab4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab959bc-786e-4014-b95b-f19ec3ae726d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4064b92-07dd-4227-a2ac-bc064cb7d5e6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d83599c-208f-4596-b34d-5802ab0ea41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba08f84-8f34-455d-8104-2d5726abeb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d3bb24-956b-446e-af36-a69987246a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0274f5f8-d8c2-446a-92b8-c9b562d2b87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d71e0f-289d-4a79-8388-f58d5f9f595e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfcd0fd-34d3-4d0f-8d36-85377d04bea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a288539-fa0e-4ebb-b7dc-ca27dfa24532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e1a709-48d3-46ec-a983-d77595e7ab71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d8a3cd-4fd3-4322-ac3f-d93c7dc5525b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2ae7a2-b1fc-4849-8e66-a5a4b893251c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8206f1-84a3-4265-83e0-7c7f9a60820e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04b4cfc-406b-4fbc-80f4-fdcc839e5401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6131a9-9b78-471b-9b95-982037f7439e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d462455e-bee1-4dc7-bc2f-38b857e5111d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bdbdf69-2878-43b8-a873-eea1ff5dbf69",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afac54c-486c-421c-a9af-06d8d2ca638b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "465cc971-68da-4cd5-a9cd-7cedbbcd5685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb775b68-77a6-4a6a-a9d7-ff4702810518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc5cfed-f7a3-4567-9405-33f3e5285ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d12468-7737-40fb-bfcd-0d14ef4cb2fc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f49b791-a705-4432-ae67-5e216223b001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b489e25-a8ca-47b9-8b55-e9677e2f37e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14e7387-61ff-4b96-aadb-28239610f907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83d237a0-0d73-4d53-90d5-9d91e97a3e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5adf2152-b3ab-485c-a776-39c6f3f8b208",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4984bd7-f12c-418b-bb01-f65d3d792d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf773a63-3107-4ec9-993a-e2e0ae491e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3c3431-153e-433d-9557-fc8c483f06ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0c8c16-6045-4be3-996f-2724fad8211d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a75aedb-dfb8-4971-9ef9-c60508d3ae30",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8249416-97c1-4d66-853e-ba4feaeac84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d324f2be-26b4-46fa-946d-097401a93a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68dc0123-8c27-4cb1-af7b-2950c5df8f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "714656db-4704-4106-9ece-8457c039a2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5241e85-1c4d-4338-86e5-95c3ed9f97dc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833033db-de0e-41be-8087-962820e63464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c4765a-8728-4c87-a1a6-901364094a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4067f2-103c-4d27-a6a2-f157452ca6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "97017ff3-b1cc-4d61-ad4a-7e764256ef1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb24c008-cf7d-4c17-8c08-3ec46d49e394",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e415f15e-4768-4778-bbad-f75ac91363ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2d149b-f406-40ed-8dd6-2695d3bca523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a4e80a-abb5-41ef-a238-1d258e9344fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "264af005-83a3-43a3-86bb-98aba3b3eee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff114fd8-09ed-469b-94bd-79b99b861ed0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e72c29-e84c-4f52-8ec3-087cbd5dffaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639b3e07-1299-4d90-83ba-f07a6af7947d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ce3067-e270-444f-8637-24e63a4f520f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "59a142d7-c0b4-45ee-b7ea-19668cbd1915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393ca01e-6b78-41ed-bbde-b65cf1619196",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe514d8c-e773-4273-8a17-2da36161d959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af342eb-ac04-4b4c-9b02-93cdcadcef4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888488a2-cb74-4c78-b6ee-4f765d31b34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5838893b-0d36-47ef-b660-a97ef6ef127f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fc4907-eb6b-4523-b54c-b449667c98e2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a307c6b-37db-43d5-92ed-279ff4a229bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de833e97-2869-4ff2-9723-129c4cb8fac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f5aea9-851a-4492-b061-dbf624610a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f9f2a30-3a31-4548-8efc-45f4ae91ac31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed556cb-6575-4908-9b4a-02160e7526a9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efe7b7d-9e8a-46b3-b212-4b319e6c6c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ef4b30-3af1-4f5c-b7c6-08567e2694d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c5a596-e41a-472a-8c73-d1e726adcdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "422d6ed5-c642-4e03-b908-7e9efe5516d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d794d50-47ff-477b-9ba8-257ca5813001",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dac4ff-6892-4026-82c2-0e4d1fb29ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba76c84c-78cc-4809-86ae-8e96d419e4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84235b91-f106-4f33-8862-eaa53dd74480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c796034-9f8d-4aae-a751-5305286e5564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f0831e-5b04-4932-a6b2-46f027c08b3a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc280042-ebb2-4733-a622-d51d84fed5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e4d2cd-5085-4ccd-8331-19a2b2a71b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da03bd57-affa-4c76-a3cb-bd644e2c7b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5cffe6-069b-45c5-9a2f-767fb1c867e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8413b8-6c2c-41bc-bc13-82f8bb7ab3bd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e349eb0f-babc-43bf-a325-a41dd337c50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5777d8-d669-40bf-8ada-918e2bf34253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f92773-c53f-4eec-93ae-1923c245d764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "481f509d-2c1f-4053-8b97-89b6c70f2329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf226d33-d36e-4fa7-b59d-62f145b16d50",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79f9a49-3710-4fb3-9b9d-a57d8a32a0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e503c12-ba93-4035-8093-186a326a2dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170d58bf-edb3-40dc-b45d-8e602ddd7a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "93c5b35c-d32d-4fd1-83ed-f5de67905a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af6459e-1658-4079-943d-81bff9485a1a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21774181-ea98-429b-82ef-7432147f23c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e37a39f2-5709-44da-9464-f88d09fe6cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73ad187-33a0-4b92-8340-028b753b49a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "011f42f4-ee21-49d1-aa03-4cc64d793248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aebbf88-c1cc-4b60-8b21-657b8b9bbcab",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9dde0d-f0b6-4dd7-8753-a1391ffdb8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b19d57f1-9bad-40b0-8a2b-7b89efff499f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9d07b7-bfe8-4ecc-9aa7-00db225580e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc409c13-00d6-4c20-a5ca-3fadbeb773e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c42840d-24e8-43a3-b08c-509903846f43",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528aeaad-f863-425a-946f-90d9113bb9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d653e56-eaca-49bd-8a3a-5909537d1d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6430e9f4-3813-47bf-8dbb-2b8048b9ded5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "378863eb-e5d6-4e85-8aff-24c47367597d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a3f46b-dff8-4a7d-8dfc-38c479db18a4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a8070f-688d-4dc9-b242-872cdabc633b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a2cfe0-4671-430c-ab4a-3d92cfaabbda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dce71f9-6d0c-4c43-95ed-5b8ad4958da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d8a5de6-5855-41dc-b757-38c43335ad22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514f42f3-a2cd-42a3-8074-9fc01e961db8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95d289a-9ed7-4c6a-9cf6-975fbb35b9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3850bc82-ab2a-4e98-ad82-a82383074968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabc2773-e7aa-4943-9759-92a3c39496f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "646973aa-c23a-4b4a-9472-30ad08e61c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120f52a1-9c4c-45d8-83e8-620baf13f6a2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3643d0d-1f91-4302-a5bd-216a40f5bafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4abc96db-24b0-4f04-9a8f-1af276f3b759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9c81dc-50b3-4ee4-b6fd-afec4ec694ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94126dba-3a4f-4bdf-9bd8-ad49da720b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232b4e32-b259-4eea-949d-d9395c595875",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f46e99f-8876-4b6c-a050-5d14fda6872e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf27b92-5ef0-4abb-a8b0-aab21d9fb093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d66c18-56f1-4090-9f1f-a8c13414b90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4080196a-2f20-4fd9-9b82-2c6239d95f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66198f7-bd1f-44a3-8d70-1ce052710efa",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10414434-0276-4e7e-a11d-abfb2685a759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f78f37e-f2a7-4b9a-9d3e-e28f59d17c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c76ac48-55d9-483c-80e0-f4d004e48c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "110eeff4-d9d3-479c-8a9c-022a0f30e148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16b9fba-d912-4882-89d0-e704b63cebf1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc25693-1e13-4dfb-9e45-4f9685fad4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca480f2-758f-4dc4-908f-fe9c4d1c2a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f976f4a-9304-47b2-8b49-98ec8854418a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "806f38db-d0fe-428c-b26f-16926c9a349c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddadcf57-1d75-46f8-83f3-bfd351c02287",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c229fc22-bb8f-47a8-9ff4-5ae7dcd04356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad5dad2-e3db-416f-b3d5-ab6d6f6ab0c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2ee454-8b9a-4b39-9c86-0d9fdec3b89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "86516b02-ea66-49b0-ba6b-e4095382d35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58d8521-e854-4cc1-87af-119a9e72cc3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0501ef-e345-4e49-907e-e815eb1a7964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b6498e-14b3-4bf1-a39a-a274f4a3ec6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58716886-1405-4593-8615-1a0f75ab12d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4758ae8f-5c2f-4b2b-b1b5-dc48500441d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb11c360-7a8b-43b3-a126-7e85338fcf48",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335e6704-4413-43a1-8019-b169e3449d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5353fd32-4043-4184-8a33-f06b1bda8030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f48d1de-d585-4afc-ab5b-dad752e5c14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d86cfcb2-f1f8-4d9c-9745-0768deee5cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21f928b-b6aa-4b3d-99d0-8f27332a7ace",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b066c9-00d2-43af-a819-b9a6c28bd38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d89e5c-3902-43f1-862a-8928e1342522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd4763a-0f0a-488b-b6f3-785add3679c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f89ef3-c779-4744-8de5-59794bb6c255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3ac342-743e-4b40-aafe-9949aa2937b8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a06835-85e6-4f7a-a2bd-a21fc03b0bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c60e07-f30a-4a10-afbe-06281a7d7113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4405243f-59eb-4b1e-bce5-e740c946e5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fda35ed-9487-40a7-a6d7-c0a385297573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fba3f83-707e-4cb5-8011-1930297daf1a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e63c993-2249-46ac-82c8-9d5c36b47b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a950ac3f-0523-48d4-a6bc-40f4bf471a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857c519c-b627-4771-ae4e-372ac69c6ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5791c737-2146-46a7-9569-1c5ff7fdff0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b78b9c5-38b6-4beb-8cd7-da768bb4078f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8e7953-7628-43d2-988e-2c6e9cc80458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3df440-58f2-49d2-a0e4-959779d90779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0df3b00-42e2-48d8-b0e2-903ec4553bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a45f967b-57f0-4f71-848c-b632b9e174b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59590944-45c7-4d07-8c70-022cc476a581",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40acfc19-cde6-4b46-a564-adf382f6e671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74889759-695f-4b92-a8dd-997ffbdcedfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86048b26-3431-44bd-8317-0e8c4319cad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "231b4bc8-a286-4aa1-af02-21b7ebcb4bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c8a2e8-539c-4022-8288-f48e1e802872",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323e284a-c1e5-478c-8568-75b6e32721be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4ca587-8c1d-49d9-a068-d35d71bcacb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da82b4ed-c4f4-4a12-8196-68195d4515a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f63f79f3-b1f4-48dd-9362-135bbf685bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819073f2-cc5a-44db-973e-5ce3d05b591f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4353940e-2bc6-4878-a48c-76a6a9533c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e641f1-1cb8-4969-9ef5-758621d6c894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206b0f6e-293a-488b-95f2-2772b72216e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3592dc-fa9b-4b6e-b0c3-b546bee89f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc791755-8921-43e1-b081-0c97ee69f154",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec1ba3a-0be4-4cc7-b6c2-c1bc34fceb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d30d81-8ca4-484f-88ce-5c84244f8dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb065e3-05f9-415b-8bf7-8c6ea11dacca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a3d331-b044-481c-8b64-6854ab96fd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53c1741-8b19-46cf-a78e-f06327277d8f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37733992-0eb0-402d-bffc-7da333ebd722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6501e6-044a-471b-92ad-3130ca8fc2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77090834-eada-4575-8b4b-baaab89bc183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12dc928a-7a38-4b64-8500-7e9a6e3c23c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f0b5e7-f9cd-488a-a521-bf06ea28a09e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7379b9cc-ab6f-49e9-8132-35519d2616f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76c121b-30a6-4d6f-9753-0bc23ff631b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7eab413-ee26-4d80-8566-c01e3611c504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d75002-acc9-4636-b9c3-c18c217dea82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23f4590-ca48-4d5f-a5a5-424df3a7357c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb6b797-77c7-4d40-997f-3b20eb93145d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c0dcc4-8e67-42e8-a5ad-59325a3965b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee5a120-d334-4857-ae2f-ba26fdc78bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf3f64b-d5c3-4fb9-8387-0ee938374ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5f7fce-67c2-4ac2-a71c-3260b50ccdf6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c945973c-031c-41eb-8573-86740dc8ae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce091675-be8b-4b94-86f6-636b20205d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1002b4-0f34-4bcc-9b10-9211fa3cdbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22b1e066-adc9-4530-85ce-5a9fb33b0f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598cb2fe-fcd7-4cdb-b3b1-af73c600984e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e7828a-30cf-4333-bf34-7edaaa486a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67780ca-61bf-4996-82c6-be515a14194c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0608fc53-106a-4f00-90d9-ce958903ad6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59bc7266-d9c8-4661-8986-04cc4aef35ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd160c88-7ed1-4fff-ac09-b3473a99abfb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce8157d-3e32-479f-90d1-b76f01c6d316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25e18a7-d71b-4681-832a-440cdeab6b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e62448-619e-4ce3-9e74-c90c1b0b2caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed7fcd1-f2fb-4e6f-a6ce-153d64efe04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76443397-c322-4c4a-a1a7-99560e7b4bac",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd06523f-c9a1-49cc-8ac3-c6e68c7cb06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862d0626-a887-44b7-9b01-63933f3cc4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888c7aee-bb45-4b9b-b5e5-cbc8c43e2cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30174fd8-d20d-4cac-a9ad-5c69f22f7539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3e4801-79f7-4882-bf8b-a1c2acbe30b6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8c636b-1ed2-440d-89d8-5fa749c592ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "602eb493-298f-4033-891f-9e8710505c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f772895-5fe0-45d2-89f1-c6980f941181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52f6d691-f00b-425e-bf4d-321be170861e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122b61e3-a2b8-4cc4-aa36-e0948714ae8d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34597e9c-39d4-443c-ac59-bf756478e28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f6297a-c347-43d0-848c-c6537bef078e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94409c79-419f-4465-8256-abca762aeef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3464b386-a961-4133-8329-f323fb6b9f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c7efb7-2978-4493-b0e8-657756f10e8f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e76a757-adeb-4a0b-a221-5e339c494e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "942806dd-35a7-40ed-ab07-03eda93cdb88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0920ef07-f2cb-4fec-85a6-d42d113a252e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39297ce2-c6dd-4827-9977-a1ec6527d2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e704da-1ff2-485c-bfb5-30494bfb37cc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1549c805-952d-4ae9-9426-283d3b0360be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1a1d78-e054-432a-9d82-d9a5bd8f9db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c18b3bc-fef9-4b85-9944-bcf003021ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e43fe5d7-059b-4af0-affd-820eb2623e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e0baad-7c32-48f3-af39-ace8c9c45b21",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ae136b-6cf8-4456-9893-dc40f0b9f2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea061bfd-f1ee-4f5a-b8a4-c38ebf5b80f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fa2874-554f-43a7-91b9-2602983609b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c45d0a-fb1c-4723-89d8-b27187ddff73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983055cc-d539-494b-b874-fa15d8783f3f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd670cf-37c6-4838-8373-87cc6ea2e07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e675ed1-2ff3-479a-ba1d-2781f6671bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6545273-a629-4222-9c14-fcacf204d27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5fc4d0f-90f2-413d-9063-4adc60010ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300eb2dc-1b81-481b-9a5a-d4f2a6c91e6c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1e32b0-e3b2-4664-9171-498e04f101f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1374e6-5a7c-450a-a7a8-568f4d01392b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e794785-9585-4104-ae7e-472399b1c139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6af3c633-c5d4-4d20-b0bd-f8d8457223e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cdaba6-1fea-435b-a5f2-9091d441f165",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d35350-27be-4d20-87c4-77af91bfa3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1986af-e908-41a3-af88-c65bad00a268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd216b9b-3f53-4b73-9a00-77514567e47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a68c06-cf99-4edb-9cb9-dd05f1245905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0627b974-06ed-4585-b44d-382db78f361e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c609c79-b173-48e8-8378-aa45fad9f636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b550e1-7501-4ef3-9253-067c50303400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fae27da-7195-4896-b979-a35a2bb8b32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd7ff78-4059-4350-9098-905277dc905d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377bd238-07d1-42e9-bf80-427c97cbd72c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f31780-936a-4e77-a986-dab602634959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974eb3b7-08d9-4d7e-bfae-67935b3ef893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb6745c-363a-46f1-b024-1ca05c8a97d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f00d9ff-edd3-4c93-9a02-f09b5182c25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4ff6d5-3af2-45ad-80ae-aab14201393e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92946fd-a798-424c-b921-7291636c0936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c67cf5-02ec-42b7-82d0-07cdab3694f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107af5ac-02ed-436b-87ae-bc6a40c45a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef98c8d-bbd9-44c0-b080-90af6a8402db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99b95a9-72c8-4968-b34c-e42d06a9a8b6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5887127e-ed33-4c45-ad7d-1b76cf00e2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d955d515-6837-438a-ba96-4e1d8b8635dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08e4e69-485f-488d-8a5f-1a831462ae53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6185b7c8-91d3-43fb-bd77-c11f078fdf2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d831c9ea-fc46-444f-b9ec-99be29e2ce7f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c8d8f3-33fb-434b-b4c0-464023546072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d17a218-21a8-4fe4-8ade-7679a5aca2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c93d76-5b2d-417f-9884-c92e33f28f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0246b5c-5f45-4921-88e3-902b6ebc047b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad16e5a-7621-4e4b-a627-76e944ac55a1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfa3dbf-3f1c-40c5-a4c3-e3057bb266b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e93c31f-5ba4-4bcd-b5e7-7db600de3b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6310589-d265-4752-94e1-0be8aa7d8841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "018a1521-7d95-49ad-8ad5-4591a57f9643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1f8698-f4bf-455b-9ba2-cd7f1dcd6fbb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9706c253-15d9-4c54-ac37-1a60beb4d5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a65e0c-0bb2-453d-b0e3-1eafd1ea1975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e5b490-4bba-4ea0-b375-97030af1bc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c36e26c2-5307-4928-8fb1-42fce29f66a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692fca6d-f25e-490f-abe2-52d262513f16",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b559adf4-0f40-4b97-9455-f9ab3c267910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "56d193c9-4e9b-4db5-8a2c-2a3c8e5d5390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3934099a-be9a-4382-9a2f-1371065ab019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "917fb4c0-a002-43ba-a44a-4c92168a36e1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "510149cd-b13a-4d03-92a7-32fd23d787ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1982c49-ba5f-4953-9fbf-2b51f465d2d8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b912a1c7-6849-4d32-97a7-27394b7912b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "449fea4d-ffd7-45f7-b33e-f6c1c10dc316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1798d47b-ce77-466b-8c23-9908663449f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78ec0177-4f81-4fb8-8a07-87777664aebe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2070077e-dda3-4d65-aa4e-7597128077ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0106741-7d67-4b48-a890-488f940f4db3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c28dee9-cd73-4e03-b342-451f15825500",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db14ed04-014e-4897-9ff8-de846d9a7359"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d5640b4-c402-4398-bf1f-4209696ccd02",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67eb0373-7a7a-481b-9b55-b99736901a24"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7b151410-c022-4456-9006-461fbc2d977a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ebf5f9cc-66df-4650-a0e4-a895173d1ec3"
                }
              }
            ]
          },
          {
            "id": "4612aff3-3aae-4766-80b3-8568c44310f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ca8c6499-fefb-4770-ad0d-b228c2f51140",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0f9a7053-7a38-444b-ab0d-60fdf210901e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bc9272-846e-405e-b443-343f784fb10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "07ec22c9-9e2d-4122-89a5-37d2282ce9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4a3d40-9f1a-4472-b6f2-514b8344c5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd055b19-9f3a-493f-95e1-80d4f94f29fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e469cf7e-e370-4ec6-bbe6-baa81f730e47",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c88894d5-452a-4844-94b1-1fcbdb24fc0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8790ac8a-1d0f-4471-8670-1cff471e8085"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69aede7a-66bb-49db-82f2-e85698a9ae40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "76838eac-a211-4ad5-b27f-13c74e379c3c"
                    }
                  }
                ]
              },
              {
                "id": "4911fcfc-f696-417f-a4b3-cf5d1d1b2646",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47bef7d7-3bbb-4f89-88a6-9860ca8a5839",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aef71d8d-55b8-4259-8c7e-6ac6bb91abae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f84f78e8-17e6-4c15-8276-7350ed8acb07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "45778122-abcd-4d0b-b0aa-893c63ba9187"
                    }
                  }
                ]
              },
              {
                "id": "76b96dd3-c145-4887-aa7e-0a599df68ee1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a78fd44c-d7b7-4d81-870b-a4bd2d2adb3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b5d21fb-9c75-4d29-850f-1e69afea46c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "530b50e4-46bc-45c5-a60a-a191890af7dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5f518ad4-1e6b-4e2b-b7a9-55eb6ab37186"
                    }
                  }
                ]
              },
              {
                "id": "afd0a095-9edd-4307-bf1d-43ad89fb8056",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d812db2-6a87-48c0-bcec-c66c0b72d114",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7c05b71-d97f-4c47-80df-caa3cf24c854"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ef2dbb5-01f8-4e99-986f-126cf7ba7e6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cfa24829-90a2-49d6-ac8a-053f16c82a5f"
                    }
                  }
                ]
              },
              {
                "id": "e846f9ae-ae2d-41fa-9734-44a60501e49b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b4f46b3-e1a7-4775-bcb8-856adb2e93aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08c5c562-e220-4d72-9651-5af1dad5b8b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b042cdc-16cc-4af5-96c9-36e97f8a1f2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "104caa39-0ee8-495e-b815-f1d9a2969f7d"
                    }
                  }
                ]
              },
              {
                "id": "d2727dab-b7e1-4bcc-ae97-07ced25cff69",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e9cff26-8810-4646-92cf-db88e7f1847f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0785151d-fc76-48b3-b3ba-b0f60fab8074"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3610de3-d83d-47c3-82dd-078bf6bef655",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "20c59955-bfea-4cba-8265-efbf5c0e235b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "304cb8ef-2499-4d46-86eb-115a810b843b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3271aa53-aecc-4c40-8559-e515d8cfe8c3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "342242bf-ade0-4c9f-9603-81153017895b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8481c5ac-74c3-4177-a6cb-188625e2c69e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61ad8d5d-8622-4c01-80c0-2075db7a4d9b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6bbc4274-96c0-4dd4-9ca7-aaff71909435"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94d6c29b-2541-43fd-9e5c-9179cc86981b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fbb77916-0b71-4638-b606-4bf1ac688c17"
            }
          }
        ]
      },
      {
        "id": "716e3e84-8c05-411b-abb0-e8fc8b22416c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e6cbc335-a0c4-44fe-87df-1d68fba14954",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81b9a554-f9b4-4e84-87ff-38998b3854f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "072223f0-6db8-4bcd-85da-c31cddc7aa81",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe8b71e-70cd-4cbd-9ddc-4c7161f0e4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3b3dee-61d5-4631-8156-6f06e0af51cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e653a391-a9e6-4f2c-ad5c-2a8ffe1d8647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "89c15317-b538-477c-9f2d-ccde2e2ebcda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6405f8cf-a70b-443d-9edf-e73e6586b241",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751fc152-989b-4f0f-8a6b-d53a80c36593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5da1b0-0348-4ca2-9708-f24c964fa59f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021e61f2-abf5-49f7-a815-09ce1be470bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd1f13d-5dc5-4d3d-846e-730d3d2f0cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14249af1-86de-4841-a1f2-aaab75ff4cbd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8aa8a5-381e-4075-837d-3fc2c38f7b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7230b74d-b7e9-451e-b772-5e787750f71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2526f9f2-f4bc-4d10-bf52-9256495efe94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e2a379-e398-43e1-8d2f-766140f3b8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85176a05-12a8-4df8-9920-3f20b5ba04fe",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567266a4-6026-4532-bc4d-7c82e2467813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54e653f-aba2-4b77-afd9-464b83c4a736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e6a507-0b76-4610-8c23-c2bb94d8c919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1133267b-aa7b-401a-ba38-e1c6f56f31c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839c0847-fb59-4fe8-9668-b313ff64a484",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09280ce-87be-40c9-9527-67bba7d9ecbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42deaa3-da05-4390-b497-3e683aa9acfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08869131-fe6e-4cd5-aafd-2a91fdb86fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72b400b9-f759-470a-b0b9-7671a8783b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcd9a2b-6dd6-4725-997d-b65d33323b03",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c096c009-fbad-4603-a4d0-579deaecfedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cadb86-0054-4b70-a210-fdb28b3d14e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f97477-d217-4d72-bae0-368431887ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2f8964-eebf-4220-ba03-b11847e3fdd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a0251d-ef7f-4153-8e0a-a1d8b82feb29",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f895130b-089c-496b-ba33-6677d9940530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db79d4ce-dc01-4cd0-94e8-459afddf7f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66edbea9-75e8-4746-b60d-198400ce4666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "59cecebc-c3f5-4db8-b116-39661ee9a671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215baa8f-eb28-4541-b256-3d3adbdc9913",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffa57b9-dba8-401a-81bd-11fb628aeffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a705bf48-e646-4ffb-9a72-b83be0517959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036dd5b4-3ab8-4081-919b-a1b00ce665a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "deba5795-1d4b-453b-8d3c-af7d7629481d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff346d2-82de-43b5-bee5-03d8f8590fd2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03544ac-9f5c-422b-8c14-07cbc687b6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2991b2ec-21e4-4d22-8bb4-179a00a5fa35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e877092f-6b56-4439-9ccf-3af3aaaa627d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "172d1bcc-b922-4abd-9a0a-f5ea1d140e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23e2eb4-629a-40cc-8aef-d2089a5dfad8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553f729f-c8db-4cdc-a122-1804d7117103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f81632-a0f4-41ae-a004-729358711123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b99ab9-25ed-4d06-b1dc-2ad52840e680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "969e9c5b-7a88-4bd4-86e2-c3b93c14c737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd69a9f-d56f-44e7-aa21-2d7c11f678f5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7063cf5e-15e4-45ae-8a94-f920fa1768bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f510bfbe-3599-484d-a416-4893ca6885c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbf0682-427b-4a6b-ab3d-acb8c5653720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "636990ba-cf86-4144-8b9d-d9b7bc92646f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e54bb0-d90f-417a-b702-760755bc665a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d842fa4-3f60-4bce-8312-c3ddba2875f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7bd3b2-4d9d-4775-a829-f43a18a87705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94fc646-8627-4be9-bd1e-4901f309dba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b467718-b42e-4260-a0ce-0cf04cb5ab05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24007b1c-20cd-4715-bf23-a87ff876d674",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d0afaf-2d4c-44c9-85fd-40ebad035ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164e7746-7ade-4755-8a1f-a4bef819f89c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2888b1c-e11c-4268-a548-76adeec0a81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da6f78e7-a9a3-4917-8c53-276288537c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0295c631-11d1-4cab-87ed-33e521b6a06c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78036f77-03ba-4544-a66b-e71739c49d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa3c469-09f4-4d03-a4df-311abc7a0821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c676c29e-dc9d-46e4-8689-3ba368b58eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd67365-a427-4c4d-9915-7c69631c51e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e803b89-5715-4843-b4bc-f2e45c23a42d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35a5d73-6453-4d13-b4c8-f8f45de4815c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66274e9-ef63-4589-bb2f-95343fe9dd84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3258df90-7bf4-40b2-be81-06583f21cee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "891e1485-785e-484c-83b0-871ccd02cc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632f3b0a-5bd1-40aa-ae33-8f96f100a3aa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0df3273-d995-498b-bbbe-8480a791de2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7597ffa0-836e-49d5-b6b7-723c9a7be05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6d1222-c5d0-4757-8670-5c667322dafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "80ef22b1-eaa7-4062-8af4-3e35de639700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e294a622-97e5-4a22-8160-688135b8e137",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f5a501-5fd8-42b0-8d6f-0cb2f33a3bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0616adbe-3b97-44ad-bfe4-cab1d8797606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8526714-fa3a-4ac1-8d32-f5557b38e536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2865b386-f8b6-4247-b97b-cff2b515fa3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee613a19-bd48-48f3-b056-8fa5a0e9c891",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c1f6de-4256-496c-b4d1-d24a5c6708dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1410a254-6b3d-4562-87f4-0c82ccf9215d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8d306f-daf4-4cbd-ab22-a918d6ff3127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "429a4ba3-b72c-4bae-8bce-94e46059d3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822383e6-81a7-48c2-ba4c-e9d9f971bcb7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d67d39-edd3-4759-8d13-0af0c288ba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042e29ef-0cba-4a1e-bda4-3d5da4d435be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a540cbb5-b4f4-48f2-80b3-05dc2f895d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe53f7c3-4797-4482-af24-1e66edf4e1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974fe82c-2219-4e0b-9d28-d0e942a90f9b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a995216a-653f-4a00-be8b-db8f9416cac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46333725-75f0-4d38-b46c-1bb44d36e23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e981eadc-e7a8-432b-aa5d-17fd04bb554b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec6aca9a-2e1a-4d9d-bb23-01e2b2541739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c18357a-d7c5-41bc-a900-8ad7c88e0e9f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8045cefb-ee3d-420b-b2a2-500ca070751f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dd258d-5ada-43ec-ad6c-3d15d384c041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11e6728-dee0-41a4-9c64-e3187cda1c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e012c02-09d6-46e3-8c9a-ebc4d9c052e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3088739-b740-4179-84d2-f2f76be19d0c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd51404-bf16-42b7-9945-0715c557de69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d3077a-bdd1-4e3a-9c90-28ba349de85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce07dd5-a034-488f-8942-3e46de0b9f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49f0fadd-7500-4829-bf14-bbaf5db57538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745edd28-7597-41fd-be64-87b7d24cf6e1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4332803b-006c-4cac-957f-668432d8fc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193a0e77-7a95-42b1-af31-a7eaefe580a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c4849f-a952-431e-a85b-c34e8ca59132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "538a2aad-bb09-44e0-8deb-84be04dfc945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa146dd-0aca-4ac9-bd07-4f7ce3c27649",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da88dee-00fe-4315-96fe-04724a61188d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c7b397-b3f8-4f5b-8235-382c56586e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d57733-d19d-42e3-a319-ff33fb74f9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6adb53-8a36-46bc-b244-43c09590e9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8580b8-6339-463c-90d5-68e75f790d3e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b593430b-e100-4f1b-b7f8-11ec2ba83521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1732ec01-7ebc-4393-9b96-1cd8f79e1c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42a8578-1629-4cce-b5a9-aa709072323d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f37c4b-1e4f-485e-a55f-a1f6a74bde49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984254a8-bb8c-437c-ad94-9f7f07f8da10",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a232ac-33b7-4a1a-b8b5-04faab947ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd24eb2-7783-4953-9859-73a61b79b3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc9a8d6-633d-4614-9ba8-9e8407d84828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ddf3bf-4df4-4efd-98cd-d537eaa847eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ee75a6-c2af-4884-ad23-9dc11bee27b4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107f8c22-18a4-4cec-a7ad-040ad61be492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e389043-8398-4284-b913-7da74bb66bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c71d710-9e77-40b9-84f2-03382f43b1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54b5f231-e3ba-4d58-aec8-e7c3b3941906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f8d3cd-d5e2-4844-ba7c-ec9b331d7a43",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f3f70c-cb7f-4a02-8912-4243f4ebbb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b861ccf-08e3-493c-a814-7340b7d06084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad51f5b-f095-4836-9228-d325569ae4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8a16e5-89a3-4f02-86a6-1b1f15d097e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d213e219-3a88-4805-9703-ce3ee59d384a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a78e14a-7cf1-4587-8bcc-f79789185221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01393d37-938e-4037-8f2f-84f6edf522c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0b2942-3087-4c26-85d0-9425fed5c9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02016277-0cf3-4a18-8f61-a324debfd6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03318d5-ef34-4b82-84bb-92765aeb0d59",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92324872-8484-42d4-a27e-f9434270776f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c07b90d-0dd3-438f-b7f5-1cc9c281148c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339264fe-563c-4e5c-b9d9-b18fc72c550a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27e7a52b-0a2c-4bed-969c-d0a7ba65d02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba591f64-5f6e-4afe-96ff-6fbade8892bf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281eeef5-a8be-4914-a439-6e3fc65acaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284b5457-0d5b-4dbb-8437-d1104b13304f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f4efd6-b259-401a-a482-93c59341df2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71662a2e-a942-410d-9682-8d576c391073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cd1626-b124-4547-9035-930797b6dbc2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76acc5e-9ce5-406f-9c56-bbccc18b52a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bdcb55-ed15-4c1e-9afe-aafc73feeafe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2af869-f657-4b2d-a866-34e50b78201d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af4a4b3d-64b0-4b3b-a2dc-c4d3f76e326a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b13526c0-54bd-4594-ae6e-464fc0adb7c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70fdf187-0690-4dcc-9589-8c5c8f1c6240",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62974567-ea99-499c-bc2c-9c21e21ca803",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ff068ced-f036-4b1c-8551-d567d7c28664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "729e192d-c10e-4678-a12b-cd5958f6ee9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e2a2c48-6fa2-4dfd-bf09-bda73d756c46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8aea80f-71cc-4d89-bc5e-1e7a5be9eb69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3e6ddd8-5c8c-4889-bf5c-d79ff818f784"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28efc92f-bb48-4622-bc86-ff949df9306c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54cf3417-5ca3-4dfa-af21-373f69934cc4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a1570b6-575f-47b2-b8d1-29c6b411cd55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "052b4bcc-5b07-4f20-aa80-75120fb2362f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f9ad49d-2b75-464d-b54c-f66c930956b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a51981a1-ada6-4013-bdce-d95b8e11294a"
            }
          }
        ]
      },
      {
        "id": "a7ccd43a-c9ba-402a-bde4-44179caeae22",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "42520d70-be7b-4192-a9f0-69976d445df1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24d4bdd4-2f60-4d20-b24e-922f84d84e8f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "32d16bf2-0d72-4a18-a476-1d3ce9358757",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160da310-da86-4b64-9c15-82f3cc20cfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b175cdd-18d5-4734-847d-830b905935ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2173830d-b76f-4084-a068-1ab067332f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a452c67d-1107-4503-bad4-6c6837ea7e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7633601f-ec58-4601-bebe-065eb445f92d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbf89d4-1bee-42e3-8aba-f29b09286f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c1481b-dd01-4dc6-a3ae-249a552d54ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9846169a-43ee-47c5-af9c-dc5d19a34611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef4b5e1-aeb4-4089-b20b-5620e3151b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd661aac-7e9f-42bb-adb8-8dc3e0f9760c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b077c8a8-984b-46b0-b80a-1cb0caa5a062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9822f8a8-e0ee-466f-9dda-a6ef38cce7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c951880a-b611-4f7c-9b6f-c9d10f2f9fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "805770aa-01f8-4683-9b9b-fb799658cefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3a22ab-ac09-4d9f-9555-6d9e8aae986c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64565306-8cac-4640-bcfb-b0e05c72a8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccf85df-fadf-4978-b1bb-f724f33dea59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a0ec33-328c-43af-99b4-36205efb538d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f1b832-fe2c-4a87-b2c1-ff9caff0b705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edd85a1-f82c-45b4-be28-75ebc65ad0ef",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07877699-b7ec-4091-9986-41844a4620d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08bdb52-d7c6-4f94-b11e-c30a9aa44e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd889f59-6f80-4a19-8382-7caeb3e64051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac554ba-e018-4197-8ed7-72eca21cc9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30eb10de-c5ab-4705-a538-977c9d1ebce8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19aca46-4d4d-43dd-b624-150f60d35c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6fd41c2-80aa-48fb-9c43-b81e169bcc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fd95b7-6b4e-410e-ad81-9cdde2a67a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1df55fcc-aaf3-4897-8e41-19ea842fe4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23748459-e3b8-4e9d-9ec8-4e35dea6444d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dca5f8-b9f7-4eca-8a44-2f713db901c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fc5a29-5c31-4620-b673-dd0c2ad0bb96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1214f9-bab0-411e-801b-06c1e54eb75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "03633981-9fc5-45d0-8b43-ac7f4d89f581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cd5a62-1c00-4e95-a14f-d1e9847713d7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb74653-573d-4914-8512-a29a299921c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b32889-f842-4eb1-8855-87c371c0703f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d017a0d-013b-4e1b-84bc-0bc4027bafe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "928c6806-7aa4-44fe-b80a-91d3cfe52b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe3459b-5173-44c3-bf09-15d1977ab29b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efee138-739e-4c3d-8072-a64e1848abb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957362b6-2e6e-4dfe-a62f-a11cec4d3697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1721a573-764b-4c5b-bf8a-f9978083e08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc79cec-ca4d-4107-a360-36447c9bbe3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbce5702-6b1e-4cb4-9ffe-24f5f2ede080",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a29219-5b5b-41df-969c-46df408cbfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6dbec9e-f4e3-4fdc-81fe-1183eaf1bd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5861353-60b8-4341-bf49-a51a731bd4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4170e319-cf18-4897-b015-d0014651a824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2ceb1c-049f-48ad-8efe-3c2a9c752231",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac38e2d-c3e2-449b-9753-8d288e87ca7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d7678b-cf08-4d41-9730-229237ddf702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2514b55-1fca-4c72-a91e-1a7d0168f62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d5dad2b2-04a9-4efd-beb9-57f6477f916a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae0b0c4-73cb-4725-9661-185c345bfb14",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d33375-7347-4083-99b6-c494ed8a2f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce8d095-a513-47dd-abff-c46bc0e13805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c19b1e-484e-4645-a234-1dbf28c6e056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de11214a-3c13-403a-8a4f-b146002757c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df0a061-8333-42f7-813f-9d0076850275",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac61093e-f73e-4047-86fd-b0d5ce76f7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c4e5a2-3993-4e30-b1d5-d718e37b47c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a362c84f-6f53-400c-a25c-32deaaf56ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66913668-7d23-4921-a3b5-706717f8f6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cdc72c-4c90-4e71-84e7-2d4db91141de",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709a72c9-b82d-46ba-ad9b-9dfa6b7f8b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3d0e9e-6fd1-42dc-ac21-022bd810ce5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104043b5-34fc-4dc4-81cf-76f6380379fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9ca205-52ab-422b-ae53-7a0cc42aaeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ac8b4f-0326-4af6-aad2-8fa8cff190e8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab9da57-4ea7-4ebd-8682-b1ad5ac1c973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a414b535-4d3d-4b4f-b9ca-247ce84d0aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a811fd09-0bfc-4675-a507-6a5f50bde269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b7959a-214f-4c8e-a0f3-85dee9bfd3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352cdd53-f22f-473e-9bab-4f0a87b00a09",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c56850-bcfe-42ab-bc02-174c10f8b5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a751b080-c2a1-4130-af51-d27094843a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0755e732-10cd-4eb6-8e63-ca25d9833497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e96b7e6-698d-46aa-8f0e-6143b582ac3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38ad5e6-8b4f-4dc9-9a73-9066b7d6ba83",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3057561-0042-4c53-8640-5b5999009614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b63904-c437-4d79-bd28-93f74d624fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130fbfed-2d24-4ee2-85e5-b121534b73e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a06d4bb-c15e-4ecd-8cfd-4faeea191755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5683ff0c-6d4b-40e2-92f2-7bd3dc54b7d0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6331e87f-bf67-4a90-8d60-728a186ba5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2c6a33-045b-44ae-b67b-4da07f1aa4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448ecb5c-df64-48d3-81a1-4171c882ec4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98051a83-c8cc-4f9c-a912-55f8589f8ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215b115f-437e-4479-afcb-db980d7a6757",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fb54c8-80d9-4655-b74d-482b03ab7a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435e97be-e3db-4ccb-bc41-7add343130ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d67d327-ba6d-48cb-898e-8727cc4ef736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f22610f-11ce-48e2-a728-eafde72a05cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28890d1-f271-430e-ae6b-a099601839eb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9ad30b-2bea-4454-badb-5efe28ddc6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1685e66-069d-4cd9-8394-3f1de5def106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1962caae-3691-4e39-87a7-6e852a9835ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42b5684e-2799-401f-b826-c443100ce717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2bb800c-c071-48e0-bcc5-20ef20180b78",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd19162c-5474-4f02-a2d2-154b2894dcd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046286d1-932c-4c79-88d1-bb103833d9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4c219a-e95c-4679-883d-17e63714e453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c88f1132-6e0f-4674-a667-34d4cc13e062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a0c2e2-a92b-495f-b9ce-d115473bdbcd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4f607c-6bae-4b92-baea-03e36fba612e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1486d876-5cfa-4b1f-aceb-27f49928ade8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f76773-7886-45ef-b8b3-8f65bf4e293c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81e8907f-4102-4756-ab89-3faca536e09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c370c1-d66a-4525-b488-fcfb0fd2f0ef",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556d409e-67a2-441e-9d07-2a37411bf09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3a8bc5-53e3-4af3-a290-8d46b9db585e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3288e458-0bf3-40be-a2ec-b8e8b9b58239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fb774c-4e4a-449a-b96c-70b197a8a5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec60075-8902-4227-abcd-2b534b9b4417",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf00b56-f77e-4ba8-a33e-96d76b17b883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb9893f-bfa6-420a-835e-3ce47690646f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12debe7-fb7e-4ea8-9271-2a5c3e6d897e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb72eac4-e49e-45d2-9aa2-d0894e749635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ebb6f4-0d88-4a6c-a561-7ed67f6575be",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762e6704-c00c-44ed-ad27-2b8d0e7a77e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b14c3a8-0bf3-4fd4-aaf2-f3b43fdb9df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43bc06c-cd51-481f-88d9-d71b2998ba14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62969898-0599-49d5-a693-f03cc13337ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2295d1-1209-45b7-9c90-75313126e3de",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ffee93-d9cc-4f1e-8dea-420d5e2ae968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756d4cac-b6e1-4140-9034-5274dd3d8fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eec83a0-4b52-49ed-8476-dcdc29888784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "343899cd-b2fe-49a1-8e17-0407cd3e4081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bce6a8e-06b9-4ea3-a0f5-01a5ad99e81b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2053ec-a270-486e-af14-1ce51ec550ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da21c8c-5626-4d0b-b4eb-b904065fa303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b79754-f733-491b-a473-37847e8246a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64fcfa0c-61e3-4121-a855-56b5399797cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fc62f8-bc38-4670-9515-1d633eeac281",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f533f735-4c91-4999-ad94-58e3dfe4424e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7538783-7328-4d90-b10e-4945d524d645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087b4a96-436f-4e30-94cf-142197030483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16852c22-578c-4c4f-bbd6-51e286df7df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef555754-c947-4c40-8f4b-23242336f16f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b7e347-a5d9-4346-8242-25632eafcb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab09ab6-c98a-4301-9df8-4bd751bd8009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294d91ba-4d24-48ed-8fa1-34f6fae960f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8478ef35-95d2-4329-a62a-5d5eefaf34de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b24bf7f-03bc-4435-b1dc-3d37fdfcd09a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019620d0-6753-4265-90cf-d7c4bff57de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb21194c-ea50-46b2-a7fc-c65794ffe4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85d966f-0e5b-4ae4-b8d0-75857f04330b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15df8b07-33b1-4c87-b173-94d51af7824c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54caaffc-a75a-4721-bfe7-71814193d808",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb42a4a-5971-41c7-b92b-d88869d3f068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c19dd0-a4d9-4d37-a25d-624a70d703ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3a6759-4f01-4b52-8bb9-15d3bec2d6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd47285-a2cd-40f2-bb30-1c12ff84a547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45f4f4c-a965-4c4f-99d2-262ca8e28fe9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0329ada5-94dc-4e6e-b065-e3d4235e7e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da29eb8-4344-411d-b467-d30f8f5ee5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558842bc-b216-443f-a624-5ec650a4668c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5596bb87-36e5-4c2f-92d3-e653256d41c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81893754-acca-4c81-8f17-17fa6107e408",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538982b2-712d-46bb-bd20-3ac81ef98108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18901c7-ebe0-4a42-884d-559fe8ffe89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b405c9ff-b450-4f71-86c2-9a31be97d2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d91bbc5f-c373-449b-b6ce-5b0c4955c5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7695f834-b724-4814-9929-1e28a7f904f5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97128c2a-3711-419c-8ad3-6d7018bbfc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a33bae-eda0-42b0-8738-cdf879aea3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8533c0-7e66-4e6a-9cff-837e6a67f02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11d1912a-2760-4da1-922e-19eddb54bdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebf58e2-bb4a-4526-909d-cf208a8b3719",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc14dace-3d10-4e7d-8290-3a9c6e1857c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4969b01-5563-479f-ad0f-55a89d594a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a1bdda-e240-4d7a-8650-35e6cb3cd949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef473b1-ca9e-4739-8c59-8e276a1c2430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e43ced-6992-4234-ae6d-3b6514b41bfb",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3934f20-1cf6-48fb-b5f0-90a446d39991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617f6540-a2de-46b7-ae3c-354b5826f390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fae2748-c4fb-47b4-adb3-bc27c57f0264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b112be30-c959-4222-986b-10e36fe0adcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfa831a-cc61-42f7-9aab-069da9fd7ae6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0570bd1e-21db-42b8-b12d-5056f94e941a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e481c67a-ea72-4592-832d-0305c06e7555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f060054f-e317-4b93-9b1c-ec56acf26d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8967e4-0d6c-4443-8ba3-b2a6e3275525"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebc1e521-bb08-406a-a483-ecb1b370309c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "269c69ed-1e81-4ed9-a89a-a82a20d9c3d8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a5e941-a480-49ae-85ab-61408f27774d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "84465cb5-8208-46b3-aacf-887420862045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881fdc7c-1cba-4579-be05-e9b540c31845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84d568f3-9fab-472e-8935-b3ecb554d23e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f40fc05d-d8c1-4ae4-b866-ac2a77b82868",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "126944b5-30e3-4977-a8ec-ca8e41b35511"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cff2264-4d94-43e8-881e-9dced9cf2135",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b03eff03-e014-4c32-bf4e-335682ea28df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffc55081-3c8d-4d25-995b-42c464274cc5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "11088044-e037-4983-994e-066e84f3bbb3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f432afe4-3e7d-48b8-a609-99f1bfbcd973",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4234c092-6e70-4fe4-85ce-9756f7d06d0a"
            }
          }
        ]
      },
      {
        "id": "5ee5f80c-24c6-4bf9-afc6-0859234b744c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a10aed07-16be-47e8-bb4d-dee17ef9b5a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc9b618c-3b18-483b-a694-d5860a3763d8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5eb8f630-cb64-4514-b513-eca2ff7e17e9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e141f3d-6598-4da3-a707-9a90530774ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c040ae3-68ef-47d0-95b1-c53741d48a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cf2f3e-38f6-43ca-a8d0-ac144dbc98a6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c384ba83-407d-47b2-b66d-6c04fd3ab3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1531fe1-b859-48a8-89a2-ed0cf5a5681f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e381e272-ac1c-45bb-898d-ea36e601961a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5492197-e318-40c4-a65f-90933d2f4032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc9f4a3-c353-48d1-9112-37a41a4f261b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85dcabb4-f5cd-4e2d-8e8e-94a75b4b756f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c5f25e-6a06-4dac-b030-5f89d59a5a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d034bf0-7f6c-4d37-b8a4-9d186074a4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d30cba-bfd6-4cec-b838-9cf1f24555d2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08106982-66fa-44b0-a82d-cfa586e327bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bb801c-cc2f-434c-a962-3b85036b913d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715d2d53-2089-4af9-ba70-fcf352e046aa",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b9ff7e-4e98-4156-b2ca-2a07bb2ae6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aca046c-c100-42b4-ac39-07ec6cbc29d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdaf95c-669e-429e-abd8-2b7d308d8c07",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19f7d6a-ab46-4532-950c-2b5106d076f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dcac716-b53e-40be-9385-e37a6ff19965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4878b7-48ee-4f39-ba83-1cb2fff626af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5832858-7d20-4f57-a104-454cf5bacef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b488359-7b75-4595-86d5-00e868bd70ff",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fa568c-7e6e-4061-b01b-8db6b344ebfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40b4ea7-f3f8-49fc-a5aa-f2f574702049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107483e3-589e-4fa7-9eb6-cd60d5cb1c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f539591-7178-4056-90a6-0a2afc7c3660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1021a05d-39ef-4dc4-8775-54dd72c87ff3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5306f8-5cf8-48f6-b6f0-bdea0ac9f088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f61e8d4-63ed-42f8-9cc3-2053a8cb7f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca02ccf4-cd76-49f3-9efd-44f93a4906c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd426d8f-8de5-4316-80f4-e4ac225b0827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b36121-d71a-4cf8-a4f4-489cf3d16325",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0e32bf-2863-49c5-a1a3-cfdd312a2053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ac4da26-fdde-4d97-b96b-100fbf17a008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9dc746-d88a-46ac-91c3-5206cc685744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a5389d-837d-4adc-9214-298f5c7b9772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00ab548-7f76-4956-b41b-a6ca6eb3e388",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b03acc-6858-4f91-88e8-0b83017145f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56659a51-32de-4619-bf7f-5f0117c5e61f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40c1a0e-02cc-43ef-9f86-74f9aa00fc3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdce4f0-1f06-4979-9f5b-3a0baaf02a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925f0a81-7196-4df6-9610-14191b3dddbf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49826ec6-4da2-41cc-be6c-3fa6ba6d2899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d345b0fc-4570-464d-b304-596e8697ebd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db4b82c-318f-4e09-a26f-86315012709d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a0a398-fece-476a-b2e2-490519fe42e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a790164b-b544-4fba-9567-36fe97fb8c2c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958d7c52-14f8-49e7-96c2-383f21bd316a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "962db70a-f8cb-4971-b835-1da757ed01bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21efb038-16ce-4bb3-bd0b-3ae58507e9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77970f08-e870-4ac2-b9ad-84b15cdd861c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84941a3f-bb86-4b24-951e-d31049c95642",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fc9b28-784f-43df-9d99-09b3027e810c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55838331-52fa-45f7-9d8b-b6b5e6c8f23f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356fd8da-f7cf-403e-aa5f-e22ffb959506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df40e42-ef46-4b12-8b4e-4561b39d3990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6380403-ef10-4de7-beb1-3546bf76858f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daf3833-485b-46ec-8005-d54ce7694197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "099190c5-d0f0-4073-92de-5fb31b0555a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "661cd090-3de8-4209-a264-366862267602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6283bfd9-d4fa-4db8-b916-bae68be097b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b5c0e8-3047-49b1-b749-7a39f536479c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b6aa39-bb0d-45fa-993a-dbb4ee5faa5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1090989b-2cb6-4919-b5e2-8af49fa06cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0048f65c-b26b-4d7a-9482-f491f7cb1bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee56b2b-5320-4df0-ba96-b28d9db653b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1da29e-9ef6-4848-8e4e-cd4854897037",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e6776a-49c5-493c-b776-e018ce3c1a0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8f8d69-e4a9-447a-9129-4956a21562d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ede2be-69ad-4573-840d-2594b6d0b04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577a0054-5e3e-49da-954b-d42b025778ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d08aa3b-4acc-4791-abd7-f9e898e2ea9e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7b8039-cee0-4164-b487-e5ac81a5fc4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d20d631-8154-41ca-935f-0bbe41ef6ff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d85beb1-c94b-4a8a-9065-e3cf0412c0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bd35e9-1bf5-4c55-ac98-909475c55568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c0fc80-6dd0-4155-b634-961928d5168d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bd6703-b359-4846-a94c-4220ebfc54fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8f2771-c9b6-4612-8f2d-259166e1d270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77ceee4-314c-4b41-9502-b1d60ff0dbe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a259014-d7c3-4d05-acb9-a9552d35ceda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37e38b6-346d-450c-a172-1984299682aa",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775c1e68-2934-4824-a306-d8fa5bb4b53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c8b52e-6bf5-4760-82ba-03dc892ac3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64813d14-919c-4959-8d4c-cd44506ccb4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840e15e2-9e6b-4061-b145-31261eb884cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba87efc-c6d6-4357-90ed-061cf71bdfe6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2d8d5a-b6f5-4271-839e-d1d374b0ae56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1534839e-c4b6-4827-b66a-6ea2fa2210f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54df535-f5c6-43c4-bfb0-6dcbdb35ffdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68e473b-a8c1-4043-b65b-2f0debbff498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4185faa-e829-4caf-bce8-b38709206a7e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0cc97c-3bcf-4448-b3cf-9e21d11281c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf7e07d-cfff-4777-9a06-047eb1c22ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8442ac-110d-4a7e-b504-ef149d013f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7a92cc-ac0a-4d69-a8e3-48831b8065e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c43e8aa-f68c-4a34-9e48-48aa4a378d3d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6079a984-3547-4bfb-99ed-5588273c3688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a2e5db-617d-43bb-a97f-c734233a600a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e414b85f-33c6-4633-9532-def21e066e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b11cf8-9194-4da5-9681-8dacd888b87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d999730-938a-419d-98b2-eb82a2076020",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb4b97f-f33f-4fb8-a4c2-849d3a1e5fdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00b79e2f-f44e-42f3-a009-cf24d463f6ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccde26d0-2cec-41eb-a7d7-8e687934d823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa39ca3-fc6f-436f-b34d-f4dead42ed0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f243ab-3b80-42fb-b779-8d87fc8a7eba",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d04a7fa-6072-45d7-a0d4-66f7852df2d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a282619f-86df-4b0a-9126-0007f2441981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fda6d4-e2e1-425a-9189-a5eb4f8d6816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ecb7ed-03cd-4695-8c42-52123d892cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c227a2-ae0a-4730-8a45-ed84f9d00d0e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93105945-a4c5-4f5e-ad52-d1e680336c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c68ec14-5e8d-4da6-b105-639af16a81da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "482fe1e2-5b73-4b59-8cfd-a8e7ada5af94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885f0346-86aa-4d5b-98f8-24d35761b83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5da212-c4d4-40a8-a82a-92bff1e12a86",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cefe9e-f22e-44aa-afa4-e2c68cc28e55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00efe022-5483-4780-b9c2-72f6e42d9828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eae1512-72c0-4e45-9108-dd2f076314c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1b0c3f-cc59-4e06-a2b7-a74ae27b6d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fdb060-254e-49f0-807b-3dfc32decdd5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1506fa68-a1be-4727-aa85-35879cdcb8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629b70c9-9443-423b-9337-5601b76f3704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93f362f-9950-49f1-b24e-6e9ae12c93f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b59757d-1141-42c3-af4d-cf84b7926d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb77e12-9a8c-4fae-afc5-f87e72e15f04",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e8eaa6-c8f4-4a51-9e34-4b51a1ab9de1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bfcfc6e-a1c8-4a78-bb35-a66bea16a646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ac080a-5620-41e9-9fd8-815946a8d524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0985d864-e849-4455-a581-0c430e930c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a313fec4-7776-4765-8d5d-d160cfbe1195",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c2a39a-feba-41cc-a1e2-6c39abef8967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eae26465-a719-411a-8075-cb7c249594f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b515a0d-ba5e-40da-a2ba-93884dfb6515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42007309-619e-4e2f-9005-d87b3b131ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac3b237-4b36-4faa-a387-0a0d233d99f6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f0e143-3398-4700-8982-af692019eefb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bef313de-2f36-4481-9ece-48569d0a559c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd627cd-f916-4cd0-b7fb-1f6878effdee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00640c2c-dd68-4ab5-a0c8-35c109e72d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67eed118-fae8-459f-81ab-704fb58cdd23",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41bd47c-92ec-44a7-97af-516b4edd1bb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "556c162d-4227-4197-87c7-e9b0d3e96fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4148cce1-bb7d-4304-8aa9-2aeca142e6f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce80863-291b-477a-be5f-8288634b65c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c5f8c3-8880-4c28-8418-1ae09128b5b0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1e8fcb-2fc4-44c8-b755-167072dc65eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0a0319d-acb3-4d2b-9bd0-5f98db2342d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af3771f-505e-4c6c-b08f-79e3b962ddf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103f9616-8241-43f0-af3e-837e03ee53a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70f8d93-c6b8-445c-aae0-e98a3b54edda",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fe5a4a-6851-4317-a16b-fb7f4e7a7c5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64374cc7-8ecd-4a44-8328-3b95db3ff1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee28b62c-c9b9-4b62-9745-6a7a315ffccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e3bbe7-ff62-466a-abba-1d5ecd7c9034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032810a5-636f-4394-aef3-9978b2c72a64",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2008b84c-2eb6-41d1-aa6a-56118ce122d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3b3347-445f-4845-841a-d90a6c9f1132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c80bed-0519-4bcc-9bca-ec6c2bc64c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7dff13-21f4-4f36-a47c-84c414cccbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb56ef22-1b2d-4ee4-a1ec-0f08aaf63548",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd93b61f-3b8a-47a0-91fe-4c81be78eef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2825911c-e20e-405d-b932-08040e4f49ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "870764b4-befb-4a55-a373-19c65ac68070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e618da-80fa-44ca-aa5c-e2f66d9b8906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0cb11a-c573-4695-bfc2-61d76491a659",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d43c01-378e-452a-9281-f69ddb725e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9be580e-22f3-4734-ae9e-090fedf9a2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ab003d-6c54-423e-b91e-27566c46bf79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b02235-15fa-4ff6-93bb-6af926644657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3453929a-9a0b-48f1-8632-1a67bfd0d1b2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba777f0f-10ee-40fd-8651-5fde09b7d1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5044f3b0-c2eb-4f30-91e6-9dfd09d9f722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c393ad41-e330-411e-9893-31a8f1a8416f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50261c2e-0e19-4032-a19a-036d8074a04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42921e17-39c6-486a-b36c-2af840a91024",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5cde2e-67b2-444e-b7ee-b09869c70e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b736be79-22aa-428d-aa02-37a86bc3169f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af7cfc0-7535-4148-ae24-de79ae268761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d377f36-85dd-4e35-8145-50d7e1946570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947e4119-b82e-4ac9-b425-c0fe773864ad",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba9bc70-351c-4624-b6a6-5bfdbbe34dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa47d13e-02d0-489c-8269-1635bd480045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38da9b1a-955f-4561-b93b-720308c6abbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7462ce11-6ff3-427e-b1ab-603b486d2148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3898b27b-43d6-412b-b5cd-dedd56e06547",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137f23a5-3e52-480d-af50-9c3ed67b079d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9c3216-acc0-4b52-a385-cdd7c5ee90d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f739275a-1522-4e47-a11c-d93196570907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5440faa4-4f23-4a15-a1df-bd145c89721b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28f4e83-07d6-40f9-8ef1-3c2844afee80",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6965b49e-4c93-4551-a1d0-f90d87a00057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95eec6f0-de25-4e5d-a5f2-2d190f5028f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9d53e8-cd05-447d-ad62-412ace748473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f75e7d5-a2f1-49b7-8433-a3d56415b91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da219229-4b72-4e37-a6c6-fc9a015a2973",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022a39f5-187c-4706-a3a4-66051e2e8238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881ef3d2-0250-412e-9178-0cbfe904752c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf29cf9-9bee-46eb-b44f-cf96a3aa4bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f349cd-36c1-41aa-ac8b-0b2505b7176a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0844487f-2062-43ed-9715-5b4cbf60921f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732f5458-1206-4eb7-9e69-608aeae1882e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9baafda-38e0-45c5-b5b2-3e65ee123777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93bb48c-7668-40c6-922d-df0898fd16ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f012f03a-78c5-4954-9393-d085e4288f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03ae7e9-02ec-48c3-8a78-12125b7a3a71",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bca13c0-d7f4-451d-8a9f-18247612bfaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51992a85-02a6-4d81-8c3e-995a4a3a8994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ec25bd-992f-4cfc-9029-4367837df1df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a342ff7-259f-4785-ae2e-86586ad9a876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387562a6-37fc-4d3d-9c30-adc76bfe9ce5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1d9652-9ed0-434f-b54f-8c582919b2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be311658-335c-4236-9145-e56a87655bd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c5808b-35bb-4505-81ed-7d5c2037cea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301760e9-006d-4a8d-b67b-4460468fe0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81699540-a870-48e1-bd51-fc9955f09db4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3324c94d-cd8f-4742-8c5b-ebc95b658ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95e2f05-f7ce-4cba-b182-71c9ffa44a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3007f580-1a3d-4f6e-b83c-e2e4f22fbe04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274cfa4c-6d4b-4d0e-a774-7f15d05bc42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53aec84-3ecc-421e-a171-58f857376d4d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fd4328-e70f-460a-93ab-f534650cdcba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d7f05c-2f38-4cb9-8013-12336d45bad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3267d2f7-5e77-44cf-8e7a-042b1ee4cfeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7750e2-565e-4b6e-9ed0-d0ef8b6aeee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12fd179-4f89-4472-9aed-d117e068bdd8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f07150-722f-4e76-9a86-fcc2d628b355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec39b0b-b00e-4c37-b946-2cbc2be166f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8805deec-38bf-44e2-8392-fc1ecdc84ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c37db1-5428-46f9-963a-9b5dfaa572a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab24907-f98d-4e8b-80e6-b49782c18ab7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5d2558-934b-4aa7-8034-fbcf18eaf0be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5a7ae3-b4c5-4c01-85e6-e9b791f3eb9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652e3f38-e0c3-4f1d-a14f-5612908278d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72daffa5-b9c2-4b70-b174-ea928b0ae0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa2a10a-c42c-46f4-8d73-faaf8d2ffd14",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dad9649-c03b-496b-9c4d-203f153f75d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565edfa1-3b57-4b40-a156-73d00ec26870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "274755b4-0782-498c-b1ea-efe2ae916a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c487667a-1be4-4400-a879-3dda414af192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e57b6f-f33b-4f04-acdf-1a81898ee131",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e070add-6014-4148-876a-b202efd96f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d21f1f-1414-4a84-af08-bced3d9cb09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060a2292-8839-4e1d-8452-d2ce446aae6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69c10e5-839f-4a89-ac6f-6bd3e19baeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba66d7e-2e07-46ad-9684-8cab5c266079",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4994404e-fdb3-4755-9e4a-3f549285e51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec6139a-56f5-45d8-927c-53bc49a89689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bca250-94ba-418b-9380-bf0d2f262189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8573b6-8ddf-4d7b-adcc-0f8e053801a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f258f2-8cb3-4635-b3aa-c515eabfb24f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40426a9b-92fd-4dd4-bd5b-8d892d4e3a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f79e5e7-530c-47db-a841-be00ab7f3bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef54391-c024-4422-919f-219a50f53b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197a31f2-f46a-4afb-b360-7b4941b7ca27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbc3865-cd4b-47cd-b217-236973cc396d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8e34a4-0c8d-40f2-97db-aeba0037437c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe6f0c5-a892-499f-84ad-34cbe6c9bfdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6484756-7a9a-4d35-9f8f-66c8e0f97ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc8be93-df28-4135-b6a0-482846cc567a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a175a294-f555-460d-9e4a-8b4db5804588",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75dd890c-eec5-4982-bb4c-270d5b226941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf3c314-b1ac-4cb2-aee9-844a50be6cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389677aa-7ad0-4c2a-b12e-4c16fe7be375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1c85bb-3c70-4510-b658-216bf5e382e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecc2cf9-1a87-4697-a136-3a6c2dbc673c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9aff35-9d75-4e86-92db-1a221e206a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c598c51-5ed8-4575-acf0-a5f9fd8191be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb67dc1-17b5-44cf-8aec-c25516f40d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d8108c-87df-4c5c-9d5c-37ec87ec4c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589f24d9-769b-448f-b5a4-1bc5b50e53c3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7afaa40-891c-4163-8bf8-4fdce8dc451d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bedfb15-ca65-41ad-a492-f34be4eda345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0f9753-a821-41b5-8de0-439cd32a6668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860debe3-dfd3-4d42-9b8c-13a45a91f8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31212ff3-683b-44fd-9fa7-6ae92894b93e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76406883-6247-4c14-9951-5275f8692642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131b0f48-345f-4e9c-a90c-ea7a14ed7f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd966ee1-35bc-4136-abfc-17b69a0997c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05725f10-cd51-4572-bfa2-7ad535ea4122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15165200-0be6-4b55-b9c2-4c6e9b275a94",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd058560-390c-4307-82cb-6b6a7f6460b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc696df5-2ab5-4c16-beb9-b61545ce7a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbf9f95-9caf-4ba2-9731-a8addd857fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29852c4-d2a2-4637-923a-c7dd7bae0e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641e4150-cf38-42fd-855d-51faaea99151",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f672697-25bb-4eaf-9fc1-2a562d02e085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8ea71d-de58-4cd2-9c90-24812b26eec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970c08df-bc38-41d6-a960-b6fdf984c71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fc0250-1a81-41c8-9841-21a023a44e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5843d11-74cd-45b0-ba39-74f081ac03e1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d87b2f-d74b-477e-ad03-ab8ee8de866f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63418af-085a-4de6-9167-74d316e327b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3db06e7-e0a1-4941-bdd1-e48e0f946d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2c005a-0ee4-4992-9deb-361a9f984132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cefc98-c1b1-4cf4-8e84-f36d8ce14f6d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168686c0-06cf-4b89-bf63-7bf59f5b4b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f9b081-572a-4d85-8938-47b3ed18d99c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbce10d1-a51a-4400-953e-5652ed8255f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e8be01-6c4d-495d-9dad-fbeac9336f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62da60d-6486-4b9f-932d-a17b0282597a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec935dd-78e1-40a3-9288-5fb977379d24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036039d4-76ff-467f-a251-3caed19246a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0865be-279d-4021-a1ec-f31827ab08fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326269c9-f50d-4619-8a2c-8b4496c295c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63927a18-325d-4a84-be1c-e2c428b0a0dc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd98650-696f-48a9-a1bc-d2d260bbf367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4145362-d4c3-468a-9032-50e00e1bce6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26261899-7b3b-4232-bfa2-889a1815a522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204e3839-bb2e-4dba-a4e0-a04404d905ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c41bc06-04c5-49fe-b182-c3ce7a36232e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a450112b-97f3-4469-a89a-4c03f2627717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b377f5e-892a-4a70-a475-62c492fe56fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c7c994-96ec-4294-a6fb-f001f2bd9cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e6c67ac-0f00-46e0-9405-f50317df6db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dad06d-9f5c-458b-a229-b35bdcbd643f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2682289b-cec8-4f73-b48f-3a9f6aa141b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d89800e-9db4-4269-a1ed-e6bf469a999c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a30408d-4480-4674-9c53-a622254b8eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1700c17-94ff-4724-a86a-74932ff3ed75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e37c13-e3ff-455a-b5a5-3533bb5fed64",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33314f66-513c-43c4-9975-e81509052bd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f48d9ae-2f6a-4947-a310-9e78f18e11b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bf31b8-4e89-428e-b59a-3bd08689d466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c273de20-8557-4aca-9507-0331bae6db9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9b2ecf-1ed9-4eaf-9665-9c0006eca670",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f77ca6-221a-473d-9cb5-57fe0116e599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75d8a87a-62db-4506-9f97-3e4e422baf65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cb5497-5670-4830-8841-72133fdcb712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f074b8a2-a913-471a-9d07-31aa687ee5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbb4bdc-0872-459f-806f-49d6573dd937",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c54f2b-aaf5-4f32-8205-ccb7485db7f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5317f4-d0ae-444a-a6b4-55592576ff58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef853b3d-44dd-4e34-b669-fd3d13e50e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25a39e9-7c80-4a4e-b9db-e8fe801a56aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319718a6-01cd-4e29-a968-2fa990403a33",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16467235-6c53-4587-8d42-c38ffc58b458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "387ddf53-a5e7-41f3-bf2a-330db2fc167a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053650ed-47a7-41e5-8516-4cbbf5ff290b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b911ff91-170e-4522-a152-d2ecc05025df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ecb702-60db-482c-8a82-513c2d818d20",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0532dbc-9ced-4e9f-821e-ba2a63d249ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25e3aaaa-0eec-4035-b7ac-02f335f6c9b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6a4507-4a1f-443a-8721-3bb157b82fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463f1592-a47d-41d9-a52b-ae294fefa54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01baf3ba-182c-4a1e-98b9-bc58eccdb52b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25609f2-9933-4ef3-b442-02f0b3660f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f06da4fe-6229-4509-b401-eeb72039fa04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b673d98e-2bac-4339-bd07-43d0aa4d532b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9948cbf4-c315-4cc2-a06d-4bcc96c411c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b213b11f-f24c-4074-89c7-9bcf90a7b2a3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ea0e4f-01b1-4b02-b7f7-f7ec934d828a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91aa0683-6a31-4308-a713-118d5d88bfbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b08c15-c647-4381-b27d-94e97fa66468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef46bfe-8a79-422b-8075-d4500de12f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f11b10-3d8a-42fc-8a0d-f57ed5c898f8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37beb04a-7689-4cee-a54d-a01019694c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0416b77b-443d-4c30-a0bf-e0d7bcec2952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683ad69a-08ab-4c52-99f5-b24d29b7701b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5391ced1-e82a-48f4-bc8b-2d3a2f5b73b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c24c55-8717-47ca-b6d9-2b82d3acaa60",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a902544-bd27-40ea-8c3b-4d7a84cdf736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e45caf34-f31c-4139-b38a-9a22c2f3422c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2d7b72-ec6f-4dac-b9d2-e06aa54f23ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890c12cc-c859-4e15-b416-3e1ddcbb2ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef60ee1-a4b2-458d-9f89-0f523ab38d48",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a312c8d-b6f9-4164-ab95-fb07045c6c15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6910da3-d8bb-4910-b81d-e5d53bb5b13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da4fbd9-f591-420a-8583-b320081eddd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b05de8-4397-4b92-9d51-f69cf61328c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4091cfb8-b98e-4a96-b021-83c73a3b0890",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c94825e-494b-4a55-b736-a2ae08dfe8d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad517701-4b54-46f6-b3ae-43a050f60bd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1b9af8-3664-419a-8a20-c4363f1c3149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb692f30-a893-461c-9bc7-e5b21141e0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2dbc4f-040a-4f36-9696-69171dc5955f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd15cf87-4657-4e63-8b24-b7cc44e49895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a145bbd7-34fc-4a2b-8077-f8b605df7269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c750775-2a67-4b5d-929d-e4a8815a3dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730c5278-954e-44e1-bee3-9ce25ae2d6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e416ceb-02b2-47dd-8f74-14178ae59322",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42146737-eaf2-48cd-8a5c-7575ad2e9374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcb8361a-cf9d-4e18-bc63-9b765c77e53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c504a6-c7d4-40de-892e-484f64fe1c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022237ae-9661-422b-950c-2b5c58d2308f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2b4f06-22c7-4a93-aebf-7910e8803cad",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d938bab-9dc3-4948-8237-f4aaf4c13a95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef9758e2-2985-40df-a698-f33ff0e0a64f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc929676-2a06-4a2c-9742-0b6fdd101275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fef64e-fe4e-433a-a12a-7dd6419f5401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2de16e-5309-4970-a069-1cabfc7c3747",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb515f19-2bf4-4e04-83a7-5e840bb6514f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d23c2a8-5f0d-4ba5-95e2-a1d5a34fb3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13645956-59c0-4b7b-a5b6-4ba524717baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f248028-8cfa-4571-8c8a-35f9a67bb543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ec6ce1-1392-43ac-a204-cf269fe1097d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cf9b4f-ae03-4e1f-8705-1529756de37b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc031f78-d287-49d8-bcde-7a165484676c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba053077-986f-4287-9c57-edf8489e880b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ef0d64-0b8e-4a9c-9c4f-326fdc810237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01008b73-5a55-46b4-98f0-96eb8a885763",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c38ad0-163c-4bb2-be61-710aac50ec3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c62b8ee-53d9-455b-a49c-6b03c6dabc13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f0319e-d9ba-4744-b5c7-40d043888143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b88969f-f85b-419b-a9ee-c147a93dce4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4b6969-b83e-45f9-8fc4-4ce91847ce14",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42183a7-0e2a-470a-91d3-a3a5c54ce917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07fcb9d9-33f9-4015-bd22-08ef04cee7d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ceb701a-6e3b-4bdc-907b-18191e3088db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de43db7-3abe-4da5-a51d-493fe96135f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bed7fae-9db5-40c9-89d1-28f88b9e8427",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5899477-4025-4e09-9786-f4f0b76c9b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ab2fc02-6331-4fcc-b91f-02553f21972f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4b1d77-6f9a-45de-be1c-91474e49c12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6244346-699e-4015-9e23-52bfe2c25646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed83d284-77a7-41fe-bcac-7ed722a98dee",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f19ec72-4c1b-40b4-887f-f560a9ebbeb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfb8c221-7e46-4fe0-b6bb-95ad630f7c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "102d7127-eae9-404d-b1ab-0355eec5b31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e6f7fc4-93e3-4579-a03d-c455b625c29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10b248c-74b8-4879-a889-a9d80a599f67",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6be423-9435-4331-95d3-8dd0b047dd40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1582c627-1068-4a64-a69b-0402fc7323be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cecf50-032a-4f2d-b346-e5a3a6683de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d03957e-e691-4186-8ff6-d12117b0b451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605a99ef-fa74-4597-b2b6-62055861bed1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47bbc7d-69fa-44ff-b033-27856392c55f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "761965c4-a014-4eaa-ab39-872249e4a747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3f6b0e-6b47-47ec-93b9-0b64c662e98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f9690a-6808-4831-b090-c3e61d8f6c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3751e0-2166-419c-95a6-c5b15ea4b32a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e2375e-632b-4270-a02d-5d1e4bc53621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36bae100-9454-44b0-9b51-7a9847d9e68b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f72d1e-05ec-4819-8d6e-90c8150cb9bd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b61d60-60bf-4a7d-a1f6-d1f7b9959778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b197c7c-83ab-4250-b9bf-70bd78e14d6c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e495393-236e-413c-8c0c-45da78cae7a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96e32707-1177-4e2d-b7a8-1d78edc4052e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e135c1-ea54-4bbe-bfd2-d4df528dd7b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fb78b8-c81a-4139-a0f0-95f81f84ee56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4d3a43-0f42-424e-be4a-c1499185b677",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1449ff33-0bb9-4da8-8a83-d1416e3dc4a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50aac949-72f8-44e4-af84-f7f28d5b6fa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c7c674-54a2-4cca-a8a5-3412c5569d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406c6d3f-4e0d-4247-9a58-8c945a7d427d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef7395f-bbbb-442a-8be4-9bb9d6903748",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674ee687-6972-4792-9a55-b29964b7cc57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15e785ef-ffb0-4c82-a6fc-74f6d9eb87a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a4c1f3-23ed-49e1-867c-996574341688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724d509e-9aa0-4af0-8718-a0de594ca094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660e1e1b-7627-41cf-8766-4fa88b16e1f6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2baf7cd8-cd38-411e-a2a7-2218d4b85f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53504135-d166-47fb-9485-1e9fe7ce205e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4dd42d-d101-45ae-a620-d01e75aa4049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885bf9da-aff2-47f7-a97b-28ba65493628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9f80b9-281d-464a-8f04-2d65e7f3db48",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b750d10-26f4-4526-be41-e5d1ae707795",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b95cc47-28b2-425f-868b-65c1d3639cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb2b47f-57bc-4379-9380-03e4c6244003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44811be-e299-4861-ae55-ea73cff3a007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1bf24e-1b99-423a-a53e-79fc0dcd2e38",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98c7ba9-0143-4c3a-9636-97dae0e65a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee45666-d562-4fa8-bf9a-0596d4565594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e41836e-8ff8-40b0-a8fb-0f6223ffe506",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641fe16e-bf4f-436a-9883-12a90f0ed083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f96ba67-d885-47df-a016-bf43f036f500",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fba8699-2cf1-43fd-8339-72eb1d48faf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "773ba237-1390-4fa0-9ae2-32588caac18b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4629d5-8e45-4d0a-9285-7d7a065aac52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5d7c70-597b-4fc4-a771-4e7da663dedc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6462f1c-be8e-4da3-88ca-da0069845c09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0e47bad-cdc2-48c0-aa9d-cb0a8a897b5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e0373fc-7d62-47d1-bbcf-1a5f37bd1917",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "795273a9-9462-454b-828d-141b97daac25"
                    }
                  }
                ]
              },
              {
                "id": "cccec8c9-7e43-42fd-b8d6-2891385a2c11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a81cdea6-bda6-43a4-8933-44a52a40e98c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3639a23d-bf32-43ba-a023-87f838696f55",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fccbef11-9694-4a4e-a975-0a2d82fb5a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7af33c-ebf2-419c-b5c6-f51d34b60fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12aad233-4e79-4b2e-a45f-3c453114c84b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "739daba8-ba9f-4e46-b43f-e6fd4792f5c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e77259a5-378f-4288-9981-f17dc09d5378"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "638a7fcf-efa7-498e-8d73-51df2df9a918",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69504b74-ad85-441d-b204-f59486ba361a"
                    }
                  }
                ]
              },
              {
                "id": "46db80d6-d136-49b8-b386-e3a6e023ea7c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "63469777-30c1-4156-8036-2fb99a501343",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2237f427-a75b-4c13-99e3-7766c334aff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9ad3f687-a480-4f8b-88b3-c3fe0b8e43aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356402fe-213a-4808-be27-fe8ebccbdcdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9ed59c-6442-4601-aa17-4e56885b0a62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "537a8499-60c0-4876-a641-4e9a78385049",
            "name": "Positive Testing",
            "item": [
              {
                "id": "529f0de3-f8aa-459a-902b-369059d52b1f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "875188f3-83c0-46b4-8808-b293bcfa1c90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7a3f58fd-e007-4a99-bc24-cb5bebe419ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c16f9dc8-042b-4997-a287-52fa446ab9c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "556f3830-7a13-4a71-bef0-62df6254bec5"
                    }
                  }
                ]
              },
              {
                "id": "ef324af6-e69e-4a63-9338-dab82fb5fa35",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "676ee3fd-0ae1-4a9a-8eb1-afd738ac222a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d319b779-4542-4020-adb8-2336d4a0ad2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de559fb4-3c14-4eac-8154-03d23bdb345f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a38056b-df90-4244-9f33-5eb4eb6d75d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f9504da-76e7-4171-a54f-9f5ae714af10",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0397eb11-8da3-49e6-b636-1f8e1299f45e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23078c57-905b-4a47-9708-1cb0b3c9a2d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "505fc240-fed0-415c-8530-a98ea77d0065"
            }
          }
        ]
      },
      {
        "id": "bb5554a8-85e4-4c1b-af45-b9c44aebc395",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e53e426a-bab3-4fcc-aceb-51c14a1861da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbb12ec2-2bb3-4b09-ab40-047aee741472",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "89bda75b-2017-4a88-916d-96cbb60876bf",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0242e64e-e7a6-45cf-b623-8f3c4b10cff8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "adec43ee-b8e5-44fc-a675-a1b4da1a98ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd1e39d-d721-422e-99f2-40e962c85130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d03c8f43-5156-485e-8e33-14693e4668c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e2b2bec-a1c4-4dd5-a2f6-2a93996d1310",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "180338f8-59df-46a3-9da6-766270cab9ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be9d8d5a-883a-43ac-9141-846d41b92a38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8af3f13-a9e0-4e90-9dfa-d7432f02a999"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "900e38ed-d5ec-4210-a545-dfb460904a84",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "337c5cdb-8251-47f5-abd5-a4380312e94c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b416005-938e-44c2-a2da-1761e499d142",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20409bb9-91df-46f7-b485-8bdad9dd639a"
            }
          }
        ]
      },
      {
        "id": "21a9d412-9dfd-44b5-863c-8cb481d79f1f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8794b0cd-e629-4668-a7f6-fe5ffdf2a3a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "131a1a76-f20d-4a35-8226-7f6e02f6b76f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9178d483-5261-4929-8f68-034d6dce6e96",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e762eb-0fea-44f6-be2b-b1097894db53",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "083cc3eb-e379-483f-acc3-bcf462244f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3245833-81d2-434c-8836-d7a75426fcd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02705236-ae12-453d-b945-a3e5e43d801a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f06fb6a-ee41-4cab-b8bf-2b08280b01ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2571ba6-d0e3-49bd-b937-57bff3a262d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cca6776c-f6f7-4eb4-8909-956ac7c4576c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa5a5183-30f1-481c-86a9-c8bcf4917156"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de671616-0e63-46dd-b8a2-815d5ff2cc9c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95239832-3b6c-42e9-90f1-28d8b2d9d35c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "141fbc5e-5511-4fa6-8705-8a433ac11745",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e09f7e2c-96f5-4169-b10b-5b6c78c1d39b"
            }
          }
        ]
      },
      {
        "id": "a145937c-6250-47d2-bf7d-57a3b791a461",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e1bfcd50-5c0c-4582-a3e6-8ddb31008591",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9519dcfc-48de-4f2a-b502-94702191ec95",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bad18be8-bcc1-475e-b146-2953e4e410ed",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304b449d-bca9-4629-a9f1-b9c8648fb038",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af2c6aa7-9a63-42f4-b31e-96cc8debf7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c17e2c6-579a-4ed2-9164-c40d683b3a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa5932b9-213e-4408-9f61-bc7dba5f4db2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31987d3f-1e5b-4959-a419-60f93012d3a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2403a8fb-79ef-49bd-be59-abe2d51973d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d2931a1-cec5-4af2-b860-6072fdc5d35c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b019e72-637c-434e-a1b7-a3fa69c5a4ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3f3cf32-3df1-418e-9950-e6f6a5348ea5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "46402c5a-7021-4778-93c2-f84607243607"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de54e3d4-51a6-48b0-bc2d-c90308d68156",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c81469e-f8f5-4c87-914d-4dcc9b64490b"
            }
          }
        ]
      },
      {
        "id": "b98f701b-bb5c-446a-b45f-8d9cef36b1a8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8db3843-74bf-4c9f-9cbe-df76cd0be7dc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5b3f52a-eb08-42c7-b949-863aa8aeeb6b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b483dc83-b61d-4cdd-913e-93a7441b90f5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f69aa474-fa5e-4827-bb67-5970f0b6071c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62f0d21a-6468-4936-a52c-034868c20480",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 115.44912280701747,
      "responseMin": 6,
      "responseMax": 636,
      "responseSd": 69.31738629730766,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704933409212,
      "completed": 1704933451717
    },
    "executions": [
      {
        "id": "b0bbf75e-e15d-47b5-b51f-fa8b71f71f56",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b3d21f1c-8d61-4881-8228-963cc3d0a5ab",
          "httpRequestId": "47a679ab-3234-44bf-a2b3-abf5f3807025"
        },
        "item": {
          "id": "b0bbf75e-e15d-47b5-b51f-fa8b71f71f56",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1cefdeab-2cd1-48ab-8e6e-63eb9c39a0f4",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "cc74e237-ff9e-4c36-8455-a81a76dbf22c",
        "cursor": {
          "ref": "8c00122d-6080-4ea0-ac6f-0bd3bfaeb70c",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f9e64dd2-5575-4df4-9ffa-8e65cbf9a2c9"
        },
        "item": {
          "id": "cc74e237-ff9e-4c36-8455-a81a76dbf22c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d6c48157-6e92-42e7-9a20-5c0819cd8b44",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "8468a4ca-4975-4493-a557-90ed8f9ce1bd",
        "cursor": {
          "ref": "4cf5ee7a-ae70-4f31-b701-4694dcf1af91",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e30e964e-748a-446a-8e6b-a5d4ae17508e"
        },
        "item": {
          "id": "8468a4ca-4975-4493-a557-90ed8f9ce1bd",
          "name": "did_json"
        },
        "response": {
          "id": "28a35bf0-49f0-44f6-9869-3814f4acf0d4",
          "status": "OK",
          "code": 200,
          "responseTime": 528,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613ea1d8-0b4a-435e-bae1-03744aa587f5",
        "cursor": {
          "ref": "55acb204-fc50-402c-af9a-e93d98e46da0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b504ea26-06a1-44a5-8fa6-b45219337e1a"
        },
        "item": {
          "id": "613ea1d8-0b4a-435e-bae1-03744aa587f5",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf07cf36-b6b3-4d93-8500-6626a0e49030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613ea1d8-0b4a-435e-bae1-03744aa587f5",
        "cursor": {
          "ref": "55acb204-fc50-402c-af9a-e93d98e46da0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b504ea26-06a1-44a5-8fa6-b45219337e1a"
        },
        "item": {
          "id": "613ea1d8-0b4a-435e-bae1-03744aa587f5",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf07cf36-b6b3-4d93-8500-6626a0e49030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0156e4b5-901b-4d9a-8da0-2385603b2324",
        "cursor": {
          "ref": "68b8717b-54f4-435b-b22e-4f2f32dde0d3",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "def8c287-4a8f-4ac6-b4c9-0211a1201dcb"
        },
        "item": {
          "id": "0156e4b5-901b-4d9a-8da0-2385603b2324",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ec0cf546-d603-4c40-8a81-1352568325ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 140,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151d8cc3-bd51-4f0c-898d-1dd5c0b16ff7",
        "cursor": {
          "ref": "eb4083e6-9bac-4c22-a4d4-3227da4165e0",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "14daed9b-fbd9-4021-b7e9-4990c16aa32b"
        },
        "item": {
          "id": "151d8cc3-bd51-4f0c-898d-1dd5c0b16ff7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0f88a550-f252-46ff-83f1-660d4ed19b8a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2551711e-f907-4302-90b7-cb390b5d7f70",
        "cursor": {
          "ref": "7bd73490-b383-419d-b3d9-3f39706015ac",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "37859297-5efb-49a0-bbc9-44ae62b0ba57"
        },
        "item": {
          "id": "2551711e-f907-4302-90b7-cb390b5d7f70",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "873e4a73-e912-45d2-b164-87f85a429f16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c837080-72b1-4cb5-8dcf-21c9118deec1",
        "cursor": {
          "ref": "d8403539-8ac3-4b9c-bc8c-cbb5cad2440b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3873cf17-231b-443f-a0bf-e0c632433c5c"
        },
        "item": {
          "id": "1c837080-72b1-4cb5-8dcf-21c9118deec1",
          "name": "identifiers"
        },
        "response": {
          "id": "ece0180d-23fe-4e4e-8459-448fe2267500",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e414776c-3399-4d2f-a00b-f364e67f3f62",
        "cursor": {
          "ref": "52cb18ff-8a03-42b1-bca8-24d37e8e2d10",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "800bb7cd-a3c1-494a-b0e9-adf1a60642c1"
        },
        "item": {
          "id": "e414776c-3399-4d2f-a00b-f364e67f3f62",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "50806d46-039f-4fd3-9b48-2a3360b735ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0e4ba5-d118-4bb2-a9e4-55bb46765fa5",
        "cursor": {
          "ref": "19c66eb0-40d0-491d-857b-40846fd7b9d9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d36c2145-1e6a-4f7c-8ec9-1fff3bc7f99e"
        },
        "item": {
          "id": "0d0e4ba5-d118-4bb2-a9e4-55bb46765fa5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3f2fab33-39ce-4774-9468-0e06cede8fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1567145a-da58-4e93-91e7-6dea67779904",
        "cursor": {
          "ref": "ad8397a4-af18-474a-84fb-549c7a45a154",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "74381497-65bb-4864-8390-445529f4e29f"
        },
        "item": {
          "id": "1567145a-da58-4e93-91e7-6dea67779904",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cf2bbd2c-9571-4bd0-a3c7-09b4bffc33ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446bd6ef-b1a8-4abb-8280-7ab030499df0",
        "cursor": {
          "ref": "8bb0afe0-2501-4405-af45-1efef8a25f6e",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2f1a09f8-0992-4c2e-bdcd-7c2319009b46"
        },
        "item": {
          "id": "446bd6ef-b1a8-4abb-8280-7ab030499df0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a2bb906f-712d-41b7-bf87-c1f772fd2ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0e9757-494f-4d7d-af4b-b56a30e223bf",
        "cursor": {
          "ref": "f7356d92-f30a-4d10-b592-ac453e1fc913",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "55232dae-b43a-44a6-b078-5148b124e662"
        },
        "item": {
          "id": "3d0e9757-494f-4d7d-af4b-b56a30e223bf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fc5a7d35-3604-42e3-b0bb-79d045393253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726ead58-d743-4925-9d65-64ef36d0b011",
        "cursor": {
          "ref": "a0e4ef79-e202-47ba-bba9-919483b609c6",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0b0136a8-000c-4cc0-83da-b8973dc0b9e6"
        },
        "item": {
          "id": "726ead58-d743-4925-9d65-64ef36d0b011",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ab53678e-e364-4b12-ad13-c619918c02d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97177ea3-694d-45ac-84ce-4cb64418cb2c",
        "cursor": {
          "ref": "4aa038ec-ee27-4157-88ac-6d6dfeee7fe3",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7faba713-b674-48bb-a03e-97fc638cdff7"
        },
        "item": {
          "id": "97177ea3-694d-45ac-84ce-4cb64418cb2c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0bb3016b-2694-4129-9a9a-6048efb1e718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa76c41-7c24-48cf-a0c7-412f5a5bced3",
        "cursor": {
          "ref": "0da8c7d5-f78e-42bb-a696-c51d81f9dd9b",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0fba1ab3-8b67-4c65-b35e-f7142baebac5"
        },
        "item": {
          "id": "7aa76c41-7c24-48cf-a0c7-412f5a5bced3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f35ca296-f085-4e46-8835-0f81dc9d7126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d26b91-7182-4f94-b47b-2bfbd4a9f918",
        "cursor": {
          "ref": "261728fe-f86b-42ce-a29e-63e6b902a7b3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "902176f6-cdda-41fe-ad36-5ef86b190dd6"
        },
        "item": {
          "id": "84d26b91-7182-4f94-b47b-2bfbd4a9f918",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "44896fdb-f51b-4c3b-8667-01b6140ee107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b956e6-0b72-480c-acef-e3ff22709dd8",
        "cursor": {
          "ref": "dffc386b-d045-4c8b-a622-c06e34d19e8d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "202c2311-183b-40da-b9ef-4b656bfc7c4e"
        },
        "item": {
          "id": "b8b956e6-0b72-480c-acef-e3ff22709dd8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "47950045-4466-4c7d-abc7-cf52dbb4cced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabfc0af-ebd6-4d4e-a265-1e7f90034c59",
        "cursor": {
          "ref": "d7935253-fac1-4cb2-8dea-f17bf93bffe5",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8d976c2c-c6c1-49e9-bdf1-2afba99466b7"
        },
        "item": {
          "id": "cabfc0af-ebd6-4d4e-a265-1e7f90034c59",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f454b38e-c71c-4d06-9806-6e73afad4485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a1caec-1bee-486a-9f6c-12b96fb3f8e6",
        "cursor": {
          "ref": "78b7767a-d3a5-4fac-9501-d0b0e24ed253",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "abbc971c-e815-4b6b-bf6f-9707f171e476"
        },
        "item": {
          "id": "33a1caec-1bee-486a-9f6c-12b96fb3f8e6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e6317ed8-4152-402f-96b8-a392b166e611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae717e81-6bb6-43f9-9ee2-dc25fd7cb509",
        "cursor": {
          "ref": "c4d24803-fb5e-40d4-bdac-62d21310f8ca",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6c7e1d50-343b-4def-b74a-8c5d6fef6a1d"
        },
        "item": {
          "id": "ae717e81-6bb6-43f9-9ee2-dc25fd7cb509",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "af27dc58-90bb-449e-a816-7058b700a669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3e2379-4a8b-43a9-bfba-0ebae2486465",
        "cursor": {
          "ref": "9df5d2bb-138f-4084-a728-c02432e9beeb",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e3852328-d589-4f0f-9999-f2ac219143e9"
        },
        "item": {
          "id": "6a3e2379-4a8b-43a9-bfba-0ebae2486465",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "adecc1d0-7638-43fa-b852-f97283535f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e0c45e-4cf5-4ce2-a2ad-7049f39dc88f",
        "cursor": {
          "ref": "a5a1e5e3-f336-4747-bb1d-199fa38d0c61",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c9fdfee8-5f01-4e31-83eb-2d0eaefefa98"
        },
        "item": {
          "id": "26e0c45e-4cf5-4ce2-a2ad-7049f39dc88f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a136fdeb-9ac8-4f81-a42c-346f62021310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931e9c81-87e3-4d68-8d46-ea0aa5840faf",
        "cursor": {
          "ref": "cb4f86fa-18a2-4329-8b07-e3a8187076ba",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5cbf55f0-bcca-44b7-891e-0599dccfd66a"
        },
        "item": {
          "id": "931e9c81-87e3-4d68-8d46-ea0aa5840faf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7119919e-aed7-43e7-94c2-055176c1c1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeafa688-a773-4de3-b73b-0125e7cf2452",
        "cursor": {
          "ref": "4d2983ec-d588-4948-b740-61ec0c1d2c2d",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7b823eee-8298-4c02-bc17-cee40bbd9de0"
        },
        "item": {
          "id": "eeafa688-a773-4de3-b73b-0125e7cf2452",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cf5cfef7-58a2-4163-98a0-6904c1badcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac746ed-0d22-4784-aec4-a1687fd25cef",
        "cursor": {
          "ref": "6bd43a65-d6fe-4072-ab75-86691e909f2c",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6e08b889-a3e7-4681-be00-28ec8809231a"
        },
        "item": {
          "id": "dac746ed-0d22-4784-aec4-a1687fd25cef",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c87318f5-daf8-4660-9685-757108fa7785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e963ff-abd1-4135-b7e6-14bb0adf1ef6",
        "cursor": {
          "ref": "5cbdcdb0-d355-443e-91ae-e14e39575593",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "454e0958-1b29-4df6-a38a-06fb03901e23"
        },
        "item": {
          "id": "c0e963ff-abd1-4135-b7e6-14bb0adf1ef6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cab0647c-953f-4e10-9b72-c5af74c8abd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc58574d-fd03-4367-a32a-5cbe9ed41ef9",
        "cursor": {
          "ref": "ca81eab7-97a8-4445-9988-9a13ef108b47",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "af71f7d2-30d4-4254-b0db-9e9d68f6b8db"
        },
        "item": {
          "id": "dc58574d-fd03-4367-a32a-5cbe9ed41ef9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c01a7a7f-0998-4712-b68f-35ea14e229bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc256277-fe94-456a-9035-b7682e49fc84",
        "cursor": {
          "ref": "db59d988-6556-4d93-81a8-3e1ad15c108f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "73357248-b263-4a22-8e55-18e926a2a09e"
        },
        "item": {
          "id": "bc256277-fe94-456a-9035-b7682e49fc84",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "665b61ac-bad0-4890-843d-45b775371b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0b1828-9269-4534-8258-a1e45a8d8d75",
        "cursor": {
          "ref": "12588846-fb97-46a0-be54-7b10be1ad58b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d2bfe4c1-39fe-46b5-83b7-b3d994f4e4d1"
        },
        "item": {
          "id": "ba0b1828-9269-4534-8258-a1e45a8d8d75",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e85862b2-4bc2-4930-8170-9cb3251d73e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1fcf5d-ee0b-44ed-a96a-7e828fb10653",
        "cursor": {
          "ref": "30bfcfcf-6d74-449b-b7f4-d3e00035f9f3",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "222d1329-6b88-42b4-bc6d-d9db3f8d65fd"
        },
        "item": {
          "id": "bb1fcf5d-ee0b-44ed-a96a-7e828fb10653",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c024e381-9c01-4f27-b846-d204eb7af857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd53ecbf-9d58-4d72-a6b5-6bd57acf00c9",
        "cursor": {
          "ref": "5fd1f81b-cd69-40b7-a735-09e305ad688c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e5ff6887-86d0-472d-bc46-4787ad5094a3"
        },
        "item": {
          "id": "cd53ecbf-9d58-4d72-a6b5-6bd57acf00c9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2dba7bb9-42a2-44eb-8b32-82159521cf12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a01df58-7413-473c-99cc-9e1e82482dd2",
        "cursor": {
          "ref": "bca14310-a8c8-4a01-acf8-f74c0b456931",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "af722739-3ac0-4dff-9da7-7354e95bcba0"
        },
        "item": {
          "id": "5a01df58-7413-473c-99cc-9e1e82482dd2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ec17734e-3ea2-4342-8ba7-c35ced61cd21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e684c23-ba9f-4a9d-b397-c78435e013ad",
        "cursor": {
          "ref": "30d18c99-cc03-4a72-aa93-56b9f2b0527d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "94485dd3-ce43-49dd-8f12-54a2a84c0b10"
        },
        "item": {
          "id": "2e684c23-ba9f-4a9d-b397-c78435e013ad",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "882f1b40-ae21-4455-b256-bdeaa2ab6a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3d3902-ffe3-4acc-9423-fc0e22493c9a",
        "cursor": {
          "ref": "61fda80b-9cc1-4273-93ff-602ec6dc3da5",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b4b48383-5b4c-4055-86b9-c9e077c92eee"
        },
        "item": {
          "id": "7d3d3902-ffe3-4acc-9423-fc0e22493c9a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "84d2ba8b-fde9-4854-b9da-7c32333dafc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0cc137-ed33-4280-9c2b-a6bd459e697b",
        "cursor": {
          "ref": "9c60011b-83f8-449b-af09-48d7c0f9bddb",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d41e7dfd-ef23-4e37-8996-d1cbf7d3174d"
        },
        "item": {
          "id": "1e0cc137-ed33-4280-9c2b-a6bd459e697b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c99ffc9d-6bc7-43a7-a47b-a2431dd7876a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e39b70-a09a-4c93-a3c0-1a296348fe1b",
        "cursor": {
          "ref": "ed0246cf-f08a-4d49-94bc-91a6f5e4e210",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ce024382-2091-46f0-bbb5-84413625b660"
        },
        "item": {
          "id": "b1e39b70-a09a-4c93-a3c0-1a296348fe1b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4aa29d9c-c935-4eef-a71e-2b5c80ab0eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dea53ba-0bf5-4327-ab31-80f40d2edf40",
        "cursor": {
          "ref": "a03fd037-c73c-4421-8115-6ea34cd54aeb",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "45322955-9ab1-441a-9bfc-6875e776bfd1"
        },
        "item": {
          "id": "5dea53ba-0bf5-4327-ab31-80f40d2edf40",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ec53fc33-a900-44c7-9c94-e28377b84381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9a5b8d-1cb9-4020-9e1a-b3d9ec940eb9",
        "cursor": {
          "ref": "ceceff86-88ad-4141-b7cc-5a04303c3337",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c3b0bada-93ae-44bf-b929-8feeee98b78e"
        },
        "item": {
          "id": "7c9a5b8d-1cb9-4020-9e1a-b3d9ec940eb9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6b032397-0a80-4c89-a579-125c97818dae",
          "status": "Created",
          "code": 201,
          "responseTime": 636,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "38b9666d-8870-4b35-b8f6-08ab08496896",
        "cursor": {
          "ref": "ec256e92-55e6-4618-acce-7a73b81923c6",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "296023ef-88e8-4db6-94e6-dc65aebe27db"
        },
        "item": {
          "id": "38b9666d-8870-4b35-b8f6-08ab08496896",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0648d849-7324-45ea-832b-0f6ee0a371fe",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a4064b92-07dd-4227-a2ac-bc064cb7d5e6",
        "cursor": {
          "ref": "9e38394d-9dec-41f5-be55-fa4ffe004164",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "32a6a515-f084-4018-a1a4-b296411e2d5a"
        },
        "item": {
          "id": "a4064b92-07dd-4227-a2ac-bc064cb7d5e6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e7613e26-5658-4f2f-9d99-44b9df88af3a",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "52d71e0f-289d-4a79-8388-f58d5f9f595e",
        "cursor": {
          "ref": "3e24d3e0-b5f1-45c9-b487-488811bb1fc7",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a058c1ec-915e-4437-ba1e-10c2d1bb4dcd"
        },
        "item": {
          "id": "52d71e0f-289d-4a79-8388-f58d5f9f595e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3ee3308f-21b3-42ac-9077-4bc8fc8d83ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2ae7a2-b1fc-4849-8e66-a5a4b893251c",
        "cursor": {
          "ref": "af630ac5-42c7-4ca1-a42f-0b08ae7a5192",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b4f71eef-d957-4179-8332-4e8a16861710"
        },
        "item": {
          "id": "1f2ae7a2-b1fc-4849-8e66-a5a4b893251c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "16e5cd65-0394-4639-adec-9a1e8451fd2a",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7bdbdf69-2878-43b8-a873-eea1ff5dbf69",
        "cursor": {
          "ref": "a305c19e-2b08-4d46-b913-fa8e6f9e7677",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3beedfee-eba9-4e20-9967-70009f4ac48d"
        },
        "item": {
          "id": "7bdbdf69-2878-43b8-a873-eea1ff5dbf69",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "293128f9-8c98-406b-ae20-50b585948687",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "95d12468-7737-40fb-bfcd-0d14ef4cb2fc",
        "cursor": {
          "ref": "f1b98509-4e59-4675-9f8e-77e21eb0e74a",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "11d67e67-3054-4c9e-9029-650b66c2a0b5"
        },
        "item": {
          "id": "95d12468-7737-40fb-bfcd-0d14ef4cb2fc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "76e11550-35bb-48b8-a013-dfe820920d4c",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5adf2152-b3ab-485c-a776-39c6f3f8b208",
        "cursor": {
          "ref": "3df8a75e-c990-4641-9628-aeb1b10ba7bd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2fe571a2-6fda-4c80-8d39-257bbd5d7aab"
        },
        "item": {
          "id": "5adf2152-b3ab-485c-a776-39c6f3f8b208",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "277da048-7ad8-4a77-9d95-02983fc8a7f7",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3a75aedb-dfb8-4971-9ef9-c60508d3ae30",
        "cursor": {
          "ref": "fadb932b-7b67-45c3-b9c9-4262b2310a01",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "878de01c-74c1-49ed-bf9c-746db7de3a68"
        },
        "item": {
          "id": "3a75aedb-dfb8-4971-9ef9-c60508d3ae30",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "398efa84-2c18-49a2-ad9f-1d2455c876ed",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c5241e85-1c4d-4338-86e5-95c3ed9f97dc",
        "cursor": {
          "ref": "50bdb882-1b9a-410c-aa58-1483c8a7c499",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "01876737-3f07-4164-ba74-c169a769e574"
        },
        "item": {
          "id": "c5241e85-1c4d-4338-86e5-95c3ed9f97dc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "577623b9-d680-4815-b772-ed4765a0c551",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "eb24c008-cf7d-4c17-8c08-3ec46d49e394",
        "cursor": {
          "ref": "b3bbcb2b-066c-496b-8a61-e098ba40b543",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "614fcac7-f573-46de-871d-dddbf408fcd0"
        },
        "item": {
          "id": "eb24c008-cf7d-4c17-8c08-3ec46d49e394",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "91bc63ee-059e-4a18-a014-536069d1c6f1",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ff114fd8-09ed-469b-94bd-79b99b861ed0",
        "cursor": {
          "ref": "7531c98e-80c8-4dc3-bcd5-71186c00ea30",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7c573c2e-15f3-4071-a0c2-f242f3a042d5"
        },
        "item": {
          "id": "ff114fd8-09ed-469b-94bd-79b99b861ed0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5bb79838-2254-475a-80e1-a9d422434af6",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "393ca01e-6b78-41ed-bbde-b65cf1619196",
        "cursor": {
          "ref": "55ac7d03-aa4b-4b1c-8901-c5ea5e0b4c7f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "caf467e9-7821-49ad-b704-c536fa04f2df"
        },
        "item": {
          "id": "393ca01e-6b78-41ed-bbde-b65cf1619196",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "60cbc383-7ae1-4926-8a7d-aab5b96cbd9c",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "46fc4907-eb6b-4523-b54c-b449667c98e2",
        "cursor": {
          "ref": "608b495f-042f-4bc7-bc03-9f2c93628dd7",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f00aec5d-d262-46d9-816d-447edd71713f"
        },
        "item": {
          "id": "46fc4907-eb6b-4523-b54c-b449667c98e2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "485b5ab9-93bb-4c98-8904-108bd0a30db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed556cb-6575-4908-9b4a-02160e7526a9",
        "cursor": {
          "ref": "ef4329fe-5a1a-4e83-98a7-29455da788c4",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2c0fa545-cfd7-4571-8629-2298157e47f8"
        },
        "item": {
          "id": "4ed556cb-6575-4908-9b4a-02160e7526a9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8520262a-982c-4bc2-a6c7-af6d7db7c6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d794d50-47ff-477b-9ba8-257ca5813001",
        "cursor": {
          "ref": "d3f1932e-41a9-4baa-ba11-7c788aff7b09",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7038f959-de45-4cb8-9d91-9a28295be364"
        },
        "item": {
          "id": "3d794d50-47ff-477b-9ba8-257ca5813001",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5b18699f-a86b-40f3-811e-a66adbd9ab50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f0831e-5b04-4932-a6b2-46f027c08b3a",
        "cursor": {
          "ref": "1b314d77-1117-410d-9c2c-3a7cfab18cf9",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "007e1c23-6a3a-4c87-a387-317cd9a1680c"
        },
        "item": {
          "id": "a7f0831e-5b04-4932-a6b2-46f027c08b3a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "678f0270-38a2-45bb-9e6e-f1f8d5cce5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8413b8-6c2c-41bc-bc13-82f8bb7ab3bd",
        "cursor": {
          "ref": "165df6e6-883d-4ac7-a572-745d3b233076",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2c5672ca-54bc-4e42-bbd9-82099f8942fa"
        },
        "item": {
          "id": "2f8413b8-6c2c-41bc-bc13-82f8bb7ab3bd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "826a0805-0be4-4636-bc24-38d629b1a8e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf226d33-d36e-4fa7-b59d-62f145b16d50",
        "cursor": {
          "ref": "d84d1068-ec04-4b33-89d0-b81e84791320",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "17f8dfc8-d99a-4777-8e4f-e175b2f4643c"
        },
        "item": {
          "id": "bf226d33-d36e-4fa7-b59d-62f145b16d50",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cc25914e-b436-42c4-b974-332116ad10f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af6459e-1658-4079-943d-81bff9485a1a",
        "cursor": {
          "ref": "7bc03e1a-6e44-4c26-aa42-8aee9ea10070",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0f01d2fb-d4f4-45f1-a87e-cb9e593c5970"
        },
        "item": {
          "id": "2af6459e-1658-4079-943d-81bff9485a1a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "887587f0-971b-4826-bac0-1910ee82fec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aebbf88-c1cc-4b60-8b21-657b8b9bbcab",
        "cursor": {
          "ref": "b05fe7b0-6b2c-4abe-93e7-d11c34c9eb1c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6e865b54-fc15-456b-be43-7d3cac472956"
        },
        "item": {
          "id": "8aebbf88-c1cc-4b60-8b21-657b8b9bbcab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "eec663fb-ec5c-4c08-be75-22b1fc0633ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c42840d-24e8-43a3-b08c-509903846f43",
        "cursor": {
          "ref": "87912f44-246c-4f6e-82b8-7be7159e7c7d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "53b65a7d-b0f5-43d7-8434-9bcf634a1b46"
        },
        "item": {
          "id": "3c42840d-24e8-43a3-b08c-509903846f43",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2f4b4ffb-ae13-4dc9-8426-478c40a3d51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a3f46b-dff8-4a7d-8dfc-38c479db18a4",
        "cursor": {
          "ref": "c95fa2b1-f0d6-4196-8cc4-509964473cc4",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b696c429-3003-4502-8482-329c756fb508"
        },
        "item": {
          "id": "50a3f46b-dff8-4a7d-8dfc-38c479db18a4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "42f7069e-7dcf-479b-9e38-d8ff18e79b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514f42f3-a2cd-42a3-8074-9fc01e961db8",
        "cursor": {
          "ref": "6fb7ff52-24b4-4751-86c4-310aa66b333f",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ee96ce17-36b3-4e0e-8ad6-10a50ef3f7f3"
        },
        "item": {
          "id": "514f42f3-a2cd-42a3-8074-9fc01e961db8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "58281772-ac7a-4958-a9bd-ff4152c0965b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120f52a1-9c4c-45d8-83e8-620baf13f6a2",
        "cursor": {
          "ref": "1fa39fbd-e31a-4a57-ab44-adfbaf441574",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3c13f44c-dfee-4493-b2a3-d1e491f64a4c"
        },
        "item": {
          "id": "120f52a1-9c4c-45d8-83e8-620baf13f6a2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "68705e59-7a2e-48aa-8a62-a3ed71198346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232b4e32-b259-4eea-949d-d9395c595875",
        "cursor": {
          "ref": "32ff0aa6-b00c-4d7e-b17e-84a655bf0be8",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "91bcd910-bc70-451b-92f3-abdc2cdd0798"
        },
        "item": {
          "id": "232b4e32-b259-4eea-949d-d9395c595875",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1a974094-362f-4c1a-877a-3f3e24e2a442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66198f7-bd1f-44a3-8d70-1ce052710efa",
        "cursor": {
          "ref": "57952ec1-3aff-4b79-8d66-bf7f114c32d7",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "485f7cc4-2e02-437d-b4cf-14343a9113e5"
        },
        "item": {
          "id": "b66198f7-bd1f-44a3-8d70-1ce052710efa",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3da1c6b3-6d42-4997-a8e5-8a1a7fde7dc5",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e16b9fba-d912-4882-89d0-e704b63cebf1",
        "cursor": {
          "ref": "710d729c-9d9e-41b3-bd04-d4a7558d64ea",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "30bd30fd-9c25-45a8-a3a8-c1814d5219de"
        },
        "item": {
          "id": "e16b9fba-d912-4882-89d0-e704b63cebf1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "327f831e-7601-4f68-9baa-e2af45632ec8",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ddadcf57-1d75-46f8-83f3-bfd351c02287",
        "cursor": {
          "ref": "8f045f76-f051-458d-aa68-ef4215ad0caa",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2e2308ac-bb4a-44d8-818d-65105efee0dc"
        },
        "item": {
          "id": "ddadcf57-1d75-46f8-83f3-bfd351c02287",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "021c478f-4e53-41fd-9156-2c2bf78e490e",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c58d8521-e854-4cc1-87af-119a9e72cc3c",
        "cursor": {
          "ref": "d6f3d630-7423-492a-a4e7-8a31506c6d7c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3b0714eb-f932-44b3-bf03-6324a6d06c14"
        },
        "item": {
          "id": "c58d8521-e854-4cc1-87af-119a9e72cc3c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "10f8f66e-a48f-451f-b567-dbf64505fc4f",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bb11c360-7a8b-43b3-a126-7e85338fcf48",
        "cursor": {
          "ref": "40006282-8774-4346-99d7-d47f55f67ed8",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "88cdf692-d5e3-4106-9e26-9e3d571d46f1"
        },
        "item": {
          "id": "bb11c360-7a8b-43b3-a126-7e85338fcf48",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cd044bd0-f6d1-4fe9-b33f-52026f555fac",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c21f928b-b6aa-4b3d-99d0-8f27332a7ace",
        "cursor": {
          "ref": "4c736a69-616a-4ca9-bc76-ee6767771231",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c87860fb-4857-42b5-a010-be12ea4d17e7"
        },
        "item": {
          "id": "c21f928b-b6aa-4b3d-99d0-8f27332a7ace",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f3c970a0-a185-422d-987b-30bf894821c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3ac342-743e-4b40-aafe-9949aa2937b8",
        "cursor": {
          "ref": "e1222041-1d50-42bf-9789-f3af9036a2b6",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "95ef2638-da95-49fb-8705-e9dc68ae66c8"
        },
        "item": {
          "id": "6d3ac342-743e-4b40-aafe-9949aa2937b8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "04f4b8a7-c827-4e0d-9fef-42a659e76ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fba3f83-707e-4cb5-8011-1930297daf1a",
        "cursor": {
          "ref": "cae8202a-bede-4f4d-961a-2c36a58c0683",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "09456cb2-8c32-4831-8f6e-6a65e764e31e"
        },
        "item": {
          "id": "1fba3f83-707e-4cb5-8011-1930297daf1a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5aedd1e0-879f-4e92-b337-30989ecfc957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b78b9c5-38b6-4beb-8cd7-da768bb4078f",
        "cursor": {
          "ref": "bd07148e-47e3-405a-8808-2bc89e568f7b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5d41a62e-d8da-4c83-86e2-ce7c460775a0"
        },
        "item": {
          "id": "3b78b9c5-38b6-4beb-8cd7-da768bb4078f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9a17da4a-d9a4-493d-8b2f-a6812ede4eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59590944-45c7-4d07-8c70-022cc476a581",
        "cursor": {
          "ref": "96d1fab0-d7e0-4e6b-822b-202604a15060",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "10f02919-4605-4b13-aa52-a86c83923fe7"
        },
        "item": {
          "id": "59590944-45c7-4d07-8c70-022cc476a581",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "73a8c059-4bf6-48c0-834a-3a657430999d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c8a2e8-539c-4022-8288-f48e1e802872",
        "cursor": {
          "ref": "43955c6f-0f42-41be-9372-263a9dc4001e",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2233bacf-aa68-4b47-9579-613df65ae9ac"
        },
        "item": {
          "id": "99c8a2e8-539c-4022-8288-f48e1e802872",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4c5f79e2-e794-49cb-a310-217fd99583a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819073f2-cc5a-44db-973e-5ce3d05b591f",
        "cursor": {
          "ref": "c7223bd1-11f5-4998-be51-c0c8f4d0d1db",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d5c140e9-89f0-4fad-975e-231ca33bab9e"
        },
        "item": {
          "id": "819073f2-cc5a-44db-973e-5ce3d05b591f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e96736f1-cb01-4514-b3ef-0a2c3e1f85c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc791755-8921-43e1-b081-0c97ee69f154",
        "cursor": {
          "ref": "2b48bbc5-1227-47f3-b6e0-9d5685436112",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f2101ad7-875d-45e8-899e-badd05ef08ec"
        },
        "item": {
          "id": "fc791755-8921-43e1-b081-0c97ee69f154",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4101e4ab-a3da-4660-8748-6a6093cae5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53c1741-8b19-46cf-a78e-f06327277d8f",
        "cursor": {
          "ref": "16d6a3dd-2f7e-4775-b17b-ae759f00ade3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8e88818e-ed02-4cd9-a8b9-d539a347816d"
        },
        "item": {
          "id": "f53c1741-8b19-46cf-a78e-f06327277d8f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a4f76fe3-a100-403a-9b8f-a8f8ac97dfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f0b5e7-f9cd-488a-a521-bf06ea28a09e",
        "cursor": {
          "ref": "4d262484-5359-45bb-af5c-a7e9dde2897e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5ae65522-591b-41fd-a4d4-f4d3ec2abdcd"
        },
        "item": {
          "id": "f8f0b5e7-f9cd-488a-a521-bf06ea28a09e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a669b735-2caa-4ce9-9c72-d8f359c58f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23f4590-ca48-4d5f-a5a5-424df3a7357c",
        "cursor": {
          "ref": "219278b5-9c5c-42f9-acdb-5afcb9ab0248",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cd6773ad-6dd9-487c-9be1-66015412ed38"
        },
        "item": {
          "id": "f23f4590-ca48-4d5f-a5a5-424df3a7357c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8c5058e9-28d3-4290-abfc-fcb50548dc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5f7fce-67c2-4ac2-a71c-3260b50ccdf6",
        "cursor": {
          "ref": "f0694029-704d-4ba9-a864-83daec898f7e",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9074d32f-c25d-4a23-ac72-0ec20393ec3c"
        },
        "item": {
          "id": "3a5f7fce-67c2-4ac2-a71c-3260b50ccdf6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c05ffc50-8a10-4818-bad3-d9cd424c79f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598cb2fe-fcd7-4cdb-b3b1-af73c600984e",
        "cursor": {
          "ref": "8d159187-3df9-44bf-8657-f77a23288241",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "df792ff5-20c0-47d3-af59-f32582d3e613"
        },
        "item": {
          "id": "598cb2fe-fcd7-4cdb-b3b1-af73c600984e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "eb930993-2a95-41a3-9eea-fa70747fc38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd160c88-7ed1-4fff-ac09-b3473a99abfb",
        "cursor": {
          "ref": "b7e8d725-d869-455b-9b25-45443a5df293",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fd56b3e7-ecd2-4907-b552-ff72fff0607d"
        },
        "item": {
          "id": "bd160c88-7ed1-4fff-ac09-b3473a99abfb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6cdd7998-95fc-4c3c-a0b0-09be9233ab4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76443397-c322-4c4a-a1a7-99560e7b4bac",
        "cursor": {
          "ref": "11ebc3fa-3835-4e5e-814f-487f64ef7355",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e9e58792-fc0e-40fd-88a0-150eed36bc62"
        },
        "item": {
          "id": "76443397-c322-4c4a-a1a7-99560e7b4bac",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a48745a5-b33f-4e37-a6b1-6315a5915569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3e4801-79f7-4882-bf8b-a1c2acbe30b6",
        "cursor": {
          "ref": "b620afa5-9833-4236-87cc-5b6a6c9b7eeb",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c7fd7c09-b438-46da-bdd2-8aba60e04fc5"
        },
        "item": {
          "id": "7c3e4801-79f7-4882-bf8b-a1c2acbe30b6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e23dd5c3-5edb-4887-b496-60fb9d6e71bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122b61e3-a2b8-4cc4-aa36-e0948714ae8d",
        "cursor": {
          "ref": "c345c899-4aed-498c-9b15-252a30c7ba7f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "89521b01-643f-4a35-8dc0-67a2594cab99"
        },
        "item": {
          "id": "122b61e3-a2b8-4cc4-aa36-e0948714ae8d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b92ab643-0bf2-4975-8d7c-ce1df21d863d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c7efb7-2978-4493-b0e8-657756f10e8f",
        "cursor": {
          "ref": "21e924ba-7f17-43f2-8110-c72bf507e584",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e95b5f00-7083-4df0-9647-941c436641a6"
        },
        "item": {
          "id": "61c7efb7-2978-4493-b0e8-657756f10e8f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e9f0322f-9dc1-46bf-a8b4-2704aff2f21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e704da-1ff2-485c-bfb5-30494bfb37cc",
        "cursor": {
          "ref": "9d21bea5-06cc-4840-81a4-1efc4c553c74",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "aab1ac9a-a9b8-4b9e-8b3c-53d9c9c9f03b"
        },
        "item": {
          "id": "02e704da-1ff2-485c-bfb5-30494bfb37cc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9d5da5e1-494e-4f1a-a126-167841b890af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e0baad-7c32-48f3-af39-ace8c9c45b21",
        "cursor": {
          "ref": "b0e91c68-a855-4bdd-960f-fef1f7871e82",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8b8c3cec-11b6-44be-a3b1-995f385baa64"
        },
        "item": {
          "id": "19e0baad-7c32-48f3-af39-ace8c9c45b21",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b1cd711d-9a60-4b9a-8459-16fd13589b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983055cc-d539-494b-b874-fa15d8783f3f",
        "cursor": {
          "ref": "c73fab00-e439-4fbe-9f6f-bddd2588ab47",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d12fca6d-f2df-4aa0-a025-e5863f7c3bc5"
        },
        "item": {
          "id": "983055cc-d539-494b-b874-fa15d8783f3f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "afa16273-acb0-4f52-93cf-18688cf634c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300eb2dc-1b81-481b-9a5a-d4f2a6c91e6c",
        "cursor": {
          "ref": "8983a75a-1ce9-446e-acfc-fd0684a2152a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "815beefb-2f6b-4530-82fa-8e6b4da85522"
        },
        "item": {
          "id": "300eb2dc-1b81-481b-9a5a-d4f2a6c91e6c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "91c91ba3-f590-4c3d-a764-e2e34411bd03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7cdaba6-1fea-435b-a5f2-9091d441f165",
        "cursor": {
          "ref": "cc78a343-2b48-4fba-beda-6b4be03832be",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "701e30a7-564a-4cc7-afbc-31950fb7eeea"
        },
        "item": {
          "id": "f7cdaba6-1fea-435b-a5f2-9091d441f165",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "799b55ee-dd42-4008-9381-1244a8c817d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0627b974-06ed-4585-b44d-382db78f361e",
        "cursor": {
          "ref": "95351b57-967c-47ee-9a70-308ca5758c5b",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1a12663d-c433-43a8-81bf-799f90982eab"
        },
        "item": {
          "id": "0627b974-06ed-4585-b44d-382db78f361e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2fa1cd8a-cd57-46c4-ab9f-a97437784dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377bd238-07d1-42e9-bf80-427c97cbd72c",
        "cursor": {
          "ref": "69b17e1d-f81e-4dc7-aeb0-477a71529246",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cb3aa557-49ee-40fa-a0ba-20d0d1a1b797"
        },
        "item": {
          "id": "377bd238-07d1-42e9-bf80-427c97cbd72c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fd2b8758-ba7b-4813-83f4-3cd2b4f4be67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4ff6d5-3af2-45ad-80ae-aab14201393e",
        "cursor": {
          "ref": "5e4402a3-42c2-45b4-ae9c-f41585f9450b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f4f8db40-fa81-4a15-98e7-543c87aad238"
        },
        "item": {
          "id": "5c4ff6d5-3af2-45ad-80ae-aab14201393e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aea85956-cc9a-4e3c-aa49-4d6b474e7397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99b95a9-72c8-4968-b34c-e42d06a9a8b6",
        "cursor": {
          "ref": "6d6d6959-1924-482c-9aab-e2248cb96339",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1f7b7aca-2b1b-4b0e-99f8-cbf70d907aef"
        },
        "item": {
          "id": "b99b95a9-72c8-4968-b34c-e42d06a9a8b6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d76661d4-eee8-4354-b0ad-a9852a7eb7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d831c9ea-fc46-444f-b9ec-99be29e2ce7f",
        "cursor": {
          "ref": "2b872e91-f178-479b-a058-6e32970e472d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "974d3c2f-4d05-418a-a2fd-2c13eee16fb4"
        },
        "item": {
          "id": "d831c9ea-fc46-444f-b9ec-99be29e2ce7f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a58e939a-23db-44ca-bf38-44c3d7007f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad16e5a-7621-4e4b-a627-76e944ac55a1",
        "cursor": {
          "ref": "ec17bd08-cf19-4f77-b22e-71bb7d2c0bd0",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a91761c8-4778-4423-aa66-255dda7b0d14"
        },
        "item": {
          "id": "6ad16e5a-7621-4e4b-a627-76e944ac55a1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "80588469-47e0-462c-ac42-f0ab07a91a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1f8698-f4bf-455b-9ba2-cd7f1dcd6fbb",
        "cursor": {
          "ref": "a452d399-86ec-4853-8257-6af77e354f25",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ac41d12e-1aae-41a2-b34b-48f3c6682330"
        },
        "item": {
          "id": "7b1f8698-f4bf-455b-9ba2-cd7f1dcd6fbb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bd9e3a4f-6640-4c85-a11b-230f88e1a9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692fca6d-f25e-490f-abe2-52d262513f16",
        "cursor": {
          "ref": "5bba41c2-603f-4790-bd2c-4372f1864c17",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a928d001-086a-4829-851e-d2c4af77f82e"
        },
        "item": {
          "id": "692fca6d-f25e-490f-abe2-52d262513f16",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3597d988-4231-48e3-96bd-85631b84af8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1982c49-ba5f-4953-9fbf-2b51f465d2d8",
        "cursor": {
          "ref": "3dddeedd-a455-4629-a448-105321f3784d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e9df7a26-51e8-4b89-b86b-2b44ee1a525d"
        },
        "item": {
          "id": "d1982c49-ba5f-4953-9fbf-2b51f465d2d8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f3935151-4bb0-41ef-869e-6a369ad7b3b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9a7053-7a38-444b-ab0d-60fdf210901e",
        "cursor": {
          "ref": "1dc638e8-e606-46bc-bf16-2c4f25dadd89",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "06e1f01d-5a2d-495e-a58b-b3793c02b3e9"
        },
        "item": {
          "id": "0f9a7053-7a38-444b-ab0d-60fdf210901e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "310d3686-ef1a-4fee-8949-27767ce7312f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e469cf7e-e370-4ec6-bbe6-baa81f730e47",
        "cursor": {
          "ref": "d5f462ba-ffc7-4de2-aecf-aec305e67710",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b29d4542-5781-4e4b-823b-92ee7957a622"
        },
        "item": {
          "id": "e469cf7e-e370-4ec6-bbe6-baa81f730e47",
          "name": "credentials_issue"
        },
        "response": {
          "id": "906e404d-3be9-4480-9b6f-734e61e257e8",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4911fcfc-f696-417f-a4b3-cf5d1d1b2646",
        "cursor": {
          "ref": "7ce41450-616e-48c9-809f-5bff7bca5f44",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "651914fb-e0c6-4bfd-91e4-f7d60fe589dc"
        },
        "item": {
          "id": "4911fcfc-f696-417f-a4b3-cf5d1d1b2646",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0ab849b4-50b2-4943-bfee-3d4d7d67666a",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b96dd3-c145-4887-aa7e-0a599df68ee1",
        "cursor": {
          "ref": "36adca18-503c-47dd-832c-d7a7eded559e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "82cf7594-d10b-4328-a47c-c488fa616f14"
        },
        "item": {
          "id": "76b96dd3-c145-4887-aa7e-0a599df68ee1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "695c9515-8371-4ddf-a9cd-9a4742edaffc",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd0a095-9edd-4307-bf1d-43ad89fb8056",
        "cursor": {
          "ref": "05ba58c0-62ba-46c5-91aa-e68b2094f5ee",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "134dbe4b-15c0-4a5b-bb18-2d8e886a35d1"
        },
        "item": {
          "id": "afd0a095-9edd-4307-bf1d-43ad89fb8056",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9feead9d-a7d8-45b5-824f-bdeca75383eb",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e846f9ae-ae2d-41fa-9734-44a60501e49b",
        "cursor": {
          "ref": "1d12ef69-4e9b-41c7-8321-67dbf03235f7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d9dce5b6-ac75-4977-9e30-9844b42fd58d"
        },
        "item": {
          "id": "e846f9ae-ae2d-41fa-9734-44a60501e49b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "44118eeb-b1eb-494f-90e6-c9cdc139d50c",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-11T00:37:08.331Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-11T00:37:08.331Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d2727dab-b7e1-4bcc-ae97-07ced25cff69",
        "cursor": {
          "ref": "6e960d41-48a0-443e-8b6c-e82aef3999b8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1a42c0f7-2a00-4e83-8d88-eb1117b55b18"
        },
        "item": {
          "id": "d2727dab-b7e1-4bcc-ae97-07ced25cff69",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6f0000db-0301-4b73-b9fb-701af0a7c2b3",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072223f0-6db8-4bcd-85da-c31cddc7aa81",
        "cursor": {
          "ref": "c0397b1b-5d4e-435c-b946-3af5c6fa586b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "858182c4-98b6-43b3-83d2-70cfc69bf3a8"
        },
        "item": {
          "id": "072223f0-6db8-4bcd-85da-c31cddc7aa81",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4c166ca8-3cc9-4d65-a285-9f16acda3a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6405f8cf-a70b-443d-9edf-e73e6586b241",
        "cursor": {
          "ref": "aa9dda87-1a35-4d75-8091-40fa38d1d12f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "cbeddc6a-1a07-4a8d-9878-c25ca5f1f274"
        },
        "item": {
          "id": "6405f8cf-a70b-443d-9edf-e73e6586b241",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "977ca5eb-2c80-420a-a954-f5c3a856122f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14249af1-86de-4841-a1f2-aaab75ff4cbd",
        "cursor": {
          "ref": "5f76b277-a1c7-4100-91fa-ca7d17a90226",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "36421e42-2524-4d8f-a4a4-c9349de0b252"
        },
        "item": {
          "id": "14249af1-86de-4841-a1f2-aaab75ff4cbd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "45f26a5c-32c1-42a4-b4a3-c0cebbbaefbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85176a05-12a8-4df8-9920-3f20b5ba04fe",
        "cursor": {
          "ref": "081ef083-e274-4126-b6de-2c462793b26a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e74206b4-a0d0-40af-aed8-b2f3162cec01"
        },
        "item": {
          "id": "85176a05-12a8-4df8-9920-3f20b5ba04fe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3d4363d2-fa2f-442f-bf65-42220d8ec637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839c0847-fb59-4fe8-9668-b313ff64a484",
        "cursor": {
          "ref": "d0217fce-1a75-4610-ab82-51d3912177f1",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fd82514f-e899-4cc4-9947-1dd4b3c42e1e"
        },
        "item": {
          "id": "839c0847-fb59-4fe8-9668-b313ff64a484",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ec10cd84-5dd6-47c5-bfc0-e587606c8b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcd9a2b-6dd6-4725-997d-b65d33323b03",
        "cursor": {
          "ref": "13fe05d2-6737-493c-8f37-be4d37a9626d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9e88a355-083d-4e83-9f5a-a45a93563fc0"
        },
        "item": {
          "id": "1fcd9a2b-6dd6-4725-997d-b65d33323b03",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "151f2639-d3df-42f4-ae3b-646bb3687d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a0251d-ef7f-4153-8e0a-a1d8b82feb29",
        "cursor": {
          "ref": "034ed30f-5913-4d7a-8896-a86ab53d2894",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8381205b-8f02-4ce3-8e7b-4009940a58e8"
        },
        "item": {
          "id": "d7a0251d-ef7f-4153-8e0a-a1d8b82feb29",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a96bf795-801d-4eb6-84a4-011f878aab26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215baa8f-eb28-4541-b256-3d3adbdc9913",
        "cursor": {
          "ref": "0bdd1781-f1ad-45a8-85a8-3dd4d0b5266e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "57da3f2c-a2a0-4f0d-9f6d-c22f2158be40"
        },
        "item": {
          "id": "215baa8f-eb28-4541-b256-3d3adbdc9913",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a864a3d1-7f40-4573-9612-81f7c723a571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff346d2-82de-43b5-bee5-03d8f8590fd2",
        "cursor": {
          "ref": "87037069-0417-45e8-8ddb-a665621569cd",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "19ae9bb6-f93e-4ba2-a9b2-028bbd0ef080"
        },
        "item": {
          "id": "bff346d2-82de-43b5-bee5-03d8f8590fd2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3c6dd4eb-ab9e-4e61-877e-aa9beaf65da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23e2eb4-629a-40cc-8aef-d2089a5dfad8",
        "cursor": {
          "ref": "833ecdd1-41d4-4b58-b30b-dbc610061b61",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "31d30a8d-09a8-4a33-b1ac-8b6cd988136b"
        },
        "item": {
          "id": "a23e2eb4-629a-40cc-8aef-d2089a5dfad8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9c7b32d2-b8d3-4d60-a5aa-44b88ca74370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd69a9f-d56f-44e7-aa21-2d7c11f678f5",
        "cursor": {
          "ref": "d0d65265-f85c-4ea1-bfe5-85aa47c07a97",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d6247e1a-a515-48f0-bdad-bf33a3d29db4"
        },
        "item": {
          "id": "3bd69a9f-d56f-44e7-aa21-2d7c11f678f5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7bb64875-7ced-4ee7-b5d7-75f2f2a8964f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e54bb0-d90f-417a-b702-760755bc665a",
        "cursor": {
          "ref": "a645e0de-4414-4889-82e3-48dd267c06d9",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0ecb283c-29ec-4a3c-bf87-6b1bcf0b5c3f"
        },
        "item": {
          "id": "b9e54bb0-d90f-417a-b702-760755bc665a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0de76915-b457-49dd-a566-1938fee4470e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24007b1c-20cd-4715-bf23-a87ff876d674",
        "cursor": {
          "ref": "b96e3678-b8af-45c4-b584-4a0ee35b3041",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "aa242b89-40c7-450f-9f9e-bc0af7d1f38a"
        },
        "item": {
          "id": "24007b1c-20cd-4715-bf23-a87ff876d674",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "da14011a-9eaf-45ad-b2d5-2a4a385092c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0295c631-11d1-4cab-87ed-33e521b6a06c",
        "cursor": {
          "ref": "9a696f93-e8f1-458f-9281-afee3a7245df",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2267af63-52f7-4e96-b86c-0c480ca175aa"
        },
        "item": {
          "id": "0295c631-11d1-4cab-87ed-33e521b6a06c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "112f2320-f446-4d90-ae1d-a905bb32c8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e803b89-5715-4843-b4bc-f2e45c23a42d",
        "cursor": {
          "ref": "3ad5aa4f-406c-40df-b6c9-05b975b93cf6",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "94d8a3b6-fd15-45d9-b89b-f70f270bb544"
        },
        "item": {
          "id": "5e803b89-5715-4843-b4bc-f2e45c23a42d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "26c5e144-b0b4-4236-8ce2-93db7e038cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632f3b0a-5bd1-40aa-ae33-8f96f100a3aa",
        "cursor": {
          "ref": "c10471c0-a16e-4d14-9cf6-c49ff4f7830d",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3368c6c7-d60d-4cec-a415-73686d2e7254"
        },
        "item": {
          "id": "632f3b0a-5bd1-40aa-ae33-8f96f100a3aa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3b10cc0c-7427-425f-a660-afb85763484f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e294a622-97e5-4a22-8160-688135b8e137",
        "cursor": {
          "ref": "8b89c8fd-1602-410d-b3bb-db90aacb6f26",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "87a2cdf7-ff88-42e6-8000-c21b676d952d"
        },
        "item": {
          "id": "e294a622-97e5-4a22-8160-688135b8e137",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5ab0db6e-36be-4bae-985f-122b9372bba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee613a19-bd48-48f3-b056-8fa5a0e9c891",
        "cursor": {
          "ref": "e3f8248a-157f-45cc-b334-db81f6319e2b",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "02c71d97-9a4c-473c-8a70-ac2e8248ba8e"
        },
        "item": {
          "id": "ee613a19-bd48-48f3-b056-8fa5a0e9c891",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7d9aa819-1fd8-4c83-9fee-58ace2d2d314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822383e6-81a7-48c2-ba4c-e9d9f971bcb7",
        "cursor": {
          "ref": "c2c3c827-b532-49a9-bb52-c46ad09c7b0f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "44bb8413-8189-4f94-a7cf-7bba64dcf055"
        },
        "item": {
          "id": "822383e6-81a7-48c2-ba4c-e9d9f971bcb7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "02c338d8-a644-4d41-b6b1-f02cf147ed29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974fe82c-2219-4e0b-9d28-d0e942a90f9b",
        "cursor": {
          "ref": "d07c5385-f495-4a94-83a7-001acc96c89a",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bd581e52-76b5-4e9f-a62d-8813c2f82fed"
        },
        "item": {
          "id": "974fe82c-2219-4e0b-9d28-d0e942a90f9b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "62cdc20f-2f84-4842-8a5e-c469df2360f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c18357a-d7c5-41bc-a900-8ad7c88e0e9f",
        "cursor": {
          "ref": "80293fc2-ae00-4b14-9cb1-b8ec44863503",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "706d9a8e-ca09-4bfc-8c38-125d3f1f2385"
        },
        "item": {
          "id": "7c18357a-d7c5-41bc-a900-8ad7c88e0e9f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "82402ac1-8477-4754-9f7d-8a2de1b29fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3088739-b740-4179-84d2-f2f76be19d0c",
        "cursor": {
          "ref": "2b2f4d90-ebd2-4992-a9d4-6a45344f7b75",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a6ff6732-b8e7-44d2-bc4a-58ce5901f14e"
        },
        "item": {
          "id": "f3088739-b740-4179-84d2-f2f76be19d0c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fa8f2b4a-782c-4cca-95cd-e87d31b76b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745edd28-7597-41fd-be64-87b7d24cf6e1",
        "cursor": {
          "ref": "3a20aab1-da59-49b3-a558-4f10d84a072d",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "755b2ded-aa6e-4030-8d3e-09215698ca35"
        },
        "item": {
          "id": "745edd28-7597-41fd-be64-87b7d24cf6e1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b7b7ec4f-50e3-4828-b150-3f910a4be44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa146dd-0aca-4ac9-bd07-4f7ce3c27649",
        "cursor": {
          "ref": "19a86d82-3975-439e-a55c-6208eb2bc2fa",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a7e4d262-9718-48c0-811d-6af13185ad35"
        },
        "item": {
          "id": "dfa146dd-0aca-4ac9-bd07-4f7ce3c27649",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ed7dcfbe-405a-4057-8204-ac670ae5d7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a8580b8-6339-463c-90d5-68e75f790d3e",
        "cursor": {
          "ref": "4e6bcdef-7eb6-486f-bf4e-37cbc22c78ef",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d1b88696-269a-4b89-be81-c8ec804d1142"
        },
        "item": {
          "id": "7a8580b8-6339-463c-90d5-68e75f790d3e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "39cc7b2b-794b-4bd5-bc5c-0f24b0a648c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984254a8-bb8c-437c-ad94-9f7f07f8da10",
        "cursor": {
          "ref": "edcfc6d7-ee04-414a-a1a7-f9e4f0394829",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1259d663-08b8-41a6-afc0-67b90f197a32"
        },
        "item": {
          "id": "984254a8-bb8c-437c-ad94-9f7f07f8da10",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "63421e13-8707-4c4c-9229-2f54d888b4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ee75a6-c2af-4884-ad23-9dc11bee27b4",
        "cursor": {
          "ref": "61852121-355b-4e12-a46b-49101d26787c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7279eac4-29bf-4ad7-8ff5-93a82919ba67"
        },
        "item": {
          "id": "81ee75a6-c2af-4884-ad23-9dc11bee27b4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4a10f12c-6fa8-4d8f-9a3d-76dce32f7704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f8d3cd-d5e2-4844-ba7c-ec9b331d7a43",
        "cursor": {
          "ref": "431c7e33-bf27-464e-ab33-084aa6b8c87c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4f84dac6-b326-40fa-af79-596af2c12177"
        },
        "item": {
          "id": "51f8d3cd-d5e2-4844-ba7c-ec9b331d7a43",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "78f9a94c-dec3-4755-af96-ae1dcbde1846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d213e219-3a88-4805-9703-ce3ee59d384a",
        "cursor": {
          "ref": "14ec29b0-e2bb-47a1-a9bb-f9c1f0214abe",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cb7d5b74-ab35-4662-986a-e81ddd2feaca"
        },
        "item": {
          "id": "d213e219-3a88-4805-9703-ce3ee59d384a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "10d44b33-3188-47c7-8cb5-d8a477d982d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03318d5-ef34-4b82-84bb-92765aeb0d59",
        "cursor": {
          "ref": "504db39e-f3a9-423a-a355-527cb4c55fc2",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "36f1fd0e-24e0-474f-9b07-16e00cc2e4c7"
        },
        "item": {
          "id": "b03318d5-ef34-4b82-84bb-92765aeb0d59",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f7e48135-4de4-4bf5-8980-64a71dda807a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba591f64-5f6e-4afe-96ff-6fbade8892bf",
        "cursor": {
          "ref": "d0a98b76-6703-49f0-a5ad-ba0897018997",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7bb84c5d-e0da-43f2-be29-9d40e6e8861f"
        },
        "item": {
          "id": "ba591f64-5f6e-4afe-96ff-6fbade8892bf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3c3aac2f-9f92-4a6c-a6ac-bf5a8f78bf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cd1626-b124-4547-9035-930797b6dbc2",
        "cursor": {
          "ref": "de1d907d-451e-407d-9674-ebce0d61aff3",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "52f012ff-049f-45e6-95fb-90d2bf2d21c2"
        },
        "item": {
          "id": "58cd1626-b124-4547-9035-930797b6dbc2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ac436cdb-b444-409f-a5a6-9742adeee6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fdf187-0690-4dcc-9589-8c5c8f1c6240",
        "cursor": {
          "ref": "d14978f4-647a-462d-9d67-45c6685dc808",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4a9a03de-1ce2-4433-a1a6-86addbac4763"
        },
        "item": {
          "id": "70fdf187-0690-4dcc-9589-8c5c8f1c6240",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c040e47e-4f77-4620-9ef9-c5cf05c40fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d16bf2-0d72-4a18-a476-1d3ce9358757",
        "cursor": {
          "ref": "c419a7ce-da81-4092-b7e8-8df0247679df",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "037d25fb-0afc-4f01-8e5a-5ece511f18af"
        },
        "item": {
          "id": "32d16bf2-0d72-4a18-a476-1d3ce9358757",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "631eb781-151a-42c9-8b65-1361a977862f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7633601f-ec58-4601-bebe-065eb445f92d",
        "cursor": {
          "ref": "7a4a4b82-7c73-490d-b5b5-063454319c2c",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e6521a67-a2fc-4b69-982b-036d608321eb"
        },
        "item": {
          "id": "7633601f-ec58-4601-bebe-065eb445f92d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6a3de306-753f-43a8-a855-eaafb9d58bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd661aac-7e9f-42bb-adb8-8dc3e0f9760c",
        "cursor": {
          "ref": "a61c75a7-45b7-4cb2-acda-6a2642ea3759",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b4393b25-e93b-4e48-a77c-6d824769fba3"
        },
        "item": {
          "id": "cd661aac-7e9f-42bb-adb8-8dc3e0f9760c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b111ebb2-b40a-416f-958b-49e917886342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3a22ab-ac09-4d9f-9555-6d9e8aae986c",
        "cursor": {
          "ref": "9e7b76eb-f55c-44b7-b1c6-b641358bf4cc",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "799f554e-0748-4af8-b567-338a1deb77a5"
        },
        "item": {
          "id": "ec3a22ab-ac09-4d9f-9555-6d9e8aae986c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "75e84891-e237-42a7-a4d4-c9c7a0f5e50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edd85a1-f82c-45b4-be28-75ebc65ad0ef",
        "cursor": {
          "ref": "14d3b5e7-d9e3-4f37-878b-27a5e8dbcb78",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fe06c34d-0617-4ea8-807e-58802476e5c8"
        },
        "item": {
          "id": "1edd85a1-f82c-45b4-be28-75ebc65ad0ef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4cebf194-9481-4a7f-bc0a-c401783d8f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30eb10de-c5ab-4705-a538-977c9d1ebce8",
        "cursor": {
          "ref": "3ff17d89-4d7f-4cac-88cd-1fd6bd846044",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c726a83b-0631-459e-8165-e5c9f737bd86"
        },
        "item": {
          "id": "30eb10de-c5ab-4705-a538-977c9d1ebce8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bc5e864a-548c-4c13-bee7-f84becabd425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23748459-e3b8-4e9d-9ec8-4e35dea6444d",
        "cursor": {
          "ref": "fbaea677-b6ad-4eae-814c-92dd5395d4b3",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ade4be7f-f835-4e1e-87e2-fedc23c211a5"
        },
        "item": {
          "id": "23748459-e3b8-4e9d-9ec8-4e35dea6444d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f0cebdba-ce70-4c30-a362-8617618e8df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cd5a62-1c00-4e95-a14f-d1e9847713d7",
        "cursor": {
          "ref": "8d5158d1-4a85-4a56-812d-4664505c86d4",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f3062ad5-d5d3-4660-968b-77acab1f0334"
        },
        "item": {
          "id": "03cd5a62-1c00-4e95-a14f-d1e9847713d7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2e3926ba-5acd-4648-8ea0-09f9b05a34d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe3459b-5173-44c3-bf09-15d1977ab29b",
        "cursor": {
          "ref": "ce436c79-839c-4948-ac93-81d485858a72",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4fe49565-9122-48a5-b066-f5c246725db0"
        },
        "item": {
          "id": "3fe3459b-5173-44c3-bf09-15d1977ab29b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2f5fd8ad-e35e-4cba-b734-1dfffb19a29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbce5702-6b1e-4cb4-9ffe-24f5f2ede080",
        "cursor": {
          "ref": "bb5442d0-910e-48f1-866e-7cd0649c2f4c",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2072fa15-0ca6-4fab-84ec-d7f9140e941d"
        },
        "item": {
          "id": "dbce5702-6b1e-4cb4-9ffe-24f5f2ede080",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "02b8b3e5-da42-426e-980a-4c0e7e1209d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2ceb1c-049f-48ad-8efe-3c2a9c752231",
        "cursor": {
          "ref": "1f30945f-0f56-48ef-8892-a272bf685ad5",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a78b0c81-6cc8-41ae-aa33-fb66ba86f0de"
        },
        "item": {
          "id": "eb2ceb1c-049f-48ad-8efe-3c2a9c752231",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9c860c6e-6157-4fe9-98fa-5af5b1b93485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae0b0c4-73cb-4725-9661-185c345bfb14",
        "cursor": {
          "ref": "5f8d3620-d5c8-42b2-b719-ea9f28a5ff14",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c46e5ba8-f263-45b7-bd18-f0967572c97d"
        },
        "item": {
          "id": "9ae0b0c4-73cb-4725-9661-185c345bfb14",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3aa6a808-aeea-4ae5-bb20-3cf62b860d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df0a061-8333-42f7-813f-9d0076850275",
        "cursor": {
          "ref": "5ca971c5-df00-4f01-9801-b724fd1a059c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "265e5378-2da3-443e-8a5c-dc9c0096fa8f"
        },
        "item": {
          "id": "8df0a061-8333-42f7-813f-9d0076850275",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6526cfff-857d-4247-af00-06a5bba8da71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cdc72c-4c90-4e71-84e7-2d4db91141de",
        "cursor": {
          "ref": "3021c7e8-149b-4dfc-814c-c60dd3ff6bc8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "587a61c9-efb2-4ec9-95f8-6ae81f2a6c9a"
        },
        "item": {
          "id": "05cdc72c-4c90-4e71-84e7-2d4db91141de",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fca42df4-939b-45b1-b59c-2a6ff0ae8d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ac8b4f-0326-4af6-aad2-8fa8cff190e8",
        "cursor": {
          "ref": "d13f9825-4fbe-4758-97d1-420537963ec2",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f437bfc8-bcd1-40ec-a0e6-5d4e99db853c"
        },
        "item": {
          "id": "08ac8b4f-0326-4af6-aad2-8fa8cff190e8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "780d9b45-9697-4a5f-95bd-b4dfb1c9f457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352cdd53-f22f-473e-9bab-4f0a87b00a09",
        "cursor": {
          "ref": "715d3f01-f455-4cd0-b408-ccf0162a981b",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4e7e0251-f826-41c6-a267-8f1e71d01739"
        },
        "item": {
          "id": "352cdd53-f22f-473e-9bab-4f0a87b00a09",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "49abdc0e-047b-41b7-881a-a06dc396622a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38ad5e6-8b4f-4dc9-9a73-9066b7d6ba83",
        "cursor": {
          "ref": "bfc5a16b-798c-4918-a661-6f5f156416ef",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ba7c50a7-15cd-4be4-a23b-05d23df70333"
        },
        "item": {
          "id": "b38ad5e6-8b4f-4dc9-9a73-9066b7d6ba83",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f8152ee2-0340-47ce-b756-2c2df1ef152e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5683ff0c-6d4b-40e2-92f2-7bd3dc54b7d0",
        "cursor": {
          "ref": "28792f32-5c72-4146-89c2-e95343665109",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "927d071c-f33f-4f7e-a2b3-dc8184ab41e4"
        },
        "item": {
          "id": "5683ff0c-6d4b-40e2-92f2-7bd3dc54b7d0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a20d403a-16d9-4a81-ac32-0be9a23cd0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215b115f-437e-4479-afcb-db980d7a6757",
        "cursor": {
          "ref": "01ad3bbb-be2b-47d4-86d1-e860e0de6f82",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c5168d07-5de6-4e97-853a-22b1c69cdaaa"
        },
        "item": {
          "id": "215b115f-437e-4479-afcb-db980d7a6757",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b0d9071d-8481-4f21-8325-ff9f85f7855f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28890d1-f271-430e-ae6b-a099601839eb",
        "cursor": {
          "ref": "f3e13768-c984-4a97-8906-a327709f77ed",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1292b234-6ec9-40a7-b378-446a3637b252"
        },
        "item": {
          "id": "e28890d1-f271-430e-ae6b-a099601839eb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "788fae50-4a05-462e-8050-075c991ac427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bb800c-c071-48e0-bcc5-20ef20180b78",
        "cursor": {
          "ref": "eb318ab2-a2e2-4cd8-be37-4814639769db",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6ccc1b41-a342-4692-a0f0-944928c695ce"
        },
        "item": {
          "id": "f2bb800c-c071-48e0-bcc5-20ef20180b78",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "34d72581-ad5d-4d7b-93fd-1fc14d1996dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a0c2e2-a92b-495f-b9ce-d115473bdbcd",
        "cursor": {
          "ref": "9d84f1a0-71e5-4a81-88ad-8ce39b4a281b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3ccde1a0-bbe7-48b7-8988-487654b0e943"
        },
        "item": {
          "id": "86a0c2e2-a92b-495f-b9ce-d115473bdbcd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "69311aea-d78b-4804-9e96-bda3967a332c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c370c1-d66a-4525-b488-fcfb0fd2f0ef",
        "cursor": {
          "ref": "74b56c0c-75db-4b01-a97c-f33eb165febe",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f319c78b-06f3-4de4-b45e-2c9393eb164f"
        },
        "item": {
          "id": "84c370c1-d66a-4525-b488-fcfb0fd2f0ef",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aba24994-dc67-4d9a-9dc1-5ab5e8ac513b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec60075-8902-4227-abcd-2b534b9b4417",
        "cursor": {
          "ref": "383a2c50-043f-4b58-a596-a3a02df34695",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "57e6b3b1-53b5-4efc-9afe-ccc71988f709"
        },
        "item": {
          "id": "8ec60075-8902-4227-abcd-2b534b9b4417",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fb5fd483-5f64-412d-a735-1e5d77d9b01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ebb6f4-0d88-4a6c-a561-7ed67f6575be",
        "cursor": {
          "ref": "e0363f9d-8f48-4a3b-9917-2b063a4cfedc",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "52fede42-bb9f-4e38-91b1-8470ee371e5e"
        },
        "item": {
          "id": "d2ebb6f4-0d88-4a6c-a561-7ed67f6575be",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c4893b26-3ae0-40ba-9845-540671276f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2295d1-1209-45b7-9c90-75313126e3de",
        "cursor": {
          "ref": "c0e144cb-d03a-4009-9430-819f361eec90",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7fe4003a-3656-4678-be2c-eb2172040519"
        },
        "item": {
          "id": "9b2295d1-1209-45b7-9c90-75313126e3de",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e44fcf28-679f-4024-b46f-c67734984b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bce6a8e-06b9-4ea3-a0f5-01a5ad99e81b",
        "cursor": {
          "ref": "02b9ace3-c684-4459-9125-e9f3ab4ec9d7",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "54738ce2-aed1-4cf9-a9dd-fbdfa84980c1"
        },
        "item": {
          "id": "6bce6a8e-06b9-4ea3-a0f5-01a5ad99e81b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "da32dae4-2024-4d3a-b311-4e9b923cb648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fc62f8-bc38-4670-9515-1d633eeac281",
        "cursor": {
          "ref": "3e7632f0-657b-4f08-9ccf-b379572b3d6e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1b3ad953-e25e-4dfd-b435-8bc119fbc036"
        },
        "item": {
          "id": "85fc62f8-bc38-4670-9515-1d633eeac281",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "18ce7787-7849-406c-bce7-fb46ee201503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef555754-c947-4c40-8f4b-23242336f16f",
        "cursor": {
          "ref": "b08d177c-d83a-4008-bc65-d572fa0755b1",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "68aa0d4d-9469-4683-b0b7-7fce9cbbaf60"
        },
        "item": {
          "id": "ef555754-c947-4c40-8f4b-23242336f16f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "11273447-3ff0-40ee-9f12-5e52ff4bc69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b24bf7f-03bc-4435-b1dc-3d37fdfcd09a",
        "cursor": {
          "ref": "f0f7b7a5-b0a0-44ff-b771-a4a587c9208f",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8b6fa235-f3b8-41cd-959f-94ad873bdc3e"
        },
        "item": {
          "id": "9b24bf7f-03bc-4435-b1dc-3d37fdfcd09a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ef79f33a-cbc6-403b-98cc-68289d0381c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54caaffc-a75a-4721-bfe7-71814193d808",
        "cursor": {
          "ref": "e7686081-87ed-4225-94c0-6fe4ef84e271",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "645cd3c8-bf4d-4aa6-8e0e-8b92fabf43d8"
        },
        "item": {
          "id": "54caaffc-a75a-4721-bfe7-71814193d808",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ca36b851-b013-4144-8431-3998514b59df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45f4f4c-a965-4c4f-99d2-262ca8e28fe9",
        "cursor": {
          "ref": "f55f2aae-8cf9-4f3c-9d53-be629d3eb997",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3cef368d-fcec-4482-b521-2675ebab6540"
        },
        "item": {
          "id": "a45f4f4c-a965-4c4f-99d2-262ca8e28fe9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "699c76ed-4075-447e-ae18-db467f395c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81893754-acca-4c81-8f17-17fa6107e408",
        "cursor": {
          "ref": "cb144a13-bd67-4dac-83e6-7392e05b371b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e4744853-1350-47fe-9615-ebc31e8bebf6"
        },
        "item": {
          "id": "81893754-acca-4c81-8f17-17fa6107e408",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "09dda982-f09f-4ef1-8b30-7f6b4d79331c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7695f834-b724-4814-9929-1e28a7f904f5",
        "cursor": {
          "ref": "2715ba12-38f4-4fe9-a284-3f0f52135edb",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d581d3a9-07fb-41bb-8535-fd6810fa59e7"
        },
        "item": {
          "id": "7695f834-b724-4814-9929-1e28a7f904f5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fef0260c-cbe6-4178-9715-a90e00970f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebf58e2-bb4a-4526-909d-cf208a8b3719",
        "cursor": {
          "ref": "595bb059-31da-47fc-bf59-3edef9c06bb2",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "177ef525-9082-4c7c-bd1a-02cae8da1a3d"
        },
        "item": {
          "id": "aebf58e2-bb4a-4526-909d-cf208a8b3719",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f088aa91-c2b6-4ca9-b99a-12cd867845f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e43ced-6992-4234-ae6d-3b6514b41bfb",
        "cursor": {
          "ref": "3148b5f6-10c2-4807-87db-475ff98fff65",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e95afaa6-5804-4b2f-9a88-af8645bdc0eb"
        },
        "item": {
          "id": "c7e43ced-6992-4234-ae6d-3b6514b41bfb",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "449d5391-4c6d-4210-809a-0f03882a05d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfa831a-cc61-42f7-9aab-069da9fd7ae6",
        "cursor": {
          "ref": "b2cf0d92-dc74-42e4-9235-e36e25176501",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4f3af1c7-4f39-4359-a20b-6151d2cd5316"
        },
        "item": {
          "id": "5dfa831a-cc61-42f7-9aab-069da9fd7ae6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "dde7a444-d295-467c-9bd7-1c80f86acba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269c69ed-1e81-4ed9-a89a-a82a20d9c3d8",
        "cursor": {
          "ref": "b3a1d1b5-4664-4dae-a1bd-4221ca7313bc",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f1a9c75c-c142-44d6-b7cf-cfab867919c3"
        },
        "item": {
          "id": "269c69ed-1e81-4ed9-a89a-a82a20d9c3d8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7f19454d-720d-4b65-b2b2-be6fcb727966",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb8f630-cb64-4514-b513-eca2ff7e17e9",
        "cursor": {
          "ref": "02082702-2fba-4c2d-b054-4912db25d0d2",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "30e03e7b-d11b-451f-8355-3462af9c41fd"
        },
        "item": {
          "id": "5eb8f630-cb64-4514-b513-eca2ff7e17e9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c1bae9ee-7b63-4562-bb47-86cbc35ac8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cf2f3e-38f6-43ca-a8d0-ac144dbc98a6",
        "cursor": {
          "ref": "5f6c8b63-bc9c-4e2d-86e1-9828712dfdb9",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b14ac1d0-adfa-448f-9b29-ec10bfe2b02c"
        },
        "item": {
          "id": "29cf2f3e-38f6-43ca-a8d0-ac144dbc98a6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3239c700-f882-4556-8a76-9a5a93714301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e381e272-ac1c-45bb-898d-ea36e601961a",
        "cursor": {
          "ref": "3942d206-deaa-48ed-b018-43fea61bf641",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2ad80064-df2e-40e8-815b-6ca90e985cc9"
        },
        "item": {
          "id": "e381e272-ac1c-45bb-898d-ea36e601961a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e0b64a07-d4a2-4781-a1eb-a191a54b2225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85dcabb4-f5cd-4e2d-8e8e-94a75b4b756f",
        "cursor": {
          "ref": "c7e89279-8055-4c9f-9b71-dfaeea619ef2",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ec1bbac5-12c0-4e36-903e-edd751e7b65a"
        },
        "item": {
          "id": "85dcabb4-f5cd-4e2d-8e8e-94a75b4b756f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1b2b1bab-c936-4ebb-bb0a-6dcd3593471a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d30cba-bfd6-4cec-b838-9cf1f24555d2",
        "cursor": {
          "ref": "5753a9ba-bcf3-4a79-a608-d28b451f2c92",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1679f27e-6c7c-43a4-ab4d-aa89762df3ad"
        },
        "item": {
          "id": "58d30cba-bfd6-4cec-b838-9cf1f24555d2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "544e8bf5-b78f-4883-8818-10bea6115974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715d2d53-2089-4af9-ba70-fcf352e046aa",
        "cursor": {
          "ref": "2c222911-c0c8-4a43-a3d6-5f953d71e8d6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d16cc20f-2387-4a17-9911-8e4d74c98a1d"
        },
        "item": {
          "id": "715d2d53-2089-4af9-ba70-fcf352e046aa",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4801a152-3065-4b09-bfab-bcee02cff057",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "acdaf95c-669e-429e-abd8-2b7d308d8c07",
        "cursor": {
          "ref": "684c1128-35e1-472e-b354-15b20e1823a2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4d5aa0a0-57c9-47cc-9b50-61b367d272d3"
        },
        "item": {
          "id": "acdaf95c-669e-429e-abd8-2b7d308d8c07",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "498d287c-cea9-42ae-aa64-54ff84c6cbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b488359-7b75-4595-86d5-00e868bd70ff",
        "cursor": {
          "ref": "7ed06b75-7979-4d1d-ae8c-18fbb0d4e826",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a5d4ad95-2921-44c2-8bd6-5a5cb4ac2b8f"
        },
        "item": {
          "id": "0b488359-7b75-4595-86d5-00e868bd70ff",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4169daae-30fa-464d-a4c8-d50735cef973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1021a05d-39ef-4dc4-8775-54dd72c87ff3",
        "cursor": {
          "ref": "8fbd798b-a50f-433c-a033-9dcf4656dab4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3b6812a2-6ea9-4ebb-9d6e-fd77ebe6bde2"
        },
        "item": {
          "id": "1021a05d-39ef-4dc4-8775-54dd72c87ff3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "47240fd0-003d-4498-bd32-271f6ce923f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b36121-d71a-4cf8-a4f4-489cf3d16325",
        "cursor": {
          "ref": "dd8b0162-aac9-43b4-a95a-112c40c6bb5e",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "207f5638-286e-40cc-b7bc-572c6acaa564"
        },
        "item": {
          "id": "98b36121-d71a-4cf8-a4f4-489cf3d16325",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "27a07068-358f-42f4-b8ed-9d5459c687e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00ab548-7f76-4956-b41b-a6ca6eb3e388",
        "cursor": {
          "ref": "b67a4181-00a5-44a0-b89b-01670ce47720",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "21db92c0-26f3-46c3-8e1d-9ded67fe82ba"
        },
        "item": {
          "id": "a00ab548-7f76-4956-b41b-a6ca6eb3e388",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1c02afad-5ec4-4e33-8c74-82dbabcd8636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925f0a81-7196-4df6-9610-14191b3dddbf",
        "cursor": {
          "ref": "d4a87576-22fc-4b92-94a0-720669fc23ce",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "41eca836-9036-4fc2-81f5-a2a474b0bec5"
        },
        "item": {
          "id": "925f0a81-7196-4df6-9610-14191b3dddbf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1704a8f4-9377-45ea-b397-4ea74d7f9913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a790164b-b544-4fba-9567-36fe97fb8c2c",
        "cursor": {
          "ref": "ad203b65-c848-480e-b090-68f284926a21",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6c1fc15d-df9d-487e-8723-12f6b7a400d1"
        },
        "item": {
          "id": "a790164b-b544-4fba-9567-36fe97fb8c2c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c10aa98b-3677-498b-89c9-572f2152eab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84941a3f-bb86-4b24-951e-d31049c95642",
        "cursor": {
          "ref": "9c157fd2-835a-4bf8-8730-12d4018ed1f0",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6e76e2a0-13b5-4034-adb3-38a8f028a5fc"
        },
        "item": {
          "id": "84941a3f-bb86-4b24-951e-d31049c95642",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7af1a3d3-bb84-4712-bb03-22aeb8348a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6380403-ef10-4de7-beb1-3546bf76858f",
        "cursor": {
          "ref": "d1da6d17-98c4-4e3a-828b-998c6f2beb4d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "25debf6d-a9d5-4744-8d1f-ee9b64683ec5"
        },
        "item": {
          "id": "b6380403-ef10-4de7-beb1-3546bf76858f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "527f6109-337a-41aa-9fd1-060ed5cefae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b5c0e8-3047-49b1-b749-7a39f536479c",
        "cursor": {
          "ref": "a7767c77-ab48-4101-b358-b2222c901c45",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ee3cebce-fca4-4292-b297-474a76df7e50"
        },
        "item": {
          "id": "39b5c0e8-3047-49b1-b749-7a39f536479c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d09d8979-7b04-46b8-a8e6-816409357eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1da29e-9ef6-4848-8e4e-cd4854897037",
        "cursor": {
          "ref": "330654bd-3991-4012-89a9-913268e67f10",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "13f7f691-3f82-4983-9cf8-d8a760cf112a"
        },
        "item": {
          "id": "cf1da29e-9ef6-4848-8e4e-cd4854897037",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "162cbc6e-94d4-4329-85e5-60c0fb53eb0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d08aa3b-4acc-4791-abd7-f9e898e2ea9e",
        "cursor": {
          "ref": "ae8f9357-b487-47e6-a3ae-532b67539109",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "17aae754-fe77-47f0-b918-a18672be0d80"
        },
        "item": {
          "id": "5d08aa3b-4acc-4791-abd7-f9e898e2ea9e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9d94fed9-b575-46eb-a857-59ee4cfbf5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c0fc80-6dd0-4155-b634-961928d5168d",
        "cursor": {
          "ref": "38a9b715-2788-4bd6-a3ba-d9541f27e259",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c4bd196d-7d8a-4216-a119-913eff7b4147"
        },
        "item": {
          "id": "69c0fc80-6dd0-4155-b634-961928d5168d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c824f1d9-9019-4a26-b9d9-3dbd2bbc01b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37e38b6-346d-450c-a172-1984299682aa",
        "cursor": {
          "ref": "d888d048-4947-4e70-bacb-00bf0945b650",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "152681f1-ef20-424e-82a5-5b391000751a"
        },
        "item": {
          "id": "c37e38b6-346d-450c-a172-1984299682aa",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e8ba07e4-94dc-4333-8f11-ded61965a944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba87efc-c6d6-4357-90ed-061cf71bdfe6",
        "cursor": {
          "ref": "96419695-c141-4a85-92eb-3119b8bedd6c",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5c6b4e70-fce2-4e2f-8b71-cafa8d6dcfb8"
        },
        "item": {
          "id": "4ba87efc-c6d6-4357-90ed-061cf71bdfe6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c96e354c-01bd-44cc-863a-7b94eec22611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4185faa-e829-4caf-bce8-b38709206a7e",
        "cursor": {
          "ref": "56abde1d-22aa-438a-89d6-fd14d4e3f474",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5cdcc6e8-e17f-4fab-ab37-7043e6b8441e"
        },
        "item": {
          "id": "e4185faa-e829-4caf-bce8-b38709206a7e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e539a86b-7549-4435-a94e-2e8e223089e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c43e8aa-f68c-4a34-9e48-48aa4a378d3d",
        "cursor": {
          "ref": "763d239c-ba15-406b-bcb8-8f89029610f4",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "231d6a1f-5977-41bb-974f-d2ee42a4fb0c"
        },
        "item": {
          "id": "1c43e8aa-f68c-4a34-9e48-48aa4a378d3d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "39c747ec-17e9-4dd0-9cad-12a240c1a814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d999730-938a-419d-98b2-eb82a2076020",
        "cursor": {
          "ref": "c3fd6be1-5bfb-4b68-88f7-3b186ea479fc",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ca86b4fa-ca5f-4678-8cdb-443666299220"
        },
        "item": {
          "id": "6d999730-938a-419d-98b2-eb82a2076020",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e4d3b098-9dad-4c94-8963-2ed77f0f1cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f243ab-3b80-42fb-b779-8d87fc8a7eba",
        "cursor": {
          "ref": "5ce67cf9-1854-4343-aadb-61ddc44439bf",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4d110f19-0545-4f78-b7ea-e89ea88fc227"
        },
        "item": {
          "id": "a0f243ab-3b80-42fb-b779-8d87fc8a7eba",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4d7aa014-9513-441c-a724-1847b36c45bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c227a2-ae0a-4730-8a45-ed84f9d00d0e",
        "cursor": {
          "ref": "43dd0f59-d81f-47c7-8c50-a36dea469c53",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "49a7ebcd-55eb-4d89-9614-499ed51a828a"
        },
        "item": {
          "id": "80c227a2-ae0a-4730-8a45-ed84f9d00d0e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "01cab44a-78fd-4ddd-9e61-cc2b4a86ea55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5da212-c4d4-40a8-a82a-92bff1e12a86",
        "cursor": {
          "ref": "d0f71167-da31-453c-947e-5654efc136a6",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "02d4184f-ff92-4d8a-a349-c9690856627e"
        },
        "item": {
          "id": "1c5da212-c4d4-40a8-a82a-92bff1e12a86",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "72af4b62-9f87-45ce-a43e-fe316e629ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fdb060-254e-49f0-807b-3dfc32decdd5",
        "cursor": {
          "ref": "6321d9ca-deca-4a14-9fbb-65fb9d70d8cf",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "26cf2ae6-fc33-48b1-b95c-bb04268d2e3c"
        },
        "item": {
          "id": "31fdb060-254e-49f0-807b-3dfc32decdd5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "00f03ecd-c9e7-4dfd-9261-ff11c395827f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb77e12-9a8c-4fae-afc5-f87e72e15f04",
        "cursor": {
          "ref": "e7799fb8-c8cc-4838-90a4-3396afbb01ac",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e46ae46a-c7ea-440a-9b21-1e0a5d256f51"
        },
        "item": {
          "id": "0bb77e12-9a8c-4fae-afc5-f87e72e15f04",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "781d6dac-971f-4d5e-8c6e-94aaa97212a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a313fec4-7776-4765-8d5d-d160cfbe1195",
        "cursor": {
          "ref": "de94b6ab-4ca7-4f6c-a224-bed0b35edd3c",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c941361a-47e0-4f64-ae58-6ac81657dacb"
        },
        "item": {
          "id": "a313fec4-7776-4765-8d5d-d160cfbe1195",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a1763e33-8d1e-4f11-b02f-9dac39ea7c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac3b237-4b36-4faa-a387-0a0d233d99f6",
        "cursor": {
          "ref": "b026145d-7de2-424d-aab1-4b0427447bfe",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c7aab169-b01c-408a-94b7-08617d00b08a"
        },
        "item": {
          "id": "0ac3b237-4b36-4faa-a387-0a0d233d99f6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "395f75f5-45f5-4158-924f-adc2bc26d0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67eed118-fae8-459f-81ab-704fb58cdd23",
        "cursor": {
          "ref": "d8da8e9f-52b1-4f9f-87d0-4242837e56a9",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d8e71c37-5db9-40e2-8a3e-04f4dbfcece6"
        },
        "item": {
          "id": "67eed118-fae8-459f-81ab-704fb58cdd23",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e99e87a7-2872-4157-a098-4f1846f53748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c5f8c3-8880-4c28-8418-1ae09128b5b0",
        "cursor": {
          "ref": "774d88b6-1672-453a-9a17-ee8ffe58ec29",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8c550afc-9a23-40f4-9cbb-d65bdafd7a8c"
        },
        "item": {
          "id": "d7c5f8c3-8880-4c28-8418-1ae09128b5b0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4eb7829a-f78a-4f8b-8d78-dae39bc8f8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70f8d93-c6b8-445c-aae0-e98a3b54edda",
        "cursor": {
          "ref": "1dba600d-6ffa-4f95-96b0-2b3cdac6ffc6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cc822d80-073e-4ec1-a022-8b1616aeb86d"
        },
        "item": {
          "id": "f70f8d93-c6b8-445c-aae0-e98a3b54edda",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "19a08fd3-5480-47e6-9092-0ca508988059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032810a5-636f-4394-aef3-9978b2c72a64",
        "cursor": {
          "ref": "0fdd52c5-c0bc-4bda-8f56-a7687e7b0440",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "345dae1e-c39c-4e51-b3ae-e877ae874f12"
        },
        "item": {
          "id": "032810a5-636f-4394-aef3-9978b2c72a64",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f694774f-5403-4773-85e2-078f567b6e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb56ef22-1b2d-4ee4-a1ec-0f08aaf63548",
        "cursor": {
          "ref": "7fd71e13-c5c3-434d-a552-54944ff46b63",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e6965333-ba42-4661-9a76-39a97e228315"
        },
        "item": {
          "id": "cb56ef22-1b2d-4ee4-a1ec-0f08aaf63548",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "47ee62ab-bac2-4352-9b04-def28e8e6773",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cb0cb11a-c573-4695-bfc2-61d76491a659",
        "cursor": {
          "ref": "9cb7a0b8-6eef-4aea-adf0-96ab49de7e78",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1f97fd7f-c644-4787-98b2-fe73d84a5921"
        },
        "item": {
          "id": "cb0cb11a-c573-4695-bfc2-61d76491a659",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "192cdb6f-cbf9-415e-865a-565bd6867d55",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3453929a-9a0b-48f1-8632-1a67bfd0d1b2",
        "cursor": {
          "ref": "c2f6260c-4e57-4b66-a7bb-4971f47ce65c",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "077da13f-4229-46ad-ab8a-655810bd8a92"
        },
        "item": {
          "id": "3453929a-9a0b-48f1-8632-1a67bfd0d1b2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "aeed0312-2c4f-414c-aa02-853302666f42",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "42921e17-39c6-486a-b36c-2af840a91024",
        "cursor": {
          "ref": "3005064a-6468-4643-95fc-3afd4d26914d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "00b31077-2c72-4dca-be23-264fa163f56e"
        },
        "item": {
          "id": "42921e17-39c6-486a-b36c-2af840a91024",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "542fce62-2ff3-4e6b-8482-fd59b95a0e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947e4119-b82e-4ac9-b425-c0fe773864ad",
        "cursor": {
          "ref": "0bb81fcd-e62b-481a-af99-b152130c19bb",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1be89992-ac6f-4d32-a61a-11ac754309ac"
        },
        "item": {
          "id": "947e4119-b82e-4ac9-b425-c0fe773864ad",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "08ca3d5d-9519-40be-b844-879a1958d353",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3898b27b-43d6-412b-b5cd-dedd56e06547",
        "cursor": {
          "ref": "795ea4e9-86fd-46e6-9551-3652f54f534e",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fef7529b-c346-4ccf-807b-a599c1148128"
        },
        "item": {
          "id": "3898b27b-43d6-412b-b5cd-dedd56e06547",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d0b8bfb8-4f2a-4a00-aff7-7556c4806276",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d28f4e83-07d6-40f9-8ef1-3c2844afee80",
        "cursor": {
          "ref": "5721326b-d822-4c4a-8ce3-5da9f3d93005",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bed5f76c-1f8a-4548-aa97-e8fa5d0bbb71"
        },
        "item": {
          "id": "d28f4e83-07d6-40f9-8ef1-3c2844afee80",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9c1ac65e-1841-4b99-b50d-27c9276f9c84",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "da219229-4b72-4e37-a6c6-fc9a015a2973",
        "cursor": {
          "ref": "551c9a38-608f-488b-be96-0722a3e51c44",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e19b79be-0960-462b-8eb3-2b6c7a3a0c69"
        },
        "item": {
          "id": "da219229-4b72-4e37-a6c6-fc9a015a2973",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6b7dedb7-eb39-4e17-b136-b9e9f63037c3",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0844487f-2062-43ed-9715-5b4cbf60921f",
        "cursor": {
          "ref": "cfe9a3c0-2e6b-4ae3-b49e-921e061540dd",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "042e9066-c57c-4326-9e49-89697019c0e4"
        },
        "item": {
          "id": "0844487f-2062-43ed-9715-5b4cbf60921f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2e64d5a0-fe51-40aa-a773-628ae30ce2d6",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d03ae7e9-02ec-48c3-8a78-12125b7a3a71",
        "cursor": {
          "ref": "35c38e49-8dc5-40e2-9428-b571a58f7a11",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "efe15a7c-082a-4143-8c16-f0fd73001f1d"
        },
        "item": {
          "id": "d03ae7e9-02ec-48c3-8a78-12125b7a3a71",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "91719aed-27da-4cba-bdde-bae2e85dcbdb",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "387562a6-37fc-4d3d-9c30-adc76bfe9ce5",
        "cursor": {
          "ref": "4b55f55e-cf0e-49b9-bb22-a3adf90bb4e3",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "11a837d2-9e7d-4026-bfd6-5f8a5f00c03e"
        },
        "item": {
          "id": "387562a6-37fc-4d3d-9c30-adc76bfe9ce5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "77c1e045-49a1-4952-8361-7e5c88a9bbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81699540-a870-48e1-bd51-fc9955f09db4",
        "cursor": {
          "ref": "369c1233-9701-4c8e-a9fd-8df94a65c40f",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "79ac4141-7295-4abd-990b-4d38cf68be29"
        },
        "item": {
          "id": "81699540-a870-48e1-bd51-fc9955f09db4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8e84dd70-3d8e-4967-b96f-6d615cf007e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53aec84-3ecc-421e-a171-58f857376d4d",
        "cursor": {
          "ref": "889ab621-5748-4b20-a5f7-b9e62fd0c253",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d9e3fa58-87f3-4eed-b09f-ef260b77dc2a"
        },
        "item": {
          "id": "b53aec84-3ecc-421e-a171-58f857376d4d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0fc339a5-26cc-4102-acc5-22bf4c27fbf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12fd179-4f89-4472-9aed-d117e068bdd8",
        "cursor": {
          "ref": "3faedb53-136c-49c8-b473-decfd2decc16",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f7152c17-ab6f-4799-aead-0f6a71bf8020"
        },
        "item": {
          "id": "a12fd179-4f89-4472-9aed-d117e068bdd8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c54507be-a687-4a8a-b801-7aae22a31542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab24907-f98d-4e8b-80e6-b49782c18ab7",
        "cursor": {
          "ref": "673b2e23-b168-4b5a-b3b9-9c9cb2782e85",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bec42a61-5558-4861-9d47-7892daa02886"
        },
        "item": {
          "id": "0ab24907-f98d-4e8b-80e6-b49782c18ab7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "581c2577-ef50-473c-804f-6e3c0df8b28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa2a10a-c42c-46f4-8d73-faaf8d2ffd14",
        "cursor": {
          "ref": "988d50d6-8ce2-43cb-ba62-44714b47943a",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "576306e5-1c5b-4fd2-a799-8ec39532b2a3"
        },
        "item": {
          "id": "3aa2a10a-c42c-46f4-8d73-faaf8d2ffd14",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f77165bc-2f8a-4fbf-85ad-7e7c4787ef2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e57b6f-f33b-4f04-acdf-1a81898ee131",
        "cursor": {
          "ref": "d7bd119d-b8c3-4e72-855b-856b2e963022",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1594a54a-2420-47f7-88b8-a1ebc09c2a58"
        },
        "item": {
          "id": "28e57b6f-f33b-4f04-acdf-1a81898ee131",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "51719d6b-3ca9-4f74-a221-2341ed5dd185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba66d7e-2e07-46ad-9684-8cab5c266079",
        "cursor": {
          "ref": "36a0fdad-e36f-4f5f-bf21-036c54308b73",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e65c0ccd-2986-4a1a-b41b-f03ebb92fb08"
        },
        "item": {
          "id": "3ba66d7e-2e07-46ad-9684-8cab5c266079",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c44465a6-1d0e-46f0-a839-75f24ad7064e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f258f2-8cb3-4635-b3aa-c515eabfb24f",
        "cursor": {
          "ref": "67864295-2831-4a5b-a9cc-f92cd7ef4ac8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "10a113b9-57b8-44a9-9d03-fc4219747fd8"
        },
        "item": {
          "id": "39f258f2-8cb3-4635-b3aa-c515eabfb24f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "eb0c2f59-31f8-4cee-8604-9feced9fada1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbc3865-cd4b-47cd-b217-236973cc396d",
        "cursor": {
          "ref": "8907d661-796c-4f39-b9b8-ed49d22dc357",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "15f419de-d529-49fd-981d-d5b6368671da"
        },
        "item": {
          "id": "7bbc3865-cd4b-47cd-b217-236973cc396d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "41a47514-540c-4348-9406-9df2e1c80aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a175a294-f555-460d-9e4a-8b4db5804588",
        "cursor": {
          "ref": "f644cb00-c896-45c9-bf76-de6352612546",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ef40a15b-8b03-4092-92ad-1415fbca73aa"
        },
        "item": {
          "id": "a175a294-f555-460d-9e4a-8b4db5804588",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f71fca83-4d9d-421f-a79f-e91922172ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ecc2cf9-1a87-4697-a136-3a6c2dbc673c",
        "cursor": {
          "ref": "f7915939-5d0d-4f97-9917-6742c33f934a",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a03b68cf-3963-41f8-a75e-fc461f75f808"
        },
        "item": {
          "id": "0ecc2cf9-1a87-4697-a136-3a6c2dbc673c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "094c9ea8-0fd8-498e-a114-3d5795c981dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589f24d9-769b-448f-b5a4-1bc5b50e53c3",
        "cursor": {
          "ref": "5213c8fd-498b-467c-bab4-ca00bdb2ad12",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d8a0c037-de18-45cc-a0f2-8b932d50a3c1"
        },
        "item": {
          "id": "589f24d9-769b-448f-b5a4-1bc5b50e53c3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d171be57-e438-47fa-85ca-ada072794576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31212ff3-683b-44fd-9fa7-6ae92894b93e",
        "cursor": {
          "ref": "f2822021-ebb0-4da1-9357-6860e7e1de68",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "95c162f1-59bb-4784-ae46-d5a0ec4248a1"
        },
        "item": {
          "id": "31212ff3-683b-44fd-9fa7-6ae92894b93e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "be195f8d-1730-45d2-8d67-ec721c99d182",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "15165200-0be6-4b55-b9c2-4c6e9b275a94",
        "cursor": {
          "ref": "832179d5-6c70-45db-8567-b8b16db307db",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "839b57e5-acd5-4c93-86fd-5caf3b2baf61"
        },
        "item": {
          "id": "15165200-0be6-4b55-b9c2-4c6e9b275a94",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0d507cbc-d8b8-4469-9234-7fd9f5831352",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "641e4150-cf38-42fd-855d-51faaea99151",
        "cursor": {
          "ref": "00a009d3-d0d5-4688-a605-a7672ae5f6d1",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "425cba7d-8641-4866-9ff3-7982d19dacd2"
        },
        "item": {
          "id": "641e4150-cf38-42fd-855d-51faaea99151",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2988db41-adc9-4d51-8625-1bd5c923f4ad",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c5843d11-74cd-45b0-ba39-74f081ac03e1",
        "cursor": {
          "ref": "76f93a0f-1c81-49a9-98fb-88b5d275481c",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4e8c9a7a-ba1d-4b13-85c8-95587f3ee5a0"
        },
        "item": {
          "id": "c5843d11-74cd-45b0-ba39-74f081ac03e1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "da41e80d-340a-4921-9e32-4143c8fdf061",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e1cefc98-c1b1-4cf4-8e84-f36d8ce14f6d",
        "cursor": {
          "ref": "bc4d62d3-4a20-495d-b452-58a273691e32",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1fb0b68f-998f-481f-882a-6996ff6aaece"
        },
        "item": {
          "id": "e1cefc98-c1b1-4cf4-8e84-f36d8ce14f6d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "26b8f2b2-62a0-4561-89b4-c28fc7b21786",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b62da60d-6486-4b9f-932d-a17b0282597a",
        "cursor": {
          "ref": "3c17b200-907c-4a73-a425-a020d6be64c3",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "05523d73-0f17-492f-aac0-f2248711e603"
        },
        "item": {
          "id": "b62da60d-6486-4b9f-932d-a17b0282597a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2547d0af-1428-4813-b6e4-eb92a09e8c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63927a18-325d-4a84-be1c-e2c428b0a0dc",
        "cursor": {
          "ref": "0e1258fc-461c-429c-b4fe-2149200beb43",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "08ece53b-9647-4bd0-9ccb-85c7619f71b9"
        },
        "item": {
          "id": "63927a18-325d-4a84-be1c-e2c428b0a0dc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ae34880c-ef7a-4e6f-ba2f-225416a768d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c41bc06-04c5-49fe-b182-c3ce7a36232e",
        "cursor": {
          "ref": "7581e2eb-ba17-4527-81b0-1f83b0d84278",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1a99d72d-e4bd-4eb6-a219-3d67bdd0f497"
        },
        "item": {
          "id": "0c41bc06-04c5-49fe-b182-c3ce7a36232e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "10b184d1-67e4-4aab-83c3-76f50370f78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dad06d-9f5c-458b-a229-b35bdcbd643f",
        "cursor": {
          "ref": "ec3898a6-7823-4513-abd0-dc5a60c647de",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bb6f96e9-e44c-424d-8aca-a34633c89458"
        },
        "item": {
          "id": "a2dad06d-9f5c-458b-a229-b35bdcbd643f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "82ca6f15-4df8-4ab8-abf1-7b02fb89533a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e37c13-e3ff-455a-b5a5-3533bb5fed64",
        "cursor": {
          "ref": "e9fddabd-9eb9-45b7-891d-75a21d640d20",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "921b478d-6479-4954-a90f-a739080c5a66"
        },
        "item": {
          "id": "f5e37c13-e3ff-455a-b5a5-3533bb5fed64",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ad2fe8fa-9eda-4100-83f5-2c307caec537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9b2ecf-1ed9-4eaf-9665-9c0006eca670",
        "cursor": {
          "ref": "6c3bf9a7-94f4-416a-8b21-cc90e6528de1",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e1f68e15-13c5-476e-9f7f-c699b5efeb99"
        },
        "item": {
          "id": "be9b2ecf-1ed9-4eaf-9665-9c0006eca670",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4949f3df-fabf-4017-936e-e789f2d7f541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbb4bdc-0872-459f-806f-49d6573dd937",
        "cursor": {
          "ref": "24c1d1fe-bd4d-4a7b-9fc0-414501db77a2",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "dad991e1-0d22-43ed-a64a-d6ae8a50c6f7"
        },
        "item": {
          "id": "5dbb4bdc-0872-459f-806f-49d6573dd937",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e2c3bfa8-d73f-4939-9e1d-277e472e4c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319718a6-01cd-4e29-a968-2fa990403a33",
        "cursor": {
          "ref": "04ffcb40-5146-4710-95fd-99b1cc00796d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a9b6593b-8593-47e8-af57-7dde144846c1"
        },
        "item": {
          "id": "319718a6-01cd-4e29-a968-2fa990403a33",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "71a4798e-f3a7-440e-8aab-4d862923657f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ecb702-60db-482c-8a82-513c2d818d20",
        "cursor": {
          "ref": "e5fdd90c-6c86-4fad-9fe6-5f028e65587d",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0cbcea30-19ac-4501-b48a-c036e57cd6e4"
        },
        "item": {
          "id": "83ecb702-60db-482c-8a82-513c2d818d20",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2a758e81-83ee-4588-925b-137da53e3cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01baf3ba-182c-4a1e-98b9-bc58eccdb52b",
        "cursor": {
          "ref": "701d7c84-310c-46fb-80eb-b9d2d7bce9ef",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dfb9a562-738c-418e-84f1-d1fd5334ab5a"
        },
        "item": {
          "id": "01baf3ba-182c-4a1e-98b9-bc58eccdb52b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9ad1d77f-e148-4392-af1d-44d414bac9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b213b11f-f24c-4074-89c7-9bcf90a7b2a3",
        "cursor": {
          "ref": "392f64cd-c948-44bd-ba71-689eee4b23be",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b434d551-d167-4fed-b035-d6f7227d5dce"
        },
        "item": {
          "id": "b213b11f-f24c-4074-89c7-9bcf90a7b2a3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4355bd82-e4d2-456f-ab67-2fee78d891da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f11b10-3d8a-42fc-8a0d-f57ed5c898f8",
        "cursor": {
          "ref": "602f6365-3bc2-455b-9102-e758b2a1a5e8",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4f521cdf-71a9-46f0-991b-7e7e2dc74417"
        },
        "item": {
          "id": "98f11b10-3d8a-42fc-8a0d-f57ed5c898f8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b082ba49-8a0c-48cb-8337-e36a25d73a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c24c55-8717-47ca-b6d9-2b82d3acaa60",
        "cursor": {
          "ref": "b2134d4b-a795-40fa-9ebd-3829025f4366",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "af0698f2-cc79-4c11-841a-60c20553fdde"
        },
        "item": {
          "id": "87c24c55-8717-47ca-b6d9-2b82d3acaa60",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f5756bcf-974b-4bb8-b8d5-83e3ddf29f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef60ee1-a4b2-458d-9f89-0f523ab38d48",
        "cursor": {
          "ref": "58debee3-9fce-407f-bf7d-154606fb796a",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0c8ce73f-dd84-47f0-8f21-872558f155bd"
        },
        "item": {
          "id": "cef60ee1-a4b2-458d-9f89-0f523ab38d48",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "85ed893b-0d04-4a68-9e38-0ce117c7cf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4091cfb8-b98e-4a96-b021-83c73a3b0890",
        "cursor": {
          "ref": "9dd0b31f-6a25-4c38-bd7f-0dbe87eca1b8",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "8dadc46c-2f8b-4363-887f-7e8e619d567a"
        },
        "item": {
          "id": "4091cfb8-b98e-4a96-b021-83c73a3b0890",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4a5182a7-db33-436c-9e46-97f251db8247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2dbc4f-040a-4f36-9696-69171dc5955f",
        "cursor": {
          "ref": "6e2b24cc-302b-4039-9530-276a3964953a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8aab0f43-3633-42d9-896a-01620fddc75d"
        },
        "item": {
          "id": "1b2dbc4f-040a-4f36-9696-69171dc5955f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a81eb155-a82d-41ea-a30d-a14d75161034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e416ceb-02b2-47dd-8f74-14178ae59322",
        "cursor": {
          "ref": "cf36bfe5-12e9-49ff-b268-91519b86055d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4a6a0617-d7dc-4a2e-96f6-310d68beddf7"
        },
        "item": {
          "id": "9e416ceb-02b2-47dd-8f74-14178ae59322",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "839d3d86-a9b3-41e7-a0df-2ab07618fb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2b4f06-22c7-4a93-aebf-7910e8803cad",
        "cursor": {
          "ref": "75fd8484-9f88-4a0f-9a09-208e1e88c934",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c2b6fe24-b05e-42f1-a48a-a7347f1032ff"
        },
        "item": {
          "id": "fa2b4f06-22c7-4a93-aebf-7910e8803cad",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "35b07b3f-8b55-40e3-ad26-6a1b48a50166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2de16e-5309-4970-a069-1cabfc7c3747",
        "cursor": {
          "ref": "2ccdca60-b14e-4c3d-9589-eee8b33f5150",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "37ff5de7-1003-44ea-b76b-54cce7c8fa21"
        },
        "item": {
          "id": "be2de16e-5309-4970-a069-1cabfc7c3747",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4376f807-d584-42e6-a7c9-93cd0b7cf5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ec6ce1-1392-43ac-a204-cf269fe1097d",
        "cursor": {
          "ref": "c8cf276d-12a8-4e01-8ae7-820b14d4624d",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e1a13272-6057-436b-af5d-580533d2194a"
        },
        "item": {
          "id": "61ec6ce1-1392-43ac-a204-cf269fe1097d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "eaeec7b0-0d3e-4f47-b9f9-fb39aac75a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01008b73-5a55-46b4-98f0-96eb8a885763",
        "cursor": {
          "ref": "3850d783-defd-4c33-bf5a-7fd3703936ca",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4a39d67b-b749-46b4-ba16-93f25e9a3e6b"
        },
        "item": {
          "id": "01008b73-5a55-46b4-98f0-96eb8a885763",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "da679b6f-37a4-4b52-a1c2-bb8a673cf2bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4b6969-b83e-45f9-8fc4-4ce91847ce14",
        "cursor": {
          "ref": "df9dad40-7e20-4716-867e-aae2839f62db",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "eb465d05-14cb-441e-8a21-ffb6ba645738"
        },
        "item": {
          "id": "0a4b6969-b83e-45f9-8fc4-4ce91847ce14",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "044b88ff-6f38-4a31-936e-ad1f2a0a1a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bed7fae-9db5-40c9-89d1-28f88b9e8427",
        "cursor": {
          "ref": "e00ad046-c8ef-4ba9-b239-3e4e0e6366c5",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c638aee1-9514-4e3e-b485-893a2e075fea"
        },
        "item": {
          "id": "0bed7fae-9db5-40c9-89d1-28f88b9e8427",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7dd32dc5-2aab-4887-9fc9-de20b1828b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed83d284-77a7-41fe-bcac-7ed722a98dee",
        "cursor": {
          "ref": "0872c06b-2780-4dad-bf59-e964308ed0c4",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9e8dea15-1ce1-4b54-b45c-7636fe938b82"
        },
        "item": {
          "id": "ed83d284-77a7-41fe-bcac-7ed722a98dee",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "57d94c9a-914f-4f53-b37c-01eeab239dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10b248c-74b8-4879-a889-a9d80a599f67",
        "cursor": {
          "ref": "c8f59e0f-f3a8-4a67-8478-f41b19e07ee4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "69f08d21-8ba1-4563-9337-e516f7fad721"
        },
        "item": {
          "id": "d10b248c-74b8-4879-a889-a9d80a599f67",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1dc82737-695d-43c2-be65-bf76bd7bfb48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605a99ef-fa74-4597-b2b6-62055861bed1",
        "cursor": {
          "ref": "28318f92-4bf0-4e9a-8070-2d9325fda36b",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a5558feb-121d-4eb7-9618-551607c48793"
        },
        "item": {
          "id": "605a99ef-fa74-4597-b2b6-62055861bed1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "90babb55-b1da-4fe4-b82e-d92a0dc5fae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3751e0-2166-419c-95a6-c5b15ea4b32a",
        "cursor": {
          "ref": "56b5d5b3-01a9-4df9-9260-5e8101535dba",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "8d05c3b7-a474-4c0f-a97f-b2c3182a8547"
        },
        "item": {
          "id": "0e3751e0-2166-419c-95a6-c5b15ea4b32a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8bdec52f-4443-42bb-b21f-d01efbc09803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b197c7c-83ab-4250-b9bf-70bd78e14d6c",
        "cursor": {
          "ref": "6ecae2fa-863c-47d1-81e1-93fa22da4eac",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d153de46-c99e-4d0a-bd25-6f9d71afa3dc"
        },
        "item": {
          "id": "3b197c7c-83ab-4250-b9bf-70bd78e14d6c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ac6912e9-e2a9-47b4-be65-4652b9413771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4d3a43-0f42-424e-be4a-c1499185b677",
        "cursor": {
          "ref": "29f7cfe0-82ad-4960-ac03-9fefd21a1813",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "823edf07-37c7-49b0-b22a-d9b993eb3186"
        },
        "item": {
          "id": "2c4d3a43-0f42-424e-be4a-c1499185b677",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "249ced63-3680-40c0-be12-27bb25d4af87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef7395f-bbbb-442a-8be4-9bb9d6903748",
        "cursor": {
          "ref": "ee3a0859-1241-4152-857b-dfdc83d1ddc0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "94d2c472-67d2-4353-8bc6-c7f846aa7e69"
        },
        "item": {
          "id": "eef7395f-bbbb-442a-8be4-9bb9d6903748",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fe50e349-7ae7-45d6-838b-506da313d901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660e1e1b-7627-41cf-8766-4fa88b16e1f6",
        "cursor": {
          "ref": "d4e0eb89-9699-4bea-aacf-9733a9094396",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7640287b-58c2-4ed1-9863-85f00e316dee"
        },
        "item": {
          "id": "660e1e1b-7627-41cf-8766-4fa88b16e1f6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2dabfff0-785b-46e6-90c7-3974ab71f960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9f80b9-281d-464a-8f04-2d65e7f3db48",
        "cursor": {
          "ref": "6ce7a865-03bb-4219-be7f-ae199c6128b1",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ab3320b5-9cd8-462c-9b28-fbc32b691011"
        },
        "item": {
          "id": "fc9f80b9-281d-464a-8f04-2d65e7f3db48",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6ca8a1c0-fd27-4d6e-8119-9a6f05e9d075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1bf24e-1b99-423a-a53e-79fc0dcd2e38",
        "cursor": {
          "ref": "79b4260f-95e7-48b9-bf87-3e52ccad65c5",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f2dd7b8e-9685-4ac8-bf40-2d5992866797"
        },
        "item": {
          "id": "ce1bf24e-1b99-423a-a53e-79fc0dcd2e38",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2cbb0be1-3a48-41ad-b49d-e6b1a0d3c5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f96ba67-d885-47df-a016-bf43f036f500",
        "cursor": {
          "ref": "dc9d7325-07c3-4a86-983d-f57d8b3ad0c3",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0a41f6da-a105-4e39-bd3b-7aa72556b028"
        },
        "item": {
          "id": "6f96ba67-d885-47df-a016-bf43f036f500",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9c7c7bb9-444a-4da9-9253-007c5d7a2ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81cdea6-bda6-43a4-8933-44a52a40e98c",
        "cursor": {
          "ref": "d0dbc503-6cea-4a18-be72-e4b02572e5da",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7fbb4b66-262b-4abe-b605-2984c58bcf4a"
        },
        "item": {
          "id": "a81cdea6-bda6-43a4-8933-44a52a40e98c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c4addd55-2309-4f61-9422-f1b0a815497a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63469777-30c1-4156-8036-2fb99a501343",
        "cursor": {
          "ref": "17bc0812-65c9-4086-8b61-df4f2ab1fe61",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7b1f4264-ad86-4aae-a69c-abceb04f7690"
        },
        "item": {
          "id": "63469777-30c1-4156-8036-2fb99a501343",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f15da80c-d5ea-454e-95a1-6e207831a056",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "529f0de3-f8aa-459a-902b-369059d52b1f",
        "cursor": {
          "ref": "4fdbe110-6440-44ea-8d31-18ae30b1a3dc",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "95b72646-0bce-484e-b635-3082e1327968"
        },
        "item": {
          "id": "529f0de3-f8aa-459a-902b-369059d52b1f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1373a414-7106-4484-b163-080479579a0a",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef324af6-e69e-4a63-9338-dab82fb5fa35",
        "cursor": {
          "ref": "c28dedd9-c0ee-4282-ab25-cc5ae269fbb8",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9fb8e33b-347c-412d-ac07-e3f288e5622e"
        },
        "item": {
          "id": "ef324af6-e69e-4a63-9338-dab82fb5fa35",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7b0c2180-1e69-4b18-8994-c6697ee88f31",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bda75b-2017-4a88-916d-96cbb60876bf",
        "cursor": {
          "ref": "d1ab04c7-f2c0-44a0-8edd-0a14fb329dca",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ebaea28a-d0ea-4dc3-b9a8-214c48a50444"
        },
        "item": {
          "id": "89bda75b-2017-4a88-916d-96cbb60876bf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d03a0663-e1a6-4170-b117-22ad868546a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bda75b-2017-4a88-916d-96cbb60876bf",
        "cursor": {
          "ref": "d1ab04c7-f2c0-44a0-8edd-0a14fb329dca",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ebaea28a-d0ea-4dc3-b9a8-214c48a50444"
        },
        "item": {
          "id": "89bda75b-2017-4a88-916d-96cbb60876bf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d03a0663-e1a6-4170-b117-22ad868546a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9178d483-5261-4929-8f68-034d6dce6e96",
        "cursor": {
          "ref": "4483f6af-6ae5-438f-8e59-8b0ed98c58f1",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "39dee787-a8af-467b-ae8c-1b88d8a97650"
        },
        "item": {
          "id": "9178d483-5261-4929-8f68-034d6dce6e96",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c30d229-e6bb-46e3-a9e8-a482dda2de40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad18be8-bcc1-475e-b146-2953e4e410ed",
        "cursor": {
          "ref": "0817012a-7468-4b3e-8d52-4e86c80ab75a",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "98a2e694-a82f-4d77-8118-cfbba8ac521f"
        },
        "item": {
          "id": "bad18be8-bcc1-475e-b146-2953e4e410ed",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "352bd19c-338d-4d93-b97c-f03c2bd91c27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}