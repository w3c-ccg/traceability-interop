{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9dd680ef-84bf-4e78-8c14-ca4966cb6cee",
        "name": "Clear Cache",
        "item": [
          {
            "id": "38451dbc-a998-4885-9728-b1663814e0c8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "332d6296-fcc6-4268-bd53-6e36f904fc92",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "31f0a705-ec33-46a3-a7e2-685d9346b1eb"
                }
              }
            ]
          },
          {
            "id": "e448b083-ffe7-4893-a1f7-ffb9b2cb1a8e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d539e4b-05ae-4461-b0e1-79c99e3b58a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4feaea58-ae5f-4b45-9d10-a7232cbaafb5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dc54cb76-cbf8-41b3-9024-87e2eef74873",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4ffddd2d-a4d8-4a77-b067-a630abaac122",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a107b7e3-5b7a-4a61-b22a-b345024e8eea",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8f26a2d-3e7f-4527-a62d-c9311375ddce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "021a3634-c1f0-4956-a24d-1f5a34053779"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ed3486ea-f122-4e63-8db7-f4e35e83b880",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92b23e98-730b-4e7f-884b-6012ab94aa0e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "35b7d2ad-a15b-42c9-8d6c-4a7e54aa5118",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3b0a1b6d-4308-4572-97ea-d08d2393ba9b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0ce98b8-be92-4382-8b9e-41f9b77df559",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "877a6ac8-1ed6-417e-a11f-b0ba03bcd067"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "335b9170-52a0-4cfe-82ee-e8b4148d1dee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc21e3bd-cc93-493d-b366-264554c536fd"
            }
          }
        ]
      },
      {
        "id": "32841b4c-9bcb-4a16-8a68-8b0587d82aeb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "72cf3e6c-7590-45f3-b6f2-dd7de71c474c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5edf1dd-be3b-4441-971f-ea62301a633b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3c97129-721f-4d96-acf2-9ffde97a5f16",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4226978-6c33-459b-a4d9-554b6552f365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7869ccca-37c7-4e4e-b590-32346f1c9688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0e2187-88b6-44f6-9dd4-1e0a369fc7da",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acf189b-220b-4312-b522-0521ac039064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aba82ac0-5054-4266-996b-ec4323331b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3edd66-ec2a-4064-9e50-40f4534343f8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d556745-77b0-4580-acbc-01b5393d9435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e82bfd3-6099-462c-ae8b-a113415ef75d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "189d363e-043a-4bd6-8afe-a31c6baa0ad5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47ad5542-fcbd-4739-ab8e-6823df1a7a36",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3830a2-3b07-4d06-8e55-f939c4971a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4868a240-e425-45cd-baa8-432030939f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bf5508-24f6-4055-8eac-332cee8bcf6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e40db6-b9d5-4b2b-827b-5325ae1a523c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6b4ba615-adfa-495c-abcb-2154b1afba71",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e844b26-82e1-4f85-9d29-087a3f090a52",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0503221b-2b64-4594-9b6f-b7bafa64485e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6f95fcfd-6670-4d06-9e18-a956c97e1c80"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e1a4d61-9086-44c8-931f-1398904e8020",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5a1ffeda-c369-4d1d-98d0-4f70cb3acae6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5552c55e-c4cb-4154-8c5b-c99ad39217e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b45431a-5910-425d-a8c8-7d0ae01cf075"
            }
          }
        ]
      },
      {
        "id": "7caeade0-171e-4b05-af77-b582fd41ac2b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "faba30b8-92ee-4472-a7e1-021a9ec16569",
            "name": "Negative Testing",
            "item": [
              {
                "id": "533e8ae2-6da2-414b-8ddf-f1b5f7483463",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a28c3df0-5f62-42b2-b43d-12ef3a982abd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331f3cd6-d70c-4466-9b33-199124c79c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6e3c4c-e780-4c2e-a168-4ba5fc5b6493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193f19c5-52c1-41ee-96bc-1d250532d7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c92db7c-0521-4935-89c5-6451108590c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50ea5fe-560c-44e4-9573-ac0002cd8b58",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "357b8122-f5b1-4699-b3f0-553783b7e70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96931ca-77ce-424e-84f3-6d502d416dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d1a9b7-3a0c-4b94-8973-0cef96395503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b663d0f0-afe7-4bd3-89f6-2b5de655a9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63f38ef-f34c-4155-8a85-8bfa2f722710",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730694ad-4fc3-4a25-ba26-4f07e8a0c6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a13790-99b4-4e6a-a2bc-d0b1d83a4043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0dcc9b4-f12d-427f-b681-fa8ae2cc0bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4a46d26-ac2d-4b72-8735-bd98c7dfb990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18583419-bc94-477d-b73c-0fecde708d58",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198eb0d3-ef06-4a5f-abc1-e85494e06cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3273d13-7607-4e13-9fb6-d3fd23d9ecf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8d2f06-b679-42e3-af46-69bb0fb3725d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35c9fadf-fe0d-4dba-92f8-9543b69a8e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f337d2-1ebe-45d0-b7dc-a2e9b10754bf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a12f6d-07ea-4089-a3a6-789fdf5c3867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73304a5d-e50b-4009-aedb-be503840e02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676b776f-a2cb-419c-87cd-6f6c908ee93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd1ad44e-d290-4607-af4f-3d942eaacda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d8e774-349a-4907-bc84-6e1356a9fa35",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee44a34-65f0-4a9d-bb31-1eb6df7adb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7453bacb-ac42-45d8-b156-e81145aec050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8be4b0-ef87-4342-9438-79205e94ea5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4de7140-34a4-491b-97ec-33538aa9ef30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa53106a-df94-48fd-9380-0db3e972c747",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb8fd70-39b3-4206-8f65-d8eb2f5913a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63f9440-6446-4581-a58b-f8e0ef96346a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbddae4-efa5-4a6b-b40c-98ac2782a6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "241caf77-b912-41fc-a52d-6d721ec18cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb47d7c-0bc6-4a16-ad53-fd209bac06f7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ead267-c451-457d-a84c-c0c4b68997be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f37031-6efa-4cbd-a3d1-2d7d6b808f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3a2c9e-e2a4-48c1-be3d-c4a8f3bce48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "910bf6b7-8cd1-4af3-b20a-4bb6de0158dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67dc320e-7220-47df-97ef-962f63f900ec",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8645e983-3050-41d3-a66b-5358bc0a0e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d0d4677-83f2-479e-9ddb-6a15307b4854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795cf18d-58ef-46a0-8bf4-1fa9b8300422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d51417af-34f8-48ec-b103-31a1ad9a75c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83d56a1-07fa-4df9-adb4-c62e6ef3daf6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30712246-ef74-4c95-97d5-a120922d5641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1cf5ccd-0396-4285-9777-7599bc12bc7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f96cb12-7dcf-4afc-9ad1-5b9363b0d4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b781b648-d784-4808-aa8c-b6ec88e39af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7041bd-0f49-47d6-bb60-39038a76d757",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c783978b-7fc7-419d-86f6-c4d561b17ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84091e52-d0e2-4ce6-871e-6aaacfce791a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5d71c1-c948-4617-9ed1-42469d406ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0cf3821-dca0-4fd5-ace7-22b8247944c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c688de-d875-4096-9692-b93c85387ad8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53b0596-b933-4fa6-adca-2d405ae7296a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02f08ca-86e7-45c3-97db-0fcebfaf71f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e185938-7538-4769-ae49-99908d9b71d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3815bf7-b942-4bf0-82c2-b0f263e01876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8626801f-1bf9-48bf-826f-04198b7ad581",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda2272a-9f8b-4ab3-8d5e-218013d06015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4384f0ca-6f93-4b90-a742-1a815367871e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c9fba5-7679-4836-b7dd-13c59eeaf94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f11fb9d-6067-424d-a692-be2211eddc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41755155-4ae7-4c47-8593-60b7adb6c30d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0643f34-c8b7-4b7b-a246-81afd768c7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6adbe79-b3d7-443f-860a-85d2a1e83d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32e44a9-1642-4487-becc-5a7a2a0b369e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4052f9c3-a689-4568-8d56-d9fea72d0218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876ca960-99c6-4579-bfd1-85725b4e793d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71ba115-e989-4abb-8918-dae4388c42c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737a5050-7407-4f77-af34-7df1accf368e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6782bb-ca07-4f69-b63f-58adacc58ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b1cbf10-6bd4-43dd-a8f2-d546b096af8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d3cc66-cae8-4ee2-af2d-be02ae61b28e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f78231-2d92-4a89-983f-f60760e93ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc9e89f-f7a1-4614-81db-f32ba677a203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946ea692-84a4-45bf-9b45-b460b0c47a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4adde429-4124-4c9e-b0ea-537abb6d417e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9feb3735-7556-4f88-983c-7edc0e2d3ff9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ab5596-d410-4932-bfc3-efe24c631c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055ca1a0-4fdd-4c54-9dbd-e9990a052c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3915feef-77b2-45f2-a530-04d0a7012905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b2d1559-a00c-4bd4-aedd-fb5648fa27cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ddc32e-9f44-40d6-82ec-13ce709b6a0c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1fef3f-a89b-41af-b9be-098ed5b5a024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0341103f-6ecd-4e50-a79e-f3b0670ad04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64394288-146a-4f2a-831b-3739440264b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "36dc0a52-f329-49f9-b64c-d0f5e7f61a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ed71fb-93ef-4048-b65f-bf4b4ecd5ab1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7d708f-7729-4955-80ab-49fd8b0e58a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d95dad-eec6-4be4-aa1f-bf137bf76f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5249b8e-e8e2-4888-ad7e-5c1b025ca72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a58e607d-bd65-4778-8f91-8de80fbae4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c33f925-ef97-49d7-b0c4-9bbe4e7a04bb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af5ad1b-fb0d-4fc0-8af2-38e951c29c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ea05f7-3614-43f8-9b47-6d1f82d11449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9da8ed-7d21-4f4a-80dc-9d5aabda6290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94e16511-9bed-4cde-bfc3-c69796406307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09440cdc-9343-4dae-bedc-94017a2d0cf2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525588fb-21c1-4330-892e-285f34c0fe74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0e6972-118f-4bd9-b817-ae96fa2a40dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0a6033-56eb-408f-9972-15826e7f5102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc43559-836d-425e-8e49-0f1a145c2d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664804d8-3486-46d1-a737-59b28a43252d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b57f704-074c-474d-9258-0cba72041d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054f378d-cc2d-484a-a63e-aa1212e82dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591beed8-dde8-48f6-833b-2b79e9df3750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "10faa128-27c9-4f46-8b16-e17a354dfa56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893cab37-72f3-4735-b05d-b6545a89b333",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b67dc8-d074-46c9-8ef2-d41014cc1a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0d1066-87c6-49d6-bd63-398ea5344602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21571e8d-a28b-471d-98a4-cc90e3720ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a518237b-f0d8-4f85-803f-169654a265c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c569df-d451-4aa7-b588-cb1a94c8ee9c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c299704-080e-4cec-ab04-7a46ad75412f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a58de20-31a8-401e-9186-40704ea3eaef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29153004-904a-419a-82a5-79cdf4a53bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "01d3592c-c3a2-41b2-a922-8b3ba8cb56ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bfeabb0-d598-4b1b-a20f-11d4959493ca",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10ed81e-eb0e-40b0-8090-4387088a5c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a437060-b3fb-494e-a167-6581263c557f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c48037-8a12-4e70-b3e8-88004768e1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3324489d-7915-414a-bee5-5283b6812a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1b6c04-57f4-4082-a0a3-d21813513eb3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793923ab-1a4e-471c-8fc2-ae336dc40e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8cf992-c9c5-4297-80a6-565fa69fbee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7490a59-b674-4662-a716-f82b8f262c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c701d7-e9db-4d6b-9b93-d03aa1f2479e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6d9078-77aa-4904-af73-6d0867af7f86",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171eead1-6769-49fc-a190-d70bdb509840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619aae8a-c41f-477f-8d2b-6b9fe32244c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9bd49c-914c-49f7-ae52-2bc20650804b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e855ede8-d56d-456c-9744-f8d1b053952f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b66b778-5af4-4dfc-ada5-1140465efa61",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b27f69-8189-40ff-8ac3-c06406fb1191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8228012-a024-4a89-b5d1-32635a0a80fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29d2ec7-0239-484c-be57-03a2b452097f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a12d56ff-aa18-4f09-aae3-25a90968746f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae2f542-2839-461a-a927-a8f70d101a54",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26db46d8-d85a-4380-98ca-6b4769761f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec91606-b9b9-43a7-8a34-3731dbc2643b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b212cece-4ae6-4c43-8fb8-d4bcdd2b35b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "028fddea-52f1-40a2-bc54-c7b363d64d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643497bf-e408-4cd3-af98-6d0cefbea1ec",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc51a841-e67f-408c-8317-7bf59d05dad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b8c05e-1fdd-4cda-bf93-d3b7a149d95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972d4a1b-7e5c-4ced-8768-768d8af95561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c97f1e70-435e-4f5d-922a-5e5219bd1030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016f6553-fee8-4996-834b-f5204a84988b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1843523e-e63b-4348-8b8e-f07671216353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d38a3e-0833-4fb0-813e-e0f9a1f062ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf238c5-ef21-4bc8-8251-da5750ba639a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e39dadf9-663d-450e-9e41-a586f4fc49fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46905a11-c4a5-4fa3-a315-7e47410f7ab3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362b5309-8ce2-492d-851a-094fa06e6212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b00c6c7-dcf9-4cb6-ac91-44a7d3c186e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2a5461-87f2-4d0f-be0c-1ac0d74bd5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9828c915-db1b-4ea0-9bf9-6575cd84ccd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e58c9f-6102-4953-a078-0d445e485850",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83522a3-49a3-43d4-a7e7-7268cccfabfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e53b93-90e6-4943-a923-3cffbc5f0ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a0b8e3-dde8-4b28-8239-e3a5f01942bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44cd8f57-99c9-463e-bab4-fd3c0e81cf9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3555ac-3e6a-46f1-818b-d0b96991f852",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cbcce2-0820-41c6-9919-278dc5605d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b81523c-1163-4100-890e-7a1b22c07139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae9976f-a0f1-4f3b-a4cd-310a64578bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5a88e4-e7af-48c6-9a55-a2204dc1d189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f09b78-710d-4eef-a76e-65081d8ea60b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450f7640-18fa-4f8d-b816-1f47d873a91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcf0cae-6512-403e-abdd-4db8c829ae2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff42acfd-9417-4678-bc41-c86a86d46576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ed80b647-41d8-47fb-9d49-93de53eb9303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96501c1a-f546-418f-87fc-1731ef7f8af5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d53c283-f9a9-4b63-b38a-c51dfb26f2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c6b448a-5161-4efe-917f-3c47b139ebbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce79e243-3636-44b0-9968-d78452a868f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "671a8d65-9877-42c1-b050-d727eda5433f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b86f33-676a-4ddf-9b9b-224b65751173",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15848c5-09f1-4c88-8bed-9465df635e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8686d3a7-8a16-47e3-9392-cab67261abc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d126e8-cf78-423b-afd1-dbdb8b70e0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27f663c7-5c7c-47c7-8f69-e1c7b13dacd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f157b805-f7dd-456e-b9e8-2a8c137b99d3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e876cda1-4853-4a4f-b129-d49f0ba67c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3281c093-2984-4924-89b7-0f88c03e27e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7867bf-e5df-46e4-963f-61fcf51378b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e4a8ef-d7fc-4c99-bc76-327913bfa854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a7c68c-de43-4067-b933-f46159f3821a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9575db1-28d1-4acc-8de8-d742f50774b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3df73c8-7dc8-4ba9-b618-02a33e21df4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f69f1c-d376-489e-950f-159c48c7b76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fdb6e11-15bf-45e0-a535-7a5a12d21042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13fbfbb-ea01-42f7-9656-cce441545c73",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbb1b59-54ca-46b6-b766-d1f441140644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0682cd40-5295-4f43-a87a-60f453582af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8e867a-0a1f-481a-9211-21a0ca070971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c59c0da-f114-493e-b048-61e1780705fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491edbb1-1d18-4ff9-956e-884fdae92cfe",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8707ef3-ae33-4529-a1ee-878a9665ecd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584b3c6a-c57f-4a42-8697-7223e0d19853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6bc494-653e-4729-94fa-a0cca5700bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd70448-8915-446b-991f-e003180b12a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7956ae-0ad3-4f0c-b20d-12d9e09be4ce",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167ab91c-161b-4341-a3ef-02bdb5844a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc832394-03d2-4ff8-8794-9a6cddc93d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf45e23-70a2-4ca1-aabd-90497b858caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f209897f-1d51-4af4-9a57-f53433220246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82392bcf-78cd-4b46-8951-d96efbb71c09",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e63470-ab53-48e8-b173-3149f257be68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b627c8b-2428-4d36-b8c4-4cf6f58531c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155a2e51-0928-4559-a43c-bc86cc94c26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "685410f4-ee1c-4122-9fb5-0b1634bb1b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d77771a-0761-438b-862f-af647d2db89e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57694b33-7f34-4b71-844b-3dfe3e19fd97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4a9ec4-ca12-480e-b4a3-c5e3346eccae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793ddd0a-1b22-4515-94ee-880e9c60a513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d986e75c-bf3f-4385-b9fb-5530c9172d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ea333f-08f7-4b0c-8ba0-21023179ec5d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834b320a-7ea7-4d98-bfca-c64de3f4cec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450539e1-a463-4345-a63b-c05adbfd1cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751a6ccd-5201-4b5f-bc1c-001558a19500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0978eaa4-40b6-49f9-90b4-bc0af54122ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a556191-433a-4eee-8904-7a9850460062",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280da31f-3109-411b-8fa1-1d7c5a80e2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e52d779-9861-4a24-b5b8-0dae3aae8c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfbf8b3-cb22-480c-92b8-1e7df13c0364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b387b605-a8f8-4ed4-a966-302e34a5969d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41119311-4642-4093-987e-c41876503098",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c921359-fd4a-47a7-886e-4f7a10e31e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44203aea-6892-4a21-b10c-d59dde340e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3fbaae-5b3f-4095-bb4c-2d09c640753c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "95fb7519-8912-473b-92e3-c87102abc98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c33de0-72c5-47c0-9755-9b4bf4efab65",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7afaf44-13f3-4ac2-a4a7-085ce6eb5a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb39aab-50c5-4e19-96f7-0b2726adea6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce71c656-87d7-4e7f-9bc2-c7bb54cd358b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d9820f-0c12-4e49-83ab-a7dde57486cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ede65db-3015-467a-93e1-b0aaa004088d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccb7111-59e0-4d3f-a093-82f014c631b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ea4d91-4908-46df-8e7b-85243857e78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592b30f8-67da-4f47-9049-5929d9d28565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7acd6f6a-0a3a-4d33-8149-a6edb16e6218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d84901-a7f9-4775-874a-ce6779555b03",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df08fe0-ffae-42ce-820b-80413784944b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a377e0c-ac6f-434a-87e4-5d27e17f84e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a914f285-0cce-40f8-9e44-72bae89b499e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3de218-b5c3-4bbd-8cb7-d8ba13e97a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1242f27d-8125-4c59-b782-8556499e664b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13382df-31eb-4aa8-831e-5038c850e8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ed40be-d47a-46fb-81b6-3d4b25dce325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b71e99-7276-4500-b0f1-c77b60994c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b053f923-3a42-4548-add2-13780c54cbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab2e530-b222-4765-85a7-be9bca4abb2b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c0f2c8-4aa1-4cbd-9df2-d24c357f2d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575c0f37-3ee5-409e-9ddd-584500022621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0711876a-908c-459b-9e97-efd372e8cacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "573cf7dd-72cf-4e51-9547-ba9dfbbc838a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e431710e-a12d-4fde-9463-7ee2a487addc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9e7868-3f9e-426f-a8b8-25f67080158d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0369ef9b-cc3f-4e41-ae78-64eb3e98f99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b865d0ef-f297-4a7b-b23c-14f2462eb5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca874ef1-3d0b-4836-861f-8c7e1e9163ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fbad82-1e89-4851-911f-541a2643f92b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d3f036-a95e-4119-b7a3-d9021fdb9fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf89fb2-71a9-4b3d-9a81-ae9ef241774b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffc000d-3a50-4341-8dd0-aba1e695efef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ab2e05-2585-403b-bb00-b04a670d8d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e419cff-7154-44d6-8b4a-6d3b6f1b44a6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d293a36-8ecb-4446-9ab3-629b41c416b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e133e7a1-715c-44a7-ac7f-77321440efa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0b782c-4d64-46bb-815b-6ef4f0e37278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e400b9c-0453-4a03-9d27-3f0abb1091a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536453fa-ec6a-4922-8add-66272ca7688a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc836f50-e092-4b74-900c-b7a29f289bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e511df-398c-4bb7-8aac-7138e3bc059f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b18513-6724-4c50-9acb-f43719fb4663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9b8562-5bb5-4f53-bec0-ae060021e17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78309ee9-0a55-42d7-9ce2-790199689925",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a604a08-576a-4883-8a72-cce6f4524eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7d3657-de83-49e0-a376-309be7c86444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969e05e2-ce5b-4538-a232-8df066e20aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf5bf5e-b836-4d43-83c1-7eb980c4eff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30a75bc-b6bb-434e-8432-c3dc3fa6364e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6d8760-7aff-44ff-978f-bc5f99993f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abbad365-04ba-4ca1-9e3c-35597ff5f296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc8df6d-a804-4681-9afc-c4b933a3dfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "32621d98-f2a2-4e51-b3a7-f9cf1b30d9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642aac8f-daed-40d6-952c-819b0806d68f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa829306-73de-4774-80e4-dc9865ff73e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7365b159-ae9a-4a13-86a7-88beb532cbd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138a2290-505c-41a4-885e-5bce7f811703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "47259f9c-b78d-410c-8c37-98e514816446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be1ff32-51a4-4b70-ba6f-2daf17f91bc1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0a67a3-4339-416a-8513-b2a4ea7613cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eab9aa0-c6d0-413d-b10e-486280eb0b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc60776-ce45-4db5-9bab-6f365803b125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb038442-64c0-458f-be8d-91903100719a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea9aaf5-275a-4802-94ae-51bc9ffc7be4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6cbb35-c059-4fe6-8dfc-10fc5c4585a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713df25f-5fa5-40a8-b8ef-58dfe33bdba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368b30c5-2afe-416f-97d1-ff13ac0e3c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "049f3573-cb2a-4ccc-be68-7a927f37b595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da12c770-bb9e-42ba-9a17-36fdbfc4cd10",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272223c5-2642-4155-8087-bbf4d5f10375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f1885a-6608-481b-97d7-059e90467c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99e5760-9462-4d73-8c7f-327f4e8486e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "248a2698-84f6-4a6e-ac47-c18439fb8af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d440d1ef-be6e-48be-90ca-30dcdcc83ea7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2576eea-508d-4717-a016-80d289a40015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7bcf8b9-8cef-4b35-98f7-9a00445856d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2124a2-03db-4336-88f6-0b7e49ece2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "98d15641-f480-4139-bba6-3d573eb68574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73814d66-18b9-4e63-b9da-179777413b85",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf052a2-2eef-4f93-bcbe-bd0f7efa54b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028c22f2-8bee-4516-a92d-68b94b1a2b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1d00b7-e6c6-40f0-99d8-cdc5c4276548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df4a1b4f-dc40-40e8-a4a3-123754d9bd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccef0a2-d4a1-414a-bd66-fda03aff0f23",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184e11a9-496a-472d-913a-ec1d46307fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225ffeab-49c8-4d9d-a3b5-a42262c3bf19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9806008-5ea5-4b4d-a7c2-451f02cced53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca3102f-3cea-469f-a905-7a4e654397d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e4d85f-eaff-4fa9-9c25-6ec618b552f5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a44977-e6f6-4935-89f2-5da0cc35757f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a6e93d-a370-422a-ae4e-baca01172239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7108003-2301-4b67-97b1-03461d9273b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b60573-5fca-4304-ac23-4f070ee832f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fa8f00-3703-4fa0-b712-f69b79ae0e34",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277d81b8-1cc0-490e-bbc6-04696f6387cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e21ef2-71a0-4aa3-8b1d-bb1dc4079a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc7703c-6ab4-4e59-b49b-3133ac1a6a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df62a1d7-432e-439e-9178-1fb77c652073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fe6b8c-23c6-44b3-acea-a7e56a8a1535",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca8e046-ebfc-48c0-94e9-c3464de73426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c10fe7-9c7e-4a5c-8d52-0873e8e9655a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a144d7-94bf-4f37-aa19-5f3f5ff70b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c44c7c7b-6405-4e31-832e-6eb5363ed8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790b4fa4-ca33-43dc-a24f-4f24c1f62515",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18afa49-baaf-4fd8-ad92-34b83e707095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f36965-308b-43ec-bb32-85fe7909b2c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd7974e-4ec9-484d-bd86-4fc4639d86dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "73260050-2838-4cae-8dbc-896c4b86aad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b95768-272f-4b14-a214-3564a593c832",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689c80c1-b8a6-4b4f-8d29-cd7b39efb384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1300b8-3cc3-4ad0-a76a-c010f4e00d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd856ebd-45f5-4a00-8bef-da330a36cbc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb99ec5-6ce3-4ec6-9794-2228d6dea94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8bca67-1a8b-48cd-8bf3-715585735e10",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b1af5b-4d66-41f0-a447-b9abe5308549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74724e23-eb4f-4b2c-9f4a-b2effad50589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6110945a-2598-4f1b-8d33-c4ad6a3d0fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83fcfe0d-c28d-47da-9c9e-3b8493a818c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d910505-19f4-4a66-9077-7e70aea39f08",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7476c809-ff83-4aa8-a6a0-3c0759cb543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb805ebf-45d2-42f8-be2a-6908adcdef9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecb7752-ab26-4de3-a1d1-5981ee9bf09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36f203b9-15d7-4baf-b7f2-fa562d18f4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f209ef72-892b-40d5-a9c7-6217bec4ad35",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95e2972-295b-4551-8b62-f15925bd1d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45645fcb-2a5f-4dd5-ad3a-c3b26db8a2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b37d5db-71e1-41f7-88d1-2963538da3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "442aae17-b315-4f88-be22-668631447a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa0ed84-254d-4829-b6d8-c933ff71468f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d0bae3-79ab-4858-b1d2-3fa42d62a347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff61e1c-ec93-4bf9-9100-4e9ea40618c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b131c6a-7987-4e28-bc66-36314c956289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14b5af7e-0e5e-4dff-9a9f-ad34c253270f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d16f5cd-0f73-4236-8d19-f30f23426186",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034d3abe-731f-4577-8bf5-994b0660e2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "debdf394-e876-47a0-97a2-306ce8b3e79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8409f56b-b4eb-40b1-b118-e75631df8a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4623c98e-7fa7-4f6e-926b-333863c7f39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a1e6c9-e5be-4b5e-a47a-c5138ae30297",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ad4156-2693-4caa-8484-2590ad3f80b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a9c65b-7aaa-4f71-9682-bfd2d0ddc397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036c4dc1-665b-47ef-b950-693160e05a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b99dae-6065-4ecd-8d8a-d513d8130fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5697844-6fe0-4445-81af-74f6aa9b7f48",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc5523c-20e0-4ccc-a18d-fc665afe8b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffd8f24-ba37-474b-97eb-569f0790cb81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38b9c8c-a0f1-49c1-8d3f-84d170cf8c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "240e6662-8f34-4077-ad54-25aa31b55463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12f1f24-2899-419c-8ba0-f6583cef551c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c906ae-0def-494b-a8d2-629ea60b0f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a741b2c1-e37b-4b6a-9aa4-311f5a6f514a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fecc6b-fac0-4788-91f8-b0a615f937dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8330fc62-13fc-4c12-b60c-9cf5691f10ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c37b634-b772-497d-8f9d-c04bf9e10b3a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9ae870-1fbc-423c-83ae-d2b88815583c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5152d2e4-3177-45a5-883a-60c66d838c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f89991-f4c3-4223-877b-d05e20daa488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db4ff4c4-edd0-4131-805c-1c219968e014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f15b06-883c-435c-b4ad-47ddfcc91361",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b0a5b4-5cbe-41ca-b91b-7b55aee9a8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d7b04d-68b1-4b7e-a029-302767363d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df4c133-9dbb-4bf5-b4c8-df37c0406eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfc6574-4a15-4f04-9e93-f21e99273a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444a19db-ffbf-4537-b1aa-38ad880a2c17",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43036b59-ba34-4df6-aef5-d2c8c694757e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d921b5e-7218-454d-b40f-14c4197cf913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580ef0aa-a269-4d60-9f8f-07cb288b5ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef214c6-2ad2-40aa-8b81-cc376c8b8f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b7990f-3f6e-4af5-82f6-79f49e8c31be",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042a298f-cae4-423d-976b-a57c66f5b4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ef059b-68e3-4a48-b4b0-3f37ca571826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0923237e-7727-4b6d-a507-d28d1fe48c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6a68a2-e824-452e-b6c7-fd2d80ac0478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa18dcfa-4f80-4dcd-914f-138f709e5165",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b60507-16cb-4976-9322-118e74338819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f0169a-9ba2-42cf-bdb3-46a1cf0e91a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfa47bb-b1ce-42ac-bb47-3e5582da189c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "047335f7-47d0-45e5-903d-a899e6e2da38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42e9dfc-287d-4d78-833b-65b71991684b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df378471-aa16-4151-973f-bf87b3e4408e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a014047-67f8-4334-bbc0-5530aa949fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1c8454-be2a-42d9-afdf-bb21f4d3db39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "211b3363-b076-4da0-93f8-12ff9bf709fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8689dca3-65d3-4df6-afc2-5a9572a344fe",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d11965-b0e7-41b4-997c-ccb7f53ecdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc045889-c0dd-48d4-bd8e-a0a726a375e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354e6b82-03f7-4bc9-bb02-de5594c2869b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf791ac-50bf-4689-81cf-08aae83596be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9782270-b2d0-4c08-9263-87d6e52b5601",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81b94ff-ae0f-4055-a3fd-e16fc1cdd163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddc72c1-5a51-40df-ac33-7d708e13f0e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350a98df-7b8c-49d7-a082-68438d75fd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88c89902-e7d3-4fbd-b0df-e1647d7b53fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e024fdd-cc7e-4e80-b989-8a3a5aea2fd2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672312ba-02df-4e47-9e93-f23245743294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b14cf61-f622-418b-be9c-c75591a9eae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca60d9a3-9841-4fa1-8665-05b5b4eadec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2e4b3b-4215-4154-b58b-0e3dc43260c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba7fa5a-2e95-4057-9b20-5148dd448397",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9b5571-bc16-4cf1-b72b-657500a42690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f46ce44-f546-4f72-b6fe-a404ecb33d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ae787d-0478-4f71-937c-58f1682d8236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c890e39f-d460-4649-ac5d-cf2cf6259296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15dafe30-bb83-4dbb-afc8-6f582d3c8c39",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc590fb5-20c6-4908-8a8e-c0a7a071a96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e5fd8a-fe10-4bb8-b0c9-c6e8d42228fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acb9365-da0e-4cfa-8556-476c5837fcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e504a5d-222c-4b1d-b0a8-f6547b590511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848ea2e6-852f-4a9c-801f-9ab5c2baf469",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d953b3-8c16-4bba-b84a-800c61400543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7702dc9d-db7a-403a-bbb6-b003fa029e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c75ebe8-b66c-41e3-bbfb-8cbc74227b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d986fc57-90e3-4990-ac88-92bc0b1a05cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de30107d-90f4-4531-8eef-0ee07549c5f3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6c83b5-0c9b-4f2f-b357-a9c3bbb4ebf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5181779-97e0-42c6-9d2b-340fd7b44b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6520c0ef-d32a-463d-a644-d1e7338655da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "16f188ca-608f-4ed6-b044-0ce94e1ac893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209a36f6-573a-49a3-b817-78cd94245619",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cf94c7-cf3b-461e-9461-90d60774ea84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "87ee45a6-b1c1-4b43-8370-80f383397c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab098197-8e3d-464e-a0a2-83096ffa52cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4ceae7-7fe1-447f-9439-1c3f0d8cca43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cd696301-d2a1-43c6-94e8-ddf325a7e5e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58b5f1b4-7f4c-44ae-a52e-4786c4b3df78",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda9d095-d963-40d9-86fa-374903cd648f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcc38e79-f000-4579-ace2-526bab08c240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557cf9bd-0e3a-4731-8dfc-a88e371cb49a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94da7b45-b779-42c3-b867-4a1673d017c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50492e51-ed87-4728-ba82-c9e3d5b11468",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e17830cf-aed5-4283-b1db-e14f7c1bdfc9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25bff63e-9f12-4531-a53c-8f7d6d934475",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e278770-b8e9-4533-b05b-a3181be7ba21"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6384675b-7b93-421d-86f1-18a5829d5534",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "baf8fe76-cc9a-4a4b-8e41-76706a17f046"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e5f1309-5399-4fc6-9c84-341212dce840",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf5efd3f-1eb7-4643-88ee-9c25e85c3da7"
                }
              }
            ]
          },
          {
            "id": "61d65630-8cf6-4385-827a-5318199a64b2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5ddb996a-c8fb-4db8-9792-235e839eafe7",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1af70c17-41f0-4ae6-9eb7-d550cee61fd8",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4917a24-8112-47bd-9ff3-e4ad733b8b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a0d7c2bb-243a-4cb8-b5ed-3a4db0915a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1def83-954f-4f66-a09b-978b969c1d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217c35a4-fcb9-49ee-97a8-f66912595c3b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "22c8c14c-96ad-4bea-83e9-0a2ee3e158b0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b094140-6609-4439-951f-0157ad2d5c84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7af6dc8f-53bb-4209-be3a-a064da344e84"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7f10c53-3175-4734-ad5a-7a8ebd274df0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42c7989a-4b1e-4318-b26a-9cc752e44025"
                    }
                  }
                ]
              },
              {
                "id": "428a3821-3320-44c8-9f35-86f421a4da21",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5953791a-2761-4c83-a847-e2661cb6afe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f651f09e-2e04-4010-8ad3-b4cf221edaaa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4faef2f-d0fc-4306-9944-394136890cf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d4cea7a-8516-4afe-834a-bd2877549169"
                    }
                  }
                ]
              },
              {
                "id": "2abdecaf-3e98-42b4-9b94-f8dd0a9d6441",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a427cebb-6f17-45db-8e9f-7740a09c82b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "824ca79a-176b-4cf6-9362-d5c1242d33d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9527995f-eba8-45fc-b0ea-e6e8d08dd504",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dcd538c1-d6b5-4481-ba8d-2b2904309b49"
                    }
                  }
                ]
              },
              {
                "id": "e07beabc-37f6-4373-a827-804eeb2f3ebd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3461a45d-1fd2-42af-a946-8604eddca18d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66b71f67-ef6b-4ad8-a910-e6364f8b3088"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e804dba4-dced-4d4f-8547-f9c437854d0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0a9bc836-cf26-4a54-8b49-956222ce8513"
                    }
                  }
                ]
              },
              {
                "id": "4af3506f-f610-4cc9-b203-c6c17a77d596",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d361664-5888-4128-a870-d94fe855ef3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db265da0-2fe5-4871-b8b9-1bf1dd44a98e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d3e9fa2-5c67-4661-8236-4f6a25d2b5d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f0e82347-2e97-4c55-9711-b04c8c6301b4"
                    }
                  }
                ]
              },
              {
                "id": "b9e7cf7d-fcfb-49f2-a8dc-2802d7482f76",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9956b2f9-2d09-4ed2-ac9a-9bc88279a9c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0e8185d-537e-4881-baaa-ccd550d1a085"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76f1431f-097b-4400-8e84-4b8dfb922a53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "99dce7cf-c473-4154-aff1-204823350fd0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2c0737dd-f5b3-4164-952c-a8f566f816ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1718b74f-1ce2-4ea0-aa94-a220987dbaac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "304684d7-2c40-420c-a312-9a9424761e81",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0dc6a09-b5ab-46be-bf70-9b6057cea719"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca6c83a3-a902-430a-9ad6-3d89cf067187",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "03dd4073-fa00-4881-b58a-095afa4e977c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5dc9f7c2-39c6-4254-8be3-fb263a29c14c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ea6e081-bc0e-464c-9b7f-749cf216b4c1"
            }
          }
        ]
      },
      {
        "id": "81bcec9c-9384-4985-b883-a6b308ddd7a9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "519a6a02-2980-42d3-8111-28004f92cea6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d97f789-c1e1-4028-89d1-f9f68c977ef5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ac2bc8b8-409e-434c-b10a-7e4a1162c32a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e21627-e89b-4e20-8380-e39ab962550b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e512b145-3b57-4751-baea-369cff57085a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7052ad-b5a5-42de-9fd6-6874be8dced1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "74719710-839f-4b24-8fe1-214e1370fefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c2983a-9535-45b5-9be2-d08c062e2298",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334e477a-76f4-47e3-8105-ac375bc730c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0189e8a0-87c0-4636-8209-930e32458d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e5483c-2205-4e5d-b8a2-938739d167e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "638f54ed-e229-49e4-9fa9-9e6ac11a1ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be04ea81-d73c-4f4d-90d3-605e51541820",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989d6e78-4c1f-41d8-80b0-ba82087e45b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae24ccc-9b95-4531-b0c4-52894c1bd0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2792dbc1-3dc0-40c4-8341-d0de06ef65ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f07e95a-5ddd-46b1-bfe8-9c808c60ef85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d07b034-3b7a-4cd4-9993-c6c1594b58e7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63493c2f-de8e-4e63-83d7-9e3d4e324fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defc9dc7-169b-425b-b82b-b299e9b00cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aebf31c-8fbb-45d2-a51d-eb095f66e70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b29c340-52a0-4595-9a4b-b02c25ad0039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a4f3e6-3eb0-49f3-8236-72ba4685bc6d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9b3319-9aff-46c2-93d5-29b8fd90f334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626eb2e9-1470-4dbf-af48-f789333d3706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f51db53-f6d2-40eb-8fea-cd0826b320c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4806d2c-15b1-4372-af26-40682d38504a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9cac00-e204-45f4-8e5a-0ab5b197f103",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72a8ff7-34e4-4ee3-852f-c5ebc734e93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba257ff-34f9-46e5-b8c9-5bb8e538faee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0c6d0a-1778-4943-9463-443f4c3b64e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "43fd0dcd-3235-45f9-a271-7a0655fa0dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d251dd0-5592-4850-b094-04a15deaac63",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18cbca3-a23e-4067-b8f6-39f8f1faaa88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4786e2-1df1-475d-b5e2-f16d30c39cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcd82ba-422f-4296-b519-4df870c66995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3bef51-7892-4da0-aafe-8a3982f85db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef0de9f-6812-4cd6-bb07-97b93b51e5bc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6c50b8-3cfb-4ee4-95f0-5f33fee4a601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46f11f6-0166-4844-a2c0-16c0c2ebb339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdb75db-ab58-4307-8767-3c1e3bab54c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "057d729d-10b6-4897-9832-93bca82a8580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87853939-27a6-43a2-9f65-1ccdb84e091c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04cfeff-9466-4c92-a83c-34374363adf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519bad01-4483-47ff-b93a-d60713be7f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f137ec51-f12d-498f-b588-65e9e165d947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f257d1-d575-4898-83d8-d60990abf869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a87fd57-d338-4f63-9314-b8cc265c7e49",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c465c646-79bb-4930-9af7-8fb391c8a1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a65a36-f150-4943-89de-468cf7dfc38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850d8924-8d0e-4c81-b3cd-37f9db48561e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e8fbbd2-bc4b-4865-aafe-97af8c8bdb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9affaaa4-7bdd-44d4-b07f-40a0102e8a02",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea296b6-8dca-484a-8d71-a982c6d6ee14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b900cce3-2448-416e-a288-05904852464f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9754c5-db4e-4620-b940-3a7a32174ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "78602681-33ff-4efa-8251-ed301c9f8c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6409039e-6e99-4cee-90f1-3b1979163e48",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fa10d8-5c68-46b1-9d01-284d3589595f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bf5f61-f7e6-4e21-8488-9ffa38175c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f5e013-e341-4dcb-8863-764a31eb5b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59a35428-2a50-4707-ba1e-7279a820141e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6ebaf7-8d41-4ec6-ac0e-7e9703027a1d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4be06e2-f82d-40f0-bdcf-b0e4d9062b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567aad6a-8643-49fc-b265-1533c56f3f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417c30d8-8d90-436a-9987-c4c770bfcaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92f489ed-39c3-4c64-866c-c49f7478e39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2708f6b0-53eb-4d0f-a59c-2ae0b7ecdb63",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0db63a-b46f-475d-82d9-644d7903e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34a593a-6402-4b25-8477-670e18d4184e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3284ac9-b6b6-44ba-86bf-929e5ae30950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b245ec4-6cb7-45ae-bee8-d44c3b855e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077e8904-7daf-42a0-85d7-95ef173084c8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1b04d1-83c3-44ea-a3c6-27a9bab5a84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b509fb83-d3c0-4316-a568-7ef662452a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabb0376-18fd-4032-8449-ff3599b15a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d411357f-e2f6-4fce-8589-6de4213a9853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1522bff0-b063-4cd6-8c41-ccb94def248b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c039fb01-f7b3-4f45-bc9d-0319aeadc346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac8c56e-89aa-43c3-beac-0451f75b099a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28aabac7-90cd-47ac-b008-6cc56553b15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e855ebb4-209a-4a1e-a40f-a171249f1860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fceb4a18-396f-4d75-86d0-28edac7fbbed",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8feeca93-8e2f-4fca-bdc7-541e8342423e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c8b997-7e3d-426b-be44-8ebb80863861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f954719-7561-406c-a615-7f9b7ddb1afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ec3590-6100-498f-a5fd-cad05f083f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a18015-ec57-414c-8f2a-f695eb55ce14",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1309a7c-7f0c-49fd-bfa9-3f50e4d3b876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0009a00e-c6c7-40dd-888b-6cef126bb47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f580a381-281d-4da6-8918-3783c20ec3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6acedf53-83b5-4613-ae47-55170bbfe041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e129fdc-9622-48f9-b463-5d638d259f09",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628af954-8ea3-4671-ab3e-351f5ec424c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d7e5cb-cb1f-4be1-962e-4164c2d3578b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a564bea-dbc1-4764-ad84-cc04fe7c33bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e8bfc7-9cdf-4b92-89e8-1c93b2891aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ae121e-efba-40e5-8c1a-660fd2fab0b7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fbaf76-9c97-43ad-a9a1-3cade1dddd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684ec4ac-b825-4238-8e5b-810ec11dad8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9c203c-dc41-442e-aee8-8d15173900fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2209944-877c-44c1-81b4-c882193d668d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df586f97-968b-473d-b009-b61cd81a6b8c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daeeba2e-fb22-4d81-a66d-e6dabf572d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f674cc31-75df-421f-bbdc-871b3fc2b100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3106944-8c22-4f49-8655-329e97476609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9df30c-9c41-4278-9218-25716140ebff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3375def-0ab1-45da-bbce-1782f1da2942",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ec8697-f442-45c1-a8ad-0ce42550a954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a8495f-5158-4db7-840c-28ebd6f4c09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca04d78-7dc9-4610-93e1-73721b3632b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e2256e6-98de-42ca-bbbe-5f72cef282cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63610ca9-726f-474f-a857-86df35068dfe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903a0f24-a562-44d9-afaa-29447daed64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7215f295-9c2f-476f-b637-44f52d4fd929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1543ba01-2989-4b6f-a517-cec281acaedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8a8913-8a37-4d61-ad08-7f96c244f364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ffcb12-9637-44cb-9b1d-0074dc873eca",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5aa84c9-3f0b-47cf-a0b3-5506fe72d086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e690bee-5a75-4670-92be-aded9319a33b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3187805b-7564-467d-8d4e-618e1dcfa854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a063fdd0-f8d8-47b8-bae8-cb2ad418af08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72dc4ace-a7d9-49c5-8321-d9c5e12f85e0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b896f1c-2be3-49bb-a22c-44feb4e4a28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a28e0a-fc0a-4352-b32d-8dc791ea719a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b29c33-d311-43a2-9f72-1f2c0303acf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a2831f3-f2ef-4156-b7a1-208a59405765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bee2bf-7844-4635-9f36-e4d500fa932d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02be8f1-10d6-4ef3-917c-0787ff4bf172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52df4cdf-dc1c-473d-963f-45ddd348622a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eca8805-001a-436a-b74a-95d815dd0765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d7c336f-d611-4900-a69d-aef67eb59d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f445d0-b64e-435b-9640-dbc22c9454ce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6ac4de-7908-4281-901d-576fca6b1dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c97e57-0588-47c7-99b8-778c56ab43ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724bb056-3d84-456b-86d7-aaeb66019f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e742909a-3280-486b-a2a2-ec514206d32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c2e25f-831b-46ac-8631-3de46ab89364",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec026f5f-5280-4a67-b511-b5aec853d6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a94a1f4-0395-4db7-8a02-5df4365c1807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e39767b-d5e5-467d-b4ef-7c368961135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55e60528-b84d-4b53-99d0-d6be04c3f513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31aca984-68bb-41ad-be80-ed74c5ccd854",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f655ef86-9800-4392-94cc-08e01a1cccb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8ac205-fdc4-40c2-a6ad-34a213685f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f27a32f-6072-4c5c-99c8-a2726a7779e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf2a170-0987-4d0c-9888-27cc9b95769c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab031ede-8fa2-48a3-bbde-13a431f35d3a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6f027b-bcb0-497a-a126-a30f5e4898f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d16efb-fd3f-47a6-994b-e63726f6e568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5524422-64e1-42eb-a4d4-d4482ffa334f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6875977b-fe24-49bb-b15c-ff2c169a5464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05bb749-7ea6-4187-ab61-3ed2e0a97a59",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7d2878-a796-449f-ad53-916c85cab085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf44244-090f-41b9-9c72-d6b3a598e2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7534b81d-214d-4873-8adf-2570d01094a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efd98e22-6816-4852-b027-db14495512fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b059957-3ef4-4b8a-9bdf-6158daf29942",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450e49ce-c417-40a1-8744-26768dc5f477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d443df4a-9559-41f8-a7a6-5d3fca30c9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c2c739-9410-4061-b244-fe6a56ad8ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd67cda6-b431-494e-9b57-619069a3f760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038b7cdc-2fdd-416c-a7cf-d9a97ee576a2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b6d9ca-99f4-4542-8339-e8401d0f136d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e241b552-3ce5-45f3-96c8-27798b0080db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7961434b-0254-4489-8693-6a9555feeeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acd3a9e7-fafe-4b27-8732-2f20e53d1555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e99d063-b36d-40ee-8bc1-67b0cc23820d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096ffedb-66bb-4f36-b6f6-867db86a4526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f93f16-6f00-42a0-b103-dcc13e22ce7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b576432-088d-4a13-a8c3-22231e3016be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c340400-2b42-4e0b-82cd-bce389c3027f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01f90b2-5f58-4038-80c3-9f47a59ec922",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f99673-c379-4381-908a-27c47d357e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a39d30fa-0e62-4d80-84a1-a0354db73c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fc6af1-ba93-4735-b25e-c62c9491b6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53c299b7-6d4f-400d-b1a6-b434d60db7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75d191a-719b-42cc-b010-ed1b8ecd6e88",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09c22c5-95a6-47fe-b8dc-75dd387df160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5891ad-fb7f-48a2-ac68-93e0626840ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea93e73b-f820-4c98-b594-adc197d2c3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd4ba07e-4dc4-4912-81e7-7c06a4c55d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738d5d91-d53b-4f45-b489-1bb7256aff9c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f15c3a-e498-47a6-bed7-f07deb8209c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c468cb3-3c4a-4c83-b6c2-c5ea7fb62b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fce6483-035a-4c2d-85d7-d8352c219e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "037dcf28-f580-4b09-b9cd-93a8e5d992dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "994b5ad4-dc75-42c7-9a50-b7ae709cc32c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "832dd35b-72b6-49df-bab6-995167689058",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a311245-db62-4396-bf7c-1326594f0153",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "57deda65-6a0f-4adf-a2e3-b1d55a8d05f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5439910c-c87b-457c-86f9-a67230d57e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82aa8c36-2b07-4d8e-877b-3a66bbdfb0ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e66a3182-edee-47d6-a7ea-73f551c021e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43ec0a11-1797-4eea-8895-618054d26b67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "071f1628-406d-4c16-8af3-47fa3fc1c117",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c241a08-24ce-4f05-bb55-9fa1b1fa7fc1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2901134d-6f31-4995-8151-9dee39e3e53d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "592665e5-f3a9-4bca-99d5-53b8c00cab72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68dd5e73-e824-42f0-829d-32d3fcb32b54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6103dd6e-b65b-4325-ba0d-ddd8727eadac"
            }
          }
        ]
      },
      {
        "id": "87d02f50-a80b-4cba-bb4e-70da71337856",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ba591bae-ee79-4e50-9e1d-569010b9562d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49b14359-38c9-432d-814b-62af8bb3fb28",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "24114d8b-2a8b-443f-a7b7-26b7effaed83",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c81f350-dfbc-4e7b-8b37-d8a2283b4453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da274087-a227-405a-b029-8a0c347e82ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896ddf4f-7bfb-4e73-84d5-b507d6060ba6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5755a3fe-2ad5-45ca-9af0-d09a83d657c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60a44f3-b8d7-4f7a-b9bf-95b9debcb956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5425c5-45a9-4eb4-98a3-d92a3750cfde",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4e7446-bfe8-4ac8-9fc5-d9ad02aa3cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f209acc-bdd6-4cd6-947e-a7b79acaeb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245bf9f9-f5b8-4b2c-b39f-2cda70de5b6f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12ab3a8-3864-4986-b299-db5f4d37d7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3374a6-7141-407f-9515-e84feeddafe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac10be0d-91da-4dc2-83e1-294010a56adf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664a6bcf-d159-49f6-a57a-75b3910c47b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1cc9a28-4df2-455a-99d6-8606dbcbd495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2c30ca-875c-4e39-abfc-463e01fa8f9f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da559a3e-1142-44e8-9134-22997c011f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73bf1b2-4592-4452-934d-f5d4cd6f5797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e98c253-fa57-49f6-a110-b7f68a1b1bfe",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f69bff5-bb98-4d05-8dce-c04c859f2118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9532ff56-d34b-42f1-b5ac-f4ff91c48cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fdfa8e-c31a-4f1c-a965-c856c1a56fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127d0e09-7f47-4f45-bff2-7cef1fb737fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f682f44d-e4d0-4084-b1e9-6be216cce645",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a332450-af2d-46fc-87a6-45265138a673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64bb148d-ef0e-41c8-baf1-b954e3431c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1820541-839e-4f1b-a5c8-c9541a3a786c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13f500c-3b56-4382-8ee3-a2479214e7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5dff28b-6930-4613-8f6c-7008b5210464",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6a3814-9da7-4f51-9e1e-775d8506da0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d13540-9c77-4779-8cf3-3a91cd93c662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc0f877-6a92-4030-ad32-d9445fae3423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8ddc18-fe16-4829-95c6-d298246380dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c293ff4-99c6-4d47-bfc0-c6957cf60eca",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0940a230-9132-4e9b-8956-f53cbc01a075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74f64bd6-2f10-405c-aaf8-147774e17099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7292c1-9248-4610-823c-9cc685e3b382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929ac833-3f79-4e7e-84ed-900463e5c7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7daa0dca-b0b7-4056-a91f-b304733e9670",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72b2fb9-ed2b-4690-b935-acdb0a1ef13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336c504b-8647-4d28-a7e8-4eb0ec996800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddef03e-ac5f-459c-be45-7bec166677be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea3881c-a7b0-465d-b525-26698385dc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c7b362-3a5b-42d5-9fb1-0f8f7b58aceb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45ebabf-460b-477c-a5f7-066ba6a2b1b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3600b4a6-8d2e-4451-bd24-f87261834148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6353f20c-17ba-4777-a657-2a3937e5ea14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c2a2b0-1ec1-45b8-9026-4a2a4efa7912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0026be-b6da-40b5-8423-6a55d6b96a2e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7d8593-ffcb-4616-b2c1-bd37614d5584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3ba5464-0851-4e76-87ed-bbcb014229df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f379e83-742a-479b-ae60-f03151053031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a75937-6f40-4c50-9a65-8b68931bfd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1aaeb62-c334-4335-9060-bf4e2868a00b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1358017-17cf-41e2-8217-572f9a6e8917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afeef1de-0ca8-46fa-9d85-876ef30dfab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb97d5c-4772-4da3-9bc4-df372b3ce74d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318bccd5-d6c7-4553-9f0d-32da2b4c15dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816201ef-6966-4611-9020-0207dca4c8f6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c87a3e3-e9bd-488f-a996-3d5cb62ab2e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f8d791-188b-47ac-bc85-bfd977a18ab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a85709-9883-4370-b0b1-a212b6480a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0286c1-f7b7-405f-9550-b4f301bab2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ff58d0-59f1-43c4-bddd-b5271f04fe05",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0b3422-299e-435a-85a7-40ab0d28cfe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a658a0dc-dade-45ec-87ac-07e85cf3bae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4165df-e8b5-4bb7-96ff-d9205d76c81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19681ab-c40c-4be9-8c89-e9c69136161b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de19ad75-ab20-475d-b4e7-b0df3db2609f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cd4f30-cca7-4940-b6e9-a93f7e586b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8833f5-cddd-40c7-961e-e53b24854ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18668689-c77f-4645-a727-a94bdfcfd45f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296ad95f-5311-4056-b441-18266a7ae850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4626783c-4789-4e19-ae81-5b6a4ff39155",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5a7beb-89e0-431d-8a6c-1c3f098ea202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08e4c1a-7f44-47d6-a2e4-beb063e04a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4682a88-60ea-40ac-b741-96225a0b009c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7211108-389f-4a15-948d-7ddb1ad1c24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35db68f-ef4b-4c99-b389-6463df906979",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64528727-5e39-41a2-be18-4781448f4dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79527447-0236-4307-8e74-3bfa6d917ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da449f5e-d298-4f80-9ac8-6155390c404f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d05c519c-1cfc-4532-9a9e-ed2f7977b74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3f6423-cdee-4409-a93a-9cb3943c00c1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c12be9-e523-4ff4-941b-567f11b054e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1d582b-6929-4221-939f-82496a1dd164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d7ba6e-d7bc-4de9-baf4-80033a96d555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6702a9-1416-4725-8d6f-b4753a178943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332c7251-2637-4a19-b337-37eefeca564d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de894545-8c9f-49a8-90fc-1cc5f4a61beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac943dc-cead-4021-beb0-61a9339919d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f991fe2-1250-4ad4-9632-1079c8223d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fae8702-2af0-487e-b5eb-681933613c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930978c2-e80c-4d73-930a-4920f4169c62",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76be4cb2-8d02-4a4b-be4b-9778046c85ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91842770-b7b1-4652-a605-3e9923baaab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d688d0-2b73-4582-8161-681bbb3545f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82c18bd-fe52-4425-a712-66e40d944be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2d072c-cb87-4d85-b783-3b5742c5fb77",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9f0c4d-32f3-49bd-9f3f-759d79208ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e1a0cf-3fd9-4a1a-86ac-e41d9ddfa0d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1116904f-751a-4107-ae83-b1f7afa2a827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ffba38a-04c8-45bf-b316-c149fe2d0080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0485f6c1-f108-4718-ac2f-0ce9a9594108",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a42024-c3d5-4379-9659-496adc63d5a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b468abb7-4714-4e4a-aaa1-f63392bdf7b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112b8830-dbff-4f83-8514-b7cc7ec66fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1eb8b12-58a2-4461-8f7b-0b7c090a25bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e35ad5e-698a-47fb-85b3-91a15ad65e5d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37f6463-7d5d-4b2a-97b2-efe6e1b0d153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d40f261a-cc49-4787-9230-4cf6ecd751e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d516a8-cd82-48be-90b2-008e03c44c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9a2d8e-7778-4dc2-9e07-4841fb3960e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d7bcf7-628f-42e4-88d7-62fce1d19191",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e349e9aa-1036-4f06-b933-0d407231a437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d42788b-1baa-463e-975c-77894cef15a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83375e49-5cb7-4837-9afa-bca1c4ec0e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95428289-3373-416f-9d88-6a5f7e2653c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7a9898-de14-4e7a-a15d-dfed9b522a97",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e852b9c5-969e-4992-9f05-6dd78322d049",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "922a886f-edad-4bea-9a0f-edfb795ca99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5278724a-e045-4f78-8793-bc6596df879a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c632ee9-daa2-4cbe-b732-c0f125819678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e332fbf4-4699-4acb-9fb8-e91e778fce2a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278e8699-587a-4e23-814f-80b279ea695f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ac4682-09f7-4d3e-8e08-15219279294c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b04bb04-004e-4404-85f7-b827dd5ef266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d52ac0-bea4-429e-93ba-a34daf5ed87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031307c7-1b79-4e85-9681-fac10acc1242",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b645dcfe-92db-4c24-83c2-25bee2f86d9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "142d5fdb-132d-4c95-9233-f47605af2de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0687a633-6ec2-488c-a6fa-be5f4818b7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d48704f-cb53-4a29-ad01-c35609bf343b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c3f4af-e153-4676-8da5-244551e86608",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca21cb1a-39f3-453d-98fe-476f27e869e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7c7eced-5327-4edd-a978-8bdeeeab41b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50fbf03-49cb-4d51-a12f-a52ddac00e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1f9be4-7e4d-4640-9d00-2e8dbba3102e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61df985-527a-46f5-bafd-ba7b4ff436b7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8066cd-9596-4ea3-8fc3-585d3739cf68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3a106fd-4c59-495d-a21c-39fb32ab2d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d72d3ba-bb56-424d-8843-fb756ff1262b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ce56f3-c750-4474-bef5-d534cf03c662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c6ddf0-b315-46b0-b5b0-e3834761e925",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bba7b4f-1451-4b18-9176-c15ed4fb49ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b85cf047-8d84-4b3c-80b0-1158a7b63ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97921859-ad6f-4212-bbe3-b8ff8097751b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8114eaf8-ba4b-4d98-9ad2-d8eb50d12c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061d142e-62dc-431f-bff7-34ce611fed32",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eca38f7-4b08-4f6c-b696-6a9ce4ece89f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d0f333-bac2-4b69-9f3b-a86d84114f22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98dceb8-d9fb-42d1-af6b-4a229e19a86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690aa2a7-e7c0-4d5e-aafa-c11c4a849d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1011dc28-604e-47d6-a1ed-fee3b6619e57",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b131751-e23c-4112-b116-77401bb81630",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a2a8c86-3329-4f5f-a95a-eeab9bfd7a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361cd698-7037-4c22-b145-e4eb76f4a8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdf45b2-bb50-454c-9c0d-bd482c92eb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bc3c2a-6a21-40fb-93d5-82fc9d04f3ae",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbc4655-90b6-4c21-8080-2b0d6ddf8420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead36104-c144-4f1f-85b1-68c625a2099b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5010597d-f7c2-4f81-b34e-1e7672fca52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777100ef-e51f-4550-b1fe-87c293d960d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9beb181c-06e3-4034-99b3-df2ccf0fbc50",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cfde87-91bd-4acf-9551-75b5ba8e4409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c63c340-e3b7-4909-8b5b-d2da2e8b95fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082e65fb-2a29-4b5a-9c96-da7edb5a787b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18407501-9475-4724-8d8f-b89bdbb72f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d9e798-7fac-4a26-9df7-a1d989cee91f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0faf035c-ec4c-44ed-9223-a7fc80c666d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a047f240-09f3-455c-a1ca-3259c135fa73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "883b6b89-6e20-4763-ab5d-e6cafca1e089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3017a515-0d0d-431f-a3fd-49bece5e42ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f343da70-d9c6-438c-b52c-6bbcd9ed698f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6a0c61-fba2-4858-ba65-f4853ec973f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3febd9c-e7cc-416f-a016-031a887a513e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbde66a-889c-4e0a-8277-1c18565e6fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad66648c-965a-47aa-8290-3f3eaa425898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dc7084-bba6-4b01-8cea-979cb37b72a7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2a52f9-ef3f-4deb-ba13-24362c8bbf4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c767bf-2786-4398-9cc0-f4a6aa821c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5e3451-2245-4d66-92cb-0ef687806941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ff5644-0c00-4138-8614-b2e7dd40c528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680e6862-ddfb-4ec4-af0c-a88bc7f48b9c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da310fd0-4b7e-4f9b-bdeb-73449f46032b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0507f672-953a-4d9c-be6a-aa20d76c69d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8929485-62b7-45ba-bf87-f18a76a353be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f494e3a3-5725-4183-90f8-1d8a755da63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ab1d5f-dfc5-4e07-8bef-82d969eda711",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1fde04-0a73-4a63-9206-cb65e20c7d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600ae9d7-e27b-457b-8ea7-b52a616f04d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23554ed7-9f3b-40d0-bcbf-c27fc8e8211c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdc0fec-d865-4871-ada0-7c3f8da03d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf1b19a-b5b5-4191-95ad-c4138de6b32c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed4c82b-e319-469b-ac87-9d5b6308faf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5270565d-8dc7-4791-bd3e-a2bc1963ce75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84245081-5d61-49e2-acf0-ce17443ae7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f93b21-38aa-4048-9d12-14ab1d1a07e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a91375-e161-4344-9d20-535fb5fe65f2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964493b7-95ab-4431-879b-d8063d2e6e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2638688-268c-466b-b8f9-1f0ea1a446fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32286cf-3af6-44d1-bcc3-2e6f018e542a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d35d9f-ca34-42e7-a85d-7e581082b099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7bb7a7-d414-4a06-af5a-d49f8e7ab934",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a768c753-a657-4423-a51f-eb1313ff1004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9583b5-066d-46d7-b756-b7e7f38e660a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2d9c6b-2b47-478f-865a-54d1323a72c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc4fe42-d8bd-4a60-84b1-c1e90afbf2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa764ef-6f3b-43b1-8078-2b6e022405ab",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9090827d-6bff-4bae-9d62-eb0799f90305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e95dba9-0141-4e21-b80c-d06aa9592abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4375a7aa-0c18-4bfb-b2aa-dd9d0bd2bd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293becf8-1732-4736-87b8-aa139d6faec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148b6e6e-8d55-42ec-ab2b-d75865c5fc4d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239d604e-93a2-4833-8d50-3e9c215f9260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80b1ea0-3296-4f1e-8661-6ee79d511c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa9a7c3-62ee-49d0-bb1d-52218afcc425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fdd2a4c-4479-4389-9cc4-60d340c6a7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2226d4af-27b8-428d-b12a-444df1d6412d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ca44f3-08f0-4343-ab7b-7acb145444cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778bcbc1-b039-44a0-8fbc-9cf9ba9b5584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc40e61-3a8f-4ea7-9332-38f200da1568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5d4316-70e2-4278-84f3-beadbe39e6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b108a795-83f1-4d1c-a9d9-79a65f59ecd3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ce6643-29b4-4878-82ce-70ba0815d690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3cdb3c-7e4d-4bac-ad6c-41dc97568a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b0ee87-4296-4c46-aff6-dff9fe201a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484e3894-a93d-42e5-a447-b0adc0909bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb33385-5226-42f4-85f7-0ffc4636187e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3287d0-3602-4d81-aee5-b66248de0fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c25e75-27d0-4557-b8d2-d00181d6fcfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4184590-19d8-49d0-ade2-cc461de06d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22fd93d3-d903-4ff1-80ee-c513b59b45af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89228cfa-c87f-4d34-91cc-2c8488a7ba00",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c738b549-76be-4871-b24f-04dd80d5ef98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90813bbf-e18c-4ee7-895a-3d20e678507d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4452988-3598-4ba9-ae32-f86058ab8fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5d6b78-e192-43ae-a0a3-1822fd3364f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd40a66f-ccc0-4540-b7ea-6b4fe499a17d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5134822-c0b0-4efc-be14-04f40f92b2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066c6539-e94e-4dcf-b110-c2d57f75e699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a949f1-b14a-4f6f-937d-3980f5baf84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9835a4a3-de4f-4784-b590-c56b684292ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efde1ebb-551b-4a2c-989d-3c2d2c00e636",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a485c5b-99ed-4a85-be37-ef14025ab0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4dd314-0690-4959-b10d-9b07b37668a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549fd90b-c06b-491c-99c8-a04c11d10a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d8117d-9c0a-449e-843f-fa1902addf1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5713a26b-b282-4c55-8d03-70635964b1dd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e7c58d-19a3-49cc-9def-5209d82eaf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c37d32-73f5-4861-94fd-5da1b0f29839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad821b0d-caf8-4cb3-8691-5a8fe71cd8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f22ca2-61fd-4101-aa35-6b757c45a8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce73f85d-cdec-4fbb-8ddf-542c65de468a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9d276e-bed1-48a8-bb88-001ebb7ba97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee52d50-9f3a-4afc-9c49-f4cfda19e6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3907e949-8386-44ed-9932-d9870f4275db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e86253-87de-47b9-9cfb-25116cf8d081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d16b15-b69a-42e1-ad9b-454a23e50710",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42bf6ae-40ad-4743-a81c-75b436a536e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3366923b-29ec-4e3c-8e9e-5f303b8ff3e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08217e20-3295-47fc-9be2-6412da27ca9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fcd1d20-d27b-4f42-b48b-983f0c1de76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6afc02-415c-4645-9677-454f89bbb40e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a8f687-bf77-47f3-a4a4-e2a85154b5c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb1e89f-0777-4ce9-bd81-213456ec896f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858724a6-e514-42df-9855-c187c5b00783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603d8d3f-81d8-437c-b875-fbb5c0c4d125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cba3b8-c2f0-4df4-8820-6c1a73142677",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beaef6d9-4a45-4739-8b6d-7854af9d9285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c58ac4-67e1-4718-8be6-88d22239fce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e17850-014e-471d-ad64-ccaa8dade0c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07ef238-98e0-44c8-8808-a6dade02aa53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c82fca1-6363-4910-a3e8-94ceaf91fefb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76db1f7b-2d41-4c48-a6b2-9bbd6edc9447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231e5140-ac03-4a5d-b6d5-56ccbada1a74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9756a6-e063-4c98-bbe2-0bdc7d88d7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1d9f19-5162-46c3-acf3-2f3e98f2ec05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e66c23c-87f6-4e75-a976-190977185f51",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b640e7-830b-4298-af33-7d468dccbc1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632a55ac-9559-438c-9c91-c1f2c65a7513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b559f78e-f1d8-4774-964a-3b56c0078f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b836ed15-cc91-41ed-bfd2-3568ef48e33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80861bd6-d16f-4ec2-9a7c-cb711238457f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1eedf1-eb22-437c-8fa8-274b909b61ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47cb9b80-2c46-4f35-a373-bdf1d3040c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "942b8044-0554-4a1e-8525-e3bb7dc438ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e5ad25-8f5a-41df-9a27-4b5f3895f081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c020b9-0154-4cff-acf4-d7d12e7c488e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544ba20a-53c7-465e-bc7b-ee613e41ce7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbea240b-b84d-4a71-9bff-51d9d3c8c173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36103b7e-8646-4cb0-b007-78975780d216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b34dab1-b210-45d1-9678-2d61198148d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a52384-15ee-436c-b611-a78e002f599a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e97189b-3ea0-4cde-881f-f8edebbeb017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33be67fd-e633-4f13-9599-22d7bc0a61c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2f2472-9e2d-432c-8757-daab57b425f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b190ab34-1b47-4369-97cc-067ce827aa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9117a1-e3e7-46e1-be4a-76c328919beb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2565ae-4a2c-45e1-974f-f57a1d7133d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d485cf-b3f9-4b08-af4d-e422f59e21f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da29afe9-194d-454f-922e-0386c3b8b14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c180f7d-394c-4787-9b99-b63fe3446bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d8c844-fda1-491f-9c36-8fd452b98195",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372bd247-036e-4243-8122-b694e996d10a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af20065-4fec-4be7-b1ce-5dcb8320b458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8572ec-0ba2-4781-abab-37b06e975f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40506b2-902a-473b-b9be-7f3e2905bfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6945e931-569b-4cf7-b3a4-bac7977df9e5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f335fba-745c-44df-b480-ad63a53b8f5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b408600e-4a71-43d6-8a3f-ecd7d06fe6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29903ea-632b-49a5-bdeb-0bbd2a7de9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d799925-18bd-40bb-88db-0826cc3eca60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef90701-af10-4e4b-b6b3-5e7b2ee75506",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2be3ec0-c77a-4e8b-bec5-1d763da017d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3757c20f-d474-4ce1-99ba-8fe09604f3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb7c72f-91c6-4219-b7d2-b6ceed822011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299382dc-edcd-46e0-bac8-366bfc79c9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd52c32e-9731-4e69-bcb2-127b97558810",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba54ea67-657b-4b22-8336-bbef811c883a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "682efa7f-ae2a-494f-8839-0770243f1e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ebbb13-beff-4647-82df-0ce68583430f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fb44ea-a6f8-4d43-8dac-1c8f146cd9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c26aed-9a2d-4444-92b5-4a35ca7b0815",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef5fcf1-b16b-43d3-a19b-586169fc8e7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2b9d5b3-b68e-4da1-8d10-7f0c331626ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a87049-820d-42fc-80c1-10654e592fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08397fc3-3ad9-4c84-b119-1aeae835c1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9b3db0-2182-4e9d-a490-f78b83c03fbf",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b05620-6883-4075-9252-45832bac3dd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90de6e90-9d32-44e5-8331-29a4dc15306c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b50fe74-15f4-40a8-9010-3fb0243cafe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558b924d-404d-4ec1-aefd-0b512f249703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e46003-ad8d-491b-8e37-6ef5e611ecbe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d60509-fae5-4002-bc58-c630d3a2b7e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fbf3b8e-61eb-4ea6-824d-8fbbdd6b3bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ac71cf-3ae7-4e7b-90fa-c55341a2b9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55aea80a-2bb3-4685-a60b-d664b5f60086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1efe99-99bd-4fcc-a6b3-d7df4ec00f45",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7949fcb9-662a-4d77-a6ea-7eeaeda81b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "909f065b-623f-44c6-a709-59871c94c4df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "076e1cfa-0ee9-41e3-83dd-712e5f148972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6509124-00ce-468e-9b33-5605841663a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9325bfa6-261d-42f3-891c-67930c844b70",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7f629f-d1a5-4197-86dd-60a1f639be57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17f73f0c-81be-4bd2-85a8-577317a33d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9025bbef-e346-4dd1-969e-b2714b1b59f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40402505-58bb-4e66-967f-a1c92aca1060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d57c4b4-fc57-4398-95d7-6468041c2bd1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11b61ec-bc74-4e28-9d47-c2aa1a0431a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "add63b2e-10e9-41ef-b056-f06f6e890b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa560bdf-cf9d-4209-ae86-a287f25df640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0672c17d-8ac7-4300-873b-7a90511c8d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b12e32-43d8-4a70-b5c5-08873fe01622",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2c8278-2345-44ad-a7f6-51a6910ea8bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e5aa33-9bfb-4777-8447-e9a00228dafa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1790c36-6cd8-475a-ba8b-8bca795057bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fedf9a64-c268-4b7b-9e93-a6e8a0dd990a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32cf1a33-af71-4c41-b12f-1215fd518546",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7338929a-066a-4e09-97d5-adde16de4e7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33738f85-f83e-454e-bdc8-7e4e9edc28d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6debe1b-e467-4d79-83b9-190d26e476e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc7a81e-baa9-4cf8-89b1-76e3bb3b3262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227c37e1-a117-42b0-b8d6-8f3af09d54e9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4deea13e-aeaa-4057-a8ec-497cccea7c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a89105e-605e-47db-be2f-2b36efcfbf15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac723bec-4d35-44eb-8f17-5f27bcf63bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de45854-5895-4b77-9bef-1885a42b60a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1930013a-19f7-460e-bd11-c61833eabb2b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e04431-a53c-4113-aef2-1fb26731cedb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c07bae0-3ae1-4f02-9511-3a3d40cdd810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d1f355-0dc5-4c05-ac6f-0a3e69ce9c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc40d8b-e1b3-4975-9653-1c7762437907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1a93fb-d32f-4cf0-8965-6194aad0acd2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6706ca-434a-42f8-a942-eb126be4e925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eabd127-6589-4509-8171-04bd41213354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fb21c0-debc-4994-ba43-19f947c3cac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03d08ca-fd17-4867-92e1-e52d0fca1ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e63811-8583-4d1f-b210-5d4b382ee8a8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e07c68c-9352-4f16-b3bf-6d91aa2736da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "464d23fe-8961-419d-aeeb-1695572ed425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e74a21-3372-4122-9743-80604573bdbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49511876-b8be-47d3-831d-38a0fa83fbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3b588f-f22d-4a0e-9171-b0b86353cc71",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cd45be-d9f4-4607-836c-c7944e45024f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0356422-e25d-4b00-a1b5-a934722c1c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052b88e4-857c-440f-841f-26a7e5eb35b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0637534e-6f9e-4653-8645-8212d27302a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f762c431-3d41-4e9b-ab4e-1cce0d5ed90a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69155af-6fce-4595-aeba-10f82f095230",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb22edf4-bcce-43bb-b867-0808028e5089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95f03d9-459d-4ec6-af8b-ba4797554eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafd3e1d-744f-4ed7-8e04-ddc4d95e7d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e12228-8845-400e-9267-d0f9832bff99",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25db905c-9941-4dd1-8902-2dc913a37f9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36ee8bd6-0679-4e7d-8177-276a2fa5a058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b761e64-dee5-4d0d-ac00-98c60144d11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c969f6-8769-4756-bece-b38e275d5abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f62d16-1dbd-40dd-a8e5-34b6f712eeff",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3c5e44-5970-4c34-8825-a6fa7d3f609c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9730a33c-fb6c-4a44-91ff-571df988460f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab622a5-d119-460d-91fd-b27404393329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa08f3f3-85ce-446f-b156-7af893d1fe8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9192e07c-413e-451e-b0da-e41f547882ba",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301098fc-70da-4810-bb04-40b1a962ee75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba023f6c-1baa-4090-945c-b927fdd8128f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a64cf4-87d1-4a63-bf7b-85e4e6bf7349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25153fcf-b062-4c7e-a932-4d3ced9adf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec3ca3f-6a22-4144-9821-1c307ff75a59",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15030ec8-36b5-4282-86a4-f5a06e4d00b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbba5cd0-084e-4fce-a57b-288247867c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c28ad1-15d1-4050-a27e-1c2d559a6dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dadd9296-9194-499a-9efe-92c8bd2769aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1dd646-b8c4-447f-a970-426c0e83b8f2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b752e417-09d3-43b3-9972-5135a54f4e9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd1e0e9c-20b2-4b61-a217-9a4c047b906e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2c3f63-b633-49e2-8cfd-f7bbf6e21c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8850464b-5bf6-47b1-80ce-98fa101af0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f45efc4-3f49-4a72-a2b7-483550254625",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47207e1c-01c0-45a4-a27c-75e24ba55845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e604c1-1f68-4820-80b6-98a418ffeaf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e5e6e2-5eb7-41a3-81ea-4fef5f274e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa45f5c-bbdd-408d-a5fb-e16b90aafb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88e8599-09bd-4bbb-89dc-48333a52bc65",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eecbc18-eb43-4591-a4b4-82eccdd82a96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a465f85a-6c05-4492-b45e-5bc251bd62ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56434e8b-9fcd-4dd0-bee2-558010b3cf01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54908de0-fb53-45d4-b133-2103f370968c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7fc34f-87b5-43cb-83fb-e6645b83d8ab",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848718bd-29da-4ea3-8521-ba9b7abea973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a524c1-7dbd-4ed1-a21b-e03dd887b393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebcde5f-95e1-48b5-a6b4-d3680e44edd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c3835a-f48e-4e51-8b15-7456469e5057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c2243d-d3c8-4cb4-985e-1fc0cd81c0af",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96baf8a1-af08-4e66-bc85-97ef97057a0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f029e41d-e47a-4dec-b1ef-c1470c5d9b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70821477-3acd-46d0-93b3-130795639cb1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257ae4bd-d9ae-4921-8cea-84c9050f362a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b61f4c7-9dad-491b-bee4-fff0af1296a3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c39c1c0-321f-490d-82ef-b0b92afceb72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a3f585-98a4-4ed2-8a22-de64297ef6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40659fd-b9b8-43c5-8826-9cc7eb2cff7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734ed920-0edf-463c-af69-e8a1b0bd3a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75be11d0-c325-4e77-a46e-1bea7777e985",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cacaa2-8556-4267-856a-f28416d3d8f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "067ece2d-9de0-445a-875c-d9b3e2b6c028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7abd873-3dda-4b92-931b-e657ff314322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6773d8-aadd-47e3-8bd7-43a61e9524e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c63369-a578-41cb-b6e3-9354f565c223",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746a24a9-e2b9-4210-ae26-cf8533c0b5ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7889be97-5fcc-461b-b585-33de7be74881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff1350d-cb7e-4f06-af90-d30d365d6bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f47da4f-efaf-4fce-91af-3f82e9707b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f9cfe7-3780-41bd-8e50-553f4f195726",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb195b1-8392-4478-8b9d-4944adc55dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae1eb16b-8dbb-45b4-91de-cf9fd58388df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8881d4-e47f-47c8-becc-4498531b3fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7846286-fcbf-4e44-98df-d7be07a164b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa956cda-ae56-4dd7-baa8-a100a4b4cf62",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5eef0f-07a3-425e-a609-e59811f2e6dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ccfd97a-9836-4f9a-a61e-ec88a5f43930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd99227a-898a-4964-82d5-1652ee088161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ecb8c1-302a-431a-827e-af31457784c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa5ca67-6eaf-4970-bbf3-7dadf9c735a8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b934e1d-6d06-443e-8540-b550abfd93cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "643cee30-2399-41f6-96ab-33ab1d9982df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b97b25-3475-47c6-8bbf-27004b7662d1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb8fa68-13b2-4989-b70c-10cc9be7394a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75ecdeb-2326-4949-9543-54b628263658",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e275a5cb-9205-4729-b220-5c93d15770b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6723056c-e1f8-4c3b-8625-2c18bcfc0fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6035998-73d8-40cf-b7fd-aa9957285a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f42e8f-c5f6-4396-926e-28e82596d755"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9065792a-b8ba-4bc2-a092-fe76ef737594",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf26e3f2-3a1f-42bb-892e-ae8f087a0904"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05205db9-6da6-4f94-91c5-f0936b42ca70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3157e3c6-790e-417b-8a24-a8daaa0ae5e4"
                    }
                  }
                ]
              },
              {
                "id": "773a2cc6-8639-41d4-964c-9cb1ecc78cc6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "556c093a-0031-42c0-a217-abfea204db94",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc1bb63-5a04-4d4a-84f6-0224d6963a49",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9b9c3dfd-6ea4-4c4e-b1c5-4c968ac68fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87ddeec-0beb-4e99-adf7-57daa3be9513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c60483f-793e-4b24-a38d-9b5bdc0d55e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1a3afcf-db21-4ca9-adb4-a782f5891efe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "500d48c7-73a7-407b-9053-b63898522570"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b25b7c2-b67a-4d01-b933-3d78a573472f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e54001e-6099-4fa0-ac30-d572db43dac2"
                    }
                  }
                ]
              },
              {
                "id": "7d395ee3-d45b-4da7-8878-1a94af613326",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4fc4a467-9bff-4a48-8732-bfd68cabea6c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8491d9d-d2a3-4bc4-906b-6534b0bd038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "817773bb-3134-4073-97f7-28f1defe7ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85fa219-1d9b-4ce5-a368-583a2ba986c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10659a87-d77a-4431-a3ee-0ec4cfd80985"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "982197b6-37aa-4842-bb2f-ee3b50f6b939",
            "name": "Positive Testing",
            "item": [
              {
                "id": "60e5e5c4-4556-4df0-99c1-b757f167e0c9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc80734a-4335-4873-86f2-13bac59c442b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "72672ece-8896-40a9-bc69-ad922ca944a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81afd301-6f5f-4516-a9a7-ba5f221dd594",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0454ca11-5eb7-481f-b948-d379fd251827"
                    }
                  }
                ]
              },
              {
                "id": "e4e2f5bf-3315-4149-bab7-0158ef0ad089",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16e7cc2b-0d2f-4187-999f-708eef850901",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a7dc15d9-5890-4390-ba90-4db25670e8d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e75a3ac-0b21-4b62-a60c-acc006708c27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29c8584c-6685-45f2-8644-5dcec8f4ac86"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec5d5990-f2aa-4fbd-81d3-4277949e435c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b1dc4bf5-a9cd-413e-a2c0-cd63801af2ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ac409cb-69c8-41e0-b6f0-8e8078a179e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc5c8a2a-a5a9-436f-99e1-ba1223e376ef"
            }
          }
        ]
      },
      {
        "id": "f5243514-4d5d-4af6-80b2-3d951e083b5b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4d222ee5-9b03-43cc-bf6e-d742bea67ac3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0023afc3-aeb1-4e64-b2d4-e2367a53611b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4fe2132-57e1-41b5-be7e-7255bc6b2691",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58645b89-fa98-4700-b72e-4349ae3168f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eb39c5e0-a00d-4137-83d4-f391e63b86f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "236bd41f-8e69-4366-9e3e-b6e7ed07fd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7e32eb2-3355-4c18-ad90-59175716db04"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43458f12-63ba-41d5-8a31-eddc0291709f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27fb15cf-0c06-45f2-9b25-20a4e2d801dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78d27555-28e7-49c9-adcb-c18ce3a03ad3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd36ebb3-7df5-4d8e-9235-3071f0e3f36a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3691549-452f-4163-96a0-2c67f58e31df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "97a9e69e-3abe-42ea-a098-16e59b4f8a2b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca459ffc-fa2b-4fff-9fc9-6ac6c12290c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6949dc5b-ce77-4eb3-8101-8d7a9808b1f2"
            }
          }
        ]
      },
      {
        "id": "19961478-6e8f-4395-96f8-76d5251c408b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7896bfff-1bc0-4054-9b2e-ec5f43b583d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c3b4935-9dd3-4b72-968f-95d0245a8f75",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5467a53-52bb-4dcb-912d-5a1900824eba",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e674745b-f2c3-49cf-b334-605a72a23f69",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d62b745-7116-46b2-aab5-97fa70f40dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e4fa0b-1e53-484f-ab03-e0851cb98e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb6bb511-0f21-49f7-95fe-dac8832fdc78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca285e51-4350-48d7-9cff-f293b56f840f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10d35408-4a5b-4136-83f2-cbee38ba62ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d460b57-8bdd-4e40-8af9-a3d3256d9891",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d75f967e-6bed-4e53-849f-a3f335b30394"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "107c2853-901f-4fd4-9deb-a0c9f628c642",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8fb02f1f-6ab2-4410-ac95-dfbc0bd56919"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f06192d-d5ce-455a-91e2-38fb728bd92c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ce7c798-29f9-4a99-b6a0-a3d96f14705b"
            }
          }
        ]
      },
      {
        "id": "52a1897e-c3ed-4412-9037-6e580722ed25",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1aae648b-3382-475f-afbf-e8018cc10020",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11501252-524b-4bc2-9d39-11edaceb2252",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b744593c-b051-4b50-ae43-e8de12c8b3f8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88647de-54b5-4794-ad9a-95a7f2b529f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ec0a6f6-73c6-4444-bf2a-2577225bb418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4547e34-c166-40c1-9076-411d8e816680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fddb77f-a3e1-47d5-99a2-52734f0bb44a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9d5391a-e0bc-4471-b795-fc9ca591d991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9f0ed46-a88e-4d47-80ee-b9b8aeb1a0e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "281aac2d-633c-419a-93ac-5a2f0b97229a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5772103-c4d5-4477-a46e-26599d3cfb22"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6bc5c78-1d63-49e4-8457-140d55a81106",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "18d6c59d-0e74-47f1-b9af-4b34abcc6a6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77a6848d-3e15-406c-916d-a8f419ef3d13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f773e6e9-ea2b-4b2c-89ff-1001d3fcbc98"
            }
          }
        ]
      },
      {
        "id": "85d9dc3d-7422-40d6-9e86-914ddd881305",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fffcb1df-1c4c-4140-8dc5-1e4136621614",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a5d9567-ed37-4186-84bb-1affc6ae5f23",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0f9a71a9-7809-485c-bd85-70314400eb83",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "198dd5f1-03ab-4fa3-9ebd-23222547ed1e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31a63c1a-6bd7-4f92-a45b-714e68c65f36",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 79.6587301587302,
      "responseMin": 12,
      "responseMax": 585,
      "responseSd": 83.80430366438961,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712363642020,
      "completed": 1712363670929
    },
    "executions": [
      {
        "id": "38451dbc-a998-4885-9728-b1663814e0c8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cd571d8b-5e05-481d-9c15-e2f814ce91b1",
          "httpRequestId": "964c0846-e6e0-4db2-99be-af9308481927"
        },
        "item": {
          "id": "38451dbc-a998-4885-9728-b1663814e0c8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a0b2b66e-3ca3-4680-a004-0cd125db07d3",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 0
        }
      },
      {
        "id": "e448b083-ffe7-4893-a1f7-ffb9b2cb1a8e",
        "cursor": {
          "ref": "f847036a-4e49-4517-a480-a9cc0a7b8337",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4f339131-379b-416e-b12a-4e1b8495674c"
        },
        "item": {
          "id": "e448b083-ffe7-4893-a1f7-ffb9b2cb1a8e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "133bd18d-f3ea-4249-a1d4-76353d013f8a",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "a107b7e3-5b7a-4a61-b22a-b345024e8eea",
        "cursor": {
          "ref": "d80e6396-b026-479a-b601-7eb5bd19525a",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "07a6fe08-e4b9-4c80-8591-3fea45575d1b"
        },
        "item": {
          "id": "a107b7e3-5b7a-4a61-b22a-b345024e8eea",
          "name": "did_json"
        },
        "response": {
          "id": "b7edf5ee-865c-4cc4-b7dd-5756c53d758f",
          "status": "OK",
          "code": 200,
          "responseTime": 585,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c97129-721f-4d96-acf2-9ffde97a5f16",
        "cursor": {
          "ref": "4b280782-353b-4fc2-8c74-d82f56e59793",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7faf52e0-0e24-4a4a-9f8a-991634739844"
        },
        "item": {
          "id": "e3c97129-721f-4d96-acf2-9ffde97a5f16",
          "name": "did:invalid"
        },
        "response": {
          "id": "2a8b52b8-9935-4874-a887-00837fb4786f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c97129-721f-4d96-acf2-9ffde97a5f16",
        "cursor": {
          "ref": "4b280782-353b-4fc2-8c74-d82f56e59793",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7faf52e0-0e24-4a4a-9f8a-991634739844"
        },
        "item": {
          "id": "e3c97129-721f-4d96-acf2-9ffde97a5f16",
          "name": "did:invalid"
        },
        "response": {
          "id": "2a8b52b8-9935-4874-a887-00837fb4786f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0e2187-88b6-44f6-9dd4-1e0a369fc7da",
        "cursor": {
          "ref": "3d7721ab-e898-4874-b271-70931337b17b",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "079ee231-f8de-406c-882f-7d4210a25c87"
        },
        "item": {
          "id": "5a0e2187-88b6-44f6-9dd4-1e0a369fc7da",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5b8d84db-12f2-4bd1-91fb-64f40ed533ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 149,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3edd66-ec2a-4064-9e50-40f4534343f8",
        "cursor": {
          "ref": "5f1a61dc-a806-4e96-b5fe-94a3d9b2c211",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a6cec89c-d2c1-44f0-949e-a3263a9d193d"
        },
        "item": {
          "id": "ae3edd66-ec2a-4064-9e50-40f4534343f8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7b9dcb7d-853d-4c37-acce-d570e5c66380",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ad5542-fcbd-4739-ab8e-6823df1a7a36",
        "cursor": {
          "ref": "cdc7eeb1-0482-4cc5-b2fe-84df53ebb74f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d1528620-92b3-435c-b762-cb27535f9af2"
        },
        "item": {
          "id": "47ad5542-fcbd-4739-ab8e-6823df1a7a36",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ddf08fd3-061d-4c67-ae6d-1fe88624e91c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e844b26-82e1-4f85-9d29-087a3f090a52",
        "cursor": {
          "ref": "b91bdb87-59e7-4c08-be9b-831155f3b6e7",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fd570de2-6fe0-41b9-b623-e36be75c6557"
        },
        "item": {
          "id": "1e844b26-82e1-4f85-9d29-087a3f090a52",
          "name": "identifiers"
        },
        "response": {
          "id": "0d624526-2d19-4037-984a-e68618f4c200",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28c3df0-5f62-42b2-b43d-12ef3a982abd",
        "cursor": {
          "ref": "b4dd4089-3ec5-4788-a3c6-f285c703f89d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "55bede33-ed7b-4240-9c1c-022fd9745efd"
        },
        "item": {
          "id": "a28c3df0-5f62-42b2-b43d-12ef3a982abd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "576e800e-ea34-4e72-8956-ab731251c4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50ea5fe-560c-44e4-9573-ac0002cd8b58",
        "cursor": {
          "ref": "b766eacb-178a-4e34-94ae-6bcc4be3fae7",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae43eb60-14d9-45cd-b8ff-0e403b5f61a9"
        },
        "item": {
          "id": "a50ea5fe-560c-44e4-9573-ac0002cd8b58",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7028d662-c59b-475a-aa65-df712f27a7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63f38ef-f34c-4155-8a85-8bfa2f722710",
        "cursor": {
          "ref": "b89cd225-b4e7-496f-ae30-387df81dca15",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b0cc34f3-d429-43e9-9abe-08e00d8c7335"
        },
        "item": {
          "id": "d63f38ef-f34c-4155-8a85-8bfa2f722710",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7c54c15c-7520-427d-92df-a75488fa511b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18583419-bc94-477d-b73c-0fecde708d58",
        "cursor": {
          "ref": "3c6da710-b69e-4c87-9bf0-553cf8e1fdc6",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6719ec94-b3b0-464f-aebc-25837f833366"
        },
        "item": {
          "id": "18583419-bc94-477d-b73c-0fecde708d58",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c309b63b-c7b9-4cdf-88ae-eaf38d3e6540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f337d2-1ebe-45d0-b7dc-a2e9b10754bf",
        "cursor": {
          "ref": "f54b6f4c-93ad-4040-9f33-e55c5395be8d",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9170f829-15f2-486d-9fe2-0ee67251a350"
        },
        "item": {
          "id": "40f337d2-1ebe-45d0-b7dc-a2e9b10754bf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "54ddb41c-137a-426e-9959-9321fe51cd1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d8e774-349a-4907-bc84-6e1356a9fa35",
        "cursor": {
          "ref": "187ee086-264d-4259-9ef6-dbf4af8bc91c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6b2dacb6-f0ae-4b5a-88a2-17bf7cce3188"
        },
        "item": {
          "id": "a2d8e774-349a-4907-bc84-6e1356a9fa35",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ad12746d-8a73-41cd-8141-487f4f9dd1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa53106a-df94-48fd-9380-0db3e972c747",
        "cursor": {
          "ref": "02370a40-3cdd-43f9-a00e-81de7ef9252c",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6acf9273-bbd9-43f3-a4b2-56b4f25d0bb9"
        },
        "item": {
          "id": "fa53106a-df94-48fd-9380-0db3e972c747",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f3c96e89-2376-4969-b15b-b90f53289609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb47d7c-0bc6-4a16-ad53-fd209bac06f7",
        "cursor": {
          "ref": "addaed45-6890-4f24-b3a4-42b205248f6a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "709270ba-2774-45e2-b7c0-a1888446048a"
        },
        "item": {
          "id": "dfb47d7c-0bc6-4a16-ad53-fd209bac06f7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a12bbeb9-6aab-403f-804f-0129caac97a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67dc320e-7220-47df-97ef-962f63f900ec",
        "cursor": {
          "ref": "215a1b31-d1cd-410b-8d00-d4c0c6d8bc94",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1c59f4ea-9863-4bd6-a54b-ee0deef20bf5"
        },
        "item": {
          "id": "67dc320e-7220-47df-97ef-962f63f900ec",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "58ce5ac6-b9aa-4abe-aed8-e2351b84bab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83d56a1-07fa-4df9-adb4-c62e6ef3daf6",
        "cursor": {
          "ref": "5126470a-70c3-4c2f-9c6a-d0234ba35cc5",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0e7fe9a1-7fb2-45dc-9336-71e48bae5c0a"
        },
        "item": {
          "id": "d83d56a1-07fa-4df9-adb4-c62e6ef3daf6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "acd7723e-3f22-4c42-aa65-b2c47c25cec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7041bd-0f49-47d6-bb60-39038a76d757",
        "cursor": {
          "ref": "e8673436-0920-4c04-8ca0-0aa1133dca34",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0f9e3e4c-e7b0-44e2-a369-01910068a7d0"
        },
        "item": {
          "id": "4c7041bd-0f49-47d6-bb60-39038a76d757",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "af6e2800-74fa-4148-800e-6119d88af389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c688de-d875-4096-9692-b93c85387ad8",
        "cursor": {
          "ref": "1fa9ad3d-3cdb-402c-88e8-3ecebbf2ede3",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d0dbd2fb-5494-48db-ab1c-50d91b0cfdd6"
        },
        "item": {
          "id": "95c688de-d875-4096-9692-b93c85387ad8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b8635e94-ce3a-4d88-8602-21adcfa6c666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8626801f-1bf9-48bf-826f-04198b7ad581",
        "cursor": {
          "ref": "44546970-f52b-4183-aa72-56de388f83c8",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bff6765d-fdc0-4b2b-b1e8-a2ec865144c6"
        },
        "item": {
          "id": "8626801f-1bf9-48bf-826f-04198b7ad581",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7f15b403-e1f9-4c23-82fa-71594d777420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41755155-4ae7-4c47-8593-60b7adb6c30d",
        "cursor": {
          "ref": "29dba468-03fe-4e67-8a03-08c5295fc36c",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2ad4c50e-8020-4955-9988-76e0e00025df"
        },
        "item": {
          "id": "41755155-4ae7-4c47-8593-60b7adb6c30d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0056bd55-5d23-47c3-9cfe-281fadf69482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876ca960-99c6-4579-bfd1-85725b4e793d",
        "cursor": {
          "ref": "26c52ed4-3970-4672-9038-84a76b4cb0fc",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e5ad3e87-5567-412c-8921-180ba6dc47f2"
        },
        "item": {
          "id": "876ca960-99c6-4579-bfd1-85725b4e793d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f38ea016-4b82-4000-9089-4a41905788a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d3cc66-cae8-4ee2-af2d-be02ae61b28e",
        "cursor": {
          "ref": "1b382414-fbb7-4553-97ff-4461f4872113",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2f609757-6ce6-4594-96f7-03787e209ebb"
        },
        "item": {
          "id": "f4d3cc66-cae8-4ee2-af2d-be02ae61b28e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a64ef1ff-ca8f-4b8e-a5be-817963b63c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9feb3735-7556-4f88-983c-7edc0e2d3ff9",
        "cursor": {
          "ref": "6becd045-2871-4150-8614-ad499d9d6e77",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "565905b4-42f5-40b4-92c3-150c4aa24a69"
        },
        "item": {
          "id": "9feb3735-7556-4f88-983c-7edc0e2d3ff9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5a00e435-fd29-4107-be18-56bea64b5c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ddc32e-9f44-40d6-82ec-13ce709b6a0c",
        "cursor": {
          "ref": "51ac2b23-a758-4d0d-b83c-961c3cafe4b0",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "052f1177-c5e4-4526-a9b9-c74fd4cd17e5"
        },
        "item": {
          "id": "59ddc32e-9f44-40d6-82ec-13ce709b6a0c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b72c6897-4880-467e-898b-5235c01e24c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ed71fb-93ef-4048-b65f-bf4b4ecd5ab1",
        "cursor": {
          "ref": "15282218-5afd-4f03-b705-3bb0671f9eaf",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9cb5a99b-aaf3-4ace-a3f4-48233742b694"
        },
        "item": {
          "id": "c1ed71fb-93ef-4048-b65f-bf4b4ecd5ab1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "242c45cd-bff0-4941-aaf5-2eab58bbfe10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c33f925-ef97-49d7-b0c4-9bbe4e7a04bb",
        "cursor": {
          "ref": "cd97e5d7-8bd7-411a-9c4a-e4f7f66a34d6",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1b328cfb-cb93-4831-a100-57c0c7150b14"
        },
        "item": {
          "id": "5c33f925-ef97-49d7-b0c4-9bbe4e7a04bb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "aa8bc38e-88c9-478c-82f2-01a130b18444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09440cdc-9343-4dae-bedc-94017a2d0cf2",
        "cursor": {
          "ref": "a68df178-67d1-4de1-b90b-65a2761ef2d0",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f9ae5738-9a7f-4102-b74e-cf597d7f362f"
        },
        "item": {
          "id": "09440cdc-9343-4dae-bedc-94017a2d0cf2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "da0e60d7-54a2-4a57-b7da-eedc3dcafd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664804d8-3486-46d1-a737-59b28a43252d",
        "cursor": {
          "ref": "e69ba917-7c69-4b9d-ade9-70adfb8531c7",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1adc30a8-54ba-4baa-910d-b8cae4ed3e9c"
        },
        "item": {
          "id": "664804d8-3486-46d1-a737-59b28a43252d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "40572710-2c0d-402f-8c86-42c8822d2fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893cab37-72f3-4735-b05d-b6545a89b333",
        "cursor": {
          "ref": "00944cc7-6a66-4b28-abe5-5ab43433767a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ab55984b-7091-4a52-b050-a73c4e0c0a7f"
        },
        "item": {
          "id": "893cab37-72f3-4735-b05d-b6545a89b333",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "51822511-d11e-48f0-ab99-cc7a60d79674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c569df-d451-4aa7-b588-cb1a94c8ee9c",
        "cursor": {
          "ref": "6f8edb32-c17e-4b50-a0b4-005ab9503cb6",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f466ef99-5eb3-44e7-990e-af9141a61e01"
        },
        "item": {
          "id": "61c569df-d451-4aa7-b588-cb1a94c8ee9c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ff209ef5-5424-4bd7-a95c-01c4e8d9d34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfeabb0-d598-4b1b-a20f-11d4959493ca",
        "cursor": {
          "ref": "e258b9cb-07fd-4950-9d3b-dcc0e1172494",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a02492e1-6600-42d4-b527-6f85f302ee90"
        },
        "item": {
          "id": "9bfeabb0-d598-4b1b-a20f-11d4959493ca",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b9e4d23b-b0a9-4551-be13-64e3b9c67687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1b6c04-57f4-4082-a0a3-d21813513eb3",
        "cursor": {
          "ref": "a081782c-7fea-4ae6-9c81-e8760dbabb2a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "59fdfc99-7b15-4933-8aa6-411a448b0489"
        },
        "item": {
          "id": "ce1b6c04-57f4-4082-a0a3-d21813513eb3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ec5768cb-58f0-4a13-abe1-619f70916d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6d9078-77aa-4904-af73-6d0867af7f86",
        "cursor": {
          "ref": "b68783c0-88da-4d78-a613-18e2ede9f587",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "15f91c50-0cda-4cd0-b090-7acbb06737c9"
        },
        "item": {
          "id": "6f6d9078-77aa-4904-af73-6d0867af7f86",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d9d73805-29e2-4a90-8ada-1bdc20151a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b66b778-5af4-4dfc-ada5-1140465efa61",
        "cursor": {
          "ref": "11f08489-a137-48b1-8e9e-7d082bf962c2",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "adf0005c-ba25-4d41-a5e3-94554776051f"
        },
        "item": {
          "id": "2b66b778-5af4-4dfc-ada5-1140465efa61",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ae47bb40-8979-41ef-bfee-6131f74c8b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae2f542-2839-461a-a927-a8f70d101a54",
        "cursor": {
          "ref": "8d978c75-24b6-4766-9e7f-a5bd44e931ed",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dcb7f107-b90a-476f-9c28-c50bd5e7bdc4"
        },
        "item": {
          "id": "7ae2f542-2839-461a-a927-a8f70d101a54",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "76a4099a-40c8-4b89-b603-786ebe1836a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643497bf-e408-4cd3-af98-6d0cefbea1ec",
        "cursor": {
          "ref": "797f1610-884c-45ab-8622-f171d79e9e46",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fec53993-0f2e-4483-b02a-01e400ff61f5"
        },
        "item": {
          "id": "643497bf-e408-4cd3-af98-6d0cefbea1ec",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "41228599-f047-43be-a27d-ec74cb4f8dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016f6553-fee8-4996-834b-f5204a84988b",
        "cursor": {
          "ref": "93c685ca-7561-4684-a7b7-6861a19dc2cd",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b98bc3f3-236e-4711-a6c2-6660ff819f0f"
        },
        "item": {
          "id": "016f6553-fee8-4996-834b-f5204a84988b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "31f5ed77-673d-47e0-b1c4-06fd2813e43d",
          "status": "Created",
          "code": 201,
          "responseTime": 580,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "46905a11-c4a5-4fa3-a315-7e47410f7ab3",
        "cursor": {
          "ref": "eaeff269-03b1-4bce-939f-f99a80e153bc",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a2784435-287e-4097-a7f7-9033b7c2e641"
        },
        "item": {
          "id": "46905a11-c4a5-4fa3-a315-7e47410f7ab3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "dc272997-c395-4fb5-9231-2ba7c85d75f3",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c2e58c9f-6102-4953-a078-0d445e485850",
        "cursor": {
          "ref": "3d572104-3b19-4cc1-a11e-da72927412f2",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "740d7325-1fea-4188-8f8e-2715a3b89ca1"
        },
        "item": {
          "id": "c2e58c9f-6102-4953-a078-0d445e485850",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "12278951-2be5-41ee-9e1f-6f9378d0233e",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3c3555ac-3e6a-46f1-818b-d0b96991f852",
        "cursor": {
          "ref": "56ba7c40-2fa7-41f7-afb5-d3c3493eb37c",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a559db81-6467-4bec-a730-3a533ee15f5a"
        },
        "item": {
          "id": "3c3555ac-3e6a-46f1-818b-d0b96991f852",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f1bfc7ab-aeb5-489e-b2c8-ccc951be07b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f09b78-710d-4eef-a76e-65081d8ea60b",
        "cursor": {
          "ref": "3610d77b-40a2-4835-ab4a-acbc1987b8e7",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "46bee1ab-2df9-4dcf-a013-24849209c465"
        },
        "item": {
          "id": "c3f09b78-710d-4eef-a76e-65081d8ea60b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bfe72a83-1f0d-4e73-bfc6-094de0ad8c2f",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "96501c1a-f546-418f-87fc-1731ef7f8af5",
        "cursor": {
          "ref": "2b9c13cc-451c-4ff9-a9f9-8e08d822a127",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f4355308-fe4b-4b8b-b67e-98a9f099f57a"
        },
        "item": {
          "id": "96501c1a-f546-418f-87fc-1731ef7f8af5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e8e36306-526b-4b38-930b-aac9cb1845be",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "80b86f33-676a-4ddf-9b9b-224b65751173",
        "cursor": {
          "ref": "e6df5521-edea-46a8-ab9e-be102e4b73a8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "62591df8-59d7-49fe-a919-abe5de29e807"
        },
        "item": {
          "id": "80b86f33-676a-4ddf-9b9b-224b65751173",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "183bc737-7f31-4842-ab2e-3c862338bfbf",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f157b805-f7dd-456e-b9e8-2a8c137b99d3",
        "cursor": {
          "ref": "149d7985-6561-4f0b-bf7a-029a17f68d0b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ed371633-8d9c-4d60-b726-ce1a245044e6"
        },
        "item": {
          "id": "f157b805-f7dd-456e-b9e8-2a8c137b99d3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "49c3a360-3d57-45d7-81a5-bd5c94690f6a",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e6a7c68c-de43-4067-b933-f46159f3821a",
        "cursor": {
          "ref": "080245d6-5e1c-490d-9469-837ac61d4adb",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f4d4f809-312a-40e6-9656-a6f19c905d9c"
        },
        "item": {
          "id": "e6a7c68c-de43-4067-b933-f46159f3821a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6e8cdb8e-5e7e-4a6a-bdd7-293399843777",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c13fbfbb-ea01-42f7-9656-cce441545c73",
        "cursor": {
          "ref": "540453e6-af6a-416b-ad65-ed2b58dc3bf0",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7e134f47-caa4-4961-ab32-26b81d75c782"
        },
        "item": {
          "id": "c13fbfbb-ea01-42f7-9656-cce441545c73",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4fde7433-aec8-445d-8d4a-3a7fb9c24fbe",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "491edbb1-1d18-4ff9-956e-884fdae92cfe",
        "cursor": {
          "ref": "f126cfc9-ff78-42fb-9859-56a4c44b265d",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "008fd067-97e7-4903-a1d8-468ba43ad438"
        },
        "item": {
          "id": "491edbb1-1d18-4ff9-956e-884fdae92cfe",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8ca5aab2-3464-4e54-9028-59f70e0bf63b",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4f7956ae-0ad3-4f0c-b20d-12d9e09be4ce",
        "cursor": {
          "ref": "7003b9d7-04e7-4fed-bdce-623f28bb56a2",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "47c86870-a719-452a-8603-6e2c581832fd"
        },
        "item": {
          "id": "4f7956ae-0ad3-4f0c-b20d-12d9e09be4ce",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a43e7080-9521-489c-940b-468f641e6888",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "82392bcf-78cd-4b46-8951-d96efbb71c09",
        "cursor": {
          "ref": "f8857073-6634-4551-82af-4d62531049bb",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "805fe642-ac17-4ae5-96b6-7c971d851b4a"
        },
        "item": {
          "id": "82392bcf-78cd-4b46-8951-d96efbb71c09",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "864d1cb9-b1d7-44a0-8174-0873d4008444",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8d77771a-0761-438b-862f-af647d2db89e",
        "cursor": {
          "ref": "cd472540-b722-4aa6-be6a-33ac16639b35",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7997b980-7f1b-4792-83ef-a792a90171a0"
        },
        "item": {
          "id": "8d77771a-0761-438b-862f-af647d2db89e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "87db12c6-01aa-4aca-b06f-f962c7db675a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ea333f-08f7-4b0c-8ba0-21023179ec5d",
        "cursor": {
          "ref": "4950c665-69e4-4846-84aa-a351aaf71157",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f5bf3548-0827-4833-bbd5-5c43b020fcfa"
        },
        "item": {
          "id": "91ea333f-08f7-4b0c-8ba0-21023179ec5d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "178d0faa-5be6-4402-bc5a-0803dbcf66e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a556191-433a-4eee-8904-7a9850460062",
        "cursor": {
          "ref": "4b2210c3-a6d6-4e03-8c86-dd51d4c18dd6",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5286b62a-4ae7-4802-9fcd-12dbe03700f0"
        },
        "item": {
          "id": "9a556191-433a-4eee-8904-7a9850460062",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6c2239e9-d039-415a-a550-5730060e235d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41119311-4642-4093-987e-c41876503098",
        "cursor": {
          "ref": "1b12a651-5616-46f5-bd9d-93ab967c8677",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aff8ed17-4224-43c7-a26f-44e297e11a75"
        },
        "item": {
          "id": "41119311-4642-4093-987e-c41876503098",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ac74d625-1cc2-4dea-82b9-487682c75957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c33de0-72c5-47c0-9755-9b4bf4efab65",
        "cursor": {
          "ref": "aed74c20-5662-4379-9c68-6b8b60071111",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9f851640-5fae-402e-80a8-c80fb4793eb7"
        },
        "item": {
          "id": "e1c33de0-72c5-47c0-9755-9b4bf4efab65",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "888069b3-d95f-4f74-aa2a-5b91678a3269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ede65db-3015-467a-93e1-b0aaa004088d",
        "cursor": {
          "ref": "4ff44bbf-4d76-491c-9de8-b08a85ea2a8a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9a0da024-767c-4ae8-b66a-31a4aead1488"
        },
        "item": {
          "id": "9ede65db-3015-467a-93e1-b0aaa004088d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "eda679bf-65dc-4334-beab-1ffa730c0663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d84901-a7f9-4775-874a-ce6779555b03",
        "cursor": {
          "ref": "8b461ec8-771f-4c7f-ae3e-6bcb812f25f1",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "147d9c27-c22c-4f89-a5f1-4944f412c65e"
        },
        "item": {
          "id": "a6d84901-a7f9-4775-874a-ce6779555b03",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d1c897ec-a46c-4b45-9bd0-9efed1cc2b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1242f27d-8125-4c59-b782-8556499e664b",
        "cursor": {
          "ref": "591990e2-c0b8-4ff9-a04a-bb624a1e5db4",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a1ce10e9-93cb-4a8a-aff9-29c0ac1c5b6e"
        },
        "item": {
          "id": "1242f27d-8125-4c59-b782-8556499e664b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "347358b2-0842-460a-a0d6-2e1091588297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab2e530-b222-4765-85a7-be9bca4abb2b",
        "cursor": {
          "ref": "20c9ac90-ee2a-4907-a047-bfe9047e58b6",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "122dc23d-6365-4a76-922e-86fc676fcdce"
        },
        "item": {
          "id": "7ab2e530-b222-4765-85a7-be9bca4abb2b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1c5cb187-869d-47dc-8141-aa0045d39263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e431710e-a12d-4fde-9463-7ee2a487addc",
        "cursor": {
          "ref": "a1332d19-52fe-4dc9-bdf0-52954be50d63",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3745023e-dd0b-4b4a-92bf-c0ba80376799"
        },
        "item": {
          "id": "e431710e-a12d-4fde-9463-7ee2a487addc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "34a3e22e-da24-4958-9486-06e770739311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fbad82-1e89-4851-911f-541a2643f92b",
        "cursor": {
          "ref": "14fd1e13-a813-48a9-aefc-afdcad57932b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e33d96ec-1e3b-4216-b0e5-0b651ef30db5"
        },
        "item": {
          "id": "99fbad82-1e89-4851-911f-541a2643f92b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d09dd7bf-7489-4d9f-b1e4-d4fc64669796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e419cff-7154-44d6-8b4a-6d3b6f1b44a6",
        "cursor": {
          "ref": "16f3c373-ec73-4a4c-bfb2-f440ae7b579e",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0133408d-4e1b-4f56-847c-4f7b4a9af48c"
        },
        "item": {
          "id": "7e419cff-7154-44d6-8b4a-6d3b6f1b44a6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d8c4716a-d915-4c57-add3-b1a61e81ea24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536453fa-ec6a-4922-8add-66272ca7688a",
        "cursor": {
          "ref": "2a775f52-c2ce-4cbf-996d-cbac64d05ff2",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "028c48ba-816a-41f4-b197-5bd6d181d157"
        },
        "item": {
          "id": "536453fa-ec6a-4922-8add-66272ca7688a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4eb3b9d4-d2c7-4b3c-b984-9ca70bc80b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78309ee9-0a55-42d7-9ce2-790199689925",
        "cursor": {
          "ref": "073a55ce-7c56-461a-8226-03fed6f2c726",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ee5d9c7f-31e6-447d-b17a-fa3bea73a645"
        },
        "item": {
          "id": "78309ee9-0a55-42d7-9ce2-790199689925",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "04cf94ed-ee13-4e54-a681-72ba013a2045",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d30a75bc-b6bb-434e-8432-c3dc3fa6364e",
        "cursor": {
          "ref": "18c4dd12-5cc6-42c5-b11a-029230fdba4f",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a72dc714-2ade-454d-89ac-9292c54c9cf4"
        },
        "item": {
          "id": "d30a75bc-b6bb-434e-8432-c3dc3fa6364e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7008602e-00a6-4903-bb4c-c3c39615c98b",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "642aac8f-daed-40d6-952c-819b0806d68f",
        "cursor": {
          "ref": "07cd2ace-4648-4287-bb74-ab374c1c77e6",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ab8ca96e-4965-47c7-8554-b6705a9e3f46"
        },
        "item": {
          "id": "642aac8f-daed-40d6-952c-819b0806d68f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "241fc255-300b-4bc1-bf73-8368389cd98e",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7be1ff32-51a4-4b70-ba6f-2daf17f91bc1",
        "cursor": {
          "ref": "c7a345ec-0dda-45cb-81b5-6b073d7924d3",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6274db4c-630f-459d-a342-9ce2c39f1069"
        },
        "item": {
          "id": "7be1ff32-51a4-4b70-ba6f-2daf17f91bc1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7eac15a6-8814-47be-9299-2ffacfa1bdb0",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "dea9aaf5-275a-4802-94ae-51bc9ffc7be4",
        "cursor": {
          "ref": "2d681b6f-7c0d-48f6-a593-167f04810e98",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a8390b5a-b9aa-41c4-a04f-c5c976fd270c"
        },
        "item": {
          "id": "dea9aaf5-275a-4802-94ae-51bc9ffc7be4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4bb6b646-b09f-4ad0-9539-8d66fa0b67f0",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "da12c770-bb9e-42ba-9a17-36fdbfc4cd10",
        "cursor": {
          "ref": "7d258da2-a702-43b3-a368-f70020815fa6",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2023ea97-f098-4cde-a486-faa81dc869cd"
        },
        "item": {
          "id": "da12c770-bb9e-42ba-9a17-36fdbfc4cd10",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "432e1ffb-8208-4713-9cf6-e38073e6dd25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d440d1ef-be6e-48be-90ca-30dcdcc83ea7",
        "cursor": {
          "ref": "0f88cca0-dd31-4189-9c59-d5bc30bad4d8",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5fdcbbf8-4005-4100-8719-43b558e9112c"
        },
        "item": {
          "id": "d440d1ef-be6e-48be-90ca-30dcdcc83ea7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ba1a94be-6a7f-496b-9100-1f78bdeceaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73814d66-18b9-4e63-b9da-179777413b85",
        "cursor": {
          "ref": "7b3bdd7d-1d17-451c-9b00-fcd23d8a9404",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b9f016de-3211-4274-9eb3-614d59e6ce3a"
        },
        "item": {
          "id": "73814d66-18b9-4e63-b9da-179777413b85",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "838b93bf-a5f8-4e38-a4d3-7a538b936cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccef0a2-d4a1-414a-bd66-fda03aff0f23",
        "cursor": {
          "ref": "ffa36316-5fc0-42fc-b015-25cf7756aa16",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "99f6dc1e-a1cf-45f9-b3b1-e98d78eb5994"
        },
        "item": {
          "id": "5ccef0a2-d4a1-414a-bd66-fda03aff0f23",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b21e6933-94b0-44a9-9eea-11cd5880e9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e4d85f-eaff-4fa9-9c25-6ec618b552f5",
        "cursor": {
          "ref": "0f98aab4-fd80-41c9-b909-97c9a95f9f0c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6df5e7ba-b881-4ca3-86c8-41416ca36fb9"
        },
        "item": {
          "id": "46e4d85f-eaff-4fa9-9c25-6ec618b552f5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "694db867-105b-4bc0-87ee-c548d0d357d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fa8f00-3703-4fa0-b712-f69b79ae0e34",
        "cursor": {
          "ref": "8129c7bf-d05c-4986-bddf-83bb0cf2e7ea",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "162dd5f9-02f8-4ba1-9693-2163b7f4e854"
        },
        "item": {
          "id": "a5fa8f00-3703-4fa0-b712-f69b79ae0e34",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ae26cb4f-ff90-4c96-bb21-6e51bebe404d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fe6b8c-23c6-44b3-acea-a7e56a8a1535",
        "cursor": {
          "ref": "2fdd0e7d-06e0-4aec-86d3-12bae689caf2",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bc12a279-13df-42da-a8da-5f2693734605"
        },
        "item": {
          "id": "c0fe6b8c-23c6-44b3-acea-a7e56a8a1535",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "70d82776-aa21-495e-b884-27dc7111f632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790b4fa4-ca33-43dc-a24f-4f24c1f62515",
        "cursor": {
          "ref": "e0e3ab58-4e62-4f22-a234-66d0ab044f7a",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "33da1708-6bd6-45f8-8017-5b9d7e9221fa"
        },
        "item": {
          "id": "790b4fa4-ca33-43dc-a24f-4f24c1f62515",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8ada4dff-6ec0-43d6-bb3f-3d01ed182e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b95768-272f-4b14-a214-3564a593c832",
        "cursor": {
          "ref": "6cc15daa-ebf1-4b07-8781-807ebaf927db",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a2394269-4487-48d2-8ead-3b483c320f99"
        },
        "item": {
          "id": "56b95768-272f-4b14-a214-3564a593c832",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "780f39e9-db5d-4e6c-a529-3fc1fbe9155d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8bca67-1a8b-48cd-8bf3-715585735e10",
        "cursor": {
          "ref": "c73bcf35-adcd-46ef-aa6b-069b2c8afc5e",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "53e0131a-06cb-4eef-9619-a67c3c077fe2"
        },
        "item": {
          "id": "fa8bca67-1a8b-48cd-8bf3-715585735e10",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "afe59aea-afd0-40d9-83eb-1808b8b299a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d910505-19f4-4a66-9077-7e70aea39f08",
        "cursor": {
          "ref": "9fe38bfc-2aa3-4465-a4bb-bec81af5d7ad",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "aed02ed2-c4f4-4630-8044-1fab8e936c95"
        },
        "item": {
          "id": "5d910505-19f4-4a66-9077-7e70aea39f08",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "85198c89-4e7f-4a46-84bf-3bdcbc721cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f209ef72-892b-40d5-a9c7-6217bec4ad35",
        "cursor": {
          "ref": "9518a480-5949-4a1f-9b0c-21e8c0b57095",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6090e121-b99d-48c0-af2b-f1f97db04853"
        },
        "item": {
          "id": "f209ef72-892b-40d5-a9c7-6217bec4ad35",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2fa6d654-ba94-4b23-93d9-7fba9669e35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa0ed84-254d-4829-b6d8-c933ff71468f",
        "cursor": {
          "ref": "682f6db2-85bc-4657-b987-a7b472f4b772",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31a6642f-0145-44ee-91e5-b7d592efe189"
        },
        "item": {
          "id": "8fa0ed84-254d-4829-b6d8-c933ff71468f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3cb6f83b-79c1-47da-93a7-d68b4f7bac72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d16f5cd-0f73-4236-8d19-f30f23426186",
        "cursor": {
          "ref": "9a44063e-dbb3-4232-85e6-9ed582c54e76",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9204a372-7b78-4aca-881c-bb485dae5033"
        },
        "item": {
          "id": "6d16f5cd-0f73-4236-8d19-f30f23426186",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8e2f3581-15ff-4b98-8af0-c5cf96d64f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a1e6c9-e5be-4b5e-a47a-c5138ae30297",
        "cursor": {
          "ref": "1452b550-1667-47c7-8770-087c7903efc6",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e8d9ae4a-8d47-4f51-9d0d-fd45e7743869"
        },
        "item": {
          "id": "99a1e6c9-e5be-4b5e-a47a-c5138ae30297",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1f427e15-1b43-4614-8ebf-ab2b13b83b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5697844-6fe0-4445-81af-74f6aa9b7f48",
        "cursor": {
          "ref": "2fd74940-668a-403a-a75b-480d1d0c46c9",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "dfab4af7-29da-4f9a-90bd-21458d5b94ac"
        },
        "item": {
          "id": "e5697844-6fe0-4445-81af-74f6aa9b7f48",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3e7779e4-af45-419b-be00-c22fc5ed0afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12f1f24-2899-419c-8ba0-f6583cef551c",
        "cursor": {
          "ref": "820a3bdd-5813-43bd-b948-ea01dd082bb3",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "dd77d53d-7a5d-4ae3-8bd9-459040e5bb8c"
        },
        "item": {
          "id": "c12f1f24-2899-419c-8ba0-f6583cef551c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ef4de657-e85a-4bc9-8e49-37ff95ef8850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c37b634-b772-497d-8f9d-c04bf9e10b3a",
        "cursor": {
          "ref": "fbb94160-3bf7-46fd-9e2a-8d6a9bbbcb10",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "980c93e7-1cd6-46ea-8bfd-0c165ba1b445"
        },
        "item": {
          "id": "9c37b634-b772-497d-8f9d-c04bf9e10b3a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b75b181b-395c-4823-96f1-bf4040a9aae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f15b06-883c-435c-b4ad-47ddfcc91361",
        "cursor": {
          "ref": "5d8aa88e-9fc4-438f-bfd2-495823795c13",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "68ecf9f9-1e98-4e01-9a20-4d2a9bc71fc2"
        },
        "item": {
          "id": "90f15b06-883c-435c-b4ad-47ddfcc91361",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2f9be00d-9338-4a46-a37d-1f5623d69315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444a19db-ffbf-4537-b1aa-38ad880a2c17",
        "cursor": {
          "ref": "3f8d6392-4e14-4606-94c2-1e746d154d6a",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0742e2b2-e9b1-4796-a43e-e33e4a1d6c1a"
        },
        "item": {
          "id": "444a19db-ffbf-4537-b1aa-38ad880a2c17",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b950dd80-f67a-456d-b012-5e3c0d3438d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b7990f-3f6e-4af5-82f6-79f49e8c31be",
        "cursor": {
          "ref": "99ff0b06-3a96-429e-a5f0-7a6cf3227cb4",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "95e3cbf3-2759-4332-8c2e-b5f7c88b7930"
        },
        "item": {
          "id": "d5b7990f-3f6e-4af5-82f6-79f49e8c31be",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ee393a5e-95bc-47cd-b5ba-435ecb231242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa18dcfa-4f80-4dcd-914f-138f709e5165",
        "cursor": {
          "ref": "389e8bee-0755-4804-a3b3-2b2dd71f03d6",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0d949e67-4980-43c8-98c8-4222e0e55de2"
        },
        "item": {
          "id": "fa18dcfa-4f80-4dcd-914f-138f709e5165",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "956542d5-2ef8-4f02-be38-66d9387a4373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42e9dfc-287d-4d78-833b-65b71991684b",
        "cursor": {
          "ref": "49a0751c-3657-4a12-af65-5e5a6b54e74c",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8ff1cc35-d478-4369-aa5b-4247c9cdf2a9"
        },
        "item": {
          "id": "c42e9dfc-287d-4d78-833b-65b71991684b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "92effcea-5c4a-4952-8d56-62b2762b87e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8689dca3-65d3-4df6-afc2-5a9572a344fe",
        "cursor": {
          "ref": "befa118f-7462-4dcd-9a6e-cddda37cf1b8",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b6da26f1-564c-476f-a268-ef8de24b5bfa"
        },
        "item": {
          "id": "8689dca3-65d3-4df6-afc2-5a9572a344fe",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "922d3e29-5f91-4071-b015-557383947904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9782270-b2d0-4c08-9263-87d6e52b5601",
        "cursor": {
          "ref": "685bc119-1b87-46d6-b1d2-b725324bdef4",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8c802fe4-926e-4871-9275-f188ec8f004d"
        },
        "item": {
          "id": "a9782270-b2d0-4c08-9263-87d6e52b5601",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5d0f6f18-4a5c-4b2a-a76e-b75344edf89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e024fdd-cc7e-4e80-b989-8a3a5aea2fd2",
        "cursor": {
          "ref": "3555fa47-48da-48eb-b547-9283e47fd596",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5a014472-2dbb-4e46-b770-454f45bb8a8e"
        },
        "item": {
          "id": "5e024fdd-cc7e-4e80-b989-8a3a5aea2fd2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cf03fa0b-f8b1-4f86-8ad7-f191705fccbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba7fa5a-2e95-4057-9b20-5148dd448397",
        "cursor": {
          "ref": "4c48401c-a9c2-4025-935e-d402c052762a",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "193c15d4-f518-411a-91e1-f6d5800984dd"
        },
        "item": {
          "id": "6ba7fa5a-2e95-4057-9b20-5148dd448397",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a679cfd1-f7d1-4f77-9528-a2d0892487ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15dafe30-bb83-4dbb-afc8-6f582d3c8c39",
        "cursor": {
          "ref": "53591253-6c6b-4cfe-9845-1e9463e00ab1",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "23719055-c855-463d-8b55-9b1fd67ca703"
        },
        "item": {
          "id": "15dafe30-bb83-4dbb-afc8-6f582d3c8c39",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f9310389-ba4b-4d91-ae39-0f446188b5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848ea2e6-852f-4a9c-801f-9ab5c2baf469",
        "cursor": {
          "ref": "c75611f2-a04e-41dc-a295-30adc9a6cd99",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1e7ffe5b-6e37-4408-b4ba-de49fd952e8b"
        },
        "item": {
          "id": "848ea2e6-852f-4a9c-801f-9ab5c2baf469",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8ee2bdae-d741-4f26-92d4-b99adf073872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de30107d-90f4-4531-8eef-0ee07549c5f3",
        "cursor": {
          "ref": "37263f9f-7766-4d31-b348-a16b27a72bb1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7ddc2b60-40a9-4b34-8d58-12686c2856fc"
        },
        "item": {
          "id": "de30107d-90f4-4531-8eef-0ee07549c5f3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7f502673-9108-43ee-8bad-c1899d914d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209a36f6-573a-49a3-b817-78cd94245619",
        "cursor": {
          "ref": "095b7690-49fb-4e30-9e7b-cbd56cb1944f",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1efb5cab-d00d-4277-a5cf-8ef44c5d914f"
        },
        "item": {
          "id": "209a36f6-573a-49a3-b817-78cd94245619",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a9681f1b-5c9a-4575-8446-4ba998ed6ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b5f1b4-7f4c-44ae-a52e-4786c4b3df78",
        "cursor": {
          "ref": "80b42c83-ad36-43df-836c-2e304a2122f6",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6004b32a-3173-4ea0-825b-f50a9f9d52b8"
        },
        "item": {
          "id": "58b5f1b4-7f4c-44ae-a52e-4786c4b3df78",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d70c1b28-0c9e-4ac2-9d59-3cbfd1872df7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af70c17-41f0-4ae6-9eb7-d550cee61fd8",
        "cursor": {
          "ref": "a7eaaf6e-9edc-4a5e-9f5b-a5d483ab2fb2",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4d8ff1f2-8730-48fe-9c6e-b0a8693f48e5"
        },
        "item": {
          "id": "1af70c17-41f0-4ae6-9eb7-d550cee61fd8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f1ee022c-036b-4f3e-9473-0e442b84b102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "22c8c14c-96ad-4bea-83e9-0a2ee3e158b0",
        "cursor": {
          "ref": "e4cfe0d0-5a71-4f81-b7e9-1586cff3a4c0",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d5dfc341-350a-4294-8313-8f20a38b5dc6"
        },
        "item": {
          "id": "22c8c14c-96ad-4bea-83e9-0a2ee3e158b0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4d3844dc-c293-42f6-9e72-8e4962d8b62e",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "428a3821-3320-44c8-9f35-86f421a4da21",
        "cursor": {
          "ref": "85a3dfa3-69aa-43d8-bc51-4613d0fabbce",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "54fea79c-19c3-4ed1-a971-7848252e5b17"
        },
        "item": {
          "id": "428a3821-3320-44c8-9f35-86f421a4da21",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ba7a9648-53d1-4165-9599-4cd54c634d38",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abdecaf-3e98-42b4-9b94-f8dd0a9d6441",
        "cursor": {
          "ref": "4566b47c-c21e-4fb2-a797-690dbefe33d7",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "262bda0c-64a6-4801-8adb-ff8363a4e18f"
        },
        "item": {
          "id": "2abdecaf-3e98-42b4-9b94-f8dd0a9d6441",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a099888f-7413-457a-83f5-dc01b4bb29ef",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07beabc-37f6-4373-a827-804eeb2f3ebd",
        "cursor": {
          "ref": "534c536e-c9f6-4c28-a89b-d0e7a08d8742",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "79f0a4ac-b4c7-434e-ba15-8693db2054ff"
        },
        "item": {
          "id": "e07beabc-37f6-4373-a827-804eeb2f3ebd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4bf68076-38b7-42a9-91c7-849a8c1cc72b",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af3506f-f610-4cc9-b203-c6c17a77d596",
        "cursor": {
          "ref": "47c02683-fb8e-41f9-990f-5cceba3938e3",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bbf0b158-f871-47ce-afb6-90b83b06f382"
        },
        "item": {
          "id": "4af3506f-f610-4cc9-b203-c6c17a77d596",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "797c7e9b-af67-4d52-99d9-f9affb676c4e",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-06T00:34:17.139Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-06T00:34:17.139Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b9e7cf7d-fcfb-49f2-a8dc-2802d7482f76",
        "cursor": {
          "ref": "6a6d861a-e814-41ce-9749-49e4e83797c9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "58088ac7-dd4d-478d-aca1-f6a4975ededc"
        },
        "item": {
          "id": "b9e7cf7d-fcfb-49f2-a8dc-2802d7482f76",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f40a8e3c-3819-4612-9c54-c5845b7382c1",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2bc8b8-409e-434c-b10a-7e4a1162c32a",
        "cursor": {
          "ref": "fe3d9e5d-2b13-4dba-b8d0-89a84c0109ea",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "724f41af-ca01-4605-b885-5202509a623a"
        },
        "item": {
          "id": "ac2bc8b8-409e-434c-b10a-7e4a1162c32a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "50f6384e-2e8c-48e4-91e4-19ef7c53dd20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c2983a-9535-45b5-9be2-d08c062e2298",
        "cursor": {
          "ref": "292fd96c-2b99-4034-a3cc-d4d8afbdc637",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4a067a98-3978-4780-be8d-f46c7e91f01d"
        },
        "item": {
          "id": "11c2983a-9535-45b5-9be2-d08c062e2298",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5d004bd3-5c3b-4137-ba63-9fdd7223b40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be04ea81-d73c-4f4d-90d3-605e51541820",
        "cursor": {
          "ref": "f05a7a4c-cd7f-40d2-9d87-c6667d4f0c69",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b355ef90-21bd-4688-8125-b323a15ef621"
        },
        "item": {
          "id": "be04ea81-d73c-4f4d-90d3-605e51541820",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "68f7a216-4f26-4848-812a-634729de51a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d07b034-3b7a-4cd4-9993-c6c1594b58e7",
        "cursor": {
          "ref": "4f57a933-8f46-452f-b58c-1b8a53dd07cf",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "88bf3a32-0a01-46ea-aebc-3262bc04cb0f"
        },
        "item": {
          "id": "3d07b034-3b7a-4cd4-9993-c6c1594b58e7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dd6e7f2f-2911-4113-b15e-f823ae505f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a4f3e6-3eb0-49f3-8236-72ba4685bc6d",
        "cursor": {
          "ref": "89d47e5c-808f-4691-82ea-6aa002d56172",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ea124e49-aa55-4b3e-be4d-880e5f9bfbcf"
        },
        "item": {
          "id": "d5a4f3e6-3eb0-49f3-8236-72ba4685bc6d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "745c9ad3-3164-4483-a171-a873dc4e3c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9cac00-e204-45f4-8e5a-0ab5b197f103",
        "cursor": {
          "ref": "103db507-3e82-499b-a024-0790c826c77f",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7bf02a21-4e76-47b3-b981-3cd6a4600740"
        },
        "item": {
          "id": "cd9cac00-e204-45f4-8e5a-0ab5b197f103",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9db06eb9-f199-4d3a-9be8-698f45e2aad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d251dd0-5592-4850-b094-04a15deaac63",
        "cursor": {
          "ref": "671e9423-6cf6-46c1-9709-198f70d83591",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cfe85d7a-2571-4aa4-92d0-feb41a5a5d47"
        },
        "item": {
          "id": "6d251dd0-5592-4850-b094-04a15deaac63",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6d90dae8-4f92-4a46-b128-c16be5e10208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef0de9f-6812-4cd6-bb07-97b93b51e5bc",
        "cursor": {
          "ref": "2f87819b-394f-4559-a741-730acf2e2eb0",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bdcd7fec-6fe0-4e4f-a903-1f7d12db2da0"
        },
        "item": {
          "id": "2ef0de9f-6812-4cd6-bb07-97b93b51e5bc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ffa0ef02-e182-4370-aa10-e067bd1bea8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87853939-27a6-43a2-9f65-1ccdb84e091c",
        "cursor": {
          "ref": "fc32e552-36f1-4527-a696-3acb094c36c1",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "70f5b1d0-0171-4866-a89d-d0049736d050"
        },
        "item": {
          "id": "87853939-27a6-43a2-9f65-1ccdb84e091c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "750fc642-ff22-4586-8359-2c7c36a30264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a87fd57-d338-4f63-9314-b8cc265c7e49",
        "cursor": {
          "ref": "7a03c12a-69c9-44e2-a9be-2c974c0959ad",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e27ec47a-f92d-4b37-8c29-460d789ca231"
        },
        "item": {
          "id": "3a87fd57-d338-4f63-9314-b8cc265c7e49",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6630ffff-9152-4eac-86a2-ada4d702756c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9affaaa4-7bdd-44d4-b07f-40a0102e8a02",
        "cursor": {
          "ref": "d00e2df9-0981-4e31-9fef-200093e3c248",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "89b61e21-cf87-46cc-8f89-d2a1b3b16f68"
        },
        "item": {
          "id": "9affaaa4-7bdd-44d4-b07f-40a0102e8a02",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "985807c7-b414-453e-bec2-0cc09f829f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6409039e-6e99-4cee-90f1-3b1979163e48",
        "cursor": {
          "ref": "fbab9f0b-48da-46cc-8cbe-8675b0db7c92",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "916caedc-1bb6-493b-91dc-dc0a148f9085"
        },
        "item": {
          "id": "6409039e-6e99-4cee-90f1-3b1979163e48",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9c3cb3b5-fd4a-4b90-a2d0-1bcd0c9c541c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6ebaf7-8d41-4ec6-ac0e-7e9703027a1d",
        "cursor": {
          "ref": "2b2e383d-2123-4679-bbdf-7f0543f3f552",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "98abe6e7-d114-4f94-af7d-691d24d038d4"
        },
        "item": {
          "id": "6c6ebaf7-8d41-4ec6-ac0e-7e9703027a1d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8ef8d7aa-5a55-4313-9ad1-8d46d355cdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2708f6b0-53eb-4d0f-a59c-2ae0b7ecdb63",
        "cursor": {
          "ref": "3b93cf4c-e971-47a3-8c5c-efb740061331",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c18fc305-0228-4e12-a8a0-a95f86abb1c2"
        },
        "item": {
          "id": "2708f6b0-53eb-4d0f-a59c-2ae0b7ecdb63",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0ea6a358-7f7d-4942-acbe-c036430bed08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "077e8904-7daf-42a0-85d7-95ef173084c8",
        "cursor": {
          "ref": "25228fd2-7c5e-42b8-864f-5f8687956576",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6ce17ba2-603e-4c23-bcd0-c43d517ba24b"
        },
        "item": {
          "id": "077e8904-7daf-42a0-85d7-95ef173084c8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cf89ca12-ce9f-47b7-82f3-04457dec0bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1522bff0-b063-4cd6-8c41-ccb94def248b",
        "cursor": {
          "ref": "9d1b67e0-1adc-4ec7-b103-4b53424d18c4",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "68afdcc3-4f1f-4147-9c07-717604de2c3d"
        },
        "item": {
          "id": "1522bff0-b063-4cd6-8c41-ccb94def248b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "75eb8506-acdd-46ed-bda7-f9b3b2b6118c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fceb4a18-396f-4d75-86d0-28edac7fbbed",
        "cursor": {
          "ref": "23c7018a-4409-4e77-a1cf-b2b347a446a2",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e13d4904-41bd-4853-846b-5220fe948d12"
        },
        "item": {
          "id": "fceb4a18-396f-4d75-86d0-28edac7fbbed",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "992996df-5d51-47b2-8b32-8d02a60020d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a18015-ec57-414c-8f2a-f695eb55ce14",
        "cursor": {
          "ref": "77a00822-deb4-4215-a85d-41c0beb11a21",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "51470fb9-7a84-404b-9f85-5e92bde88ef1"
        },
        "item": {
          "id": "81a18015-ec57-414c-8f2a-f695eb55ce14",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "176a2a6c-826f-46c4-9894-09ef0ba21cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e129fdc-9622-48f9-b463-5d638d259f09",
        "cursor": {
          "ref": "a703c127-7e53-457e-9d06-7c81b487e051",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "847e8b28-f6dd-4ff3-a519-fd9647c364f2"
        },
        "item": {
          "id": "1e129fdc-9622-48f9-b463-5d638d259f09",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2c491598-c48c-4c5a-aa72-5237f2d3e5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ae121e-efba-40e5-8c1a-660fd2fab0b7",
        "cursor": {
          "ref": "72989807-97e0-4919-8e32-909f6c64955d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5b897e1e-ad13-451f-b574-a3fd4ef75ae0"
        },
        "item": {
          "id": "a6ae121e-efba-40e5-8c1a-660fd2fab0b7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "aba1d5ed-ffc3-4e58-9483-e4a4a88d0743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df586f97-968b-473d-b009-b61cd81a6b8c",
        "cursor": {
          "ref": "98bc1845-5be2-4939-a995-bd0cc386e25b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "32394223-b069-4ef7-9eb9-624c6ed86825"
        },
        "item": {
          "id": "df586f97-968b-473d-b009-b61cd81a6b8c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5ced1bd3-6431-4c82-9d27-9f8f70961724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3375def-0ab1-45da-bbce-1782f1da2942",
        "cursor": {
          "ref": "aabdb2a2-8ddb-4c29-a96e-e6f84606c0d2",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "edd7323d-8f35-43ad-aebf-28daff3ab896"
        },
        "item": {
          "id": "e3375def-0ab1-45da-bbce-1782f1da2942",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dfdb4886-37c3-4d7a-96f7-4b9a86b4c88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63610ca9-726f-474f-a857-86df35068dfe",
        "cursor": {
          "ref": "22138e79-ec00-4ca7-a138-c03a7bd9abbe",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0dbf56c9-2be7-4e0e-917f-142dbf0a8c08"
        },
        "item": {
          "id": "63610ca9-726f-474f-a857-86df35068dfe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8da9f064-bcdf-403b-a40b-ee04235f3029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ffcb12-9637-44cb-9b1d-0074dc873eca",
        "cursor": {
          "ref": "473341ae-95da-4911-9d33-6cf32a0ba940",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9d569955-58b7-4ce7-bece-6ee843c335be"
        },
        "item": {
          "id": "f0ffcb12-9637-44cb-9b1d-0074dc873eca",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "42449381-091d-447d-a511-957bc8686a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72dc4ace-a7d9-49c5-8321-d9c5e12f85e0",
        "cursor": {
          "ref": "b8db67d4-5007-4382-950d-23d46f5c5cec",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6aa5eda5-687c-4ed2-85e5-bc510fbbf15d"
        },
        "item": {
          "id": "72dc4ace-a7d9-49c5-8321-d9c5e12f85e0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dc8f9441-832c-4f5a-9e43-0a61ae6c2adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bee2bf-7844-4635-9f36-e4d500fa932d",
        "cursor": {
          "ref": "ce9b839a-ff39-48b4-83ac-2dad2428260d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3f46fb6c-f585-45cb-b177-83d91fa88e3f"
        },
        "item": {
          "id": "62bee2bf-7844-4635-9f36-e4d500fa932d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "751217fc-02ee-41db-9dfb-8d118a856954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f445d0-b64e-435b-9640-dbc22c9454ce",
        "cursor": {
          "ref": "72042420-6e3b-4db7-b03a-726444d507ff",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "477302fc-b9a8-4106-8897-5730acb60942"
        },
        "item": {
          "id": "d5f445d0-b64e-435b-9640-dbc22c9454ce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c9efc3ae-9c25-4d64-a7ce-3b3cb9a404e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c2e25f-831b-46ac-8631-3de46ab89364",
        "cursor": {
          "ref": "022fcc22-94b8-4ba9-99b8-b521bb4d3805",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bacf5515-f936-4e51-a379-fda0b3d17660"
        },
        "item": {
          "id": "f5c2e25f-831b-46ac-8631-3de46ab89364",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "29a2758f-14be-4dc2-a23e-dd3c66328e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31aca984-68bb-41ad-be80-ed74c5ccd854",
        "cursor": {
          "ref": "ed4ca1c6-4a97-4093-89c9-35069c3879c7",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "40d747c4-349c-4e3a-b96b-d961d675f08d"
        },
        "item": {
          "id": "31aca984-68bb-41ad-be80-ed74c5ccd854",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8705a033-e0a7-40a4-9e5d-2af087a60a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab031ede-8fa2-48a3-bbde-13a431f35d3a",
        "cursor": {
          "ref": "a17855d4-d98f-4ed0-a9c1-29e1aa51d1aa",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0639e0b5-aff1-4154-aa56-ed978ab777a0"
        },
        "item": {
          "id": "ab031ede-8fa2-48a3-bbde-13a431f35d3a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8339c77d-21fc-4cd7-a6ae-06a4ce509046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05bb749-7ea6-4187-ab61-3ed2e0a97a59",
        "cursor": {
          "ref": "4db020f9-ccd9-45b0-a4b9-5a0f04065cfa",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b5c46198-118a-4eed-b4c9-d6ebd2ed848b"
        },
        "item": {
          "id": "d05bb749-7ea6-4187-ab61-3ed2e0a97a59",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "910ae143-68e3-4543-b3a1-31e4d9b35ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b059957-3ef4-4b8a-9bdf-6158daf29942",
        "cursor": {
          "ref": "9f23795e-f232-41fc-8407-d99146b2ac1c",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2e8360e1-a602-42d8-9540-95df0802ae28"
        },
        "item": {
          "id": "1b059957-3ef4-4b8a-9bdf-6158daf29942",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b59dd79d-af7d-46aa-9b02-8087877716b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038b7cdc-2fdd-416c-a7cf-d9a97ee576a2",
        "cursor": {
          "ref": "80f6e8d6-96de-4bce-a196-6338209b6dfe",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "879631b0-0d0d-4d88-a701-bb2b0be6da22"
        },
        "item": {
          "id": "038b7cdc-2fdd-416c-a7cf-d9a97ee576a2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "4a0a03b5-7067-4779-811f-e26beacdc363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e99d063-b36d-40ee-8bc1-67b0cc23820d",
        "cursor": {
          "ref": "8ff7a823-16b4-4ebc-9494-4b63bfa26d28",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d7ffdc52-0581-492a-bb87-48c987a7c2e7"
        },
        "item": {
          "id": "8e99d063-b36d-40ee-8bc1-67b0cc23820d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0225c1da-9d60-4d19-99f8-54261017da23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01f90b2-5f58-4038-80c3-9f47a59ec922",
        "cursor": {
          "ref": "436402d7-b41b-4d73-86af-76c5a9d9e762",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "887053b7-0b9a-43ea-be4c-1fe7f40eba7b"
        },
        "item": {
          "id": "c01f90b2-5f58-4038-80c3-9f47a59ec922",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "31f583ad-b3df-4b8b-a16b-1a4b5c73dcfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75d191a-719b-42cc-b010-ed1b8ecd6e88",
        "cursor": {
          "ref": "34dbb0cd-31c9-47a1-977c-0a0af550540d",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "38dc82ca-9d77-47ed-9b6f-5dccb4162b96"
        },
        "item": {
          "id": "e75d191a-719b-42cc-b010-ed1b8ecd6e88",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8b4fb53b-9e56-459c-9301-c784e1b80609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738d5d91-d53b-4f45-b489-1bb7256aff9c",
        "cursor": {
          "ref": "d451b277-0e52-4c33-a5bf-705077265906",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "51ae0c5d-6472-4804-8ac6-dab4b655b943"
        },
        "item": {
          "id": "738d5d91-d53b-4f45-b489-1bb7256aff9c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cdc60516-82ec-4781-bda2-8c8cc640ceb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832dd35b-72b6-49df-bab6-995167689058",
        "cursor": {
          "ref": "c820122e-67ce-4347-9b78-794549b34f0f",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2cf3700f-f3f2-492d-aa2c-14b242e9ace8"
        },
        "item": {
          "id": "832dd35b-72b6-49df-bab6-995167689058",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cb3ef9d8-21e7-42c0-be06-0161b53b3cce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24114d8b-2a8b-443f-a7b7-26b7effaed83",
        "cursor": {
          "ref": "f5e0b55a-95c2-445c-86af-8679a0c356df",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "220b721c-16fc-4b58-b585-ec887b25ea4a"
        },
        "item": {
          "id": "24114d8b-2a8b-443f-a7b7-26b7effaed83",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "819c03c0-3433-49fa-a6a4-892aac4572c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896ddf4f-7bfb-4e73-84d5-b507d6060ba6",
        "cursor": {
          "ref": "dfd6bd6a-3843-4e5f-ba61-8d2441e976dd",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e6a438de-febe-4197-8e94-14ef2eec92da"
        },
        "item": {
          "id": "896ddf4f-7bfb-4e73-84d5-b507d6060ba6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4d181dd7-bef4-456a-98fb-cd90f1a375f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5425c5-45a9-4eb4-98a3-d92a3750cfde",
        "cursor": {
          "ref": "feeff7b7-6b9f-4ab6-aa22-6dd8bd910423",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "28385128-68a5-4bdd-a50e-0e4214b225d6"
        },
        "item": {
          "id": "8a5425c5-45a9-4eb4-98a3-d92a3750cfde",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e72106d5-7599-45cd-9976-ec543b5aa414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245bf9f9-f5b8-4b2c-b39f-2cda70de5b6f",
        "cursor": {
          "ref": "d54a90cb-a712-4bf1-9520-b1a18aed5efa",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c652647e-b0b2-4a63-9993-dd5c849bcd68"
        },
        "item": {
          "id": "245bf9f9-f5b8-4b2c-b39f-2cda70de5b6f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b6a9f3b9-3d7f-4231-be89-a4a1b367a307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac10be0d-91da-4dc2-83e1-294010a56adf",
        "cursor": {
          "ref": "b3baf151-8f82-4d4d-ae20-96dd8b44a7f3",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "08999254-5bb6-4d07-93b8-b76367fe39dd"
        },
        "item": {
          "id": "ac10be0d-91da-4dc2-83e1-294010a56adf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2b361811-f95c-4cf2-8d22-6f736a3098f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2c30ca-875c-4e39-abfc-463e01fa8f9f",
        "cursor": {
          "ref": "4d2ff192-165b-4360-8fd2-5087c91204f6",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "72a8f1eb-b683-459c-9cbd-42c6a3fd2329"
        },
        "item": {
          "id": "cf2c30ca-875c-4e39-abfc-463e01fa8f9f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "058cebcf-5cdd-48f1-8f9f-0e77cfd81444",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "8e98c253-fa57-49f6-a110-b7f68a1b1bfe",
        "cursor": {
          "ref": "9d74680a-adc3-4671-88d6-e4809c6b4150",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fcd7f06a-84e1-4b6f-95e8-d02e0839518a"
        },
        "item": {
          "id": "8e98c253-fa57-49f6-a110-b7f68a1b1bfe",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7602b525-0012-4d76-a2e6-32c607d1a57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f682f44d-e4d0-4084-b1e9-6be216cce645",
        "cursor": {
          "ref": "adc91a16-e5aa-4ad7-99b9-997aecabbb78",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f26f4b76-b612-4216-bd8e-ae667062754b"
        },
        "item": {
          "id": "f682f44d-e4d0-4084-b1e9-6be216cce645",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f1fb3da3-6316-49f5-a305-355c1778854f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5dff28b-6930-4613-8f6c-7008b5210464",
        "cursor": {
          "ref": "e72a0315-4f60-43dd-9413-b07a8effe956",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1cd54710-09e2-4a93-811a-5a8736af5550"
        },
        "item": {
          "id": "e5dff28b-6930-4613-8f6c-7008b5210464",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1071995a-f102-4fa7-894e-da623e3d5d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c293ff4-99c6-4d47-bfc0-c6957cf60eca",
        "cursor": {
          "ref": "6be0ffe4-f68d-4a0c-8652-374edb7f2cd7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2f434439-450b-46d0-8504-4f53ed7820dd"
        },
        "item": {
          "id": "4c293ff4-99c6-4d47-bfc0-c6957cf60eca",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "53572b87-4681-4b65-9f0c-d58a31dc8ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7daa0dca-b0b7-4056-a91f-b304733e9670",
        "cursor": {
          "ref": "ebac45f8-f072-42e9-85e8-606358ac8634",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "47100c51-8ffe-43d0-b25c-798ff0276db2"
        },
        "item": {
          "id": "7daa0dca-b0b7-4056-a91f-b304733e9670",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "581f9126-909e-4bc0-80bb-45a5b08df01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c7b362-3a5b-42d5-9fb1-0f8f7b58aceb",
        "cursor": {
          "ref": "13df9052-810c-4595-8c2d-f5ff8f2e35d4",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "10555aac-817c-4ef5-9400-9f2b76854cc0"
        },
        "item": {
          "id": "d4c7b362-3a5b-42d5-9fb1-0f8f7b58aceb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "76a07dcb-ecf2-4f00-b4c9-43d4153cf9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0026be-b6da-40b5-8423-6a55d6b96a2e",
        "cursor": {
          "ref": "87c0c7a5-cacb-416b-bfa2-f6c0f6f1eca5",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "25a0111f-f3b3-4d83-92f1-dd6198a805b8"
        },
        "item": {
          "id": "cc0026be-b6da-40b5-8423-6a55d6b96a2e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fbc2b23b-cfe5-4b0d-9082-3a6a42aa0679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1aaeb62-c334-4335-9060-bf4e2868a00b",
        "cursor": {
          "ref": "6e6fc3dc-40d6-4182-934c-ed277b8e90ca",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1eec2e1a-5739-4814-9e40-8fadf90df3c4"
        },
        "item": {
          "id": "e1aaeb62-c334-4335-9060-bf4e2868a00b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "dcc82ecc-b387-4ed7-8a24-181fdbb4d2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816201ef-6966-4611-9020-0207dca4c8f6",
        "cursor": {
          "ref": "cd8a2e3d-f818-41c9-beab-8f23ae7e082f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fb2e34a6-1acc-4841-9d79-e3cadcc575cb"
        },
        "item": {
          "id": "816201ef-6966-4611-9020-0207dca4c8f6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "29f9e2d5-45b1-4996-b106-3dc0194a13aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ff58d0-59f1-43c4-bddd-b5271f04fe05",
        "cursor": {
          "ref": "e7d906c6-f69a-4e08-9644-5e21756bcc11",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c374fe0b-45b2-47d2-a561-8f8ef6cb9f8a"
        },
        "item": {
          "id": "b8ff58d0-59f1-43c4-bddd-b5271f04fe05",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e1aa88ba-dc1f-44a8-810e-aca1bd6887a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de19ad75-ab20-475d-b4e7-b0df3db2609f",
        "cursor": {
          "ref": "bd80a793-43bd-463c-aca3-e246771162e1",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1e2365f4-87b9-4607-b512-be998fcd80d5"
        },
        "item": {
          "id": "de19ad75-ab20-475d-b4e7-b0df3db2609f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "68cac606-7f3c-4ab5-9a97-2e3d2e9ab1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4626783c-4789-4e19-ae81-5b6a4ff39155",
        "cursor": {
          "ref": "c027aec5-2f5b-4f74-a461-89663e513274",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c50bf90e-f575-4863-84e9-3c8f10bc379d"
        },
        "item": {
          "id": "4626783c-4789-4e19-ae81-5b6a4ff39155",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5965e96b-bb1b-4305-86e4-7e21fc3de7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35db68f-ef4b-4c99-b389-6463df906979",
        "cursor": {
          "ref": "128ef859-ab09-4e6f-8340-48f05451236c",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2d8f7db6-a8af-4119-a7c3-a19e45f3649f"
        },
        "item": {
          "id": "d35db68f-ef4b-4c99-b389-6463df906979",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "71783ba3-bde0-4491-b2bf-06673e2fd79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3f6423-cdee-4409-a93a-9cb3943c00c1",
        "cursor": {
          "ref": "085211f7-0525-419f-88b8-35e6d469a1fe",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d74f8f4a-8a5e-4770-b51c-9f9d326ab55a"
        },
        "item": {
          "id": "8b3f6423-cdee-4409-a93a-9cb3943c00c1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bf94ef8a-9b55-4221-9b5a-e898bc0dc4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332c7251-2637-4a19-b337-37eefeca564d",
        "cursor": {
          "ref": "7c58812b-6da3-411b-bd23-62c8629dd239",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3b2c20ca-51f2-474d-b40c-16921665acc2"
        },
        "item": {
          "id": "332c7251-2637-4a19-b337-37eefeca564d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "831ff2eb-3645-4de1-b01a-4f6e2a57d815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930978c2-e80c-4d73-930a-4920f4169c62",
        "cursor": {
          "ref": "47f22127-5ad2-44a8-96e8-2b284b696c93",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d50bb5c3-f6b7-43b0-b3ff-bf2845d0ad15"
        },
        "item": {
          "id": "930978c2-e80c-4d73-930a-4920f4169c62",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "804a1aab-3d85-433a-bc71-8be694767bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2d072c-cb87-4d85-b783-3b5742c5fb77",
        "cursor": {
          "ref": "cc6b8b71-f7f9-4793-9870-e38d80e1fba1",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cb229de4-6529-4ba9-8f2b-6b8e024f281b"
        },
        "item": {
          "id": "ed2d072c-cb87-4d85-b783-3b5742c5fb77",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cb9da7be-ccb8-4240-a227-628fd535e58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0485f6c1-f108-4718-ac2f-0ce9a9594108",
        "cursor": {
          "ref": "2ce53209-a0d8-47a4-8c13-9bf7b3fecd45",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5def5776-1214-4256-82ac-70d600843e6c"
        },
        "item": {
          "id": "0485f6c1-f108-4718-ac2f-0ce9a9594108",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "69967914-739e-4a86-92f3-4f43e190f8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e35ad5e-698a-47fb-85b3-91a15ad65e5d",
        "cursor": {
          "ref": "70870df7-8533-452f-abfd-02b8433888c8",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fed28d82-0428-4a2b-a1bd-7e10e0093c65"
        },
        "item": {
          "id": "6e35ad5e-698a-47fb-85b3-91a15ad65e5d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f1e7611d-ae3b-4c60-8196-48f093264731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d7bcf7-628f-42e4-88d7-62fce1d19191",
        "cursor": {
          "ref": "25382088-78a5-4146-91da-0cb30d69d370",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "785e9194-1ea0-4c3c-ab8f-e9b225e53c80"
        },
        "item": {
          "id": "b2d7bcf7-628f-42e4-88d7-62fce1d19191",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c8567c53-6bc7-4770-8bdf-02b4ec7298e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7a9898-de14-4e7a-a15d-dfed9b522a97",
        "cursor": {
          "ref": "e7730fce-b362-4291-b207-34ef7f49c695",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c1ebddcb-a9bc-485e-b972-82f37ebd2bb9"
        },
        "item": {
          "id": "db7a9898-de14-4e7a-a15d-dfed9b522a97",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "01b0e68a-b9e2-4cdb-a2ce-0fb3dfb5f9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e332fbf4-4699-4acb-9fb8-e91e778fce2a",
        "cursor": {
          "ref": "4c3e41a6-309f-45bc-9f15-e9282344f300",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8e246f53-4d7a-48c6-a067-cecff57854dd"
        },
        "item": {
          "id": "e332fbf4-4699-4acb-9fb8-e91e778fce2a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3014e472-40fc-4341-83c5-2d5eea6cdefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031307c7-1b79-4e85-9681-fac10acc1242",
        "cursor": {
          "ref": "7aef54b1-1e14-4904-8702-db1b38f7f2b6",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "853df41d-1bbf-4e21-b9e8-cb1b9d39a91b"
        },
        "item": {
          "id": "031307c7-1b79-4e85-9681-fac10acc1242",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "42585dfa-57ce-477b-820e-9546383f92cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c3f4af-e153-4676-8da5-244551e86608",
        "cursor": {
          "ref": "db12acbe-3d9d-4c51-8c62-cd31980e046c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c54ebe45-96ad-4aae-9369-3ee117568ddd"
        },
        "item": {
          "id": "e9c3f4af-e153-4676-8da5-244551e86608",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4752947f-7939-41cc-bece-5031bb4c03c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61df985-527a-46f5-bafd-ba7b4ff436b7",
        "cursor": {
          "ref": "f08ed04f-8432-4b6f-92aa-87c4ce42e5d9",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4c191c82-bab3-4b03-9307-847ca8ceb7f3"
        },
        "item": {
          "id": "d61df985-527a-46f5-bafd-ba7b4ff436b7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d6aa386e-9bd7-4856-99d9-de9910b525f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c6ddf0-b315-46b0-b5b0-e3834761e925",
        "cursor": {
          "ref": "282d9d1c-34af-4f82-b16b-5539e9ca83f6",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a4dc6562-97c2-40b6-909f-892779a67f6f"
        },
        "item": {
          "id": "10c6ddf0-b315-46b0-b5b0-e3834761e925",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "95953b0e-d3e9-4286-bddd-dabbc99c3a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061d142e-62dc-431f-bff7-34ce611fed32",
        "cursor": {
          "ref": "a34a152b-08c0-4e06-ae30-d0a5e1f33e9b",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0ff47fc4-7133-4838-b184-abc7af4b7348"
        },
        "item": {
          "id": "061d142e-62dc-431f-bff7-34ce611fed32",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "120fd802-cde7-40df-aa43-bb6ac1c4b66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1011dc28-604e-47d6-a1ed-fee3b6619e57",
        "cursor": {
          "ref": "517cc5ce-8b8a-43f5-9a8f-7c99cd84dcfd",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "06b24389-dd80-446c-9e18-f83f359fe475"
        },
        "item": {
          "id": "1011dc28-604e-47d6-a1ed-fee3b6619e57",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5dc3bf62-9ec5-4371-8cba-cf4e546443cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bc3c2a-6a21-40fb-93d5-82fc9d04f3ae",
        "cursor": {
          "ref": "077c2129-1d7c-4cb5-bdea-618e1886a87b",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "72105ac8-3b79-42d1-9462-29613df8bd1d"
        },
        "item": {
          "id": "00bc3c2a-6a21-40fb-93d5-82fc9d04f3ae",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "502e8f92-0a77-4036-af27-9417a2d71818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9beb181c-06e3-4034-99b3-df2ccf0fbc50",
        "cursor": {
          "ref": "fa07a584-f7ec-4175-ac3c-a6fe09e2adfc",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "297c6059-a617-4eca-bd30-22c1e556c649"
        },
        "item": {
          "id": "9beb181c-06e3-4034-99b3-df2ccf0fbc50",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ab10b23d-84fa-4291-8702-ed37e1c9e44d",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "88d9e798-7fac-4a26-9df7-a1d989cee91f",
        "cursor": {
          "ref": "23195f71-fe78-4a1e-93d6-d7f433f4a0ae",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8e62acf4-8384-498b-a37f-bbec22d6827b"
        },
        "item": {
          "id": "88d9e798-7fac-4a26-9df7-a1d989cee91f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4d43a245-c287-4838-afa7-7291ea09d59b",
          "status": "OK",
          "code": 200,
          "responseTime": 450,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "f343da70-d9c6-438c-b52c-6bbcd9ed698f",
        "cursor": {
          "ref": "0453cada-e27f-4117-a961-6fa0ab4f9be3",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "24217f33-0536-4068-9572-05173f3d4d53"
        },
        "item": {
          "id": "f343da70-d9c6-438c-b52c-6bbcd9ed698f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9f3e9e79-fa62-4953-9dfc-a4a99b501341",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "27dc7084-bba6-4b01-8cea-979cb37b72a7",
        "cursor": {
          "ref": "0176436b-2b85-47af-a9ce-e84369f30fd9",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "198b43e0-850b-409a-987c-0feb47519357"
        },
        "item": {
          "id": "27dc7084-bba6-4b01-8cea-979cb37b72a7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "495099dd-3cb6-4d4d-9abe-db5fca460712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680e6862-ddfb-4ec4-af0c-a88bc7f48b9c",
        "cursor": {
          "ref": "98a6a2b2-32d1-4b4a-9456-62c992415389",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e508e834-7a6b-45a1-847d-f82eca48ff8a"
        },
        "item": {
          "id": "680e6862-ddfb-4ec4-af0c-a88bc7f48b9c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "afa500bf-f468-4576-8550-3f6ab3e3a39d",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "49ab1d5f-dfc5-4e07-8bef-82d969eda711",
        "cursor": {
          "ref": "89c990c5-a7a1-4436-9f2a-5e6023f7d170",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7ab34fb5-aa57-443c-919a-9164a407af7d"
        },
        "item": {
          "id": "49ab1d5f-dfc5-4e07-8bef-82d969eda711",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "33846357-27df-4ccb-b7b5-d9e0dcdce32c",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "fcf1b19a-b5b5-4191-95ad-c4138de6b32c",
        "cursor": {
          "ref": "5f327460-4531-4de5-ba3e-06ec2ae8c416",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "84853242-d42f-455c-8d8e-9c7703358c1f"
        },
        "item": {
          "id": "fcf1b19a-b5b5-4191-95ad-c4138de6b32c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bc060f39-54f1-4111-ab2d-823aaeacfbe2",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "74a91375-e161-4344-9d20-535fb5fe65f2",
        "cursor": {
          "ref": "8c3344ea-5eb6-4355-b019-c15ac6b08587",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0e129c46-ef66-4b50-bdc9-361728a6ad5f"
        },
        "item": {
          "id": "74a91375-e161-4344-9d20-535fb5fe65f2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c291ab33-b029-4a21-a641-fff4c862bebf",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "5f7bb7a7-d414-4a06-af5a-d49f8e7ab934",
        "cursor": {
          "ref": "4e83ab69-7bfb-4a86-8285-676edcea0b48",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3666c74c-f587-46ce-b0c8-aa7c1fb7c030"
        },
        "item": {
          "id": "5f7bb7a7-d414-4a06-af5a-d49f8e7ab934",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f87f38cf-71a2-479e-a2e0-b09158997de8",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "dfa764ef-6f3b-43b1-8078-2b6e022405ab",
        "cursor": {
          "ref": "38657651-2492-4492-bfe9-9a533018a2aa",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e9d11d93-fa43-4eae-8b91-a36fb36de23e"
        },
        "item": {
          "id": "dfa764ef-6f3b-43b1-8078-2b6e022405ab",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "780ea31e-a5af-42ba-b7ee-cd13fc9cf332",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "148b6e6e-8d55-42ec-ab2b-d75865c5fc4d",
        "cursor": {
          "ref": "4ec36f07-4c9b-424a-921e-26c78e004ef6",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6de777d1-cfb6-4900-ad2d-5f3371f42a4d"
        },
        "item": {
          "id": "148b6e6e-8d55-42ec-ab2b-d75865c5fc4d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3ad3dc7a-d158-48e6-8c0b-b19846e7bc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2226d4af-27b8-428d-b12a-444df1d6412d",
        "cursor": {
          "ref": "f76fec88-7d5a-4c8b-803f-e8f26adeb121",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "81e35a49-5f73-4665-90db-5fcc43c274a7"
        },
        "item": {
          "id": "2226d4af-27b8-428d-b12a-444df1d6412d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9c67bb49-8d1a-4d63-a36a-59ad01032513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b108a795-83f1-4d1c-a9d9-79a65f59ecd3",
        "cursor": {
          "ref": "f898526b-daf2-43fc-8c4a-821587a8f956",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "128ffb37-8ba7-42c1-9c88-df54655b6389"
        },
        "item": {
          "id": "b108a795-83f1-4d1c-a9d9-79a65f59ecd3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8a66c05a-7e6a-4e90-8d69-208a826fd9e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb33385-5226-42f4-85f7-0ffc4636187e",
        "cursor": {
          "ref": "719865fe-a11c-46ff-9190-34331bf1cb29",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cc66e3b6-8825-46ba-a60e-a38a254f55b0"
        },
        "item": {
          "id": "edb33385-5226-42f4-85f7-0ffc4636187e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c563fc68-91c3-4e34-b88e-4e2a9560cb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89228cfa-c87f-4d34-91cc-2c8488a7ba00",
        "cursor": {
          "ref": "5b575330-3134-411b-a750-92e8101b1710",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f1bb26ca-3f49-4154-9453-b52afecf66c5"
        },
        "item": {
          "id": "89228cfa-c87f-4d34-91cc-2c8488a7ba00",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3fdbefbb-c4e5-4c4d-9b0c-f38e40e1a17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd40a66f-ccc0-4540-b7ea-6b4fe499a17d",
        "cursor": {
          "ref": "f912b4e1-c2a9-4341-a68c-5bc9c455a079",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3c54cfe3-d441-48b8-a2eb-7aab51b5b9aa"
        },
        "item": {
          "id": "fd40a66f-ccc0-4540-b7ea-6b4fe499a17d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f9df53cd-0181-4184-8c18-87a93863b576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efde1ebb-551b-4a2c-989d-3c2d2c00e636",
        "cursor": {
          "ref": "c7e6ee0b-c324-43ac-9e73-6d69b27441b9",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "156e52b0-b6ed-45f5-8b16-cb12dcd0582c"
        },
        "item": {
          "id": "efde1ebb-551b-4a2c-989d-3c2d2c00e636",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "573ed82d-f8c8-4192-8f52-91aa57f14b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5713a26b-b282-4c55-8d03-70635964b1dd",
        "cursor": {
          "ref": "dbb813b8-e0f4-4ac6-97de-245764f9b16f",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "95f78579-b31e-40dd-a336-3e265672f924"
        },
        "item": {
          "id": "5713a26b-b282-4c55-8d03-70635964b1dd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f3a1b2f0-1163-4e9e-b9f5-a3dc85fa9431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce73f85d-cdec-4fbb-8ddf-542c65de468a",
        "cursor": {
          "ref": "6f3137c1-55de-4db6-9588-6a2de5903da4",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "77640b0a-14c4-49d1-9b30-34e27bdad19a"
        },
        "item": {
          "id": "ce73f85d-cdec-4fbb-8ddf-542c65de468a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d238ba48-af42-4fbd-b6de-310c39e33969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d16b15-b69a-42e1-ad9b-454a23e50710",
        "cursor": {
          "ref": "22cd3279-02df-4b03-b273-896d4bdee755",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3c2077f5-bd6d-4fa4-9b50-ae2e0ed85496"
        },
        "item": {
          "id": "e5d16b15-b69a-42e1-ad9b-454a23e50710",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "017ee780-d0c1-4337-b8d2-ebd60d3c60e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6afc02-415c-4645-9677-454f89bbb40e",
        "cursor": {
          "ref": "c29e6c52-1f56-48fd-9101-403731916fff",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "390c0d54-2c2c-4d11-b5b1-3680defcf666"
        },
        "item": {
          "id": "9d6afc02-415c-4645-9677-454f89bbb40e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "84a89e0e-c99b-4e3c-bf55-19ff79730ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cba3b8-c2f0-4df4-8820-6c1a73142677",
        "cursor": {
          "ref": "eec3dc7c-bdce-4824-8d31-cd385187db6a",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e99997dd-eba7-4976-a212-f2dbe0d90213"
        },
        "item": {
          "id": "85cba3b8-c2f0-4df4-8820-6c1a73142677",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fee9c3c8-a454-4cf3-b567-9842a0a32792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c82fca1-6363-4910-a3e8-94ceaf91fefb",
        "cursor": {
          "ref": "69cc4248-804b-46dc-8a4e-6f18936f19d1",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "aa7728d5-d79c-48f3-adfc-3852fc808d8c"
        },
        "item": {
          "id": "0c82fca1-6363-4910-a3e8-94ceaf91fefb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "30ccaafe-4778-4779-a629-e526f1ff2090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e66c23c-87f6-4e75-a976-190977185f51",
        "cursor": {
          "ref": "ce710590-1748-4790-b2d2-ee13f49838d2",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "587469dc-6a84-448a-9379-dd7eaaaf323e"
        },
        "item": {
          "id": "7e66c23c-87f6-4e75-a976-190977185f51",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d19ce8e5-d36f-4257-8ac0-f14c6c0e9458",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "80861bd6-d16f-4ec2-9a7c-cb711238457f",
        "cursor": {
          "ref": "b300afd7-b24b-4f34-a18a-44c4d5998b74",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1f629416-e47a-4b80-b7be-a9a61881c67f"
        },
        "item": {
          "id": "80861bd6-d16f-4ec2-9a7c-cb711238457f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fcf8d007-5e98-4f77-a09d-08c40ff45a63",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "45c020b9-0154-4cff-acf4-d7d12e7c488e",
        "cursor": {
          "ref": "594bef80-46db-41ba-85cd-b0c3e5e1022e",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6138a0fe-9204-413a-ad8e-7ea2997785c2"
        },
        "item": {
          "id": "45c020b9-0154-4cff-acf4-d7d12e7c488e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0bedef73-5bc2-4623-8781-fa3ef3c87e0e",
          "status": "OK",
          "code": 200,
          "responseTime": 372,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "65a52384-15ee-436c-b611-a78e002f599a",
        "cursor": {
          "ref": "02f72e07-13d3-4b9e-8441-7408d4666b5d",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "af451da7-8d81-4fac-9bd2-f9f3c01589bc"
        },
        "item": {
          "id": "65a52384-15ee-436c-b611-a78e002f599a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2af37797-898b-4965-a715-069aca251d2a",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "8b9117a1-e3e7-46e1-be4a-76c328919beb",
        "cursor": {
          "ref": "89cc21c4-1d7b-48a3-bf81-945f0e72891a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2cac4f34-ea6c-4783-9295-8ad0a96a330e"
        },
        "item": {
          "id": "8b9117a1-e3e7-46e1-be4a-76c328919beb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b3e42a76-1e3e-440c-b327-a3511f8bd776",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "53d8c844-fda1-491f-9c36-8fd452b98195",
        "cursor": {
          "ref": "b1591261-5723-48d9-96cc-beb79e14ada6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "69f0fa12-f41c-4bb0-b1a4-d252a1676327"
        },
        "item": {
          "id": "53d8c844-fda1-491f-9c36-8fd452b98195",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "84328c89-c4ba-4af6-95dd-9cfd4e4402e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6945e931-569b-4cf7-b3a4-bac7977df9e5",
        "cursor": {
          "ref": "b0dd58da-65fc-48d5-a49e-42a112390b0b",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2c261ab4-2390-4ce0-b9d3-487e7891e2a1"
        },
        "item": {
          "id": "6945e931-569b-4cf7-b3a4-bac7977df9e5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "30b32cc6-642a-433c-a324-ecaec439ee9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef90701-af10-4e4b-b6b3-5e7b2ee75506",
        "cursor": {
          "ref": "5ce626a4-8916-4e7d-aca7-8eda90ffee76",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6f16f542-95be-47c2-938b-607c41d8d71e"
        },
        "item": {
          "id": "eef90701-af10-4e4b-b6b3-5e7b2ee75506",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2316431d-e37d-45db-ab0c-74d6a957ab70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd52c32e-9731-4e69-bcb2-127b97558810",
        "cursor": {
          "ref": "fd068404-afc0-410d-88a6-b136eafbf5f2",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "235847b1-0ba6-4712-958c-46b6df45e81a"
        },
        "item": {
          "id": "dd52c32e-9731-4e69-bcb2-127b97558810",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d327b6b9-b1d1-403e-a3a8-6b11b94d73cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c26aed-9a2d-4444-92b5-4a35ca7b0815",
        "cursor": {
          "ref": "1a0fadf3-ef76-45f9-801e-01c18568499d",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a36390ea-e64e-44d6-a8b8-80fd485ba9b0"
        },
        "item": {
          "id": "66c26aed-9a2d-4444-92b5-4a35ca7b0815",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6f0b95ab-5a52-409f-913b-94d505564e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9b3db0-2182-4e9d-a490-f78b83c03fbf",
        "cursor": {
          "ref": "24d6f754-93fb-44fe-9980-ac1e84d31dd1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3989843a-fce0-48de-9473-8e9d9545eb14"
        },
        "item": {
          "id": "6c9b3db0-2182-4e9d-a490-f78b83c03fbf",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a9b3c962-571a-443a-a3e0-153ff294fcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e46003-ad8d-491b-8e37-6ef5e611ecbe",
        "cursor": {
          "ref": "183e9b0d-a96f-4482-bdb2-5cd006ec389b",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2aa2d713-42ef-47a2-933a-5a0559819ba3"
        },
        "item": {
          "id": "21e46003-ad8d-491b-8e37-6ef5e611ecbe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2d3bbf1f-d0a2-4208-b7a0-173546cda619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1efe99-99bd-4fcc-a6b3-d7df4ec00f45",
        "cursor": {
          "ref": "2c7ec7f3-1903-4853-9c7e-9e50449ee8d1",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a87f4b3b-72db-45ed-913d-516d6f6452b9"
        },
        "item": {
          "id": "fc1efe99-99bd-4fcc-a6b3-d7df4ec00f45",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "89ce4836-d8c3-4534-b869-39479f9d83a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9325bfa6-261d-42f3-891c-67930c844b70",
        "cursor": {
          "ref": "62d7da1e-9af9-4b34-98a0-5195de9fc744",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f7425a32-b37f-459c-a34e-221538a8cfc2"
        },
        "item": {
          "id": "9325bfa6-261d-42f3-891c-67930c844b70",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c8de9839-a3dc-4edd-b991-227c496f859a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d57c4b4-fc57-4398-95d7-6468041c2bd1",
        "cursor": {
          "ref": "7f18c752-0f30-443c-99fa-bff5ed84d8bc",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ad3ae7ef-f426-48a2-b206-69de81a44252"
        },
        "item": {
          "id": "0d57c4b4-fc57-4398-95d7-6468041c2bd1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "934c9cbe-8bce-4afc-9964-62425b202439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b12e32-43d8-4a70-b5c5-08873fe01622",
        "cursor": {
          "ref": "dc4e6e11-4609-4a81-bc78-2c99642c5e1a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5bce6bec-bf78-4750-bcbe-283804fc3973"
        },
        "item": {
          "id": "f9b12e32-43d8-4a70-b5c5-08873fe01622",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "692589e6-b67a-4b62-8d8a-1b3f09a55a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32cf1a33-af71-4c41-b12f-1215fd518546",
        "cursor": {
          "ref": "5affb085-6f2e-432e-9622-f9ecd31d6c58",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0f72b534-ee50-48b9-9754-dc2a08ee3ad0"
        },
        "item": {
          "id": "32cf1a33-af71-4c41-b12f-1215fd518546",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b60e8ed1-8dba-4db7-a292-2b851d79b7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227c37e1-a117-42b0-b8d6-8f3af09d54e9",
        "cursor": {
          "ref": "95d41d69-50b2-457f-a238-4750fd840f22",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7f4558ac-9d5c-4882-b084-64f76f6d7898"
        },
        "item": {
          "id": "227c37e1-a117-42b0-b8d6-8f3af09d54e9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d78a8f94-8761-405d-bb19-8eb84486b32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1930013a-19f7-460e-bd11-c61833eabb2b",
        "cursor": {
          "ref": "dee0d57d-2a58-402e-b012-8f5b88e63cd0",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6ef54fa7-9385-4a11-9f03-686f2f2bc479"
        },
        "item": {
          "id": "1930013a-19f7-460e-bd11-c61833eabb2b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "baf38c37-f687-4b48-bd21-ac6974ec318b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1a93fb-d32f-4cf0-8965-6194aad0acd2",
        "cursor": {
          "ref": "c2485ff0-099d-4747-85ef-0b9af85c698f",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5edbe683-3c9e-48a4-b3c4-1957fe0ce9dc"
        },
        "item": {
          "id": "9b1a93fb-d32f-4cf0-8965-6194aad0acd2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a90d2d3c-9e0a-4359-a4bd-1035c1bcee7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e63811-8583-4d1f-b210-5d4b382ee8a8",
        "cursor": {
          "ref": "b1bf442c-8002-4b39-a3b4-725f7e2e3831",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4dca82ba-a718-48a6-af3e-82ef686abd9e"
        },
        "item": {
          "id": "57e63811-8583-4d1f-b210-5d4b382ee8a8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "788c700f-ebc3-4bf8-ba28-56280169590c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3b588f-f22d-4a0e-9171-b0b86353cc71",
        "cursor": {
          "ref": "7269d88e-69b1-4836-a5e9-c1fadb492555",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "48303c9a-46f4-4671-8aa0-761f4f324574"
        },
        "item": {
          "id": "1f3b588f-f22d-4a0e-9171-b0b86353cc71",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3f947ee6-d104-48ea-99fa-2e8ed6bf023a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f762c431-3d41-4e9b-ab4e-1cce0d5ed90a",
        "cursor": {
          "ref": "8969b91a-0b4a-41c2-8a2d-09d1334909eb",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8178a8ed-3149-4c04-98af-c51d252150db"
        },
        "item": {
          "id": "f762c431-3d41-4e9b-ab4e-1cce0d5ed90a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6fcbd97d-bf78-4088-8d1a-7bd2a53b42a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e12228-8845-400e-9267-d0f9832bff99",
        "cursor": {
          "ref": "c47c64a2-8739-4c12-b7eb-66e125901eaf",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7ba26804-d866-479d-8af9-1664c110d1cd"
        },
        "item": {
          "id": "f0e12228-8845-400e-9267-d0f9832bff99",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "63ed1abc-a4c3-4621-b22b-463cf2156a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f62d16-1dbd-40dd-a8e5-34b6f712eeff",
        "cursor": {
          "ref": "f2ac4a0c-e62f-46c3-a96c-219f726b4360",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bbfb5000-1bdd-4d7d-8d29-1c16d4c431e0"
        },
        "item": {
          "id": "44f62d16-1dbd-40dd-a8e5-34b6f712eeff",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "53337e67-aa96-45f7-a2fc-afa3d945e695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9192e07c-413e-451e-b0da-e41f547882ba",
        "cursor": {
          "ref": "a5781e10-cf4c-4463-8806-b83e6f642f89",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "89971d65-86b1-481d-b391-9ef6b8275d87"
        },
        "item": {
          "id": "9192e07c-413e-451e-b0da-e41f547882ba",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "90d18926-9436-4d4e-9e3f-455c669010ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec3ca3f-6a22-4144-9821-1c307ff75a59",
        "cursor": {
          "ref": "b4f37ac0-9550-4817-8cd7-5ce4d67ecf7e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1875fb60-2993-48eb-92f8-ee93716e52ed"
        },
        "item": {
          "id": "0ec3ca3f-6a22-4144-9821-1c307ff75a59",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e792bd64-a11f-476b-836a-e8131cd2af11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1dd646-b8c4-447f-a970-426c0e83b8f2",
        "cursor": {
          "ref": "d1079add-f2cc-48de-aff7-30b0742e5ad4",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "68182b24-00bc-4518-924d-75ca018bcb2f"
        },
        "item": {
          "id": "aa1dd646-b8c4-447f-a970-426c0e83b8f2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "959fb841-e799-43e0-b68c-6818794dd6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f45efc4-3f49-4a72-a2b7-483550254625",
        "cursor": {
          "ref": "38383b0c-4edd-4f65-92d3-d48c56529eee",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "819490e8-3fe4-442a-8fb6-8f18a78fb5d3"
        },
        "item": {
          "id": "5f45efc4-3f49-4a72-a2b7-483550254625",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "47f2ca6b-c9e0-4d2e-90ef-5d1bc4248f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88e8599-09bd-4bbb-89dc-48333a52bc65",
        "cursor": {
          "ref": "7f8b5051-aaba-45ca-89dd-ee7ba5788df7",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "257793b2-eaf3-40ba-a7f3-95c4cf19328c"
        },
        "item": {
          "id": "e88e8599-09bd-4bbb-89dc-48333a52bc65",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0623e992-de4c-4100-a8cd-55349e78b431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7fc34f-87b5-43cb-83fb-e6645b83d8ab",
        "cursor": {
          "ref": "b321bde7-9a2d-4037-a99c-c7f6a1533edb",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8a3bc70c-55b7-4051-a6f3-d7ed51e9bc36"
        },
        "item": {
          "id": "aa7fc34f-87b5-43cb-83fb-e6645b83d8ab",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "08c0d91a-b90e-4f33-8b74-f48e843ff964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c2243d-d3c8-4cb4-985e-1fc0cd81c0af",
        "cursor": {
          "ref": "4742ec9a-6b3a-4a9b-a44f-21d600c8facd",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e6e9880f-ac5d-4262-aba2-62802896c141"
        },
        "item": {
          "id": "47c2243d-d3c8-4cb4-985e-1fc0cd81c0af",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "757f7c9f-73d4-442f-81af-e990deffe6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b61f4c7-9dad-491b-bee4-fff0af1296a3",
        "cursor": {
          "ref": "06da662f-eaf5-442d-9f54-a31cf8ff4b9b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f4594e1b-608e-45fc-b510-e462313d1d45"
        },
        "item": {
          "id": "2b61f4c7-9dad-491b-bee4-fff0af1296a3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7ce62b98-1ec5-47c1-8daa-583366707c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75be11d0-c325-4e77-a46e-1bea7777e985",
        "cursor": {
          "ref": "47a7d65a-5798-4d07-99c3-2406c7654dfa",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7fb0e5a6-59bc-4ca4-af42-9169b7c9e7ce"
        },
        "item": {
          "id": "75be11d0-c325-4e77-a46e-1bea7777e985",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "42daed3c-16d5-44fe-a5e1-1f2e91de0204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c63369-a578-41cb-b6e3-9354f565c223",
        "cursor": {
          "ref": "201b972b-f009-428c-b834-4e7268556eec",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "25dd7d12-cc9f-436c-ac1f-b69822b99ad8"
        },
        "item": {
          "id": "11c63369-a578-41cb-b6e3-9354f565c223",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "216bc510-2028-43d3-b0c9-b2229cd2654e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f9cfe7-3780-41bd-8e50-553f4f195726",
        "cursor": {
          "ref": "f95f7aef-883a-47a6-aea5-b18126999790",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0ee56374-8c25-429f-9882-6061048341a0"
        },
        "item": {
          "id": "13f9cfe7-3780-41bd-8e50-553f4f195726",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e7cfd5f4-4e49-4a96-afe2-66ec5cddfbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa956cda-ae56-4dd7-baa8-a100a4b4cf62",
        "cursor": {
          "ref": "313f3d45-d7e8-48cb-b580-41915388e597",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a0ee1cf8-9cf8-4f0d-9e69-6ebc0449ddd7"
        },
        "item": {
          "id": "fa956cda-ae56-4dd7-baa8-a100a4b4cf62",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6e5a0912-54cb-4300-94cc-8a3dd3724053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa5ca67-6eaf-4970-bbf3-7dadf9c735a8",
        "cursor": {
          "ref": "d560486b-4265-41e5-aa94-fc574e80d7d0",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "14f906c8-b567-4ab1-adc9-fee34d2304d5"
        },
        "item": {
          "id": "caa5ca67-6eaf-4970-bbf3-7dadf9c735a8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "036bcfe6-2a2e-402f-a68b-1d1a92736618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75ecdeb-2326-4949-9543-54b628263658",
        "cursor": {
          "ref": "f242da6f-f772-45ef-9857-8b5e6482a6ab",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c730a817-38d0-442c-81d2-003f80a8a5f9"
        },
        "item": {
          "id": "f75ecdeb-2326-4949-9543-54b628263658",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "adb3c4ed-e710-4aa5-9038-81c17066c1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556c093a-0031-42c0-a217-abfea204db94",
        "cursor": {
          "ref": "4c1144dd-15cb-4cb2-8753-633562ff1431",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a7a6fde0-857f-49a0-89b1-84645c30a20c"
        },
        "item": {
          "id": "556c093a-0031-42c0-a217-abfea204db94",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "63340608-67f1-4ec2-859d-ef5a287be45e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc4a467-9bff-4a48-8732-bfd68cabea6c",
        "cursor": {
          "ref": "2a0d19eb-84b2-4463-9756-d0ddde949e9c",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b6428f7b-3e52-4081-a7b2-9e455b920ce6"
        },
        "item": {
          "id": "4fc4a467-9bff-4a48-8732-bfd68cabea6c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "525c136f-1383-4a8e-bc31-713a19fbdee7",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "60e5e5c4-4556-4df0-99c1-b757f167e0c9",
        "cursor": {
          "ref": "73646e39-86ef-4b90-b24d-79217b9f7bac",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0dc5053d-e2a1-4e2f-94fd-3c4221e8c435"
        },
        "item": {
          "id": "60e5e5c4-4556-4df0-99c1-b757f167e0c9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "27ddec36-a8d0-4cb3-8f60-f84e7880befd",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e2f5bf-3315-4149-bab7-0158ef0ad089",
        "cursor": {
          "ref": "7d8ed33c-aa34-419b-9cec-d0f7f494667d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "aa3c9134-1b9c-4b60-8c02-ba6c6cdf1b8a"
        },
        "item": {
          "id": "e4e2f5bf-3315-4149-bab7-0158ef0ad089",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8b269a16-0863-446a-abab-50167430cfb0",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fe2132-57e1-41b5-be7e-7255bc6b2691",
        "cursor": {
          "ref": "fbce9368-2720-4f33-beb9-c66ca4571757",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "71b9f55b-455f-45d1-9eb1-84dee66b063e"
        },
        "item": {
          "id": "d4fe2132-57e1-41b5-be7e-7255bc6b2691",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1014a210-7f20-4126-bf5b-9f875d95d731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fe2132-57e1-41b5-be7e-7255bc6b2691",
        "cursor": {
          "ref": "fbce9368-2720-4f33-beb9-c66ca4571757",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "71b9f55b-455f-45d1-9eb1-84dee66b063e"
        },
        "item": {
          "id": "d4fe2132-57e1-41b5-be7e-7255bc6b2691",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1014a210-7f20-4126-bf5b-9f875d95d731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5467a53-52bb-4dcb-912d-5a1900824eba",
        "cursor": {
          "ref": "a4704055-5249-4492-b30f-d7d6c8df18f0",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2b7b140d-4802-44f6-8328-7f3c2f31fa7b"
        },
        "item": {
          "id": "b5467a53-52bb-4dcb-912d-5a1900824eba",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4352a073-0aa3-4392-8d0c-c9f4103467d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b744593c-b051-4b50-ae43-e8de12c8b3f8",
        "cursor": {
          "ref": "f5338519-e02f-423c-af66-24b206665813",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "10edc05b-5ea4-4967-94d0-aa1904221f0b"
        },
        "item": {
          "id": "b744593c-b051-4b50-ae43-e8de12c8b3f8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4024bef2-cf8a-4a09-8b68-a207ec3f8b20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}