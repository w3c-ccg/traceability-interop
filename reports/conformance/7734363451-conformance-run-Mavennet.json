{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f1df85e5-13d8-47db-91f5-f26847704fa7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "af39a983-e117-40b9-88ff-68f6e44d9610",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ef953dc-81a0-48db-8e42-26679addfebb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "59346dfd-128d-489d-86c4-386c541fac4e"
                }
              }
            ]
          },
          {
            "id": "b58574b5-7df0-4869-94ff-7d757e4ca75a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb58fdb2-04e0-47cd-bd41-7aaff7c45825",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0196bfb7-384c-4211-81a5-13efed064c55"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c495c7b2-ecd1-4b8f-88f1-7d48580f2383",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "924a9727-f6a0-45ba-a60c-23625cc00d54",
            "name": "Positive Testing",
            "item": [
              {
                "id": "158b1eff-02f0-44bd-8b74-66188b4132f3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cde86470-23e3-4c8e-bc84-d32cef156ea6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea1f638a-30ea-45a2-8bd6-eed3ecc62d3b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bb8af6bf-3aa3-42ff-9c49-dbe64d7f8d5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50194861-de82-4f7e-a014-f1bad8e0afb0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a21cefdf-ef45-48f7-a6d0-d8c3b2e489e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2617de03-b796-4147-9ec0-2dffa6e7b646"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a05f47b2-aa4b-4b46-adf1-905bc0d222c4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "217f09df-b96d-4ccc-bb11-c498140e293a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "909c4240-43a6-41dc-8220-0c43f65d8621",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "713f8558-40a1-41ce-b158-43d7b0c84269"
            }
          }
        ]
      },
      {
        "id": "3a6da71e-8001-45c6-8990-304ad06f140a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5c6c533d-53b8-4c36-9c7c-cb043fbe02c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83c939f4-6e72-4e6c-8845-a4996f9b7648",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "20c19283-56c1-4ede-a840-d8184020a9a7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564627e4-248e-48bd-afa0-54f19ecf01e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17b5ec7a-e791-49f2-b7be-a4bfdeb2539f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b7faf7-47e5-426a-a0fd-645fb4a8b708",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa860714-6b77-4e4c-8cea-1f19b166925e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cc134c3-b587-4418-962f-f9122360b2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a58af1a-3e2c-4998-8dc6-848f60dc32a7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d537448-1eca-4a5c-baba-d337ddbbc12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6284d35-fdc4-42d6-bc69-171f4661cc46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62776970-4374-45e6-ae25-8dc864649da3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a02f5e94-ac1a-4dbe-9424-f873261fe691",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919b8853-4c2f-47fa-bd49-f1ef7ea79f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea4ee450-bd1c-468f-84b6-4527fdc57e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ea4b56-25f0-45ae-9c50-0c96a377f7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b614195-fc43-416b-87f3-e1008d2ca58c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "79259395-90c7-4e0a-9d04-0198e93d8931",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e4943b2-ef0f-495f-92ac-babb6e22edf9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b51fe0c-f26c-4cc9-a317-d036785f3c26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6ddefb17-9a8b-43e8-be45-c32bd08957d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7033db06-c0e2-4fcd-be44-3d82a2a9edc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d24b21ec-6696-4447-9ecc-e3fb2bdef215"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e95f2794-aa49-4c9a-85d7-a4d4285b0339",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1041b631-805f-4f52-a681-baeda7d03dea"
            }
          }
        ]
      },
      {
        "id": "1c47ff6a-d494-432c-8fde-f31bf06fb4f2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "987d4bae-1486-4563-ae8c-30d537f209ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2870263b-06fd-49ba-8927-23422c68b175",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "25b39e68-93a6-4832-b231-17a95b633fcc",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61573ce-ad6a-4418-ad8e-e160b27f2af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa784c8-526a-411a-8c1d-037ddf195097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78faa7ac-fcc0-45b2-9878-3d3540f44e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6e14d09-5668-452f-9b37-a95e296de5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5db900-7242-4b9f-a207-81e2f9f40c2b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5836a572-c016-47e9-abea-32bf7ff41363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317cd69d-aa44-4c39-9085-54e328dd8872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f05813-87d9-4880-b7a0-957b733403fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18df77d9-65a8-4574-819b-d73c64024d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d276afa-8b41-4ea3-9c1b-e666a721001c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70573ab-d119-4f27-acbb-fbdd4953efaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b757b0-8565-4460-8447-61d686f212bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581d86f1-58cb-4d67-bc3f-6b00835c2cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7275c8b-3ea8-4ba8-a837-5643e6aa641d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b35f865-18da-4413-864a-1cd09e8eea3c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79428f0-49fa-476b-b702-b12b30553c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904d8dd8-f79e-4971-bcde-34de9345f316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca71fbed-8382-481d-8cee-f56feaa46fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48f1a62c-8c71-44a9-a8ae-cfef93c37d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5658b56-1bdc-4bcf-b127-92da436e93fd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd802f27-2532-41ad-b8d7-7d041787c8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7016226-e10f-4eae-a880-10aab775bcf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e06a91d-9033-4c22-9b9b-0c3718143019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f275014-dfe2-43cb-943b-b49ada87c83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd78ab93-4df2-4529-a6e7-87a12c1f180e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4865166c-efdd-48f6-a745-8be2968455c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e37bb5f-290c-48ce-8f25-425f649697dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2e8870-5002-405c-8912-cd47c59c7391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d95526d2-2889-474b-a2e9-91d04f1dc58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678800d7-2982-4410-9395-ae85fd41fd63",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b533af7-2f29-42b2-9184-40e4fdb091f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9799cddb-d8c0-4426-9daf-6a44f1cc1128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ab2d73-56a3-44bb-b2a5-ece326fcae53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fac2173-00e1-4380-982b-a62084c3fda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa79f5e3-4714-439a-a168-95930aa87934",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e32d3e3-74e8-422b-9cc6-b3f6757bce04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b77708-0a5e-4ae6-bb76-6f4bce328fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7552c37-10a0-436e-bcdd-53cb130d7543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c44b2d1-0a70-461d-ae5e-1d51c6e13c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8612e5-43d8-4734-b8c2-8a5b63896ae6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809c5299-0841-4a8f-9495-cb6acc5aa86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303a33d6-9161-460b-98c8-a17bad1c8bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39de8f87-2909-45a2-933a-e21820409d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1993730-47f9-4b5f-b342-d1a562d4e208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3813a88-4de7-4b20-a3f9-7e2f7db987f8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0ddff9-c507-4dca-a2f4-cb6a3cbf1f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb28b9f9-5c64-4a50-a5df-78a7a449c262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846d5e7e-5bea-4b86-bdb1-c6676085b39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4a30afd-4386-40b4-9a00-2d3071131e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ecec50-e357-404d-a6df-2113cf9022fc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ff1085-e95a-4dea-b662-4600efbb188f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76eb01be-385e-4fdd-9d4d-7a1af8b60f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6f1857-574d-4306-a0e8-e4e2cfb07398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb641e02-0be7-401c-bfba-f03421ff6218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899fc0f0-1315-43a0-8acf-285df5861894",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9a450c-61fd-4f6d-82d1-d8e589efba30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2200ecbc-b1c3-4bff-a6bb-f6157c93708f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdeb9ea-0362-4702-987a-928bc24c91b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f7eb800-0a0a-413a-8cd4-f91eba5a125f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792e49b6-eea3-411d-ab0e-021c13e151ca",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f063a4e8-5cec-4b38-8302-b321d3dc7a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbde4898-1d3b-4ebe-987c-466a5a779881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b344fb-89ad-4a3e-8e2a-2c58640b842f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a21daa21-dc83-4bca-9505-cdc7624887c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d92e57-02ed-473a-b1cd-85f6411fead4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ecb201-60ec-4d31-bec9-242409db644d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41a5577-c19e-4487-8950-2f8444148f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c471f028-15d1-496e-95ca-49fbf67d3b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86d17b62-c642-4dc0-9262-5180af7144e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c9aad4-35a5-4a3d-9019-8bd0fc7893d8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5bd4b9-08fa-438f-acb1-ca2d7148f73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7f0d79-055a-45f7-bb51-3285e8f551b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa32405c-42a6-47d4-9c53-42e0126e8041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3879cb2e-8156-49be-ac5d-73efd93d7569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be242917-340b-4fde-92e9-be9008fd4a7d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8f7b35-cda9-406d-8c4a-141929f90e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc3c28c-a215-4a03-964f-69dc9f5216f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ac3815-bc06-4a0d-b73a-55ecd852b623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d72b9d3a-6f69-4703-a1fc-2db23aac4525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840ed27c-eb00-460f-9298-a9381eca3cae",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96f8b52-56b6-48dd-90db-f28b9453fa46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90fa0b28-a6f2-43cb-ba1b-4720c0482156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0eac56-935e-4852-82e5-da7d38f97d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5f4a872-5964-4ee4-91a8-bc56836b69a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df28eb48-d3a8-4396-97be-a45d46f03cd3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d31cd82-51c3-4867-bc95-c466dd5a05bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ca6a66-651d-4743-90c5-1376c37de04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839bacfe-e8b0-4588-b1cc-f7c43fff4953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa50f78-1850-4b44-95c7-00f4f2fcdbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed48805-e2f5-4835-8287-26c0149c8125",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0ef8d7-9baf-4fec-9168-c2559553df2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0fa5b4-7472-41ae-8d60-3b125e0dd450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8a669d-0dec-4e8d-abca-5f057109e87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20dc41a3-3a4b-4ae6-8bff-2e55d424e3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985e28e5-ad42-465b-8b1b-1ee3b00ce3e6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff6a346-dd99-4785-8149-8cb599aaf560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b87a450-41a5-4f3b-aa0f-36ef8880282a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb27e45-75e3-43dc-9e4c-5e4fca21c93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb72b696-a985-42d6-b9dc-5c12167af948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4992e8-e10b-4b8e-8bae-b66997e13717",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44448512-de31-4b7c-8511-45c17e80487b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74750aeb-aa64-4d75-a273-24c6fb2e7585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a910fde7-5125-41cc-bb4a-024e97fd1d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1901bb6-a56a-4387-9283-3388f57f5d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3831e5-f73a-4c29-b3da-63af0f5af609",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d732921-15ed-4e48-8a80-64fb4b52ffcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68c8a56-2179-4fea-9d0f-2c636ebb6321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d93d3f-8470-4292-a9cd-22aa0d3cd004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3afd0b7a-c610-47b7-a146-d06778f59f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1a5cdf-b47a-4dce-8b6e-7dd625d7a987",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c296c969-a3b2-45c4-96dc-75df6479a777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034b5190-a724-4d7c-849c-d92c215c7c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f858500f-c0ce-4e33-a7bf-c06d2f042ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6305a042-f7e1-46b3-bd8a-674b001ef6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dbbce4-996d-4b2d-bb88-df8eed4e2179",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74916fc5-6afc-479f-bfab-01ab5d105db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb52c538-e36a-4cbd-9fa2-b032eb6beff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95f463c-32b5-4d4e-a864-d631b44a2d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "814bfca5-4102-4bf6-82d0-b081f2558933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b798c3f-f641-4a3f-885d-7310dd9d0ab0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a33988-2c82-4b46-906b-7b0a148fb2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66de6a8c-dd78-4954-9261-62208fc4734e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea6a359-f252-4553-a133-60ea6f792632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b02b2731-8012-44af-90c5-52dbb22443de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fe5d8b-58fd-478d-9869-0185c48f15d4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d757b2e0-a1bd-4397-8fe9-963c6c204bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ff8617-cffe-4f54-80c5-daeda6b51dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be453fa4-04ae-4c21-894b-8fb1857ba226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48a13ee8-072c-4c89-aee9-f8c71a98e5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1c62cc-78e2-4bf9-89db-02f822e32793",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527ec1fb-40ec-47ba-8bf3-e094efccf374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394d89a6-805b-47d5-8c3c-8dbc7c8c82e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c19371-2a89-4878-8c1b-eb4f3201be96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b33cb07-ba2a-4662-8d0e-b1221ce9c3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ced1f15-c617-42b6-aa03-a7f2e6091523",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b6ebf2-8a28-4761-8d60-5c5a80721651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c69771a-c5d5-4a3d-9570-cbefbfe2d828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6023af44-c8d6-4119-b20c-95b37cff0343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eab5125a-393b-44a3-b14d-dd45d2b4d0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5477e901-6214-47fa-a861-6524dd248f64",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992af960-0635-4cf8-942c-def73c50b7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58a2663-f8e5-4861-8256-273af675800a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc19291-674f-450e-929b-25929c493d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3523f09-7acf-40d7-9d79-2efad03f0c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f78d9a-7f54-4f85-9947-0c427732b587",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c88ebf2-2bad-43fd-9a44-9c3ed0f2bb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be25627-63eb-40cd-9695-056fdda97a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58d6d03-c1fa-4db3-9fe5-ac19d126aa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cfb72b2-635f-46d6-84b0-89022975c52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca60b94e-5429-4bf2-a0ab-a78e3b1bef38",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba7966b-d2de-4697-a487-b53bdceb0121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c138f0-b4d5-4998-a6d1-364f99858e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fdc11d-6aba-4a0f-8141-ea88f12dc5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a895ec39-52ea-40a4-a75a-0b8554864ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8778508-2a9f-4359-8424-2056ca7aff51",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1828a6-b663-437c-abc5-e528c7b77ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d42fb9-8fac-481b-a9ed-cba77c07a15b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c122df62-0cd7-4f91-b198-2d7d8b4fa47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3799c5-9289-492b-99fd-bf4c4d2809d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcc86d7-d371-4ada-bb94-444c5aa54529",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a4ed5e-259d-4989-a19a-9b82033ad89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba619ec-5127-46d7-b49d-2e22d7f212e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954ddd70-6b04-47e2-81f7-4981b99645d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b65e6bf-b415-4139-8832-26d8d0fa327d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36f1595-755f-4c1a-8505-3b535239597b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26499da1-751f-4b2e-9dce-7838220c1f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e270efd-07dc-440e-9f91-323e0ff6eab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6caaaaab-5022-4d21-9176-e1e88f4d69e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "955ef589-ea2c-4707-8b5b-2409909b5bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e0f99a-5799-4022-8dd1-15493ff19dd6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0777d0cd-0ed2-4230-8797-2f7e87ab4a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42ce064-5835-425e-83dc-ccbc788c56d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ddbe2e-180c-49ec-aedc-007b36a670ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9c812a96-248a-4514-94bc-39cf8c692c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ea306c-1b26-42db-93d9-61d10e85dd68",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e496d235-1fa4-407e-889b-d632866d6204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2f243d2-e303-4143-93a6-a62f86c523e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa40bea-2b3c-4873-85d0-e09852f841f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d71f1ce8-3fff-4a17-a6ba-de380e0b3c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ca11aa-4627-4d95-8231-d6dcbe453de8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd4d57d-de00-4c90-865b-bc5cf1a8ff0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9f2470-cb3c-4730-9ce1-a4eb607e508d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d538b7b1-447a-4644-bff0-4de47578f59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5a8336-9cd6-4333-9ebc-0d014c52dd65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ef1fcd-2510-4b4d-b66f-12eb7b5f52b2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b70fc0-41dc-43da-93f1-64ae9603a2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fdd4876-293b-4f9e-8c30-479671df6097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d8b83a-4b1f-482e-9d2b-ba04799d5b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae805b0b-90f8-4eb9-91e1-6c581c702244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bb9165-4aa9-4e48-ba2a-0f02533d5cb2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ee3aa9-22b5-4f40-b797-945e833ceec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8336fd-b0f1-4e94-8d91-f9adf9588ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7955dd30-827d-46ff-915f-06f356c7b06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbc2a42-8463-4a23-924b-af87343ef7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bfe517-436d-4dd5-81a5-1303dc08648b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34766f4e-16b1-43b1-aa82-53d78c1acdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7560b50-8969-49b9-9ef2-3753e8e299d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18822d2-5a8e-4a7b-8a63-a31abdf101d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "75648235-dc1c-4907-aa2f-8ea0d54e6baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4397e39b-6067-45e8-9370-d4b5176b1a84",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e05367-d1eb-44c4-a0b1-c032db6c6ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a0ffd5-0c5e-41d9-886d-ad4eded76406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b00af7-7394-4031-88f7-33c35a00bbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b358c08-2cbd-45cd-bba1-2e33eb041ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfce1e7-62ae-4b87-8afb-3c06cece085b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed26f8dd-55a6-497b-9e6f-99ba060e601c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75295168-1933-4923-98d1-bd12b7c6f4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e00356-3d2f-4465-9eea-cddc1de02fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "28a45c46-d00c-47d6-b260-c8b36a3407f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dea5c98-b1d4-49a5-bdec-924c1ea8eaec",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b87279-c234-4389-bee8-b03e0fc0ab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eccf8744-3aca-498b-a40e-98f23ff80321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4099df33-9328-4438-8122-5b8ff01e0a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b862963-3bcd-4e7e-89cc-6131e92cffa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26c46ba-be7c-4671-a209-86f3860bc46f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ae438e-1375-4b79-af07-703754cec5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e59d429d-8f2d-4a05-9919-9d9d38ffbda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabbb725-8c4e-40d1-85da-7bd5be38c1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "513da7ad-d89f-4038-a1fb-bbf44c137552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249fca0c-cbd2-4f21-a7ef-0ffc981ce38d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5799c7bb-d35a-42f7-903d-e65e55a4ad9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef28dc2-0645-4270-aee8-1e63549cbdc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec015e90-58c8-4d68-a61c-82f2153cdbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "72aa2576-3716-49be-9ed6-3580e5cabd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2688188b-c1dc-4658-bbda-e5b70ab73758",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4423f25b-e539-4ad5-8801-a67b8ef9d53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf735e8-7283-47f1-84ce-ae3d6a28f75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a005a52-9da5-4c82-8ae0-d8944a6bfe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27ede78a-a36d-4e14-a3eb-5affb7668d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f942d219-9523-49db-8f7e-3e524b15f394",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752dc608-ba6f-4a07-96db-e028b323c643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b0d48d-c80b-4b56-b2e6-1361d51d5881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92037553-10b5-43b4-88ea-be64c7d592df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c30aba8-526b-4959-8e29-877eef21ba63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f9eef0-4e3e-4592-8807-d1c4cba43d93",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac81bcc5-2aa3-4ce2-921d-deafd8fdec87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fbdb67f-b99f-4e07-8f20-287be188c010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d36e2f-e2ab-4323-a27c-a0101ddf0c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf318f5-6daa-4140-8504-948153200635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7858d3ea-802a-4dad-b672-a0001a328c2d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791f79ec-ff0c-44b3-a26c-b66eb9f831b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197b340f-8409-457d-89cc-7aeecb0e6170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bba183-7cd3-4f10-8b89-7c1b0df78af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc84fb01-38fb-4bd8-9372-60f9cecddcbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719f16c6-0214-428d-8e1c-3265fbe92397",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a108e2c1-a429-42d2-8315-97c180864b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6adebe-f083-420a-ae3b-42fd2ecfc4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040b9bec-c182-41c6-81a2-35c7cc2be038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e62b81be-23d2-4aa1-a037-8532270f8a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da347cb3-7663-4e61-b42e-775e1addffed",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124d79b3-1b38-42a6-bed2-0df8ad765b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32aa783b-094c-46ec-8aca-17266ba3ae9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f857fb47-09eb-4fb1-8cde-81b025991594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6784bfc0-0be6-4562-aa85-949e7fa93883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2013ce-7e00-46e3-80be-e8361158cdaf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb972f8c-97be-4b36-acd8-9f235cf12d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d873a5a6-9873-4b6b-b01f-be61b77d5455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5633b46d-2e5d-45b4-8cc4-63d26afc5052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "870e4caf-053b-47e1-bc6e-6830260ad0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b195aaf-a8de-4e4b-9aca-1ff030a0564b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ada3e39-0208-410f-9b5a-dbc1229dc75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b841066-7548-447e-9c92-a163e79a34ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcc05f1-3e21-4920-8bb7-ca603c3d9aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "835aa444-d806-4047-b66d-cb1e0a088eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f344c6-0d82-4cba-b26d-a966439645ac",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55aac45d-4df3-42db-aa60-ae1d1326774a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2bcf1a-c289-4146-af4a-a12de5422e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4b2b05-3f3d-4dda-bda7-e901752e6375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "140af098-34cb-4a12-8b37-f97892b785ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f52fd1-1855-4c01-925d-57f77898e958",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39ddd41-b9fa-4830-a1bf-33f626708e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61806d5a-c481-4b2f-8111-96f13b882e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7f62a9-4f65-44ad-a10a-6f1e6a729c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23600447-b0ab-4dcd-957a-bcbfe428f8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67607231-17b6-427f-a63d-2a6b77dffc00",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d6d34d-a752-4619-ae1f-ccc9cac05181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d78966-487c-41e1-8348-f5f45e47004e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775f0327-9324-4bbc-8b8e-8d12a0a277f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "79289bf4-f729-4cac-835d-5f1621d4bda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f249b5-3eb4-4a13-8930-44e237f04614",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12210d5-75ab-44d2-99b4-7162adf67406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e168d533-9832-4859-a002-b1e5b23aa740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723c04a2-84a8-482c-8ba2-8201c1db94e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c18e667b-8744-4f69-b9bb-c7938971afa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04b18e6-3c57-4709-af72-724811c9ace4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f3a05d-5718-46df-8e78-ca286e07add3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b044bba5-9cdb-4757-9bdb-626c4286a3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e741f3-3c60-4c54-bb4a-2b5d194b69de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ddc8f1-d2da-4fa8-866d-1c2d422ee639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb7ff0e-9d2c-45ca-a059-fba1b1a84d35",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad2fe34-6f18-49c1-993d-9741c39ea8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ed6736-777a-4360-9e9d-3d9ae4551b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2267973b-ba64-453a-95d4-498f914a8c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "31247b7a-ce47-4377-8bab-6c45ee3badfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8e6dfd-c173-4cfe-9487-01e13704768f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e79636-98e4-4631-8ccb-34a75797b8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7718360b-5a81-44b1-9967-4c59188344d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d75012-e94e-4587-8486-ee3d8ed19b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0b0ce4-8cd0-4bc7-8e44-4c70a1a2d0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6b9059-f73c-4cdd-addd-ff1bc8607215",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cde3229-a47d-47e1-b848-49f0d6401ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7a9956-37a1-4aa3-90ab-64546e9056e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265f5b7d-1f15-4bc4-8273-829165fac3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "03db44c1-3de5-495f-b069-4bedec345aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ba7176-425d-4dff-8358-0abd65faf44c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f30c71-6d3f-4a5c-b2d6-e3b23d2bac64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd553a9-3285-4faf-9a5a-2292d7884cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9be57b-37bd-40ab-874c-743138b7d83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5875c4-c31f-40a5-a984-e7b738081ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf3a8df-fa34-4643-ab40-4224fa008819",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7116fd-7866-4c5d-98c7-7dda40dc38ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b953dd-e20d-4a0f-9e18-62493396f37b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e115e1-19c7-4090-a4a7-98b4b06b8a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f80967ff-80d0-48db-adfb-7a6959621dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008a1242-460e-4bc5-9e70-c18f2e36e13a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87197cf3-31fb-4936-aaa6-a277c694cb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f81d57e-4fb2-4d2d-a285-6f7ef9bade20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaaca12-531e-4aaf-b82a-15231ebc1ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be4e0ba7-39c4-41eb-8b25-8d660cc640b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96ae3d6-1657-4e67-8071-0ad6f8681eba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de1bcc7-7f29-4fb7-9cc2-24f1ca04072e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4d143e-b1bd-4632-ac68-8dfbd7dd7e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ee4151-3ffb-41ca-9868-6fc2a6cfe08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81086235-da3c-4474-8627-7a5a467c1cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be2ae8e-6dc5-43b2-84a9-0070b30c516b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a07f03-6533-4948-9c73-bb561dbe7413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63673d0-9955-48b1-8c5f-eb73be8ff1fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1abb97-2984-496d-941a-fa579ea13c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "850899f1-deee-4f27-817c-c99485799128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe2380c-4285-4ed2-9643-317dbe176bca",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69be913-b83b-46c9-864c-e6deb2c651ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bae3f1f-cb09-470d-8ffa-1eaf1dace787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c4b0a5-693d-4671-892e-46c30607b5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0e5a5d-3b83-457a-bc89-016d9dbf425d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba8620b-f98d-4984-b569-5c8a53ee6bf1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a20a78-8b8c-4e48-92d1-b2a4f1516a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3d5093-004f-4ed9-a675-4af9d4a58ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb27283e-450c-4ed7-a6bc-d6fa121ae500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc7ece38-1aff-440c-8bdf-7a1d09550351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c54bff-e594-473f-b6d3-743a134ee5c6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0c57ae-1927-43f7-95b5-40a8d5f3f21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6deb6a36-2e07-4a05-812c-392368de8274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741ebd8e-3586-48bd-9992-32b2dbf1d345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2ce423-ef4c-4239-8bd0-f125746ed9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2afaa06-125b-46df-a854-e10467f4c84c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75973e70-1149-4d76-871c-f1a086958dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af72bdf-a5ca-4786-8125-ff20ce49eed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a507adb4-a541-4904-a1fe-ac818317d6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1c09f3-df10-40ab-8361-ada5e30fae91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73fa0b4-fbde-4bd9-ba35-347bf50ffc07",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf934ca-6ffc-4241-97de-5c974f268f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24de8a42-05fc-4760-b328-2bee654d179e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf972e3-feda-45b2-9350-22ef5b007488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c74e426-5461-491e-9d3d-c44eff2e01a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d722fa7d-b33f-490d-bbcd-da47582d9c66",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4018c8fe-acfe-4b70-b097-d093f62d2673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c39a07-068d-4a20-b95f-452c2a604404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce43754-7314-427a-a60c-6c7c10a77cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb912db-52bf-4b46-a292-451574605045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c94de2f-8087-4c0f-9a4d-fd2b3e473fd3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1e4be2-f382-4e35-b6d2-cbbf19169f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de99cfc-6106-4fd3-bed8-fd2c6f24580d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afc0eaf-8ab7-4d71-8bb2-5d877b8df701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2081e28-c9d0-4661-b27a-94c1fb92b223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a56e8e-e474-478a-bc5d-9f717710c107",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcb0d3f-020a-44b5-864e-948bb697a0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966320fb-9108-48bb-931b-8045963aa6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4510b820-08ce-48fb-ae68-c4f19e13b086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a15ca1fe-ed31-421f-b394-8c7129d7409a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd81ca37-6b5e-469e-ab42-6f035d7f6d1b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1f3145-bc3a-4d0a-b8a2-98c5326fb05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42704d13-2072-4d30-9c6e-fd5b615adc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c935df19-4843-49c6-ad8c-9d7f041e589a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "50c5962c-9fd4-48ef-9162-41d4487b231a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd3ea84-56f6-443e-9abb-ab9bb2b858a5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7321adf3-1204-43eb-9b88-94d4e6983c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a606d8-d7d2-4a4e-b97f-79e83946028e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64da9cd1-b84c-4bd5-b553-a4affcd25edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6662d034-b69d-4cd2-b518-2a307fd4a520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2e19db-7511-4c5b-952f-cf1bd163c757",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ebb73f-9c2b-4ace-9e99-5108ea00b9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30299023-8731-4a44-bdad-92221665f224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4ae6b7-f344-4edf-a7d6-9850cc3b0f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af9687d8-c070-46ab-8507-74e6c15f057e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab977d98-21ff-4a6a-a09c-1e9a1947222a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1962df-8156-40e7-90b9-f409b0bd3592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c3183e-41e8-4060-bd95-2cd5986c28f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c62dbf-45a2-49fa-8cb0-7531ac2ac2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06d71442-9307-452e-9589-844a3fdce905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c40d229-61e0-4915-a862-07e9d9e1d7e9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa131470-4d9a-4042-9835-ef701f64f63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3e2f04-9c05-47f4-80dc-0deb37fce675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc0d451-68b3-49d4-9aa8-4510b07d7850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "159227f5-b935-477f-b600-335df9d5bd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5765f66-edd4-4305-8c8f-4485bce33c99",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb7e8e4-c49c-4d46-b6fb-a70d8438ecee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bcf19e3-b81d-4ab1-b05e-c83d96dfc342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a74e2b9-339a-4e85-8040-71598045cdf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71b6f31d-4c86-4bdf-a42d-640aef16b813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9008341b-cceb-4655-b37a-e63471d3db69",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96d8481-d01b-4b4f-9ef4-877c1063e369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acda1f85-dc79-45b2-9449-b67261e2b6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e9ac66-b219-49e9-94ad-82f3623ee96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9af7b0da-0ed0-47f7-9a41-4ef4d1cee87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194882e6-cd37-494e-8b48-a6942a39cc34",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d6860e-2bd8-4a19-b973-592f53080ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d96fec-c404-4ba2-a670-8afb8c07100c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941b4c72-3473-4afd-bace-0e54eb34cce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "636adda5-c7f2-4d51-94ee-f4e1ac4cbd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b610f82-7b17-43a7-8401-6004ef2266ea",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003a58e0-3fc4-4bae-9873-38343958ff02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be021314-d476-4a4a-a5d7-ca88545b1916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4459b720-2445-4858-8ca1-3384c6124d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9d4fdb-d0ad-4213-adc7-f10faa6ac255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a38867f-0d93-487c-ae62-28d001cc259e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27187c7b-578c-40ff-9c5d-6c2957aaa4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc4cac2-db4c-4c25-b14f-31c9b24f0ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dd8b8b-7bb3-4ec2-a991-ce3a69f9729b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c33c31cf-f696-461e-99ae-4517dccda269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b6f272-28a6-4da7-8da2-47c8e27709be",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c1b7a0-af8a-44e7-aa18-08d984ac5745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3222f82-94e6-4b5c-a834-f41db96da56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6b2597-c56d-466a-ac6c-fe33622b4e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "841e35d7-9c43-4aad-b2a1-413d623bf8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a24a4f0-f736-46a2-9171-5b7e1d63c196",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5d5a5b-4c40-4581-9111-a4f71937b653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f19c8e-453c-4426-ab2a-5389e63f3772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf36c875-6128-4f0d-8b59-23ddf00a5e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eff387c7-b2fb-497b-96d6-6f2c497540de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ac705a-161d-428d-91f2-22feb29ce241",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fc32f0-f267-4cb7-8eea-c6e64f98d3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de36429e-96b0-4c64-87d3-2b4f0bd3cccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0dae1a-6e7e-4ebd-9bbd-3f6e00f9bf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c08f1f96-3809-4af5-b442-6aa5cb60d3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b73a969-b21e-4148-9ce0-1a546876d23b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e29fe3a-011c-46be-98e4-31134215f46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c80191a-0eea-4ee6-afd3-6f4888db6478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce03f47-954d-4789-a32e-12af09049005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "44449c5a-4392-4c90-aab0-60c6ecbdbf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed56010-631a-4959-a91e-4a648a03b069",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820d2b68-78db-40ed-bd18-5ab11471f440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78b1b99-7158-438a-8fb4-29d634eee1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0184b6-103f-41e0-b117-e183e5faea68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "05d5ee6a-5df4-4dd0-b41a-cdb5a9f3b2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fb6c10-af1c-47f8-ac55-c78c5dc4fbe1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f9399f-2d71-4c55-9f90-38440eab20f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9acc7211-79fb-4a7f-b691-beeefb4f3467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09955007-3df3-4372-a1e6-c6a25af9d895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6e7fe9-a42b-4181-9892-b7eed11d2103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efcaa63-84ef-4234-aaf9-8fef4ee78055",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aaf7eeb-b19d-4566-8201-0f09b4dfdb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f8e733-b3e2-4d68-8846-db43252fc7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3026765-768c-4239-9893-8215bd203078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e59585-5326-428c-a745-7976685761ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29daec16-65dc-4c56-a739-9b81ce6f8cb8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9ef36e-b2ed-4d26-b02b-5cfefddeccc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1b897161-9d37-4840-b571-168bfd4d6861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610d4d0e-5831-4608-a9e8-c42566a76964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9aeb14a-8320-4d07-ba4d-f69aeed149e1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebe0f5fb-b71e-4be3-93a1-f52a5f0fd45d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6cda3d78-7946-482c-8006-3cbe2d60e10e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911d1d80-75eb-4229-992d-c869f4980a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2decc540-5f64-479b-820e-ae5c30c4988a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d196d9-3d3b-46b6-b4aa-6ef96b6d60ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "233bed3a-195e-432a-92f3-569d32ed2dcf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92382644-0778-4008-b1ee-21c6105433a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54bb012e-8e5b-4114-8a6d-3d944777b65a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "911383e3-19ff-49ad-a506-ef69687a5631",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cd6ce36-4fde-49f8-9eec-d8ca56d46d5f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40a1908d-f2d8-4c42-ba72-f818c85ff7ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f058256b-cc40-4d9c-bfe9-c3841e17327f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1f40daf-8dfa-4280-9a37-3399115aa806",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "552fd148-510c-4cbf-ba5a-8bf55f6ed901"
                }
              }
            ]
          },
          {
            "id": "457b82ef-f114-4433-98ed-348875d3af5d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6702b9c5-df4b-4fd9-a6e0-8b4158d7ee04",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5e73fd37-fb78-4599-8db2-3eefd3aed569",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05dc480a-b561-48fc-aeb3-5d68bfea9a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8ab55ba2-c466-4e5a-b924-c3d610ba5118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6be105-977f-443c-9f6d-1fbb8a05c959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "232ac1c7-8b21-4674-b4bc-256944043b3b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "da819b78-1e82-4c91-add3-3860c5ded242",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e134dd55-0b6e-41fd-94fe-3c7f13fc36f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6713d382-c931-46e4-bb92-85d69ed0e7eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c837ce6-2b24-4cbd-a5fb-ba9eac3f79c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "65a4261a-9930-4d2e-be78-e9453c36cf92"
                    }
                  }
                ]
              },
              {
                "id": "75a21a9a-ebe1-4839-8ba8-e09705cb7d1e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78f92a11-9c3a-4c98-954c-a6dbdcf053aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18a13821-1eab-4862-a75d-06099194ccb3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dfcca56-544e-4560-9f30-69ac43575f94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3682c981-857e-4865-a9f9-e436a668e3fc"
                    }
                  }
                ]
              },
              {
                "id": "a97ed746-64d6-43f2-90be-b8eabb7fa2e0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4787cc5-4121-4288-880c-33ba335ef2f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "137cc5e4-6a33-4adb-94b2-94cd6e5268e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9106d6ff-4cb7-4965-9da2-2b3c85e7bf39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf175906-fb8e-4af8-a62f-424d1c85adb7"
                    }
                  }
                ]
              },
              {
                "id": "e7344198-5387-4417-a920-839289376dad",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6753ec84-ab89-4d57-b1cc-cebf482489ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31082f92-7eb4-4da7-bd84-2aba21f41d6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93e21d19-a95b-4696-9741-f774d7f7aa2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "80eb60fe-f18c-472f-8ecc-fad9ecb34b21"
                    }
                  }
                ]
              },
              {
                "id": "eef3f5d9-f193-4363-97d4-d4d5df0a96b2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "439121cd-629d-4ec6-8fee-5145d4de4625",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c79c12a-0594-4c96-8d27-88256d3c4704"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "962455be-3fcc-462b-a6a9-328a44ebd3d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3d004f0e-8ab3-44e9-b301-f9c9e05ac48f"
                    }
                  }
                ]
              },
              {
                "id": "c218b104-abe5-47ba-8480-5d56c26cd4c6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "34f90389-bd53-4576-99d1-c10a3e78fb3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b94de04d-d0b6-41b3-ac50-a8f1495dac75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d662aaa-7f90-45da-900d-cd5bbe922902",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ffab449-863a-4574-b74e-85d20d98c071"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e6c0455f-33e3-41fc-a957-3cd384d53be6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a887eaa-dd33-487d-9876-c7a13de51c02"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b878e3b-cb63-46bc-ae0c-f4d076aa1a30",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a66a05e5-14b2-4002-be6c-deb0481ca876"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30256a1f-e80a-4235-a24b-b09ddee27dd9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5c814971-fc2c-4b8f-b290-df99e4916096"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3db9322-d2f4-45fc-9053-daa65f0916db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c061622-ccf1-4057-8641-425b5cc9e948"
            }
          }
        ]
      },
      {
        "id": "0adb2065-1b93-4314-8e2d-302d5d3a2c3a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "16898457-6c18-4b24-bdc0-660635db81f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e00a6639-1b5c-4acb-ba18-ca67e346e2cc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2f042241-8ad1-45f8-845e-382e83dbf52e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5b5dd3-59d0-48bb-9862-ee6c1feb406f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1581e76a-4f7b-4843-b7b8-8384cc3ac45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ca7883-dbc3-477e-8488-51d1b6a2bfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "09b3caf9-25af-4f5d-b171-a7de2ba4611b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9acb3b-a078-405f-b811-8a025c5fa027",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfde000a-35df-4b45-b5ea-d2de8546a3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ef18f6-0d27-48aa-97a7-00d7f7c17110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95588e8a-1f64-40e6-868f-3b07c2edbfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a59ceea4-6890-46ec-9eea-d34c8007a940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a005bd4a-f3ac-46af-ba63-5646e6c6bd97",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38c4e12-e145-45c4-adcd-09ce93fb7b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543c517d-d442-48cb-adeb-c0ee06a1f1aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cb22f3-6e2a-46a3-87f6-cae396e9796c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "653b5e93-2ec1-4afc-9247-d0058da47455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2590afd-f076-417a-bb74-e9d9eec8c567",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bfb856-8882-4f32-8df1-f8a3353e3cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab35a1a-2f52-4331-9ec8-41fdc886023f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5a4f04-14f2-4c96-853d-756dd453c68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a29efd31-532d-4763-9679-d6e3ca8ab3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ee09a9-7021-42e6-9a6a-1f0898b3ce52",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f2b95f-240a-4d91-a7b3-a7f8400afcc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f94a48-d6bc-4497-816a-a3f58f0022f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8216d5-feb7-4633-b568-b71c3bf9c04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb7b2a5-4d13-4e3b-acb3-24bb611a7e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1690b8-3986-4ca7-9b45-66a6ae5d7b33",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bca1d2-2f4f-4147-9566-cba15d7fd5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efbc0e06-803d-4dac-b1bf-024005b962e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdd1a6b-dc9c-457f-b604-c77a610005de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b70924f9-4578-470f-adb0-22148ab58284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4150943-374d-4af5-b275-775255410731",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea5e75c-a69c-4f7b-85bd-47a1ecb0349c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e24614-c9f2-4175-abba-be6b942820ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a587ff1-37ca-488b-adf4-6b96168b46c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8582f2-378d-40c2-95a1-5395466b2919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a072773d-4ef8-4e3e-95a0-b395131adebf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbaeb82-4bcd-4a70-a122-d0415408974f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cda465c-bb67-4de6-8275-b04502d682fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a58229-7262-4901-aefe-b3569c4a7104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "283aef00-1413-40bb-9529-7d4e526f062f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bb73d5-1684-4ad2-88da-0ff934131eb4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5518e9fb-2993-4130-9c2d-869c9f3cddfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedbb59f-8657-48f1-9e23-0f08f23a968e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012ab1e5-c4f5-4bc3-9b1b-691aae4bdb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a38404-79bd-4bb8-9b36-ecc6d6537a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f7373b-ec81-4567-8e94-254f25732e87",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09bd806-e55c-4933-ad7d-d18f3b8dc69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64bcf217-f8d9-452b-9903-2009633f10c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99cda33-8575-4831-8c0e-3301fb395ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86a1a837-ef85-4f72-b7b5-41205883c641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2dcfb3d-2364-4964-99b2-7672b8c85a50",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fed23e5-bbd4-4664-9649-443f1e0f4b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852c9b5c-9f5b-445d-aca2-34d193dce77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee13ffa5-322b-4667-881b-e4c479ddc21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8cde1536-cdd4-46ee-8928-e83b8aa1a0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bc0aba-2135-46ac-aab2-2aec79ffd931",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d3d0e0-975e-4115-93b4-7bce83d1b574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc94f90-27f1-4b8f-a188-9d8939881bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c53086-3e14-4390-8d99-1c13441748cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4aac89f0-256f-47a0-865f-7fbd23d469de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9207013-e64b-41ba-815c-db24aa02e973",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8b4042-26d4-4f11-a8c7-dcc72bb915c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8340113b-90c5-4b31-9609-4c4b260b8581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00c6414-b0a6-4171-9e7e-150e0df1da0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4887f545-e22f-44b4-8574-5baeb3d65b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c4c653-85ba-44ef-916c-11bae25e9a4f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2a3092-0a13-4c77-a8fb-f268b847717e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d48a7f-d29c-426b-b251-bb6cad8c5fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8a6f68-5931-446c-9e5f-4938c3d87735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3764d5-f180-431c-8be9-91eec586f3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba0145d-6762-40c7-b41a-070984b6e0a6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa867a0-0188-4895-b9bf-e32dbb74620d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba7dea9-1d2b-412e-860f-a2c89df01fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35fe120-1807-420b-997b-efdd5588ef75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd98155-1ba7-4446-901a-cd83fdb92729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c36f901-521f-47f1-8255-4b73bf906df0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ca4b16-fea9-4ff8-8241-3f4a67e71bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7c191b-c513-43c7-9e95-f1d4bda08d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3748ef8f-0697-4b99-a875-672408664607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3c2207-dcfb-4fee-90f0-ce2a6658b416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7596351b-9855-466a-b464-a9ef965418cf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da5f146-c1ea-4692-a6d4-8fd5ce521952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a923d900-3961-414b-84ba-2f7c4bc6a3e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3febf099-1c0b-4ffd-8086-126d0ed52424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd0bf59-e559-4312-82b4-2c966fad578a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e179b2c-fa69-47b3-ae11-0bf6221d33b5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad311a1-b567-433d-ad61-07dd806e160e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7425b035-8d6d-44f4-ae4b-5e2996fcb673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1967a56f-afba-41c5-ba31-3f087328a98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c018d7e-e21c-4f81-84c4-f5d5b1b6e402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cd1869-0388-4ba6-b6ee-80d91e211a3d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b06e03-be3d-4e78-8823-19b3f81403d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22106bb7-56c1-4046-b64a-7babc55a5751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b812a9c-0f2b-4cfb-a753-c5e0639bde68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b44ee78-5ffb-4d8e-b8df-df53ca6d1394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a67033d-caf2-43f2-8dd2-3cc71418e789",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e88fc4-d7ce-4386-a295-11ece361c2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5f0044-3983-46ca-b2fc-cffcddb7e59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb9d17f-8e34-482c-914f-44ec335a3377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d09d129c-8ce5-431d-afe0-1d37ea689b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1447e84-ae52-41e8-afed-7a47f893229e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02fbbff-f309-4cd6-bea5-6c282aa67002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2e2bed-6af2-4577-b947-c08f17d45141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eadf1076-7f02-4eff-9a53-27fb77ceee03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1316704a-e22f-43c8-bcff-93fa186fa128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedb3a53-1569-45aa-9893-5b85ace3edc7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f0f52b-c8fb-4847-95f6-c145e478bbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227086ae-dc4d-409f-8631-9684155ba4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54e6de9-7685-4b9d-bdda-497d66891ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fab8b26-f84a-4797-a92d-2d8686451dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37f8c27-db24-4b86-9484-69de417b8894",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c735b8-fe49-4c12-974c-79b2dc647f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed4ce86d-a4ea-4a3a-ac35-613840ea1d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa473edb-f261-4172-ac5a-45c04120eb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "427c5d83-fad0-4d94-acf4-f79c1bd39752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5d6754-d4ec-429a-9acf-9f4c3ff6f296",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb7ed05-4ec6-4142-a4f7-273fd3beee20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c81db4-6623-4206-8a87-3c203f398a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b43058b-b6fc-43dc-970f-b78efa35ba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "772097b4-92d0-4e14-bd47-f481335b97ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5035b88-293d-42d7-90cf-e5df38577324",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92537c9b-6a52-4213-afe4-d564a95ac225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b166fe5-ef63-4a10-8dc8-da7fe9bccfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6406b106-92c3-4031-a0e7-836e68a9a95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b98a757-f659-4965-932b-5c1703c62161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70e2259-d7cc-4857-b640-b7db94a4ef1d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3388d76b-c9af-4a26-9d5f-9c7e9c6dcd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2bdf8ec-1dfe-42f7-8a3a-293a56b549c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83dd0d7-b5d0-46d6-a8da-7264a00c0179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc7f3e3-d812-4f33-a165-d0deb4e6f20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bfd8e9-afd9-4785-95f4-a28e535b1086",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d90ee27-2ec9-47b2-85f0-89099783efd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63cf48fe-03db-4b71-ab22-20e5acc68cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e72f33-6066-43e9-ba48-236c497eed69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daec1d18-abc0-4b22-9eac-0c50545ad0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3375c45c-b2e2-4984-907c-d76b859772af",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7266ddfd-85a4-49ea-80e6-bfd7fcae59d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aaf97f1-78fb-40c0-ba6e-e90cbda20423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd757ab-1d32-4d1a-92d0-f4c2e01ffa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b23c1f77-eb1c-428b-8b95-33530a44b8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16316213-46c9-4951-9d60-2217ad7d9868",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51db85ae-0dfc-4400-a1be-146369b0ba20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a545cc2e-240c-49a9-83ef-12505731e963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f61c09-00a8-4f9c-9cfd-419262789065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a26289-09ec-4d90-8282-c7f3a696df8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a31582e-1848-4f1f-a4b4-be216d720be7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c418508a-45c0-4d7c-968d-c34a5c957441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d300ad1-8941-4348-9d82-b5a75025518f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a11d73-1308-47fe-b721-0246d5edb801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f18b88af-de93-478e-b605-c33a88b41d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97606ff2-c89a-4811-b868-14acddd314a9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef95d375-4f8e-43bf-a98f-afa0f8699842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031800be-3701-45e4-ac3f-c67eea65107f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52046a86-d43d-4b3c-a204-1c0fa4498198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1bd52a7-1f16-488f-933b-d21c24c2968f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a728f32-f766-4fa0-a231-c2710670e717",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e592a68-095c-42ef-ad7f-72cae2eb7875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7947086c-6b18-44ee-b5ff-9943415dce12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbafa7ee-349d-41d6-b85f-d6794bcf11af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8963b8-5499-490e-9620-ccb08d6d2263"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1317238c-1b64-4ff8-94d0-66f9224d9ebf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f18b1973-01b5-43dd-9c7b-792d460b66ad",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8965751-f599-41a4-991f-b26897846910",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "325d3e1f-1101-4990-a148-adf99586e958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2dc9c40-6fb8-4e53-86a6-cdc3bfd69a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8d87d9e-c87d-48e8-a49c-d985d624f21e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b296d85-9858-4fd2-9b28-527cc0b6296c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1197a39-e71c-4206-a8be-b61c3b6cdeff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d31b4486-ff0d-4fa1-ba8f-45987c03ab4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39b2c54b-7fec-4c6d-b1ac-6be21a7937bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "588e5592-d161-404c-98bb-481a7c6cf48a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eada8f5d-a32e-487f-b49b-ab7bda6615b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f05eec7-5b16-4be3-b52e-e46eea1411d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "730a5bb3-329b-4811-b2b5-13fa459e1f8a"
            }
          }
        ]
      },
      {
        "id": "c9262be6-4b00-40e5-9425-a82cf7b0f406",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "dd64359e-7aa7-4ddb-83c4-41bb8c3aaae7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b71267e-9dfe-4eb5-81b0-b794eff68587",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cbf1539f-64ae-4542-ac7a-43961a81adfa",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ede498-dc7b-45e0-9d62-4074951bd99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89b9709-49b2-4fa7-82fa-139da0cc02b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5769dfbc-8256-4de1-ada9-43a0044aa229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "40eabf83-7f2b-460a-9205-aa24abc749e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb5b789-067e-4f40-b598-760824989ff9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a37488-142f-4c34-936b-db8439afee76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fce5c5e-0520-4a1c-864e-b5c20429f96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f177d9-0202-4dd1-a8ba-39b5e336b294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9f7bba-04a5-47d9-bcb1-9379b3de3e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd4835f-6485-483c-979e-210f3443489c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ff520f-9b80-42b2-ab77-54081f63a1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6abc79-bbbd-4a95-8eee-918633d68507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fbbd5f-8893-4d30-bab5-2c80c3757550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4065dd54-3db9-4e3c-9965-cabbb6dabe49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe32948-5415-44c2-9351-0c094912d52c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00970af5-1dd9-41f9-96bb-587fb1659655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e6820f-6b76-4416-a544-875da5bf4f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf505f5-92fb-4b56-a773-9ab7c186d9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb2d714d-7bd7-455b-b279-ecfc5d71030c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5383cfe-d942-49fd-a3cd-6e24c5a0c966",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f4e207-97a5-4863-a06c-d1fe1e6345bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60aafa1-1c79-4b7f-bbd9-f35c719f4831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94600f1d-5ff2-4250-baa3-e33c44364e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f65e9e2-ccc5-4a9c-843a-8342d22d7cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247bdc3c-9f93-42c7-b2f9-14cb8bffb30e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4dab5e-2931-4d3c-9748-6891cd030334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01dc68d9-3d89-41ed-8d44-2f22fc86dee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a5b7e3-8594-41ce-aa37-8eb23969eb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b211006c-292e-4284-9bd9-1677c1d7805d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898ea958-365f-4f41-aba1-29272dd34333",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f1154c-19e4-4fc5-abd3-b2eb2587a969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f12763-cf75-47b0-83ac-7e0c7253bf85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e7e0d6-5458-4d4f-a8d1-3684a09db66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a9b8b6-5b3b-43a8-8b07-09f8a43b7fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4e4ed4-cdc3-4388-9107-fa65681f4368",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10b485c-240e-4c6b-bf93-b4c1cda6d8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b2df7a-35a2-4f37-8850-7b462fe88cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b53039-befe-4675-87f2-c21c3d0161e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31ad9b8a-673c-4582-9c5c-ecf4e1465c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7dbf0d-4cb3-4959-b773-f251ef347b50",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ebfeab-516e-4b85-a7ac-e5985e9ea0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e490b6-a33a-4a05-8364-f233c0e0cf6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9148fcf0-2a60-4720-9d4e-5bc7c9aeb67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aca0a33-76a2-4727-8d99-7b0d19e3f3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b959a85-df79-4e58-9fbf-593b8807873c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e6f0aa-3f7b-4fbc-b31c-cbd2109ad90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cdd00d6-cf76-4991-9f5a-b509e4063492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff1e0f3-75fc-46df-9e2e-83cdb1056546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62daef43-6786-4986-8788-48b45ec93e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9084465-6eea-439b-92c4-01966b937c42",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3efa94b-bc56-4ee8-ad3d-36515d14ec50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a67d76-13ff-463f-92d7-80b157ca6c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af21db94-6d7d-4db4-ac45-4ddbbad13395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5830b0c4-4cbd-4909-b5a1-6efd853775f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c154ea-1001-43fa-a0d1-75f446056c07",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91827a3a-16a1-4fdd-ae5a-8d63810b8414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d060f9d-d8b1-4266-ba6c-034377f0bbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9538a8c9-8c86-4d93-b5d7-fc263a36839b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c34f4719-8054-449c-b7ae-0e208c675e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25a6377-33a6-46f2-b30e-b57e610b3176",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec4138e-37e4-40b4-9867-6dd6a81e2546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb81ac95-411e-4572-9d29-edb493bec28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ae0fe3-e654-4d8a-9352-d5a20f383aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86d4b091-15b1-4f92-8b9c-23e7e2fe8ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec64957e-8676-4050-b47f-79a9ba86ecaf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5f3444-cc32-4888-b154-c1292efa29f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d3520e-0a4e-4438-a4b1-444927189408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332b3b29-cdf7-4748-b63c-5c0039dcf6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a48db53-8e55-44c5-be38-3e781c6705d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9645d2-f1de-4466-bb54-5792bd3847e6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e48bcb2-a355-4b07-892d-ea93656e3ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657a4163-c31d-4227-8733-da43935cf025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442709e5-0e82-42ff-897d-e4144b134e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0de6da8a-ece4-4948-b6f8-e8299450224a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469423ef-da3e-4e0a-a95c-f78109762832",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b885e44d-0fe6-4a6a-a063-4d8ff5091147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894e34d9-57b3-4a00-b6c3-b981ead73e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f42c127-d4f6-4643-ae10-2827853c7a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3391e83b-fddd-45b2-ab8e-4fbc5d2038d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19df8585-dba9-4821-899e-802ec1b8cd35",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96cf261-758c-4137-b722-1120ef20caf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51cb94f-562e-4d03-8c62-85b5cde386a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc664c3-4b59-49c8-b703-135f1642c029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f550a6e-e207-4f83-947f-ea088adda892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1074ce47-9ef3-4a83-9458-353de983cc19",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ba472b-b486-46e9-8d22-4532d0e10719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1804c6f-1ace-4e40-b74d-3bf800e89166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22560e0e-7f91-492c-85c8-60ea9e2a61c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c52bff-537f-428d-a05e-f659caa89922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cbfd11-8d64-458c-906d-3224437b61ec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a8e4b4-3396-4f25-8b01-22e23f576eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ee081a-9ca8-4fd6-aeb8-1b1724f95306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84394ca0-63be-4611-b7af-3b794b80ded4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bffbbeb-758b-48d3-b668-6ae7e27b85f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d815ad53-75cc-4b4c-9f1a-8aa5d2943cbc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0eb281-be0d-4a69-ae1e-4afc0364dabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56f0c0e-2c9c-4488-b015-b0c040fdc44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0798273-3f6a-472c-a495-b46132cf897f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b755fd5-0108-4f56-8340-612e69aec64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d57fedd-2d6b-4c53-ac9a-562e47acefa1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88fc470-c528-4181-bd5d-cf39aa2a7896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686444f8-2a8f-4dcc-b33a-a739f20c4e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24beffe5-bd02-49ac-9bbc-7a5c15bf73f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e5b821-de10-4c0e-9195-c3ae4500076c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7683d0ab-6892-4e9e-a29e-b361fff0b72f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847f9506-1cdf-4411-afab-f633049fee6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12af42b7-cab6-45ee-bf6b-75ccfd768ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b970bb-b0ef-4c68-a6f3-a11afa555b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6134eb56-de9e-4261-90b4-90a05bce74a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52931c8-4385-40cc-905f-3d0f24f54fcc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bd2596-f472-45f4-b562-fc4ade969320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bacfff44-4ecc-46a6-97e8-21444cc8bbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59155ed-d093-4a97-b112-cfda2cec080d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a9bf9f-05de-437d-af2a-b71c1dc0f3d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38aee2d3-3abc-48f5-8434-b53872e490cf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f95ce26-9ad6-4dce-b8ad-14d013106cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48faa2af-ccec-4a37-aa9f-689e02e58181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d1d085-832c-4cc3-bf1d-b2399344c040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e761a91-8110-4f67-9894-03c6690bdcc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38983e92-e8b0-4b50-95db-f3d25146479d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f336a7d9-b117-443a-9ef7-90bcf2b7a8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f892ef4c-5d36-4809-9e9c-770b3090fc76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d916ae9-002d-4d38-8067-622a1fc78ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fde831f-bac1-4ad1-ac29-1e46b6a662c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16772348-e11d-4408-a3fb-4564a6b42dc6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5088af-b7cc-4003-b5c8-db9882439645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0b258e-9997-48f1-bcd2-6a91e33460c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5aa8bbd-d04b-4633-b33e-986bacbafffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95052128-7676-4cfd-bc44-01343a156ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39350da1-d709-4f86-a538-91388bf11e65",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6286c191-7f73-401c-886d-484657f1ab23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f69eb42-cd43-4708-a741-a726accd0b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511ea20d-27a8-4d94-9cfb-5124568a3953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e86386f5-9aa8-4b1c-9b7a-dd9985be7a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0a9b7e-068f-4eaa-8017-46ec0b594dd4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17f8384-949b-40a6-9293-a43cf3458380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f0e845-cdaf-4e07-a3f3-1fc6f3ac2580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ccdc21-699b-4b6d-aaae-b19f0280a25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f301d61-45ed-4f76-9755-7a5ae244746d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7298c94-c27a-40d8-bad4-678a2f2361c0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b693f93-6303-43d7-b745-004e6aab97c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81f07a3-ea59-403b-819d-00cfdfb05d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2a88c7-12f9-43f2-b61f-e79bff4d0dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "268b495c-7fe0-4c2a-b6ec-94d61c478527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06e647d-eaad-40ec-99a5-9b148d9a1473",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efca78f5-28d1-4c7b-9ef8-19e96801bf6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0b48d4-3d6a-45bd-9985-260692d0f9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcb5b1b-5688-4c92-9f36-6b84abf72c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "858a5236-1a60-4a3d-9610-ba6bd77695ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3973763-7565-4387-a151-c15c611c4ba3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bf6c21-6a02-42e1-9b67-6a6f177b7fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1a79ba-86fb-440c-854f-31897abac4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7689467-21a7-40fe-b66e-d484f0b2e31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59374175-8e71-4d9c-8beb-4dd9b3124f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a90a248-048f-4f70-ab8e-6367db77ce0e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf25f1f0-3361-4a6a-af75-0dfe4c10e2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3a5dcd-ee8f-457e-8a28-dcfdefb33d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da028e4-0e07-4d51-be78-6aa1e2363011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fbb0ef2-b7ce-46b9-8b47-a873bade6970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214f8942-2058-4243-ad89-9367158ad3b7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0a2a0c-53d0-4d3b-8c5b-436a27ed0c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ae8282-fbf2-4075-a8df-293b7929dba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5f9e47-18cb-487d-8d47-141bdd109632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad9cf3c-0989-431a-9d98-f17d5a7edbae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60ec5ab-044a-465f-8bb5-f458449f6cd1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3cc629-c4e0-4859-a4d9-3e5223b1e15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90f88fe-0646-4ff5-a734-d2aeceb5791d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16819c2-6547-4aa2-8a12-2683e4c6f65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4efe73c5-8efa-49a7-8fcc-7f85d865d5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50125fd8-d574-4cea-9c9c-92def41f94a0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ff7ad9-3c79-44e9-9782-a80eb77bdb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65180745-ca3d-404a-a9ba-15731046559b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db31c002-77e8-4cf5-b041-18c07a6aeac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77df4c22-0252-420c-b65f-06f524d8a380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5f9fde-12ad-4a4c-b827-a135aa928b61",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaf5259-962b-4808-8667-1f1e1bdf589c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b7296d4-bacb-40a1-8cae-ef185393f582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46726677-a891-42bb-ac35-35a75e0e447b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f6f772b-f77d-4278-aee5-2e3aacbf99ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3636f19-8bee-4f16-9efb-85f451bb7f5f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0068c8-42ba-4749-93a8-2855683df10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b329cd-ca0c-4081-b00f-3c21a8d132da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c363273-9a72-499d-8a5c-9f79bc7e40b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecca8cab-3497-4507-ad85-6cf32806632c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ce74d96-57c1-4465-8afc-cda2e4a39aa9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91e9c933-c64b-4a0a-b14f-33202197d35e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0bf434-60ea-462e-9561-e05c9c90861a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "87f552d6-ddf4-470f-aa24-4ffeb6b68cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13933dc-2df2-4497-ac66-1e141dfb61c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69bd649c-a7d5-40ea-afa7-475c33589f41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f95c0c8-05e1-4a02-9e34-d60b330f7b7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da8fc46e-d3b7-4b95-b5f4-1e7fde3c82c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e3986cc-5db0-43c5-8e4c-317209a91d10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94c41715-d147-4dab-b2c6-4125635d845a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ecdaa89e-5e0a-4eb2-88fe-3bca6c5f7073",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0bba3043-e3bf-4a43-a18a-363653a67581"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dce13067-8c99-4d56-a9fa-3e8ce0db3d20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99cb588c-0d4a-4e1f-b2a2-eab0c518187e"
            }
          }
        ]
      },
      {
        "id": "1056a0b7-99c6-422e-8260-af87dba7e890",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3d6658fc-065a-49d2-9c01-b525ed2443b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60dfc5eb-4d31-440c-b888-fd79945b3fad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed486e83-2ff6-43ea-9625-6276db682fa1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d37348-945b-4c44-90fc-eba1f1291ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090a77b1-b08f-4b16-8817-c51a588a6636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d1c972-e09d-48b8-8b87-bf50c59b2a5c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b928c79-b649-4cd0-89bc-bf49c17c7956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca93b8b-0089-474d-83c8-3146f443f7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe1eca1-b567-415c-ac8f-9b32b247c625",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fc2939-84fb-4195-a8d2-a79e1e4ce385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7927828-6d3c-4b4e-a1c4-fd5630d1e1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed3043a-4782-4e97-8dde-48ff65537c42",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddc994e-c440-4e76-bcd8-993723cd51a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3dcab14-040a-4da7-be26-6cff4786a8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f63dd7c-dbe4-4259-b8c8-29c65402052b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37b7eb4-cd41-4bea-bede-0ab25d93ff67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5382b512-ea6b-4c5b-8e4c-262980c125cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f91817e-6650-4d37-85d0-23eafba8ffc6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd35a6c-72e4-49ce-b36a-169a247b87b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "564d4897-3905-475f-b72f-949045345bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9d78cf-9722-4e4d-a5e4-6bcdb175ac34",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204c90bd-1856-436d-a17e-2eefa8fccf3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616e1860-4345-4980-b59a-27158861fe64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad57bcc0-545b-47c3-9c31-f74cc495175b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa408a6-70d1-476f-9d37-d2847cb9ac80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672c4c5d-c932-46d9-8e87-187639ce76d3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca6c28b-82e9-46c5-96fa-20d103f2b908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ba7a506-146e-4d71-ad4c-db6399d64b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa9363f-eb56-421d-a013-fb7031928fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c411be18-dc7a-4ed3-8339-53eed40593fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb05950-c0dd-4e84-8f31-df44db80e894",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72e253b-93d8-45d6-9eb6-35c5c2f11c71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4eccf03-1561-4fb0-b020-d4f126da8cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd81c28c-2fe2-449c-99e0-b3f78d76a0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a34409e-53e6-4fd6-b76b-91b0483378ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5150481f-bffe-4fa1-bcbc-763a543836e4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40874556-0500-4509-8f5b-08b176adcbea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e00b123-240b-4f28-aef8-787e7d75cc4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ebba81-5397-48b5-8b42-dd91982cb273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8981ba93-1b94-4ad0-aea4-072c94ba0d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a155f314-c25d-467a-90fa-b1496c0f2b3b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afefb3a6-3aba-4e28-92aa-32087a12c962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "199920db-121e-4527-8e13-552e079b14ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7c6c98-6a6a-4f08-8b96-2e3c23ec2bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fdef98e-9cc0-400c-99c4-2306a5c9784c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e09dbfd-21ab-4b47-ab35-00121f85da63",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10ad1a7-b5fe-4ae4-86bc-b627010ecaec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5890c4dc-2c2d-4f9b-80ed-ce90afd34bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c050e6-b14a-4cb6-a66d-436ebab9f9e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e6fc04-f5a3-445a-820a-5e6c3e7512e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80abc022-c8c6-4bc7-9620-d8630e27e245",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca2a7c2-0a0c-4c62-b975-2353b71209ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "059c8a88-3ee7-463c-ae6f-bf0cb6660d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdfabfe-496c-436a-a868-77f5e758cf1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0746657d-00c3-40f0-820c-8a4b01b1d1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc78e68d-f3fc-42ee-a7a5-39a21e490115",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63495f65-a987-460d-969d-1f8501c388d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d88c0a5-6077-4bbd-94e1-32252f91e641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93737024-64a2-4cad-9f20-cbfdd18b56de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b8fb1a-3a9e-4cd1-a423-20c5c27eeeb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de081023-2555-4fcc-9215-cebf5e67325c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4994a000-4f73-4948-878b-3c4bf8625217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "444a4a65-8c8a-41a7-a445-6df9bed3bccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "160b1414-a008-4c1d-8964-9364376b3e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352f651d-5205-4367-aab0-e01a1d070491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0de48f-f662-4535-9e1e-377c8f4a08e3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7991a50b-23b6-462b-8652-deb849aaf8fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc1d63a-69fc-47e3-a85e-f8009f6af593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c9d747-2611-4d10-bad2-7cfb047c3869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5249d43-54c4-4c6d-810b-2d078b0c24e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887b8aae-1b64-40ec-aef0-49da329744a1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4174dc1-28d8-4865-939f-21018a31b7e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d476c9-0469-43e2-aedc-8ea37906c714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8686ff-2614-43ca-8324-75a8741e0de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2a3304-8790-448b-adeb-86636abf48c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14086de-b916-440b-b5c6-dbd6a7c4e676",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6a5d6c-b6cd-479c-8ca8-60f013c6c960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744964e1-baad-4fd7-876d-9c5ab1dd1c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "192a08a1-eff8-46bf-b47d-ad69bef3e967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd81912-50dd-44ec-8b77-a71a3dc55ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b2beee-c341-4da8-8f2e-a452989f328c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7481ce56-83c2-4cdc-9f82-fc7345e61f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a58bfa-e78a-4e33-a50f-c63899c8c07d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f27ee2e-76a2-4f1d-922c-73f8993536d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d999877c-fab5-46fa-8edb-c21dc0d9ba11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4256586-1a87-4193-b867-fd5e32dbfb7f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b119f34d-f8cf-4409-9b00-2cb4b28a7eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59fa360-ed17-424b-9bb8-e6370a0788ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e78cf1-fc5e-4def-8e5e-7f0a3504d99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd612c6-0f51-4c7e-8363-34e006d7e66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2f3645-2150-43f9-a5fe-8327d3f08ec9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5d7d52-b3a3-4587-a477-da9ac301621d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaffd05f-01b3-4303-b962-03df3746d051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2014a5a7-9120-45a4-8f6d-c24e3ab800bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc5e349-6d11-4b63-b3ad-d0ebc1f47274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e4cd94-7442-452c-8084-0ad4182dddce",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4edd48e4-ba67-4951-8a8e-1f5b07f5ef9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179a8543-9a82-4c0d-b531-f75128a01474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7792b61d-2f24-48c5-9b7d-f5eeb4352f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd969ff8-ec4c-4789-b255-dd57a4e75d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020d4290-eda9-491a-898c-3cfc9d1b195f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e9fe6f-642e-495a-a178-c331ebc5095d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16528a5c-00b3-4aba-a98a-1d394ddb6f9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f206767-c68e-49a8-90b7-f8b33d7795f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb742cf-3b02-4e97-9f69-64129f7230d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59af280e-881a-4d8b-bb89-44f2cd048941",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a08786-6a2a-4dfc-a369-c07c78246da2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf875747-d9f8-4b88-acec-8b5957c3499f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb62adc9-81cc-42f9-a5df-603f75cb5a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b82220-a4a5-43eb-93ab-d42607296d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fce4fa-ae4c-4d11-a9ba-886b6942de3b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127933cb-f317-4585-9fda-f83a17a0e8a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a246b198-d732-4abf-906b-8696cca18034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440a0833-2ca1-4675-b689-a8e0497cc713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143e2d58-e14f-4f09-baa7-6c2b1fa51c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2411d85-4b54-488b-9aa9-4a935baef347",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f20000-52c6-48da-ae31-f05e217fd273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb3d231b-0ad0-4739-87be-75019807805e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39dae143-3f23-4b54-948c-7125a5fdbcbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288cd310-0dd4-4c54-aa05-3496e4cd3559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8302d73f-0729-494d-bafd-11068b2a139f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773ed153-85c1-4d06-8a80-b4c188f59f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa853618-1965-4ea5-b5a2-c40eeeaddac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586212b6-f3ed-4fa8-bdde-a9f84e94de0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fd8178-7888-4678-b1c0-f07af05125f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c502c60-de35-43be-b003-c5fcdc6225e6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f7b77a-7471-4e62-b917-2448ef735063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1427d464-d700-4598-80e1-da3afdc3d904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cc7250-fc64-43fb-ad06-e03b230be943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b048d85-e329-47ba-ac99-7b109e4ef7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc95e4f-e21b-41e1-87cb-b992f521cfa5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e50deb7-4ff8-4d6a-9e56-93d4c3a1c6bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "692d5519-013d-4b17-bc08-bedebfe4862e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab4736b-9f8d-4cc8-aded-820c466085ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840bf6e5-cc10-4ea5-9073-e83bc5e27da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5682d4-3a59-4531-80b1-9705e2ef5fba",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3c3942-65fe-4049-ad81-fee85fb1a435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21a81275-89a4-4f90-967e-ef104ac28692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a7509f-c666-4156-976e-e4cf953d90e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42031bc8-2d0c-4a0f-93ab-f5a40575c703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8eb3a36-8e3e-47a0-90dc-a03492e1343d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ad7835-2444-47dd-bf37-d930f5e0ab58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e22739ea-414b-4f5b-9cd1-31a03bc12039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e84b59-135b-4276-84e9-c4b072faa632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96c54f4-0248-4dea-9144-58a4010a3299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824c7c71-b3db-4abb-b19d-64eb4569c11b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d9f9ad-4d0b-4061-b385-78a0564750b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "833842ba-f2d4-40a1-94fd-26b72fb32003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adb602a-2396-4b6c-982b-10a7b7258a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33e93c9-86d3-4d6f-82e8-285a62182955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e801275-3e43-4e73-b8d8-1ba60c133841",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9393c150-9b47-4e6d-b7d0-5284ce2af9a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e886f11a-eafc-4702-8515-b7752b88645d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7b7860-bb6c-467d-bafa-52b0e61b84c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83335f57-4afa-49e4-b4e5-560c4ee2c209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37c95df-febf-4301-9396-5899903696de",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2792be74-dc44-4e27-81c2-9c22c2d5b23d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1473f81e-e462-4bd5-ac72-5cae9ce76d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec98272-3760-4908-a8c6-f2413a78f40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d42167-ea60-4ae1-89a8-4c660ddc3fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b902478-b433-427c-b7dd-c1d7f5fbae5d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032b01d5-49f0-4ec6-873c-220c8660bd8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41bfb881-48a0-4d62-9df6-4428cf3932ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfac6d5-bbe5-420b-8173-cfdc8139e4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3637cc28-3d81-4e2b-9571-ded8ab921961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a5fd5e-6bac-4cb1-a9ae-453c9d8898e4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e662fb84-1443-43e3-90cf-6e4fdef90c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec8157e-17fb-4dbe-89a4-46d6a769c1d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdbc8d8-93ea-4219-b0a9-7f849bed3e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935a15a5-c1a0-40ca-8f34-4a2e9bee28db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb258efb-f41a-4ac1-bf14-8b7626ad17fc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7565e05-c5f6-4217-b548-c09bc296bd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6051176-80b0-4d78-b9c6-4942a1f6609d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d25d4e-f342-4835-bd06-0b0ec460dee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0600aa83-252a-43d3-9219-c020432b7a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd049921-9716-4fd0-bd45-b6fa12db1dc0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3423df3a-0e52-41e8-8140-9d4e64e3d3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7324e6b-1d72-41da-94a5-8e146e0f807a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047bf20f-3d22-4bb1-a9c9-b4fb0863a1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c4a30e-0d87-489c-97b4-2078649516ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5907a0d7-1e71-4d9c-bd6d-ec6cfe6b20d4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be1d914-48be-4417-b1d9-d38b9a74c2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2f3246-304a-4794-b1bd-b0ef94b80086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f55b31c-bdb7-4ba1-ab67-6a1897a21d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c27a0b4-8cbb-4c37-bb4c-9993f2cc7232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2c1cad-34e3-4ffa-b534-b15cd2f6ceed",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4604ba5a-d04d-45a0-866e-d0fbceda3b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8870b3ba-318e-4dcc-b907-bbf6f2d373a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0b2961-4831-4d69-a878-f697e27863ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911ccb5f-cb74-44d0-9ab2-346ce2a84e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269d4a13-83a7-4614-9d65-7dcbc32bf108",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40772c31-4001-447c-bcc8-c44422b4daa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2f2630-dd12-4af8-b427-e15afd9c7302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccabfb0-d2be-4dad-92a2-39bcaede9adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d672be2-d660-4a87-aebc-8320e709abb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53cd594-ed24-4bac-8ae8-88845ee1f8a9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0bf005-2849-4e34-8d79-3f946ee166a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4656a72-9a14-420c-a7c1-5a24f0683674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dca291e-bbf1-4c70-b3ac-6227600054e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b3f3d4-45fa-43e6-a4c4-1a8fe3b4902e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28755921-7488-4d4e-830f-9e08ab648635",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66993f6-fc16-45e3-a380-8f0d8577ef83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75662bae-abe7-4067-b669-ad84ee4971be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9f3e83-6363-453b-b3fa-1a43bc979892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5508ab88-fa10-4284-b973-bde361e1f355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e50cb0-6c9f-4c8d-a570-8431e1094914",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b8eb46-5700-4ef7-9813-2b91b86ade6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45973116-a309-40e6-9ccd-a3731695563f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835a69ea-c9e5-4541-9530-947ac5de31d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3319a2d6-8283-49d4-a46f-23dd99d89fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ff005f-feb2-4f63-81fd-0962a45b7850",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51391c39-ee8d-4639-bbf2-798fe4c47b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03fec783-6fce-4380-8d65-dcc883f0774c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b2fcde-4142-448b-967c-979282a60ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50d61ec-e1f9-422a-b831-9bfaa2188bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17303a81-d21b-4974-8cc4-aa91933181a9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f88cfcf-eb15-4210-9f1f-b30172cfd24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb25ea5-37d0-47a4-be7c-6fb0f0a5a3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c99495-4efc-4b0a-ab29-cdc897d07e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee2cfe6-88be-4420-b4a1-8aa4a26ffd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cc3f7c-87b2-400c-b119-f2384f0b8851",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051e39b3-8744-4d63-9498-9c8b3a2958d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2035dfc3-f74f-4112-afd8-05aacbd077d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faf8e53-7b25-46b4-9adc-62dfe38062a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86281667-b2df-4c4d-b7b3-a7e0826b0b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca124306-f5e7-4380-9892-35d9cab72fbd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bb4129-477a-454c-8c9d-32de337b94fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52d97d9-9177-4e7d-afea-d94edec00241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bba3b2-c066-4c2a-bdf9-cdfe29951579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab248de4-4659-455e-80e2-171ef2d0202a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6155a46f-5403-4c97-afff-109ab991e41a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e621ddb7-9256-4772-aa92-0751a54abb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d0390f-6aba-445a-af79-a5aa0d29e367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed746315-c03e-480d-8417-9f7bc0a1f888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf50391-5620-4cde-8c50-dc74fac5d27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2fe7a0-c9e2-48a8-9dfa-aaed51ade5e8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c13c6b3-7e59-4fd0-895c-c5b012970f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d691caa-7850-4622-a205-4d97d6bc7df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7cb557-1d57-4c13-a8ad-e8996f40fd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944d702f-e4a7-4438-96ff-3ea5d3ec9a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f0eb0d-e681-469e-8214-e436d0b6b367",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5781017d-4e76-46e4-9990-b033c57a9d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d90395-9c2e-4690-a0c5-a3bfab250fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bd15a9-d5aa-4fae-ab0b-417665e828fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e6240bf-7ab1-429d-b31d-0534065af498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b16193-e737-4824-825d-f9ebdee98ced",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ec3b2b-55fb-4d9a-9890-79d1770dec3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46fa3355-253f-45e6-bfe4-cd7ab273f226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5dcfc22-9dd4-414d-8c28-ec8b1f1768dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68572856-2b0b-4644-bafd-d70147ad596b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44bcfe2-a9ec-44ae-b8f8-c48160f4dcd0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7c0f4d-a7d0-4d48-b1e3-6da8de846338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c491d69e-b9b5-4fcb-92a5-8bb803d0eedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a0cdbd-9e75-4756-922a-f2fe5e066baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7812d3f-79ca-42aa-8bda-38c28c9ddbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4870f9-b0c5-45ce-94be-2cd79e3aca69",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a432c0af-d87c-4a7c-affd-0ad9c347c070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f355800-299f-4ad1-b8e6-a999f5755eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e907e339-c3f9-4b00-9079-8a390dbf6c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774893b9-327f-48e5-a51b-4a81d555c8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6231f709-a352-4bd1-8011-b07cf6d9e4e3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9e5d66-67d5-4fe5-b065-9a6f48cbb3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e3666eb-de20-4415-aaf6-9ec583b0416f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5745523-c200-4b7a-9188-2e7fadefc382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8550ed4-3c82-48c3-a81e-dc26629d1963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c98cf35-5ea9-4940-8afd-579eda62500f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a4ed43-c401-4ca3-8bd9-de0addf2e1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51cfaabb-36dd-4d80-8a51-50f8f55340dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1548255-297a-455a-b8a1-e635c4b62ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427522ac-05dd-4465-a573-557b564431a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203c1ad8-5f61-41c9-be21-08b41e9ff8e2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fa7179-300d-4fac-b79e-06c4a3086ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace8e281-a64d-4c33-8f96-ee665425c35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6bb58d-0c5b-413d-b6f2-ad6ebd1bd3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985424d3-cbf8-41d1-b56a-c71b1c96b159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea71b98f-7375-4013-bd2d-427083a7c6dd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57ea498-3b3d-4260-a8fb-2ba218cf289c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db31e248-8779-4997-b125-da6db66f518c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e638f892-8850-4b80-9184-1be81a3da8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd598fb3-bce3-46a1-8434-eaba680c676c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcd07df-10eb-4b6f-853a-7930cfb36034",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd45aa7-1e81-4af1-822e-2a406f67d43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071ed315-8e88-4d5a-99ab-b3c12e18b06d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d10d95e-2e5e-4cab-b37b-a31b7acb0671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314051c0-e201-4a76-90e9-fda7bc8b5075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe95218-b9fa-42ce-a24a-330c5c7f8ed6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bdc04b-7efd-428e-86e3-f58e586383d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f675f73-c497-4ac5-9492-68367aa52323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f907ba-22e8-4f77-9742-c48da4791b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43aa5aa0-a622-49ea-bda5-fb48b7950786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9089b0e9-345d-473b-a39a-f6d560af2304",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c96628-a1a0-4825-82f0-7125c61c50f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6402ca-9f46-488f-a66f-f5173171c063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971df7fb-83c2-4a41-87a8-15d989b3e5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1d3bde-6a72-419b-b4c2-f8ea04b8097a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88231cf8-4d1e-40b2-aa9f-11a916b80ebf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4df854c-e2ba-4242-9631-70d547a32401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00140eb9-aaa1-49a5-b02a-0376fa9bb523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84090e68-6b49-4a8b-a1f7-7b6574e582a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e6fee1-1c14-42c4-8744-a30bd0428624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f70545b-33e5-47ac-99e1-f950f958ae7c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a343950-4b2b-4e8a-9cb4-74afc5004ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea7453b-2a11-48ad-b5ad-931fa05d4a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0902fa7e-9e11-4afc-944c-de9aca8babbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95da6e46-f7bc-4696-ac5f-69fee638d241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e80c6d1-f600-423b-aa1c-61b9bf24f253",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29158349-3b6a-4603-a5a3-745f2c10178d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fff3c47-eff1-414e-9298-2f0464fa0cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b563877b-ca15-4b31-81c7-46461d894f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89bdbcf9-0890-4049-a909-139ea6ff842f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8430b559-2a07-444d-8b9f-007f8755f3e3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf08f1b-8e73-443a-9903-4d46e0c73ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b372791-41f5-4a80-a416-d45a8789a964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79d8732-91d1-477f-80bc-2241bf11d30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147d34ff-d4b9-4d8f-b3f1-87bf68e22a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9318656-3902-4a8d-8e00-37b627b1f26b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9456655f-5109-40db-b648-74c37300886a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "247f339b-5577-40e8-afed-18de330b32a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb0e313-a3c2-46af-820d-d311533ed06f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a17f256-45a8-4d73-b98d-68b957e8f076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d00d044-8f7d-4030-91f6-ff5c8ea9d64a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cdb4a3-84ff-4317-8050-9fa9c163d20d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e52b671b-298d-41e5-bcdd-86d28134f1bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f2006b-20b7-4763-a66c-f955d7d4651b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6386c5fc-1aac-41fd-b1b7-2a945dfe8be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0049f51-064b-492e-a5a2-849ddbdf0eb6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ff27eb-57f8-4e6c-a078-ab889087c6f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09bfe56c-60af-4d1f-8f19-66ac31b4d802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1de1a72-9f90-43d4-85c4-54bb38c9ca38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe15f01-bacc-454c-b9c2-3a0ddd29f728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770c7988-08cd-41c7-ad68-48005c6d0a46",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79a4eaf-c5c7-49a3-a959-5642c5e40747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8787ae7-ee11-4b25-84f9-f5509217ba09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408a5127-0f1a-4c6b-8851-6cc0c526387e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc23c353-b779-424d-98c3-cef65b64a119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0099d7a2-9fca-47a2-908a-7422b198a009",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffa7e45-9b23-4f4a-b976-c55c5afd2dcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fc3f599-1d1d-454c-95bc-f598b93bef52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3290d8c2-398f-49ad-a5af-b173eaac173d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60377ae0-3209-4b09-9f21-26e5ac9eac6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ace1d55-5c3e-45b6-882b-8271449bd1d7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1865a2b5-2cdf-4bfe-bce4-8c0399ba3d8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15f1475c-4314-49be-bc71-3e91db226808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd165fc8-fe5e-4dc7-9cee-f0c0fe85eff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc10ea1-c634-4274-ae75-e9675be1579e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa52a974-385c-4c75-8f5b-37cd5a5a52f2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d86438-f04f-44b6-b7e8-8755c9f7c976",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "271d11f9-1ca8-45c4-8d73-2379a39f5dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91e0d85-e9c0-473a-9a58-135d1358cefc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d68ad4-a4e5-463a-90be-1879220da899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df16082-bc3b-402a-bf73-d6be50487721",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33558e0-de9c-4020-af44-db90438dcb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fbfc48e-d814-46a5-932e-020a84bfa57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71ad36a-67ec-4c2b-bf19-2c29a95ce072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c89b35c0-a154-4ef4-85b2-fcf0d319f3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf95022d-f917-4956-8500-3938bab0a1f2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919c2b7a-2235-4b78-be40-ad8ecbcc7724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f683e1a4-7da6-40b6-a3e1-014d72fad03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec63a87-1a78-456c-9481-6388ac210e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04ea7c9-9409-49bd-aa50-c4de16ecceac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda90cf3-5d82-4dd2-9fad-30ea1fb01175",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6496ad51-4ceb-4eac-abd3-e8674088698c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1993eff-189a-4add-b088-e6a3924e1f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6157ca-f57b-427b-a7e5-64d96d8b30f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22b6e83-6433-4f01-880c-267238d962ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef20ce9e-ec0f-45ad-8dba-4da01edd5dae",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac591ff-9c33-4d31-b7a0-4e5132b3bd6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fef3518e-345b-4552-a216-746e0655a0e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4d3b26-ef9e-47dc-9fda-aa67b39e8bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c298e26e-45a3-4682-8c0c-233bd7133790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1efdca1-f371-4a56-9390-5482597f7d3c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d167d45f-9f9a-482c-b9de-9022278a165a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08138e30-63ce-417a-b0ac-b3522c8aaf8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "690e32fb-6217-491f-91ae-4e89fd84c496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed077dc-c420-4e20-b7f4-3b77e3b44fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7b4736-2ca2-4db6-8b7b-ec38bf227dad",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922fec33-5348-4a4f-acd3-756955a0395a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7871175d-a51c-4ef6-a924-c2f16030f714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9358fdde-707e-4a3e-8a62-25d8076fe137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84c38f5-1516-41c2-b5b9-aa1b5f66f8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643bfe86-d4ce-4124-9e63-af988dfebc26",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d001daa-e33f-441c-8694-0abf027d165b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e537beb0-af98-4db4-9ec3-9d8fe6976214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e2ed72-1d82-4094-a96e-37e65018fe0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1db24e-2de7-42ec-866a-685d4e8d2782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ab69f5-f309-4eea-b7b5-18314f5c26f2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28a96a6-4f71-4a0a-b8ea-e5c881fa79cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e4da0f-d0c1-47ae-9f02-148a583dd34a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a72c42-e9c2-440d-9f77-31d9b573010e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9193b7-1a90-4bdd-8f0f-b8a34f982522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f663c66-7a86-4ecb-9a8c-74243ead5e27",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8be265a-e867-43f0-b28a-ce1286b9a577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2d5cab-8be8-49e8-bc27-9085af87aeb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c07966-7db1-401e-8f53-32c2dcfd8a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd86731-627a-4add-a35d-42dd7dee8063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b48417-730d-43d7-a788-69ba508864cd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ad6098-6c74-4c4a-bf5a-760790bafe85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf5785c5-f923-4256-b05f-d9b1ff343eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8a958c-f31d-4bfd-a51b-0dcd56bfac72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e7de4f1-34dc-4eac-8b17-2362ecf59db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7720996-87ba-48ba-ab08-03a09bbf15e9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b48950-2cd4-48dc-bbc2-d0acea75ebe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95e76d2a-c46b-4c43-873a-77e22b4401ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c14de7-b438-43e8-a310-04de02a9fed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8719e69-9c8c-4f99-8e0f-1c56341bf768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d42832d-93d2-4435-a778-2b6e5d9193a9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016c5432-d0b9-4265-ba42-e5e1a0e01fca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b3d8d33-6905-4e3d-8b87-e0321f85fe85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0268bf23-df4f-4588-ad4c-7ed25365fe0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63af8c8-7c25-48e3-b15a-331e5b44d8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d549e3-cbd8-4fc6-8f74-8aeec6ec753a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e98027f-ab9f-4b29-a446-6bed8fa4a479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ccedd27-c1bb-40e9-bd00-5553f3467519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5871fee-d8e5-4ae5-8f0f-737f0555418a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c4dd4f-814c-4cc2-a68e-77215d36cb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc062f78-2614-48d7-bec6-ca8a5317ecf5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2202da-176b-4162-a4b0-109c066df03d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3579e64c-e589-48e9-8d9f-d706ee960f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2abc7d-03ee-4c67-af66-4c6605bf01f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb8d079a-3f53-4310-87c9-369fb50c4c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d9e741-0d9a-42d1-86d4-e21ba8fd9277",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564d6b7a-3ad2-49ea-a739-637b06a5197b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d2ff0dc-6604-498a-9877-ca33f0d738ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3238f0d-b972-4681-9aab-62f182409465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2345a78-c6d2-4831-9804-7cc952c8473e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5399ce3-8569-4c18-87e4-b4bfd32266da",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc74591a-dc9e-41fa-bb09-a6ee2633999b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e16ba8aa-6aaa-41fe-af6f-65bf887b269d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e749ff8e-0757-4545-b4f3-b190761f3e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7792b9-4b29-4f8e-a58d-c9594ba2288d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9398a2-5c6d-40eb-8685-0619e062e69d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9670ba80-2d71-47ad-92c3-6d95024ba7eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0faa15a6-039f-4199-9bc5-963398d37771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e94ca8-b132-41c5-9f87-872d3c9c8d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ecc039-7620-4243-8f90-5ae256732213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af947f55-5bd0-4215-b6ea-fc6310141647",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d92930a-b2b3-4be8-9d91-685d3f59f883",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6e6de79-50e1-436a-8894-1a8e25d9e0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0009f41a-4c8f-4c04-9b4b-a79d10b328fb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05bab8f5-6c51-4801-8db8-e65991a32a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3621da-26b9-40da-b6a2-42c8c6c5b0c4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177cf8b5-ab28-42b6-9858-399803387ad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6161074-d8a6-4174-b3b9-5746f8e7be29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658c37f3-69db-4387-942e-4a2bcbfda41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9003a37e-88ae-47db-95a8-101c932020e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5331437-8b03-46a3-afad-25ed887cc59b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5683241-9745-4de2-a51d-974972cef0e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88bb3bed-f196-4b29-8b43-d3d2eb757d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8488b859-2b47-433c-aa95-21ae27b784af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb538ba1-466e-4311-8648-5463e6aff91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a03697-15ab-4d39-8ac5-90265176893e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7868f3b-6cef-4322-b20d-9d2f0f215656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991e1815-d3e0-44db-8aea-6677faf22c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f19ebe7-9c6d-42cb-8598-26aa02a48fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fe25a2-dd4a-4755-91e9-d4c430c0d067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9916f3-7049-4b83-ae75-36a609a79355",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e10b5c2-477e-4511-a734-47d12a2d7600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76459af5-633d-48b7-82a2-3daa42804d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d81c213-e5cd-4520-b6a8-4f137332d74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3becbd2b-682c-4127-ba5e-b52d03da1eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74367f04-7132-4f68-aeac-c5d1b7280d23",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212fdd47-6e87-48a8-b8ba-b9a4487df4cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f25044e-67c8-4e8c-8d6e-9987138efcfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb4806e-333d-4a18-97c7-0359eee914b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d1d9095-c794-4f15-8b5f-7cbb4a9798b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9ca520-ac55-4a85-8230-dacdb5b2e378",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d032e189-1276-46ee-b3fe-33624e5b0411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de51036-4f94-48d6-aa2c-a7fab3e2241c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a556b23-ce81-4651-aaa9-1715c89dd6e1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f76b5f1-4939-4142-9111-cc2e9f9c1bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87789779-5da0-4a3c-b888-6c40f9cca376",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8699466-5f4e-4c45-b5fc-966b089d89bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "889c6dbe-4883-479c-99fc-3c0690472bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea36982-db05-4173-94c0-bf0d9980d95d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df070de7-76bb-44e2-8f49-739fb98eb0ea"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a3c3c5e-443c-4954-9d04-587ae7e05363",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e97a4837-f905-43fc-a00d-6955cb12a5e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91e2b36f-f554-4417-bf63-1b474ae6936a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83097f2d-76e7-4c8e-9003-e0a2d7c2eee9"
                    }
                  }
                ]
              },
              {
                "id": "c7bfc99d-a45d-4fda-b73d-ecd8e336a4db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db40320d-3fc2-4ab9-b378-28607a8075f8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bad805-19c9-4099-a7cb-ce5bbcb733fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "67e7b161-7445-4e1e-9daa-85f590580904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc859ff-07bf-4063-9ed2-9386cfc11ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "435badba-aaa8-444b-9257-a83632c6ec3a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4736e36-99a4-4de4-8dce-d50071c17f5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f0a710b-a3d6-40dc-8cb8-dddcf6a7d423"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95718224-a19a-40d3-8c09-c84e2c5ff95f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c65562b-475d-4c08-9557-ae5f752b4013"
                    }
                  }
                ]
              },
              {
                "id": "6e14da6a-0b92-4b60-a14b-07451123dde2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2d31280c-9583-4367-b3e0-de6afbf7ee78",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f34e15d-afa5-43da-8cba-b1f7343e768c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b1e63c68-23c6-4bf6-a4be-540baa19669c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53235951-cbca-4527-9868-443c0d4167df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24868cfd-16bb-4291-8c7f-37aad661dfda"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0fcb12f7-0a90-4310-a8d9-febbf2761173",
            "name": "Positive Testing",
            "item": [
              {
                "id": "637eabf8-b0f3-42ee-9d10-b51107223fb4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "605ffd63-5045-4d9a-85c2-593a2b3bd060",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "27f65958-f094-4a8a-920f-30679b613917"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fccd5669-199f-429c-bcee-6d52411eb18d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85731c92-66a9-4364-a6ca-7ba36c516536"
                    }
                  }
                ]
              },
              {
                "id": "029f4d4b-9f91-4254-92b2-0ad84906664f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f36e7f0-dd14-4f9b-ae1f-3885e4c7b9e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bd331dc4-bcb2-45ae-89aa-d4be3ac8b15c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1802982-0242-4760-b264-1230e8890ec4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de39323f-4095-4533-9da7-9455f05519fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee1e9c2b-4ef3-422a-b15d-dbdd7eae84d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2e39b286-a405-40f2-92b1-0cfed250f3d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b20b9e3-5765-4399-bde4-960657b91d45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b11f31d7-6748-4195-87df-196b30ab176b"
            }
          }
        ]
      },
      {
        "id": "3ffbbc41-371b-4082-8b9f-f76ad716f964",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "80caaa61-49f6-43b7-be72-2a8320f7bc14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c336db3-5442-4fda-98b4-55d77bc6301b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a356ad6-9113-475a-8924-f51d32ae1906",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2696b12-1e65-408e-9cb8-35b489e590fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4d6a3705-8590-4320-a019-1c5e4bf47e8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea4d5a1-0eb3-40c1-95cf-0f1fec0f68d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "766be12b-63df-47bc-a2d4-d98b2a24b76e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddaa5e5d-2064-4f30-a87d-266dbe51be96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8951330-461b-4902-9aaa-8b27a0d27636"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e7053a8-3337-4880-ad86-8564755f8f26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a16c690-f792-4ba6-a01a-fd5745dc6ca1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7733f2ce-a301-42c4-a06a-e2b8c3ed2aaf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8d7dc748-1c20-4a6f-96d9-e5f96f0ee0da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e91097cc-4556-4329-b14b-ece72157cbee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b59a1a4d-83e2-49e5-a930-948844298451"
            }
          }
        ]
      },
      {
        "id": "34a617c6-d930-41c7-b5a1-30eeb4065e52",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2bf6a085-6efe-4a6d-8458-30bc3435581b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8b6ec86-4e39-4dde-8fbe-829c3984ae10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "89efda7c-5269-4691-b3df-2c7de16685dd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d66ca6-2c2d-446e-bf5b-66ce1fe6df18",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9f69602-1b6f-4e27-8956-c50d8f75b154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d8addf-b009-4a39-a9a8-64f7d69ea2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4b2e5f4-821f-44b1-8d66-650c2ce3ade1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a4d111b-483e-4bf6-9732-fe114265523d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fe1ab36-bdc3-415a-969c-8626b4471fbd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a4c3a92-c5d1-4f8a-8087-eb8713984245",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "483f8ebb-5e0b-4099-beb8-2a2a75d183df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3991e312-b7e2-4aae-a708-fd29cf1ec5b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1a454a12-9075-4c4d-948a-2d5e09aed3a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0b3151d-f330-4f75-b778-986a11f738e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4508f1a2-9ac4-4067-9493-3c540026a71f"
            }
          }
        ]
      },
      {
        "id": "d8ad6e6e-feeb-4a5c-a53e-005addd2536d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7854d6b9-8a33-4715-b5e4-f1da960061cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40a19ca9-afd2-48a6-909f-a2fa92e1a739",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77bb2455-37a7-49da-8a3f-0c4c1f5140d8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9641b5-0344-4679-9d8b-c63f99c0626e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1b5e64d-1f61-4f13-8b96-420b66d182ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e2c127-ceae-43e3-93cd-93592c786892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96698dc7-d95d-400f-b24b-15043841d908"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d03311b-d6cc-4b28-a740-d6da03d658ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c91d674-fd5a-434a-8620-67daa29899c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54c3b452-4580-463e-93d5-24ddae4025e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cb8d567-cb3b-4415-9b56-42a4ab7e9708"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a210b77d-158a-4057-82e3-6526fefcc1b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "47886636-28f1-41e4-a151-ce541cae646c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2de416ee-4a80-413d-944c-c85dc344b2ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8b567fa-84b4-4c3e-a391-751736f353d7"
            }
          }
        ]
      },
      {
        "id": "02752f7b-de3d-4af1-8b35-1b4d55f8dbda",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f5294c5-c694-46bb-8c2a-ea2c339dee10",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94fde68d-f136-4ecf-91f3-c5f510fee301",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "70539293-da75-4772-bc51-4b40315c005f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1978fa46-c706-480c-92e5-ab2be99ff5dd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7469e4f-8bbb-4839-8985-acb04ee19108",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.12982456140348,
      "responseMin": 10,
      "responseMax": 601,
      "responseSd": 82.42679253761717,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706747758058,
      "completed": 1706747787528
    },
    "executions": [
      {
        "id": "af39a983-e117-40b9-88ff-68f6e44d9610",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e1c11c30-c569-45d1-b4f1-0c2a82e70108",
          "httpRequestId": "282cca98-4a97-4c12-96c2-d906c2dcb4c3"
        },
        "item": {
          "id": "af39a983-e117-40b9-88ff-68f6e44d9610",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "57c8a2f2-c2c8-451b-b217-790c800e1fd9",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "b58574b5-7df0-4869-94ff-7d757e4ca75a",
        "cursor": {
          "ref": "6dd09cef-9d02-492b-8c53-dae25de507f3",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "147bd150-e864-48d9-90ba-ce7645269816"
        },
        "item": {
          "id": "b58574b5-7df0-4869-94ff-7d757e4ca75a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bfed8cb8-c253-4bda-bccd-00e7d4aeb233",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "158b1eff-02f0-44bd-8b74-66188b4132f3",
        "cursor": {
          "ref": "73d46916-1c14-4af3-ae59-b853e28c38cd",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f454699e-33d1-4f65-8334-c4cd5493f0eb"
        },
        "item": {
          "id": "158b1eff-02f0-44bd-8b74-66188b4132f3",
          "name": "did_json"
        },
        "response": {
          "id": "ebee7084-71dd-42b9-8c32-a65e211860ca",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c19283-56c1-4ede-a840-d8184020a9a7",
        "cursor": {
          "ref": "bc532b72-4340-468e-bc1b-7d6b2969c881",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "436e1c79-ff00-4fe9-b6b9-3a13dd0271db"
        },
        "item": {
          "id": "20c19283-56c1-4ede-a840-d8184020a9a7",
          "name": "did:invalid"
        },
        "response": {
          "id": "7851f1a8-1190-4ad7-b473-30f91d2a234a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c19283-56c1-4ede-a840-d8184020a9a7",
        "cursor": {
          "ref": "bc532b72-4340-468e-bc1b-7d6b2969c881",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "436e1c79-ff00-4fe9-b6b9-3a13dd0271db"
        },
        "item": {
          "id": "20c19283-56c1-4ede-a840-d8184020a9a7",
          "name": "did:invalid"
        },
        "response": {
          "id": "7851f1a8-1190-4ad7-b473-30f91d2a234a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b7faf7-47e5-426a-a0fd-645fb4a8b708",
        "cursor": {
          "ref": "cc96c55c-266a-47c9-a501-96cac68f5b08",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a27a3d8d-a4f0-4faa-8f79-e8e562abce06"
        },
        "item": {
          "id": "48b7faf7-47e5-426a-a0fd-645fb4a8b708",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6aa5e948-59aa-448b-990b-88778247c7f8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a58af1a-3e2c-4998-8dc6-848f60dc32a7",
        "cursor": {
          "ref": "e5e0b7e3-2460-4d36-8225-05bbe834de63",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fb376453-e600-46c0-8b1f-3e0e41f5cec5"
        },
        "item": {
          "id": "0a58af1a-3e2c-4998-8dc6-848f60dc32a7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "34873c67-507c-4007-b360-4ba03610a934",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02f5e94-ac1a-4dbe-9424-f873261fe691",
        "cursor": {
          "ref": "512e64ba-df1f-4c59-9a93-31b4c819e7e4",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "445e34b3-264d-4877-8218-75038276bfd4"
        },
        "item": {
          "id": "a02f5e94-ac1a-4dbe-9424-f873261fe691",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8694d7ab-33e3-47f6-88e5-0eb8606dfe40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4943b2-ef0f-495f-92ac-babb6e22edf9",
        "cursor": {
          "ref": "47160455-08a9-46b7-bb03-30be817d63ca",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7ac88b94-e694-42b7-afc2-de247ccdebe3"
        },
        "item": {
          "id": "3e4943b2-ef0f-495f-92ac-babb6e22edf9",
          "name": "identifiers"
        },
        "response": {
          "id": "3809370b-76a9-490d-b262-e2637a16d073",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b39e68-93a6-4832-b231-17a95b633fcc",
        "cursor": {
          "ref": "f3c0bdfe-78ef-4e06-818f-9a2d2021c672",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "14058dcf-d3bd-4309-91c2-2e965f5b2686"
        },
        "item": {
          "id": "25b39e68-93a6-4832-b231-17a95b633fcc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cc540daf-07d1-4fc2-8be3-cd8db588ae92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5db900-7242-4b9f-a207-81e2f9f40c2b",
        "cursor": {
          "ref": "5228a5d2-910d-4bc1-ac0e-7ecd0a776ae3",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a934a3f6-48f2-4347-b2a2-26dc31d18824"
        },
        "item": {
          "id": "4e5db900-7242-4b9f-a207-81e2f9f40c2b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "76f40e26-e23d-4e18-a307-95884f82fe6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d276afa-8b41-4ea3-9c1b-e666a721001c",
        "cursor": {
          "ref": "62d0a5b4-90ee-4326-9d03-65431bf233c4",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "66cdad0e-f0fa-49ae-8ca3-18df73d75895"
        },
        "item": {
          "id": "7d276afa-8b41-4ea3-9c1b-e666a721001c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f8537a55-3e57-4d88-a73e-1168f31e3d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b35f865-18da-4413-864a-1cd09e8eea3c",
        "cursor": {
          "ref": "305ee541-d608-4fca-9304-a737b93ba04f",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dda09b66-ce87-418d-96ad-8d2fa251540f"
        },
        "item": {
          "id": "9b35f865-18da-4413-864a-1cd09e8eea3c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "68f8b277-265d-439a-9ccb-2c6e8a2a5118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5658b56-1bdc-4bcf-b127-92da436e93fd",
        "cursor": {
          "ref": "e481c2b1-1176-4a36-98a2-390be1d9e4a1",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b605806b-454e-4bef-8971-3edf942fb309"
        },
        "item": {
          "id": "c5658b56-1bdc-4bcf-b127-92da436e93fd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "261ed11d-a501-42f1-93ed-60ed43f9bd97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd78ab93-4df2-4529-a6e7-87a12c1f180e",
        "cursor": {
          "ref": "e7de0c85-2171-4a67-a3cb-d125c3be4c2b",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "285aa7b2-722c-4ac9-b839-4528cc7f6e2c"
        },
        "item": {
          "id": "cd78ab93-4df2-4529-a6e7-87a12c1f180e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e5a543ce-37f7-4b4c-9be1-fd326949d0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678800d7-2982-4410-9395-ae85fd41fd63",
        "cursor": {
          "ref": "c8338c7b-39f0-45c9-b2a8-9cfba3759996",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8cc25c31-2053-4104-a86d-08535b240a0d"
        },
        "item": {
          "id": "678800d7-2982-4410-9395-ae85fd41fd63",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9be408bd-e2f9-4a00-96b3-77648d9d0cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa79f5e3-4714-439a-a168-95930aa87934",
        "cursor": {
          "ref": "a5315239-8004-436a-b381-4a88485eac0a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b1064833-b64c-43d3-904b-83acf28cec46"
        },
        "item": {
          "id": "aa79f5e3-4714-439a-a168-95930aa87934",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4bcbf7da-1249-4b8e-adb9-f8245f81e289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8612e5-43d8-4734-b8c2-8a5b63896ae6",
        "cursor": {
          "ref": "04350bcc-90dd-4124-a7f8-63e72f5f1fb3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9812b92a-e052-42ae-8cfb-7c2b0f5f3c03"
        },
        "item": {
          "id": "9d8612e5-43d8-4734-b8c2-8a5b63896ae6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0d423dc5-0734-4d69-a061-c2383c55aae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3813a88-4de7-4b20-a3f9-7e2f7db987f8",
        "cursor": {
          "ref": "00f79feb-3040-489e-8196-82427a4c9c7d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9ab1dfa4-479c-43a7-8941-19d007feff16"
        },
        "item": {
          "id": "e3813a88-4de7-4b20-a3f9-7e2f7db987f8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "51bf820d-bd7b-4073-bc87-0b385ac8aedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ecec50-e357-404d-a6df-2113cf9022fc",
        "cursor": {
          "ref": "1077b860-aad5-49f0-9325-5931dd8eef40",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "01d06239-50ef-47ed-8d3a-b416a3182158"
        },
        "item": {
          "id": "03ecec50-e357-404d-a6df-2113cf9022fc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "35faf88b-8e10-4579-9f06-34c8530fc0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899fc0f0-1315-43a0-8acf-285df5861894",
        "cursor": {
          "ref": "b2ac68b7-ff69-42e1-b7a5-53572baa5769",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "48f8ddf9-b6c3-46a7-b158-9c998cba4c71"
        },
        "item": {
          "id": "899fc0f0-1315-43a0-8acf-285df5861894",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "958f8533-26f8-481d-8a0a-7aa4aeea23db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792e49b6-eea3-411d-ab0e-021c13e151ca",
        "cursor": {
          "ref": "513218ae-4596-49c7-9547-7dbe22426540",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e60832fd-2eed-4ea1-8595-383093704648"
        },
        "item": {
          "id": "792e49b6-eea3-411d-ab0e-021c13e151ca",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "532b76d0-f8e1-4821-ba9c-5ad4d7aab55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d92e57-02ed-473a-b1cd-85f6411fead4",
        "cursor": {
          "ref": "e84d2206-ac29-463d-9289-4c58e97f5e88",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "94091abc-a818-4fc1-a5b1-1dba5420f9a9"
        },
        "item": {
          "id": "b1d92e57-02ed-473a-b1cd-85f6411fead4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b1ad560d-4486-49a3-a946-46bbd014e7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c9aad4-35a5-4a3d-9019-8bd0fc7893d8",
        "cursor": {
          "ref": "21132d54-733f-48ad-aa22-755c6cf5b80b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e9fa1eac-e0bd-4640-9952-f6abf977f4db"
        },
        "item": {
          "id": "c4c9aad4-35a5-4a3d-9019-8bd0fc7893d8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "60b69770-b3c4-4e1c-875c-f38f7d7d7b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be242917-340b-4fde-92e9-be9008fd4a7d",
        "cursor": {
          "ref": "55370358-7d95-46ca-b5bb-40110b06d63a",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a8bad4de-960f-4657-af61-25595a2bec0a"
        },
        "item": {
          "id": "be242917-340b-4fde-92e9-be9008fd4a7d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f02b25cc-9ef8-43e5-80ea-5c3d19ef7d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840ed27c-eb00-460f-9298-a9381eca3cae",
        "cursor": {
          "ref": "f79353a7-2a03-4de0-8009-299ee9d98aaf",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2bd10a5e-21fe-400b-afff-70e29a13f86d"
        },
        "item": {
          "id": "840ed27c-eb00-460f-9298-a9381eca3cae",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7c76f806-7e04-4b3f-90ea-fe2a569d2ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df28eb48-d3a8-4396-97be-a45d46f03cd3",
        "cursor": {
          "ref": "4944268a-9fb3-4bac-ac11-4721dd0feff9",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "347d39d5-c724-4abf-9642-27c88a672fd8"
        },
        "item": {
          "id": "df28eb48-d3a8-4396-97be-a45d46f03cd3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a5e4ec02-fbb4-4cb3-9cf5-022ea07c6558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed48805-e2f5-4835-8287-26c0149c8125",
        "cursor": {
          "ref": "b5cf4d27-7276-4988-ae1a-19812c100ab5",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "436ad0a2-bd05-4557-939e-d293ede4f744"
        },
        "item": {
          "id": "6ed48805-e2f5-4835-8287-26c0149c8125",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7aca4aa9-fafc-4928-8b15-11fccdff67c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985e28e5-ad42-465b-8b1b-1ee3b00ce3e6",
        "cursor": {
          "ref": "2c67c829-5c98-476d-8363-0928fcd972a0",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "12fbbf19-42d2-4d3c-a2d2-7fc5ca5a82ac"
        },
        "item": {
          "id": "985e28e5-ad42-465b-8b1b-1ee3b00ce3e6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b09c82eb-1990-4cc2-a491-606470254c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4992e8-e10b-4b8e-8bae-b66997e13717",
        "cursor": {
          "ref": "42d31ef4-3236-4064-a306-f228fc0953f0",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9780de50-4f81-4e41-b5b8-c2553ce55a28"
        },
        "item": {
          "id": "ef4992e8-e10b-4b8e-8bae-b66997e13717",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4e594b27-5c25-438a-a450-1b1758537327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3831e5-f73a-4c29-b3da-63af0f5af609",
        "cursor": {
          "ref": "15e6ca5e-1474-4a41-b787-7757c841c6b7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d1aba53e-f411-4e05-9813-cfd612c3c40f"
        },
        "item": {
          "id": "3c3831e5-f73a-4c29-b3da-63af0f5af609",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8ae5ec7a-58c5-4502-8bce-5134a355fab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1a5cdf-b47a-4dce-8b6e-7dd625d7a987",
        "cursor": {
          "ref": "b9bc80de-385b-4568-9b90-5818b085e8f6",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "67166dcf-d6f0-4329-a18f-1c27bc23c25f"
        },
        "item": {
          "id": "5c1a5cdf-b47a-4dce-8b6e-7dd625d7a987",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4ef6c340-e396-496d-890f-f26eda40be74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40dbbce4-996d-4b2d-bb88-df8eed4e2179",
        "cursor": {
          "ref": "e28ab7ff-4044-4547-bc6c-1d7448031400",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5f2979bd-ba50-406f-910a-06a2164b4a0e"
        },
        "item": {
          "id": "40dbbce4-996d-4b2d-bb88-df8eed4e2179",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7eb7fa64-28e9-4cf8-9f7a-5aedaddab7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b798c3f-f641-4a3f-885d-7310dd9d0ab0",
        "cursor": {
          "ref": "df30de13-75df-46cd-b2f0-6a3ef6036a19",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ba2ec605-13f9-4ea8-a7fa-33839d680617"
        },
        "item": {
          "id": "8b798c3f-f641-4a3f-885d-7310dd9d0ab0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3405a0e3-2100-4d1e-ba64-1c86bb685b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fe5d8b-58fd-478d-9869-0185c48f15d4",
        "cursor": {
          "ref": "b33477b7-3dc4-44d4-952f-1e489f8bccd3",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "691e3976-9f05-4562-a046-5e28627fba3e"
        },
        "item": {
          "id": "73fe5d8b-58fd-478d-9869-0185c48f15d4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5ab34313-40f2-4ffa-a936-a692b54ce1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1c62cc-78e2-4bf9-89db-02f822e32793",
        "cursor": {
          "ref": "2306ef85-ac33-422c-8e78-441ad7583a29",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4daa2e5f-e6a8-4b9e-a09f-be332299fbd8"
        },
        "item": {
          "id": "db1c62cc-78e2-4bf9-89db-02f822e32793",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1d9c60bb-bdb2-4835-8f2d-fa629280f693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ced1f15-c617-42b6-aa03-a7f2e6091523",
        "cursor": {
          "ref": "2fd6c932-cae1-4e8f-82b4-c71a391d9a59",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e85b8bc3-b199-4474-b2eb-adf2b419c5a2"
        },
        "item": {
          "id": "8ced1f15-c617-42b6-aa03-a7f2e6091523",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a7b1d1f5-97a0-4aee-824f-8e05801edcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5477e901-6214-47fa-a861-6524dd248f64",
        "cursor": {
          "ref": "dfb316ec-ea9a-4009-8d4c-081ffcd500ab",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "33b02069-c899-4b2c-abcb-c80ed4ee8d1b"
        },
        "item": {
          "id": "5477e901-6214-47fa-a861-6524dd248f64",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "78e3622e-cbd6-4c27-903d-9b1504476a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f78d9a-7f54-4f85-9947-0c427732b587",
        "cursor": {
          "ref": "f4ca8c9b-7c8e-4840-97f5-a95a0bca55ba",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "07410bac-33fd-45f9-b2b1-9f8edba2aa1d"
        },
        "item": {
          "id": "e8f78d9a-7f54-4f85-9947-0c427732b587",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b25273ac-2752-4b8f-b4cf-31492acade4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca60b94e-5429-4bf2-a0ab-a78e3b1bef38",
        "cursor": {
          "ref": "eab837d6-cd9d-47aa-8033-948f37977c37",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "52405f80-7091-4d42-a791-cb8a3c8b3451"
        },
        "item": {
          "id": "ca60b94e-5429-4bf2-a0ab-a78e3b1bef38",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "25622e60-3d65-4bc2-8459-f8f30f995a53",
          "status": "Created",
          "code": 201,
          "responseTime": 601,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b8778508-2a9f-4359-8424-2056ca7aff51",
        "cursor": {
          "ref": "fc6a38cd-4dc0-4b28-816c-74a3be42c5fc",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cd1e2ddb-d79c-4640-9953-56cc05102a5c"
        },
        "item": {
          "id": "b8778508-2a9f-4359-8424-2056ca7aff51",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f859f3cf-b42d-441e-817e-93ac980adc93",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "dbcc86d7-d371-4ada-bb94-444c5aa54529",
        "cursor": {
          "ref": "ab66c1d3-b6a9-408c-8563-61bcf8305d96",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "10bbf464-1ae2-412d-b668-f26515f7198c"
        },
        "item": {
          "id": "dbcc86d7-d371-4ada-bb94-444c5aa54529",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f2d3082e-3f3b-40c9-8b8a-747105c483b1",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b36f1595-755f-4c1a-8505-3b535239597b",
        "cursor": {
          "ref": "00862ba2-96b0-49cd-a12b-5c540e7d0b21",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "59b3e443-0c63-49c8-9f80-9c0e27544e77"
        },
        "item": {
          "id": "b36f1595-755f-4c1a-8505-3b535239597b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2ca06254-6357-4797-87ff-74b4ad8ce33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e0f99a-5799-4022-8dd1-15493ff19dd6",
        "cursor": {
          "ref": "7ab6d268-cc25-48d8-a25d-5bd18df8fada",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f7ec4f1b-98a5-4fbe-b8fd-043dbdabc431"
        },
        "item": {
          "id": "76e0f99a-5799-4022-8dd1-15493ff19dd6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f1567691-183d-4767-903a-1f66e18079ac",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "01ea306c-1b26-42db-93d9-61d10e85dd68",
        "cursor": {
          "ref": "f2c864d7-bed8-4cf8-a882-b55d9c44f9a8",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f9fabcbe-8e1e-4ce2-b999-54a4fe677e27"
        },
        "item": {
          "id": "01ea306c-1b26-42db-93d9-61d10e85dd68",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b058184b-47e8-46eb-b2da-76068ab8c3cb",
          "status": "Created",
          "code": 201,
          "responseTime": 459,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e1ca11aa-4627-4d95-8231-d6dcbe453de8",
        "cursor": {
          "ref": "a289b77d-5b1c-440f-8f5e-20a6837ec194",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cb0d4be9-694c-448e-82c8-db201ebffae5"
        },
        "item": {
          "id": "e1ca11aa-4627-4d95-8231-d6dcbe453de8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "07e9b895-5b5c-40dc-8a3f-83d53314b841",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "70ef1fcd-2510-4b4d-b66f-12eb7b5f52b2",
        "cursor": {
          "ref": "e44609c0-d49f-465e-8b50-c1a19e1fa4e1",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5182dc04-b421-417c-8bd9-12cda7755a3f"
        },
        "item": {
          "id": "70ef1fcd-2510-4b4d-b66f-12eb7b5f52b2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a3ae5e1e-6e64-4e15-8362-3b09ac8ed31b",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "37bb9165-4aa9-4e48-ba2a-0f02533d5cb2",
        "cursor": {
          "ref": "a6c2c23a-72f0-4c6c-9618-38a29b1c0b87",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2b349fad-6aae-4565-a9e3-c1978bc1a092"
        },
        "item": {
          "id": "37bb9165-4aa9-4e48-ba2a-0f02533d5cb2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2ab0c2e0-97ad-4e1d-a80c-eead3186665d",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a0bfe517-436d-4dd5-81a5-1303dc08648b",
        "cursor": {
          "ref": "45f91ee3-1bb3-45cb-a6db-650decc208de",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "da6af717-77bf-4409-bb5a-5da035021dbe"
        },
        "item": {
          "id": "a0bfe517-436d-4dd5-81a5-1303dc08648b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c72a5a30-da0c-4374-a7ac-a1ac0bab9e7a",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4397e39b-6067-45e8-9370-d4b5176b1a84",
        "cursor": {
          "ref": "c8e0099c-ac4c-43d2-8b4c-a9abe3ea6256",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aab143ec-e26b-4adf-b495-d91f465117ef"
        },
        "item": {
          "id": "4397e39b-6067-45e8-9370-d4b5176b1a84",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b1c528e2-9ce5-4f77-a713-cf5fd7f7a5b9",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4dfce1e7-62ae-4b87-8afb-3c06cece085b",
        "cursor": {
          "ref": "dc29bf61-707f-40cd-9c4d-8c1bda33d2f1",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e84de14c-f218-4d81-a060-913bd13034a7"
        },
        "item": {
          "id": "4dfce1e7-62ae-4b87-8afb-3c06cece085b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3f6ae3f8-6881-4fe4-b5ed-8bade4263145",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2dea5c98-b1d4-49a5-bdec-924c1ea8eaec",
        "cursor": {
          "ref": "c57415ab-62c6-43e2-a952-26229bd10b46",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3f058642-cdf8-46dd-a58c-813a69d7eb86"
        },
        "item": {
          "id": "2dea5c98-b1d4-49a5-bdec-924c1ea8eaec",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a2f4dec2-c9c3-4034-9ee2-7bee3cde24a3",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e26c46ba-be7c-4671-a209-86f3860bc46f",
        "cursor": {
          "ref": "ab2d2bdd-3982-4cf8-b457-4ea868236ebc",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1dcc4449-78de-4d8f-af12-656b91dc653f"
        },
        "item": {
          "id": "e26c46ba-be7c-4671-a209-86f3860bc46f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fa8a1e13-6409-4c1a-a35e-5a51c62018d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249fca0c-cbd2-4f21-a7ef-0ffc981ce38d",
        "cursor": {
          "ref": "9405bc4c-b6a7-406c-ba17-02ebd7a26999",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f36914ef-31e4-41da-9618-095e6e0fba51"
        },
        "item": {
          "id": "249fca0c-cbd2-4f21-a7ef-0ffc981ce38d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "90a29160-1873-4978-ab70-1049e1bf3dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2688188b-c1dc-4658-bbda-e5b70ab73758",
        "cursor": {
          "ref": "8b07424d-0bb7-4cdc-9aed-4eef7b613348",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5f6b5268-0853-4faf-aad2-4f2036371e6d"
        },
        "item": {
          "id": "2688188b-c1dc-4658-bbda-e5b70ab73758",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "19ce168e-70c5-45e3-ac62-2941ba55b98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f942d219-9523-49db-8f7e-3e524b15f394",
        "cursor": {
          "ref": "ae4c5145-72e4-4a84-942a-c5aba6a03242",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1e1a90e6-5e28-4f31-8b6f-757bf91b0bc1"
        },
        "item": {
          "id": "f942d219-9523-49db-8f7e-3e524b15f394",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b9234f73-6adb-43c9-8c77-2929f9df5c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f9eef0-4e3e-4592-8807-d1c4cba43d93",
        "cursor": {
          "ref": "12b02863-c356-4e09-964a-2e01c6fdba98",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "584c86ca-7589-4d6a-b07a-7fb73b27a624"
        },
        "item": {
          "id": "d2f9eef0-4e3e-4592-8807-d1c4cba43d93",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "48319b0b-aa0c-4a93-9b02-773f4f59abfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7858d3ea-802a-4dad-b672-a0001a328c2d",
        "cursor": {
          "ref": "620523c8-6a09-4508-8f87-21c46e4b5d32",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c0697bb1-eba5-45fa-b626-30bb1606ecfd"
        },
        "item": {
          "id": "7858d3ea-802a-4dad-b672-a0001a328c2d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "69095632-6bc6-42b5-902a-e15c5ea9c5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719f16c6-0214-428d-8e1c-3265fbe92397",
        "cursor": {
          "ref": "8ea7de3f-a7ba-48be-8de5-a520f6620e4b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "545e3c74-7bc6-408c-bc42-52cac1b4b5fe"
        },
        "item": {
          "id": "719f16c6-0214-428d-8e1c-3265fbe92397",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7564cd62-e401-4b05-af36-d7b08debe0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da347cb3-7663-4e61-b42e-775e1addffed",
        "cursor": {
          "ref": "dd2c3255-bb47-45f4-9b41-de4ae7eb27dc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "01343de4-11d7-4230-8911-860ab3905508"
        },
        "item": {
          "id": "da347cb3-7663-4e61-b42e-775e1addffed",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b47e5864-6475-443c-bbfd-809513438a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2013ce-7e00-46e3-80be-e8361158cdaf",
        "cursor": {
          "ref": "19364a6e-ac45-4684-94cf-7c3a192ae930",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8d186562-035f-482f-8de0-73e0df73a6a4"
        },
        "item": {
          "id": "8f2013ce-7e00-46e3-80be-e8361158cdaf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6d3114b8-08ca-456e-bfd7-fddaa22df35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b195aaf-a8de-4e4b-9aca-1ff030a0564b",
        "cursor": {
          "ref": "f898b1d7-5caf-4b08-8f35-89961e29d3cf",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bbe9df8a-86da-40aa-96f3-6e2562272ffa"
        },
        "item": {
          "id": "5b195aaf-a8de-4e4b-9aca-1ff030a0564b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "679f2f68-fbec-4ea2-b087-aeef29389653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f344c6-0d82-4cba-b26d-a966439645ac",
        "cursor": {
          "ref": "2cff417b-9e29-46c9-a69f-a49aac5b7087",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "89b0399a-e087-4090-87f0-e2ec255dcd2a"
        },
        "item": {
          "id": "e6f344c6-0d82-4cba-b26d-a966439645ac",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "564cb3a8-0931-4be0-a109-48231cd37272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f52fd1-1855-4c01-925d-57f77898e958",
        "cursor": {
          "ref": "024823fc-8158-4d2e-8e0b-bbcaa73315d1",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4c6909ab-5ab8-4d1a-8f8d-7dc1c6cce9b7"
        },
        "item": {
          "id": "b1f52fd1-1855-4c01-925d-57f77898e958",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "73765b0a-a8a1-407a-ab6c-e6f81d1c1e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67607231-17b6-427f-a63d-2a6b77dffc00",
        "cursor": {
          "ref": "d765fdbd-63d8-4793-b3fd-07fd639cb212",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "32bbe774-0426-48bf-9aca-4e93ba5d36a9"
        },
        "item": {
          "id": "67607231-17b6-427f-a63d-2a6b77dffc00",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ee0d92e6-393a-4725-8652-b7660fa6d23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f249b5-3eb4-4a13-8930-44e237f04614",
        "cursor": {
          "ref": "7837469b-70c1-43e5-8dc4-6a0605859549",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a9cc3ee0-4231-4c66-b3e3-dd48b98f633b"
        },
        "item": {
          "id": "f0f249b5-3eb4-4a13-8930-44e237f04614",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2bc259de-f648-428b-843a-c601705e1f8e",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f04b18e6-3c57-4709-af72-724811c9ace4",
        "cursor": {
          "ref": "c2069ee4-bea4-4059-b411-5ee38c74afe2",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7ee92eca-f9c9-4d0e-8fe8-09b5edaeba48"
        },
        "item": {
          "id": "f04b18e6-3c57-4709-af72-724811c9ace4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "38d0e26e-9562-437f-bda6-4b448be5ee33",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fdb7ff0e-9d2c-45ca-a059-fba1b1a84d35",
        "cursor": {
          "ref": "980d6af5-34ce-47b8-8be9-12882ba452b8",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c065af08-2f9b-4b93-af38-b0b0ddb04de1"
        },
        "item": {
          "id": "fdb7ff0e-9d2c-45ca-a059-fba1b1a84d35",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "82c7efd2-f324-40d8-8fa8-739bcb21516d",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0a8e6dfd-c173-4cfe-9487-01e13704768f",
        "cursor": {
          "ref": "5380d593-f772-4a98-8739-603be0b52516",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "40be2e50-8583-4673-83e2-a1b7287bb13d"
        },
        "item": {
          "id": "0a8e6dfd-c173-4cfe-9487-01e13704768f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6e0960e8-e0c2-4dfe-b343-1db56f86b9dd",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bc6b9059-f73c-4cdd-addd-ff1bc8607215",
        "cursor": {
          "ref": "bce84f0d-5ef7-454a-bf70-4d7fe13f81b6",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8f645ccf-b747-4155-81c1-e16ae498eeef"
        },
        "item": {
          "id": "bc6b9059-f73c-4cdd-addd-ff1bc8607215",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9093fe39-78e2-46e3-b622-d6781ee751b1",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "61ba7176-425d-4dff-8358-0abd65faf44c",
        "cursor": {
          "ref": "d6e5af27-50fd-419a-8026-8e55da6041da",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c671a416-bf01-4ff7-9017-41c0a4499898"
        },
        "item": {
          "id": "61ba7176-425d-4dff-8358-0abd65faf44c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8f4c7856-fd03-48ce-966e-0c80613e2546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf3a8df-fa34-4643-ab40-4224fa008819",
        "cursor": {
          "ref": "1024689a-b343-46dd-be87-a7fdf72349d6",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "79dc9609-0b1f-4fb4-bbaa-2b646c52cabb"
        },
        "item": {
          "id": "cdf3a8df-fa34-4643-ab40-4224fa008819",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7b32e11c-4c79-46ce-904f-3d029a358243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008a1242-460e-4bc5-9e70-c18f2e36e13a",
        "cursor": {
          "ref": "99c1e233-5739-4180-b0e3-e0bbdfb9db57",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "04913a35-3f18-4e61-a8fa-ddd28f3d8c91"
        },
        "item": {
          "id": "008a1242-460e-4bc5-9e70-c18f2e36e13a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "24e6d9da-4045-457d-a551-dca4be8e6817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96ae3d6-1657-4e67-8071-0ad6f8681eba",
        "cursor": {
          "ref": "ee864378-b5e9-4568-a2e9-3f06b0cf9fd4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bdfa3fa9-9aa0-4682-b0e8-a00a7f91348e"
        },
        "item": {
          "id": "d96ae3d6-1657-4e67-8071-0ad6f8681eba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "08e46705-4c6b-42fe-a878-b8973f6513c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be2ae8e-6dc5-43b2-84a9-0070b30c516b",
        "cursor": {
          "ref": "137d1715-c827-449d-bf57-fbb679d8e729",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2ac1b5f9-ed29-4716-8098-2f2d99f3bab6"
        },
        "item": {
          "id": "0be2ae8e-6dc5-43b2-84a9-0070b30c516b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8331dbb7-4d8b-45ae-9504-8c7e88a611fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe2380c-4285-4ed2-9643-317dbe176bca",
        "cursor": {
          "ref": "0ef30425-8797-44f6-9048-0e9249051e3b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "61f2398f-7719-4838-bb1c-5adbb9e44993"
        },
        "item": {
          "id": "dfe2380c-4285-4ed2-9643-317dbe176bca",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9b142007-e102-4c49-ace1-abfc25908388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba8620b-f98d-4984-b569-5c8a53ee6bf1",
        "cursor": {
          "ref": "ac256e2b-a698-41db-8ba9-3d82fad92a82",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8c434072-6814-48de-90cf-f8c0643a4874"
        },
        "item": {
          "id": "fba8620b-f98d-4984-b569-5c8a53ee6bf1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fbf90f5e-6815-43e1-bdc6-733f4d245ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c54bff-e594-473f-b6d3-743a134ee5c6",
        "cursor": {
          "ref": "2be374a4-4913-4ad1-984a-e2e1fb83511d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7d206d41-b24c-49a3-80ab-ea68f3d108d4"
        },
        "item": {
          "id": "b6c54bff-e594-473f-b6d3-743a134ee5c6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5a561b1d-a91a-460b-8f4d-02e58672862d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2afaa06-125b-46df-a854-e10467f4c84c",
        "cursor": {
          "ref": "e07cf4a0-ad64-4914-a405-48f3a56138a2",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1c8be3e4-dffc-484c-87f4-b76387f658b3"
        },
        "item": {
          "id": "c2afaa06-125b-46df-a854-e10467f4c84c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4402ea19-eecf-4466-910f-ad1956dbf15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73fa0b4-fbde-4bd9-ba35-347bf50ffc07",
        "cursor": {
          "ref": "ba52d366-c0ca-49d4-ba4a-bc507712db7d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ce66eb02-5cdb-45e9-9fc7-fc67d183a287"
        },
        "item": {
          "id": "f73fa0b4-fbde-4bd9-ba35-347bf50ffc07",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a9b875b0-4e31-457e-b8fe-7fbaf2ddb6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d722fa7d-b33f-490d-bbcd-da47582d9c66",
        "cursor": {
          "ref": "5749d9d4-1696-477f-9f62-3db13651c417",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ff3b556d-2de9-4f7a-b552-bdbbddc65629"
        },
        "item": {
          "id": "d722fa7d-b33f-490d-bbcd-da47582d9c66",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "abbe2202-3a1d-48f6-8801-2968cb1258f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c94de2f-8087-4c0f-9a4d-fd2b3e473fd3",
        "cursor": {
          "ref": "324d61ea-d7de-4e19-959c-f3699816805a",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c60e706b-b288-455f-a43a-1dd289d7616a"
        },
        "item": {
          "id": "8c94de2f-8087-4c0f-9a4d-fd2b3e473fd3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8f0b3917-7519-4d21-89d5-b3d1019aaaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a56e8e-e474-478a-bc5d-9f717710c107",
        "cursor": {
          "ref": "c1d70702-60f6-4302-abd9-7ad8e39bc607",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a72e815f-33fe-42ac-b49a-9a60112eaf65"
        },
        "item": {
          "id": "f4a56e8e-e474-478a-bc5d-9f717710c107",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5cd5c0a3-79d0-472f-902a-578868e80a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd81ca37-6b5e-469e-ab42-6f035d7f6d1b",
        "cursor": {
          "ref": "3321ec6c-2e3b-40a7-9efe-40adf6056200",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8f3cc4be-1975-4130-a166-671908910399"
        },
        "item": {
          "id": "bd81ca37-6b5e-469e-ab42-6f035d7f6d1b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0e7d9b26-b2d0-4c68-a256-8b5fd8f8daf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd3ea84-56f6-443e-9abb-ab9bb2b858a5",
        "cursor": {
          "ref": "86184ff8-2eef-45ba-b02b-462896e00591",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "eeb9a9f7-7218-4bb9-a0de-931d74cf2a17"
        },
        "item": {
          "id": "dfd3ea84-56f6-443e-9abb-ab9bb2b858a5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2b8abf4a-450e-4a00-acff-af817b09e7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2e19db-7511-4c5b-952f-cf1bd163c757",
        "cursor": {
          "ref": "05ee9dad-1e34-47a4-93ec-41103b7c48cc",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d8c9bb51-fcf9-4b5d-8322-a3054b6ac8a7"
        },
        "item": {
          "id": "6f2e19db-7511-4c5b-952f-cf1bd163c757",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3c58f41c-6a54-4404-b92e-8b15a9df622f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab977d98-21ff-4a6a-a09c-1e9a1947222a",
        "cursor": {
          "ref": "88df3c1c-9c25-4ae8-a5bf-7bfc572f121c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0fb43728-fde0-42b5-a8a9-31e6984c2654"
        },
        "item": {
          "id": "ab977d98-21ff-4a6a-a09c-1e9a1947222a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1c0b64bf-3afc-4445-97b7-fb8cfc41bc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c40d229-61e0-4915-a862-07e9d9e1d7e9",
        "cursor": {
          "ref": "968b50c3-7db3-4bc4-a3cf-1512e179fb1d",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ee797d69-1e6b-4052-ba03-7ef7115f1426"
        },
        "item": {
          "id": "2c40d229-61e0-4915-a862-07e9d9e1d7e9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a283e22c-a2ee-4610-a644-2215c0339dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5765f66-edd4-4305-8c8f-4485bce33c99",
        "cursor": {
          "ref": "c79f067a-df09-4228-a730-5acceae810e6",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "547235f6-059c-41ab-8c91-e3ff1e40bb14"
        },
        "item": {
          "id": "b5765f66-edd4-4305-8c8f-4485bce33c99",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f031ab09-2552-41a8-8af8-8ee70e5d4831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9008341b-cceb-4655-b37a-e63471d3db69",
        "cursor": {
          "ref": "9f6b2a65-3864-41cb-9540-f31613dc7e46",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b11f33d6-5283-4631-ac61-9f676f3e4f17"
        },
        "item": {
          "id": "9008341b-cceb-4655-b37a-e63471d3db69",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fd233ed1-5571-455a-ac0e-15a5d0a48254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194882e6-cd37-494e-8b48-a6942a39cc34",
        "cursor": {
          "ref": "88d4466f-1685-4e9b-87ab-136c5ddd1056",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e2a39a1d-625a-47e9-bd07-4fa92d324942"
        },
        "item": {
          "id": "194882e6-cd37-494e-8b48-a6942a39cc34",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1f4bb6a6-175b-4696-8c04-91644b7befa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b610f82-7b17-43a7-8401-6004ef2266ea",
        "cursor": {
          "ref": "9b172599-d9d2-4211-a413-4e0cf654abc1",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "10e8d4ad-5d44-4f49-a878-a6fba9b2d02d"
        },
        "item": {
          "id": "8b610f82-7b17-43a7-8401-6004ef2266ea",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "464e93ae-121c-4aff-b0cb-1415a2429788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a38867f-0d93-487c-ae62-28d001cc259e",
        "cursor": {
          "ref": "73666754-17f0-4aec-8c49-50af324b1df1",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "326252e0-93a4-4bf2-aac6-ba6b24473062"
        },
        "item": {
          "id": "4a38867f-0d93-487c-ae62-28d001cc259e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c538b131-61bf-48fc-8670-860e494fbd6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b6f272-28a6-4da7-8da2-47c8e27709be",
        "cursor": {
          "ref": "a7e46867-aaaa-4b6b-9d39-30a7393280ed",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3ff3ccba-8f24-4773-8376-201e7db544cd"
        },
        "item": {
          "id": "78b6f272-28a6-4da7-8da2-47c8e27709be",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ddfa7eb9-c141-4290-ac5e-126e945d27f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a24a4f0-f736-46a2-9171-5b7e1d63c196",
        "cursor": {
          "ref": "f22e7948-dfce-4214-a201-6cddfdd7ec8d",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bb0ae5f3-7242-4e4b-94b2-38a12729ad44"
        },
        "item": {
          "id": "6a24a4f0-f736-46a2-9171-5b7e1d63c196",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "465bf99e-a760-409d-a448-ba3f0b5ef901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ac705a-161d-428d-91f2-22feb29ce241",
        "cursor": {
          "ref": "d0c36faf-9fc7-4fc9-8f75-ec04aa4e2aac",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "542f9dcc-50e6-45b0-b293-1bf4dba9902f"
        },
        "item": {
          "id": "e9ac705a-161d-428d-91f2-22feb29ce241",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "741f766e-453d-4aec-b7d6-57b710e4a171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b73a969-b21e-4148-9ce0-1a546876d23b",
        "cursor": {
          "ref": "6ab9ee61-7d4e-426c-a118-919d166e0187",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c5bbc068-a134-409e-8692-fb115e9c0099"
        },
        "item": {
          "id": "2b73a969-b21e-4148-9ce0-1a546876d23b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e4a9c156-6f38-4f82-98fe-ea6eec75c1c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed56010-631a-4959-a91e-4a648a03b069",
        "cursor": {
          "ref": "1a74080d-5dea-4db5-9932-cde34cbbe5dc",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bc8b4d36-f8e5-4ad8-b949-c381fbf41007"
        },
        "item": {
          "id": "3ed56010-631a-4959-a91e-4a648a03b069",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b754755c-4217-4dd2-bff0-30090038899f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fb6c10-af1c-47f8-ac55-c78c5dc4fbe1",
        "cursor": {
          "ref": "76fde97f-c2bf-4f53-8ece-ae50b34794b8",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b65feaa3-2076-4af8-9aeb-bf67e1f035b4"
        },
        "item": {
          "id": "b7fb6c10-af1c-47f8-ac55-c78c5dc4fbe1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "60b1fcd6-a4a1-44f8-9146-c0d8ad498c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efcaa63-84ef-4234-aaf9-8fef4ee78055",
        "cursor": {
          "ref": "9e2aa16a-2c26-4087-aa79-8b4df280ac21",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2f2ca54f-7454-4221-a00a-cf2567782852"
        },
        "item": {
          "id": "9efcaa63-84ef-4234-aaf9-8fef4ee78055",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7c84f1a8-aa03-4f21-9f4c-73b1eb6ffab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29daec16-65dc-4c56-a739-9b81ce6f8cb8",
        "cursor": {
          "ref": "2331e10c-2e7c-4ac8-bafd-f7496403f1c5",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "aa15580b-9a4f-44b7-8cae-f642d5b570ef"
        },
        "item": {
          "id": "29daec16-65dc-4c56-a739-9b81ce6f8cb8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ca418fe7-b17f-4c07-a425-445e13144c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cda3d78-7946-482c-8006-3cbe2d60e10e",
        "cursor": {
          "ref": "594154e1-21d0-41c0-89a0-9b8bda7e6be9",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1b0159b5-7327-4505-b7be-a2dff5cec0dc"
        },
        "item": {
          "id": "6cda3d78-7946-482c-8006-3cbe2d60e10e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0579a798-cd48-4084-a77f-13f3b238fc54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e73fd37-fb78-4599-8db2-3eefd3aed569",
        "cursor": {
          "ref": "ae7cf862-00a6-4930-a6dc-12a3309b8fbb",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2cf4e2ac-bf09-432d-bd17-adeedb45605e"
        },
        "item": {
          "id": "5e73fd37-fb78-4599-8db2-3eefd3aed569",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "510e596c-fc4a-4fae-9066-7e70aee83433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "da819b78-1e82-4c91-add3-3860c5ded242",
        "cursor": {
          "ref": "e17cb5c5-1ec2-4c62-81bb-d8bb937c249a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c1ba1fdb-8adc-4f41-964d-7878e7774638"
        },
        "item": {
          "id": "da819b78-1e82-4c91-add3-3860c5ded242",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5016c66a-2907-48a5-a82c-d7ebdb340620",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a21a9a-ebe1-4839-8ba8-e09705cb7d1e",
        "cursor": {
          "ref": "0d1496fa-eb13-4f90-b0df-9a17e93beb3c",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "70112131-ad13-40b5-93a0-49046a955ea0"
        },
        "item": {
          "id": "75a21a9a-ebe1-4839-8ba8-e09705cb7d1e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "73967c14-0860-437b-bf9b-9539e1de2de5",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97ed746-64d6-43f2-90be-b8eabb7fa2e0",
        "cursor": {
          "ref": "51e27b55-cc4d-4c90-95ba-77b545d3e1af",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ebc69319-6966-4d31-b77b-6ef0b873054d"
        },
        "item": {
          "id": "a97ed746-64d6-43f2-90be-b8eabb7fa2e0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f085269f-3908-422a-b56d-cdf9140dfbac",
          "status": "Created",
          "code": 201,
          "responseTime": 448,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7344198-5387-4417-a920-839289376dad",
        "cursor": {
          "ref": "49a94ef7-a6bb-48d3-b547-654de837eff4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "45fd1bc1-a1e4-4e37-a1e9-c13dca31a72a"
        },
        "item": {
          "id": "e7344198-5387-4417-a920-839289376dad",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ddbaa4e0-597c-4225-b907-ed6fcda7467d",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef3f5d9-f193-4363-97d4-d4d5df0a96b2",
        "cursor": {
          "ref": "85362f61-acf8-4867-81d3-c2c1f87da8f8",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "18d85521-241a-4403-905b-858a924f18d8"
        },
        "item": {
          "id": "eef3f5d9-f193-4363-97d4-d4d5df0a96b2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f8189039-af1e-44f4-9119-b20dabdc72e1",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-01T00:36:12.663Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-01T00:36:12.663Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c218b104-abe5-47ba-8480-5d56c26cd4c6",
        "cursor": {
          "ref": "920aa9a3-7a53-4d8d-b0aa-8e714888abda",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b9dbfe7e-f649-44f9-b5ac-1606fb01d055"
        },
        "item": {
          "id": "c218b104-abe5-47ba-8480-5d56c26cd4c6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9571cc75-f228-44f1-99d2-d8a8816bbe8e",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f042241-8ad1-45f8-845e-382e83dbf52e",
        "cursor": {
          "ref": "ec5f62d5-c549-4ad6-b182-be1d524ebca4",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8c19cd5b-172a-42ec-8e1f-12e2af11a956"
        },
        "item": {
          "id": "2f042241-8ad1-45f8-845e-382e83dbf52e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "332dc292-7e52-4d0d-b843-b052a40b5722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9acb3b-a078-405f-b811-8a025c5fa027",
        "cursor": {
          "ref": "ad910834-8919-401c-9ca3-b8d5f106347b",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d7dfc1d9-06c9-4d59-8955-88521f0cda3e"
        },
        "item": {
          "id": "4c9acb3b-a078-405f-b811-8a025c5fa027",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fca70158-8ba6-459e-9097-2009aaa981e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a005bd4a-f3ac-46af-ba63-5646e6c6bd97",
        "cursor": {
          "ref": "f315ba14-bec7-4469-9eae-1405d4e6cf0a",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "40b4569e-613c-4964-9f64-4983aba7bb0f"
        },
        "item": {
          "id": "a005bd4a-f3ac-46af-ba63-5646e6c6bd97",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "97e473f4-791c-46d4-9be6-9695b766c37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2590afd-f076-417a-bb74-e9d9eec8c567",
        "cursor": {
          "ref": "19b55316-182d-47a3-8d77-5c02d9a14e32",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dad9232f-7491-4922-b600-f8c989b56bba"
        },
        "item": {
          "id": "f2590afd-f076-417a-bb74-e9d9eec8c567",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5f9b17b7-0646-455b-8e0c-8220bb498337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ee09a9-7021-42e6-9a6a-1f0898b3ce52",
        "cursor": {
          "ref": "74fb95d2-c6e4-4de2-ad2b-6d83c68de17b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "27ab135b-a4d4-4eb8-b45d-e65ca1e9c043"
        },
        "item": {
          "id": "77ee09a9-7021-42e6-9a6a-1f0898b3ce52",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7c17dde7-1a24-4a8c-80d6-569232a98cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1690b8-3986-4ca7-9b45-66a6ae5d7b33",
        "cursor": {
          "ref": "3a7783d5-e2af-4602-9cb1-38aee2814efa",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b1d363d4-6544-4749-8825-65241d4a7000"
        },
        "item": {
          "id": "3c1690b8-3986-4ca7-9b45-66a6ae5d7b33",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5865b15a-969c-4ec6-9eb6-bebd6dfbb6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4150943-374d-4af5-b275-775255410731",
        "cursor": {
          "ref": "445cc61b-29e0-499c-88a3-dfc7a0179f49",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b2a9734f-05c8-4da5-9e1d-116ed460cb1b"
        },
        "item": {
          "id": "f4150943-374d-4af5-b275-775255410731",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "996e9e07-c189-41d6-a369-60e0a22dc509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a072773d-4ef8-4e3e-95a0-b395131adebf",
        "cursor": {
          "ref": "1acee94a-89d4-48b9-8ed9-842ca2323c45",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7f0c0b98-a188-4992-a590-7faf5410669f"
        },
        "item": {
          "id": "a072773d-4ef8-4e3e-95a0-b395131adebf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fcf7ded1-bb62-4711-a90b-86602df272df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bb73d5-1684-4ad2-88da-0ff934131eb4",
        "cursor": {
          "ref": "f70b5d6b-1abb-4231-a3ea-0514fad12212",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7802b057-2147-4b17-beca-d546cd70abbf"
        },
        "item": {
          "id": "e0bb73d5-1684-4ad2-88da-0ff934131eb4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d0f35926-aebf-4bc1-bffc-eb9080bf72b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f7373b-ec81-4567-8e94-254f25732e87",
        "cursor": {
          "ref": "43372021-45f4-4ec7-9d23-f8329fcf9a31",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f342a2f8-f087-4e66-99ac-1edaf06e1931"
        },
        "item": {
          "id": "a2f7373b-ec81-4567-8e94-254f25732e87",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7de526e6-87f6-4a71-bda4-d90ced085f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2dcfb3d-2364-4964-99b2-7672b8c85a50",
        "cursor": {
          "ref": "26705640-0d92-4152-8f14-54119e6e682d",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cef5e45d-653a-4049-8f09-bdf8ffa3288f"
        },
        "item": {
          "id": "b2dcfb3d-2364-4964-99b2-7672b8c85a50",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad85cc7c-4727-4902-963a-b5cab578e1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bc0aba-2135-46ac-aab2-2aec79ffd931",
        "cursor": {
          "ref": "115f28a0-613b-4afa-9dff-a23e9e98803c",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "be3d3c1c-09d5-4fd9-9528-0978d91ff3c3"
        },
        "item": {
          "id": "54bc0aba-2135-46ac-aab2-2aec79ffd931",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "69847167-0d87-4cce-b96b-2846a7a09880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9207013-e64b-41ba-815c-db24aa02e973",
        "cursor": {
          "ref": "19ffbcfe-068e-4bd4-98c3-eb6f93fafcd7",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fa73cb81-ea75-43f8-84ee-4defa9b6dca6"
        },
        "item": {
          "id": "b9207013-e64b-41ba-815c-db24aa02e973",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c8ab2dd1-cbaa-4b81-b5b1-f6b4d83cf3bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d0c4c653-85ba-44ef-916c-11bae25e9a4f",
        "cursor": {
          "ref": "9f5d772e-4d73-4e41-aaf5-56c2a42c5d60",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ff3786ed-3efb-44da-9297-eff4fab9cea3"
        },
        "item": {
          "id": "d0c4c653-85ba-44ef-916c-11bae25e9a4f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d70a8ba6-f5c1-4ca1-ae9e-3f675dbfdbbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "1ba0145d-6762-40c7-b41a-070984b6e0a6",
        "cursor": {
          "ref": "f7f243a4-ab89-4f23-8f11-7b6e22fb43bb",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a2dc42b8-39ed-4e1f-9b81-e4288274a788"
        },
        "item": {
          "id": "1ba0145d-6762-40c7-b41a-070984b6e0a6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e21fd10d-cc3a-4ea8-9c70-3b0a487440d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c36f901-521f-47f1-8255-4b73bf906df0",
        "cursor": {
          "ref": "25f2a2b8-d35c-481f-b144-f173d3dc3756",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f983e74b-91d2-4160-9bb2-b250ab519929"
        },
        "item": {
          "id": "0c36f901-521f-47f1-8255-4b73bf906df0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6f227aa3-cbb1-4591-b433-a6b0459a7eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7596351b-9855-466a-b464-a9ef965418cf",
        "cursor": {
          "ref": "82c4c38d-6f91-4bee-9252-b4361719700f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ab090195-efd7-475e-9a3e-4554868e8405"
        },
        "item": {
          "id": "7596351b-9855-466a-b464-a9ef965418cf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0c641d30-4714-4764-bc33-47b5284b9561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e179b2c-fa69-47b3-ae11-0bf6221d33b5",
        "cursor": {
          "ref": "003066b2-3850-4cda-9e32-f6dfd734c63c",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1a99115a-f988-4f69-8be2-30bafcb8433a"
        },
        "item": {
          "id": "5e179b2c-fa69-47b3-ae11-0bf6221d33b5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "307af206-1315-4cba-9b25-86ffc283f67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cd1869-0388-4ba6-b6ee-80d91e211a3d",
        "cursor": {
          "ref": "5eeb2524-a486-43e6-840d-0e15d65401eb",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "82561e77-1bcf-4115-bddd-525a31a48e52"
        },
        "item": {
          "id": "d3cd1869-0388-4ba6-b6ee-80d91e211a3d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fb1dedee-1c45-40bc-a8e5-35965946bb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a67033d-caf2-43f2-8dd2-3cc71418e789",
        "cursor": {
          "ref": "6524816f-0d00-43f3-823d-016cf2ea240c",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7019048e-dac9-4d70-8b03-ab35948b844e"
        },
        "item": {
          "id": "5a67033d-caf2-43f2-8dd2-3cc71418e789",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "82871e9f-2717-43e3-bdcf-ca9cf2be112b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1447e84-ae52-41e8-afed-7a47f893229e",
        "cursor": {
          "ref": "5810b995-212a-408e-b3f2-b319800360ca",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3bf3695e-474a-4961-9791-e25d8ad2db3f"
        },
        "item": {
          "id": "d1447e84-ae52-41e8-afed-7a47f893229e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6129a220-6b53-4b5f-8c52-a3572d40e90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedb3a53-1569-45aa-9893-5b85ace3edc7",
        "cursor": {
          "ref": "2a7700b8-015f-4c9b-a2d3-c71f3ca65af6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fc4d9b78-f393-49bd-ade1-a14c20656e31"
        },
        "item": {
          "id": "aedb3a53-1569-45aa-9893-5b85ace3edc7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6bbe6d00-466f-4310-9b99-22d7ec306bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37f8c27-db24-4b86-9484-69de417b8894",
        "cursor": {
          "ref": "009c5182-248d-46be-a7c8-38e1ff5cb271",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a1c9df08-23cd-4a90-b671-dd0775e0d316"
        },
        "item": {
          "id": "f37f8c27-db24-4b86-9484-69de417b8894",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a92ef629-7b7f-490e-8f9f-e98eb6a618f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5d6754-d4ec-429a-9acf-9f4c3ff6f296",
        "cursor": {
          "ref": "6805a0c2-962c-482a-b497-df7d9f7714f0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6235ea10-a759-4e6f-92a8-6f1e8c57fb88"
        },
        "item": {
          "id": "0c5d6754-d4ec-429a-9acf-9f4c3ff6f296",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ccf4e2b2-7992-4400-9c43-b509490f9b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5035b88-293d-42d7-90cf-e5df38577324",
        "cursor": {
          "ref": "1398a0f2-a81c-4cb8-996c-37439c11a57b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "638537ca-9812-48ec-a19d-2c143df15d03"
        },
        "item": {
          "id": "d5035b88-293d-42d7-90cf-e5df38577324",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d62449ad-3753-4a13-ac99-cd8a9a591984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70e2259-d7cc-4857-b640-b7db94a4ef1d",
        "cursor": {
          "ref": "4ce9638a-132a-4327-92ff-9a83331bc890",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "27c8170d-f3ca-4a81-aba5-3f38ff8e5a4b"
        },
        "item": {
          "id": "c70e2259-d7cc-4857-b640-b7db94a4ef1d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "04783b59-8fae-42b4-84ff-8fc913e46fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bfd8e9-afd9-4785-95f4-a28e535b1086",
        "cursor": {
          "ref": "ac29520f-21ed-4b8b-9576-5da54a9b691f",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "59478d8a-fd06-4556-9148-068362c8de97"
        },
        "item": {
          "id": "47bfd8e9-afd9-4785-95f4-a28e535b1086",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5ad8d685-e4ba-45ac-a270-1bc6757085a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3375c45c-b2e2-4984-907c-d76b859772af",
        "cursor": {
          "ref": "48e0f313-ea30-4dd3-9306-4d72dc5f392e",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fada7d30-9d58-4eb2-a094-96dfdb920e92"
        },
        "item": {
          "id": "3375c45c-b2e2-4984-907c-d76b859772af",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "234c78c5-c562-4d3d-9368-38eba8a500cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16316213-46c9-4951-9d60-2217ad7d9868",
        "cursor": {
          "ref": "74be5ddd-d314-4a05-97f6-e5f4ff11af78",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "48ff72d3-87d3-4a17-9469-0eb026ab9d8e"
        },
        "item": {
          "id": "16316213-46c9-4951-9d60-2217ad7d9868",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "68d1306b-dd7b-4d6a-b03d-468557bd0bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a31582e-1848-4f1f-a4b4-be216d720be7",
        "cursor": {
          "ref": "996a5910-24d7-467f-82de-f491b1c602bc",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f253b5c1-85e2-42a6-b0b1-34dd019af892"
        },
        "item": {
          "id": "5a31582e-1848-4f1f-a4b4-be216d720be7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b8239a20-e073-479c-b619-fa533985edcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97606ff2-c89a-4811-b868-14acddd314a9",
        "cursor": {
          "ref": "80909516-565f-4b57-981e-4464d278194c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0a4ee492-0e0b-4632-9af8-12ab08a6e1a3"
        },
        "item": {
          "id": "97606ff2-c89a-4811-b868-14acddd314a9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d83219ba-b52b-4ff3-b330-69d79fb08950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a728f32-f766-4fa0-a231-c2710670e717",
        "cursor": {
          "ref": "514ff2b6-d7a2-4cf1-8f76-2592fdc80e2b",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3d915f5a-9fa8-4db0-947c-b042cc876b3a"
        },
        "item": {
          "id": "4a728f32-f766-4fa0-a231-c2710670e717",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a1724652-2b6a-4912-9334-24c058f741d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f18b1973-01b5-43dd-9c7b-792d460b66ad",
        "cursor": {
          "ref": "39380bc0-5301-4b12-81de-b5d3e2ab8378",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6378b7b0-1a87-499b-a184-d8ba7852c006"
        },
        "item": {
          "id": "f18b1973-01b5-43dd-9c7b-792d460b66ad",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "eaaf94a7-d1c1-408b-9e7f-f72afd887d97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf1539f-64ae-4542-ac7a-43961a81adfa",
        "cursor": {
          "ref": "393061be-8df2-43ce-8a4a-a47f6f705f3d",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "faa0f0f3-4da3-438a-b0e1-bf1d2c6af2a9"
        },
        "item": {
          "id": "cbf1539f-64ae-4542-ac7a-43961a81adfa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a33b3a65-d506-4f84-a32b-e0844fb2278f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb5b789-067e-4f40-b598-760824989ff9",
        "cursor": {
          "ref": "7ea1de22-b2e4-409f-83f1-e926b8984569",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e4aa1cdf-4629-4935-9ccf-e0b752f9f8de"
        },
        "item": {
          "id": "6eb5b789-067e-4f40-b598-760824989ff9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "198232bc-346a-4a0f-aa01-3604c9f97e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd4835f-6485-483c-979e-210f3443489c",
        "cursor": {
          "ref": "3f397a9a-2aea-4391-af02-2f04be2a8a08",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "18257bd6-181f-4e33-84b1-0cbb9e1bd2b3"
        },
        "item": {
          "id": "6dd4835f-6485-483c-979e-210f3443489c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "92678130-f1a3-4ca9-8b60-035e035c81e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe32948-5415-44c2-9351-0c094912d52c",
        "cursor": {
          "ref": "cff38a42-6a94-4e5a-90ad-1417572160fd",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d32213d7-c770-4cbb-8667-0a81eb7d29c7"
        },
        "item": {
          "id": "bbe32948-5415-44c2-9351-0c094912d52c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "64924fef-0475-4458-8ea9-c7fede3dc6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5383cfe-d942-49fd-a3cd-6e24c5a0c966",
        "cursor": {
          "ref": "a1da4b93-4827-4df3-897b-6798c29c603c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "70909546-974c-49fb-8aa1-b376cfa56390"
        },
        "item": {
          "id": "e5383cfe-d942-49fd-a3cd-6e24c5a0c966",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3e32b968-940c-49ec-86e7-dd4f7e795e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247bdc3c-9f93-42c7-b2f9-14cb8bffb30e",
        "cursor": {
          "ref": "87af1860-f8b3-49b1-b0ee-fec711576ee6",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ae7eea83-a95e-49a6-8b2a-6e44e02cf22f"
        },
        "item": {
          "id": "247bdc3c-9f93-42c7-b2f9-14cb8bffb30e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c477cb9e-3db6-43c9-9bc2-6ff4b493b3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898ea958-365f-4f41-aba1-29272dd34333",
        "cursor": {
          "ref": "83ae26ee-72ae-44d5-af33-6dd47757d343",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9ef52572-3b73-4bce-a681-b5d76bd5cc9f"
        },
        "item": {
          "id": "898ea958-365f-4f41-aba1-29272dd34333",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a334162b-4afe-48e9-a8d6-ac77285393b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4e4ed4-cdc3-4388-9107-fa65681f4368",
        "cursor": {
          "ref": "26035286-b2ed-4221-bd87-8807a58df987",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b9f05cf7-2718-46c7-8aa6-64e492e4fffa"
        },
        "item": {
          "id": "be4e4ed4-cdc3-4388-9107-fa65681f4368",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c8440e71-971c-48b1-8e95-8c3ef5f993c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7dbf0d-4cb3-4959-b773-f251ef347b50",
        "cursor": {
          "ref": "0b56ef68-3de2-4bd2-90fa-5647ba1a875a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7310749e-16cd-4388-9ae9-446ed7636e7c"
        },
        "item": {
          "id": "8b7dbf0d-4cb3-4959-b773-f251ef347b50",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d4ee6c6d-e69d-47e0-b266-d0f010ad0d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b959a85-df79-4e58-9fbf-593b8807873c",
        "cursor": {
          "ref": "13d2732e-397d-4a6a-92c9-71ae180d1c66",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d5fcaf5f-3255-41b0-9d1e-e0fd66af4c7f"
        },
        "item": {
          "id": "4b959a85-df79-4e58-9fbf-593b8807873c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e80223fa-654d-4321-8604-f0d12827942a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9084465-6eea-439b-92c4-01966b937c42",
        "cursor": {
          "ref": "51e910e2-1d8b-485f-a682-cc6d220695f9",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bcb59704-6281-43ad-a478-5aedfacd9709"
        },
        "item": {
          "id": "b9084465-6eea-439b-92c4-01966b937c42",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8e5d7fb6-b4e6-421e-b286-e310bafb15d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c154ea-1001-43fa-a0d1-75f446056c07",
        "cursor": {
          "ref": "b90b8218-21c9-46f0-97c4-b75a40726c38",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "190e1eb2-e928-44f4-87ec-539b073d576d"
        },
        "item": {
          "id": "d8c154ea-1001-43fa-a0d1-75f446056c07",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4d4fb902-9038-49f2-9433-6135bc9bd323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25a6377-33a6-46f2-b30e-b57e610b3176",
        "cursor": {
          "ref": "8a02345a-d5f2-485d-8c2b-4d08aa8e3dbf",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "383675fb-7e99-434e-8e14-6beb818c1fd6"
        },
        "item": {
          "id": "f25a6377-33a6-46f2-b30e-b57e610b3176",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "72cb56d8-5d21-426e-b7e1-97a969f99536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec64957e-8676-4050-b47f-79a9ba86ecaf",
        "cursor": {
          "ref": "d09f0ef3-71fb-4d57-afb2-186d19322895",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0973bd3c-b2ca-466f-9e99-20150259dd23"
        },
        "item": {
          "id": "ec64957e-8676-4050-b47f-79a9ba86ecaf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d3efcb85-e736-42cd-b400-831604e75c92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "1c9645d2-f1de-4466-bb54-5792bd3847e6",
        "cursor": {
          "ref": "46384d8c-09a4-404e-bc12-ad28b93e36b3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "78315c46-68d9-4e74-8a49-8b725b1cc5dd"
        },
        "item": {
          "id": "1c9645d2-f1de-4466-bb54-5792bd3847e6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "53ccbae3-044f-4dfb-8c26-1125e24e648f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469423ef-da3e-4e0a-a95c-f78109762832",
        "cursor": {
          "ref": "b66e8ca6-7c3b-4479-a963-48cd1aea5d71",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "abd64462-75da-4a0a-851d-94921b73be11"
        },
        "item": {
          "id": "469423ef-da3e-4e0a-a95c-f78109762832",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3c63e77e-f505-48a0-8cdd-3b6bd22ff050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19df8585-dba9-4821-899e-802ec1b8cd35",
        "cursor": {
          "ref": "3b73cb6f-b1e1-4750-80d0-38207582efe8",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b7ea0547-224c-4139-ab17-1eff8e87abfc"
        },
        "item": {
          "id": "19df8585-dba9-4821-899e-802ec1b8cd35",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e111c763-0bc0-4fc3-a494-96667e9cafce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1074ce47-9ef3-4a83-9458-353de983cc19",
        "cursor": {
          "ref": "8ab6049e-a267-4f82-b8c6-b2268e55d61b",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "31795fd1-58e0-4a2f-92f2-815a55f35e9a"
        },
        "item": {
          "id": "1074ce47-9ef3-4a83-9458-353de983cc19",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6bb07e78-c5eb-470f-897c-b79bc95cac3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82cbfd11-8d64-458c-906d-3224437b61ec",
        "cursor": {
          "ref": "4cd9082d-126e-4ba5-a467-d361613d7367",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7d754352-530a-409e-a63f-df66dc98416f"
        },
        "item": {
          "id": "82cbfd11-8d64-458c-906d-3224437b61ec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8ecab8ea-381a-4930-ae09-311815cd98bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d815ad53-75cc-4b4c-9f1a-8aa5d2943cbc",
        "cursor": {
          "ref": "88c80ecc-a050-4137-890f-7e70c3e1fa43",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "38bb14cf-8747-49da-8a5c-c7f6f66f1337"
        },
        "item": {
          "id": "d815ad53-75cc-4b4c-9f1a-8aa5d2943cbc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8713f09c-6095-4147-aa35-5510c625c907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d57fedd-2d6b-4c53-ac9a-562e47acefa1",
        "cursor": {
          "ref": "85704150-e4ec-4cf8-ac67-528b031ffd7b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a2f4cea8-59d6-407b-8bd7-bae68dbbe123"
        },
        "item": {
          "id": "9d57fedd-2d6b-4c53-ac9a-562e47acefa1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0b453b35-66a6-4f3c-95fb-fd26c591117f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7683d0ab-6892-4e9e-a29e-b361fff0b72f",
        "cursor": {
          "ref": "1106e9be-d1df-48c3-8731-3332bd8fb22a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bd8db08d-7856-4f7a-a9f5-4510ab833d42"
        },
        "item": {
          "id": "7683d0ab-6892-4e9e-a29e-b361fff0b72f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "943403ca-7053-487e-a7f1-9bd936735214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52931c8-4385-40cc-905f-3d0f24f54fcc",
        "cursor": {
          "ref": "559e500b-aecb-4c12-8965-baa183cbc433",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b6da6658-fc80-4a98-8cc2-0ffa3dbf3af9"
        },
        "item": {
          "id": "a52931c8-4385-40cc-905f-3d0f24f54fcc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a415acd7-d5f0-4fde-a6f0-bea5cc15f22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38aee2d3-3abc-48f5-8434-b53872e490cf",
        "cursor": {
          "ref": "b1b8e635-b201-48c4-ab9c-537f5d2a0bd5",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "daa7c191-748e-4f0d-a0cf-fab165723b6d"
        },
        "item": {
          "id": "38aee2d3-3abc-48f5-8434-b53872e490cf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bcc873cf-10ee-4ee9-8037-cba4e63f840b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38983e92-e8b0-4b50-95db-f3d25146479d",
        "cursor": {
          "ref": "e13206b5-3f44-4372-907f-f8d1e4046236",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6ddb182e-0af9-415e-a256-ebac133552cb"
        },
        "item": {
          "id": "38983e92-e8b0-4b50-95db-f3d25146479d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "61c85157-784f-410d-b8b2-b2779de9e4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16772348-e11d-4408-a3fb-4564a6b42dc6",
        "cursor": {
          "ref": "33c83e0f-1548-4ae4-951a-1a01a46b0bc3",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8d7e076d-2c9e-4602-b56b-78ce707ff9e6"
        },
        "item": {
          "id": "16772348-e11d-4408-a3fb-4564a6b42dc6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "15ad4890-b46d-494e-b7a6-a15407bd44ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39350da1-d709-4f86-a538-91388bf11e65",
        "cursor": {
          "ref": "c5ba0d40-4b63-45ef-a51c-57067959fa12",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "95905ac7-fb71-43b1-b136-d22f40aa8ea5"
        },
        "item": {
          "id": "39350da1-d709-4f86-a538-91388bf11e65",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b9412ca4-22b8-47bb-8749-4ac20251c862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0a9b7e-068f-4eaa-8017-46ec0b594dd4",
        "cursor": {
          "ref": "9bdf44e4-8701-4810-a6c8-a404e856f11a",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "057286c2-b753-432a-9824-bd6b4af25eb8"
        },
        "item": {
          "id": "6e0a9b7e-068f-4eaa-8017-46ec0b594dd4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1960e9a6-7631-4c11-a61f-c32184430f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7298c94-c27a-40d8-bad4-678a2f2361c0",
        "cursor": {
          "ref": "8507118b-ad07-4d31-a00e-515c87077b76",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7a59dfd9-8ffa-4fba-bbbe-bf97dd9f1b86"
        },
        "item": {
          "id": "c7298c94-c27a-40d8-bad4-678a2f2361c0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "032e038a-91a3-4ca0-9997-8f1eb46fd823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06e647d-eaad-40ec-99a5-9b148d9a1473",
        "cursor": {
          "ref": "33763ba9-2d04-4e45-a78e-24752ab3cc9e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "32b42d7b-ecfb-4a50-92af-abceb0def661"
        },
        "item": {
          "id": "c06e647d-eaad-40ec-99a5-9b148d9a1473",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3682ee97-f4cd-4efe-a017-c085533625de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3973763-7565-4387-a151-c15c611c4ba3",
        "cursor": {
          "ref": "77973ef9-c0cc-41f0-b351-e47878f8f650",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f073591e-9339-41ed-95a3-203fb9e8e81a"
        },
        "item": {
          "id": "b3973763-7565-4387-a151-c15c611c4ba3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d83f1a3d-334b-4c2c-99e2-cd974fd706d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a90a248-048f-4f70-ab8e-6367db77ce0e",
        "cursor": {
          "ref": "3a52b50d-fddc-4c6e-90ce-dbb5ea5b0d02",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "224f2074-cb71-4bd2-8754-89adb6ca051d"
        },
        "item": {
          "id": "8a90a248-048f-4f70-ab8e-6367db77ce0e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8d9807c8-4f73-4416-8b2c-86fb170de346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214f8942-2058-4243-ad89-9367158ad3b7",
        "cursor": {
          "ref": "045af172-56f9-4f41-8718-7c0211d18c6b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6b256822-d692-40ad-a476-3488f0c52b2e"
        },
        "item": {
          "id": "214f8942-2058-4243-ad89-9367158ad3b7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "38a2b08c-e818-4ec0-8148-bb4ca4642bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60ec5ab-044a-465f-8bb5-f458449f6cd1",
        "cursor": {
          "ref": "9b5fe44f-79e3-45c5-9fd5-b0d8de6d6030",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a7ce168b-225c-4b36-bcb1-cbe090fa9725"
        },
        "item": {
          "id": "b60ec5ab-044a-465f-8bb5-f458449f6cd1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f2898c01-8bb2-4d85-be6f-d11caaf80562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50125fd8-d574-4cea-9c9c-92def41f94a0",
        "cursor": {
          "ref": "c33a5aa1-79c0-4393-a591-22a80f7a891f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "006661e9-195b-40a7-b03b-a987391c1038"
        },
        "item": {
          "id": "50125fd8-d574-4cea-9c9c-92def41f94a0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a98e11f4-6fb0-401a-b043-3ed427f4643f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5f9fde-12ad-4a4c-b827-a135aa928b61",
        "cursor": {
          "ref": "a2ba2634-11fa-4f44-ad2e-0bb1a87b2221",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "422e5ae0-eded-4cb5-bbcb-2b3d9bcb8a19"
        },
        "item": {
          "id": "8e5f9fde-12ad-4a4c-b827-a135aa928b61",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "aeb4638f-7dd9-4193-9c74-dce163cf15d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3636f19-8bee-4f16-9efb-85f451bb7f5f",
        "cursor": {
          "ref": "f2ef98f3-5ff2-4d82-b004-61500f6c4d28",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d905aa93-1627-4d98-9a5d-66b72a31f588"
        },
        "item": {
          "id": "e3636f19-8bee-4f16-9efb-85f451bb7f5f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "802e2b30-caeb-434d-adee-9831c5164643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e9c933-c64b-4a0a-b14f-33202197d35e",
        "cursor": {
          "ref": "c0383db2-26aa-4f48-9cb5-aaca1097289b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d0f3c660-1de1-4012-8aec-43d68af91986"
        },
        "item": {
          "id": "91e9c933-c64b-4a0a-b14f-33202197d35e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "316dc273-35c4-49ec-963a-7bed894d2fe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed486e83-2ff6-43ea-9625-6276db682fa1",
        "cursor": {
          "ref": "e72119b7-d7b5-4302-bee4-108336ba7600",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "de0b629d-b442-4a15-86da-a8839cd5ef72"
        },
        "item": {
          "id": "ed486e83-2ff6-43ea-9625-6276db682fa1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4247e314-1601-448a-b3d0-b874939fe37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d1c972-e09d-48b8-8b87-bf50c59b2a5c",
        "cursor": {
          "ref": "883a3423-cba6-4e44-990f-8cbef30fc326",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "36899778-3a1e-455d-bfe0-2e5bc614bc02"
        },
        "item": {
          "id": "85d1c972-e09d-48b8-8b87-bf50c59b2a5c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5065106c-cd9b-4efa-887c-b952b2186105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe1eca1-b567-415c-ac8f-9b32b247c625",
        "cursor": {
          "ref": "8015e13a-935e-4b9b-b522-9553e452bc57",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b92d13dc-4a6a-48ef-9b66-a6f53fe67f91"
        },
        "item": {
          "id": "abe1eca1-b567-415c-ac8f-9b32b247c625",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6c53dcfd-bb19-4d29-807f-ff6384ab9d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed3043a-4782-4e97-8dde-48ff65537c42",
        "cursor": {
          "ref": "dc548faa-d028-490a-b5a6-dd6e9932076b",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6ced7995-64bd-4780-956c-500f9ee65471"
        },
        "item": {
          "id": "7ed3043a-4782-4e97-8dde-48ff65537c42",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5ffaa30f-cb1d-4ced-84e4-40417f5f1c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f63dd7c-dbe4-4259-b8c8-29c65402052b",
        "cursor": {
          "ref": "ac2077dc-f96a-4c3a-8e1d-be0a02dc05e1",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "68bedc29-c142-428f-9e4d-6d9553351b59"
        },
        "item": {
          "id": "8f63dd7c-dbe4-4259-b8c8-29c65402052b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "94b47611-0f16-4037-9f7e-7acc0f66ba7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f91817e-6650-4d37-85d0-23eafba8ffc6",
        "cursor": {
          "ref": "41978992-0d7d-486e-ab98-145cb1b44d4c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d3969eef-4840-40c5-a10c-8ba441ae23be"
        },
        "item": {
          "id": "3f91817e-6650-4d37-85d0-23eafba8ffc6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "913dfdf7-f520-4f01-b2aa-f5bf1dc67164",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "3d9d78cf-9722-4e4d-a5e4-6bcdb175ac34",
        "cursor": {
          "ref": "b02078ca-dbf2-42df-ace8-853a82f14e63",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b4108af2-816a-4cb0-afe4-136f9ad6df28"
        },
        "item": {
          "id": "3d9d78cf-9722-4e4d-a5e4-6bcdb175ac34",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "496f4447-af15-432b-a666-ac61fb1721dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672c4c5d-c932-46d9-8e87-187639ce76d3",
        "cursor": {
          "ref": "63b60a1e-5f71-47f7-8db6-7e7a5314eb1b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "94a7f7b3-f8ae-4dc3-b704-2e06a8be8233"
        },
        "item": {
          "id": "672c4c5d-c932-46d9-8e87-187639ce76d3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1f8db60b-c0a0-4c98-b382-707ddb1d0104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb05950-c0dd-4e84-8f31-df44db80e894",
        "cursor": {
          "ref": "839b9729-439d-4dbe-8cd9-51cf7d77e29a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "777f81fc-4024-43e2-81df-df52a7bedd11"
        },
        "item": {
          "id": "0eb05950-c0dd-4e84-8f31-df44db80e894",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d7ec7280-1707-4a14-a666-6e7c06fb4c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5150481f-bffe-4fa1-bcbc-763a543836e4",
        "cursor": {
          "ref": "09a7c624-906a-4ed5-b412-ba9964c5563c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1c5348fa-82a3-4eaa-88e1-3b581cd55f48"
        },
        "item": {
          "id": "5150481f-bffe-4fa1-bcbc-763a543836e4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "962214a9-9134-4e99-8bc8-861d024de040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a155f314-c25d-467a-90fa-b1496c0f2b3b",
        "cursor": {
          "ref": "b3c524e7-9dbb-4bce-88dd-384a3e0457ce",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bdd3a2b8-180c-48a1-b94f-b234d1d5b703"
        },
        "item": {
          "id": "a155f314-c25d-467a-90fa-b1496c0f2b3b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "75a20e56-dbcd-4f50-b543-add9b866617c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e09dbfd-21ab-4b47-ab35-00121f85da63",
        "cursor": {
          "ref": "4fdb9ac2-15bc-40a0-ad28-2e8b9701ecd4",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d409c0c8-7982-409b-98bb-0f961c010a2b"
        },
        "item": {
          "id": "5e09dbfd-21ab-4b47-ab35-00121f85da63",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4a3ad0ee-7037-4175-8dbb-2b7922a1bc88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80abc022-c8c6-4bc7-9620-d8630e27e245",
        "cursor": {
          "ref": "b46beba9-15e6-4f4a-839b-e8451dd85fbe",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "36d62ec1-0d57-47c5-92b9-a9d511d4c1b8"
        },
        "item": {
          "id": "80abc022-c8c6-4bc7-9620-d8630e27e245",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bac584a3-32e6-4093-a672-6ca2b8292987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc78e68d-f3fc-42ee-a7a5-39a21e490115",
        "cursor": {
          "ref": "132da094-23a5-48b8-8d08-d6eed02d809d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7ff74756-c077-476f-8e8f-7c1f542b4264"
        },
        "item": {
          "id": "fc78e68d-f3fc-42ee-a7a5-39a21e490115",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bf313931-725d-4a9a-84a8-0252b85052b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de081023-2555-4fcc-9215-cebf5e67325c",
        "cursor": {
          "ref": "79b8400e-6706-4f6d-8591-0e8312b2975a",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "161c3762-cac7-4566-b518-bfa6398f5f20"
        },
        "item": {
          "id": "de081023-2555-4fcc-9215-cebf5e67325c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "93d32436-b9c3-484f-8f35-1f2d9898874e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0de48f-f662-4535-9e1e-377c8f4a08e3",
        "cursor": {
          "ref": "8f4c10f2-d7dc-42ce-a479-0b57a34acd2d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f73a815d-fd80-4b5c-8aa2-2b13632b210e"
        },
        "item": {
          "id": "9a0de48f-f662-4535-9e1e-377c8f4a08e3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a47900de-2181-4283-90cf-e57e3efd7cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887b8aae-1b64-40ec-aef0-49da329744a1",
        "cursor": {
          "ref": "0649f932-4f69-43bc-b784-893d8a1e80b8",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b46fae05-d115-45ac-a913-8069edc5b669"
        },
        "item": {
          "id": "887b8aae-1b64-40ec-aef0-49da329744a1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1cf79082-8d7a-4621-8d72-4b7f9d3eb70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14086de-b916-440b-b5c6-dbd6a7c4e676",
        "cursor": {
          "ref": "eff537ed-a31a-4755-94a4-7fd775ad4735",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5e9a4f1a-c81e-45c9-a5c9-a6015d1728d7"
        },
        "item": {
          "id": "c14086de-b916-440b-b5c6-dbd6a7c4e676",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "217e6d22-6410-4df9-9576-dba56a381603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b2beee-c341-4da8-8f2e-a452989f328c",
        "cursor": {
          "ref": "0a55fbdb-e7bb-4953-a245-7c33029e35fb",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "30a3925a-581b-4fa7-b9f4-972ca013ca40"
        },
        "item": {
          "id": "63b2beee-c341-4da8-8f2e-a452989f328c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e33db0f4-053b-4245-89b0-d846b9bfcb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4256586-1a87-4193-b867-fd5e32dbfb7f",
        "cursor": {
          "ref": "13436e6f-3ed3-4744-9a4e-838961c8d459",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "95cd9bb5-9470-4ad1-9a31-bcfd623b504f"
        },
        "item": {
          "id": "e4256586-1a87-4193-b867-fd5e32dbfb7f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "201aff39-3559-4a97-8c00-d38b9619730e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2f3645-2150-43f9-a5fe-8327d3f08ec9",
        "cursor": {
          "ref": "9438183e-b46d-4108-9747-ab4809302780",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f22f4ce9-9377-452a-bbc8-42f9d986e114"
        },
        "item": {
          "id": "1c2f3645-2150-43f9-a5fe-8327d3f08ec9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "260355b1-a506-4300-bedd-0045c8b89008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e4cd94-7442-452c-8084-0ad4182dddce",
        "cursor": {
          "ref": "af17b9c6-10a4-48b0-aa7a-b996b23c0046",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f00012bf-f9d4-47b1-a9fc-cfe4dc14d4be"
        },
        "item": {
          "id": "16e4cd94-7442-452c-8084-0ad4182dddce",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fcd24867-6ed1-4686-a5e2-bc58fcd8d15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020d4290-eda9-491a-898c-3cfc9d1b195f",
        "cursor": {
          "ref": "07172b20-f438-4dc1-b0ec-6ec3e865667b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f0455e9d-629a-49d1-be67-8ea8f56c6ccb"
        },
        "item": {
          "id": "020d4290-eda9-491a-898c-3cfc9d1b195f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f63b06df-8e88-46e1-a23f-19da82d1ba82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59af280e-881a-4d8b-bb89-44f2cd048941",
        "cursor": {
          "ref": "f5d70380-dd1e-4eca-9308-dd9cfc255a0e",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b2f0b6d1-1fc3-4d7c-ad6c-4fea9861ad36"
        },
        "item": {
          "id": "59af280e-881a-4d8b-bb89-44f2cd048941",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "407d9361-b72c-490a-afc9-191a2af63fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fce4fa-ae4c-4d11-a9ba-886b6942de3b",
        "cursor": {
          "ref": "33e30c49-6154-4200-8321-e76c72a5c8c8",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c0f56274-8e71-4ae9-8f29-86c4483a8523"
        },
        "item": {
          "id": "43fce4fa-ae4c-4d11-a9ba-886b6942de3b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f14866be-26e1-4ec5-a93e-6450990b1d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2411d85-4b54-488b-9aa9-4a935baef347",
        "cursor": {
          "ref": "b90fe563-dbb3-489d-93eb-3f38174abb07",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "532b0db5-4b6b-405a-9e07-618069d9c386"
        },
        "item": {
          "id": "e2411d85-4b54-488b-9aa9-4a935baef347",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bbfae4e8-85a2-44ba-a659-f79369d21ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8302d73f-0729-494d-bafd-11068b2a139f",
        "cursor": {
          "ref": "b475f1a9-eb5c-4cd8-85e3-0422a70584de",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7ad066d5-7829-4e51-a6b3-b60aefabfe09"
        },
        "item": {
          "id": "8302d73f-0729-494d-bafd-11068b2a139f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7efce059-3989-4631-a1a2-6a502ff1ddc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c502c60-de35-43be-b003-c5fcdc6225e6",
        "cursor": {
          "ref": "32ac8a4c-0fb1-4ed3-a5dd-3ede85db4877",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d601e9c4-979f-48ab-bf14-15064eb9d33d"
        },
        "item": {
          "id": "3c502c60-de35-43be-b003-c5fcdc6225e6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "128ad33f-9c9f-46b9-8ea4-a6e42946f965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc95e4f-e21b-41e1-87cb-b992f521cfa5",
        "cursor": {
          "ref": "60b670e0-6073-482a-b916-569316549903",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f805d733-38e2-40d7-b3d8-8dc7a2e0a305"
        },
        "item": {
          "id": "7fc95e4f-e21b-41e1-87cb-b992f521cfa5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "69c52436-5905-40fa-9a65-8fa391557d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5682d4-3a59-4531-80b1-9705e2ef5fba",
        "cursor": {
          "ref": "050ffb2f-2119-4916-afc9-f90d211f5fab",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ae25480f-1fcb-4aab-9b89-38635a3d6e5c"
        },
        "item": {
          "id": "fc5682d4-3a59-4531-80b1-9705e2ef5fba",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "59b9a9a5-4de7-466d-8e55-617d1cfd3830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8eb3a36-8e3e-47a0-90dc-a03492e1343d",
        "cursor": {
          "ref": "eaab37e3-8d65-4997-8b6b-a8e55766b9ec",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6217b371-0b3d-4f2a-9e7d-8a02f30775ae"
        },
        "item": {
          "id": "c8eb3a36-8e3e-47a0-90dc-a03492e1343d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0a531986-07e3-465a-bb52-9a4bdd950264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824c7c71-b3db-4abb-b19d-64eb4569c11b",
        "cursor": {
          "ref": "833156ce-de46-4efe-a3f1-ca665fa825dc",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8d09d3f5-9fb5-45c7-b04b-9a481a1f5aac"
        },
        "item": {
          "id": "824c7c71-b3db-4abb-b19d-64eb4569c11b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "251259ee-f5d3-4152-bfbc-fe49cbee1a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e801275-3e43-4e73-b8d8-1ba60c133841",
        "cursor": {
          "ref": "0093ccad-c267-4e33-8641-7b0d88938e20",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a3599d45-b63e-4c1e-86d9-a3cc167cc541"
        },
        "item": {
          "id": "3e801275-3e43-4e73-b8d8-1ba60c133841",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "186ab69c-2d71-4dc4-ba6c-28516ce3917e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37c95df-febf-4301-9396-5899903696de",
        "cursor": {
          "ref": "7066b75a-2786-437f-b417-30f156534585",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4b5f20c7-f4cd-4caf-9614-92e9dc641b71"
        },
        "item": {
          "id": "d37c95df-febf-4301-9396-5899903696de",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ebe3706d-96a2-49d2-b061-574e5e66caf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b902478-b433-427c-b7dd-c1d7f5fbae5d",
        "cursor": {
          "ref": "45e0af25-0948-45f7-87ef-a22c29977d04",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7698ba1c-5de7-4bcc-8091-00031df666bf"
        },
        "item": {
          "id": "1b902478-b433-427c-b7dd-c1d7f5fbae5d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b8f4478c-8ace-488d-89c5-3d7a46e5a736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a5fd5e-6bac-4cb1-a9ae-453c9d8898e4",
        "cursor": {
          "ref": "43f82136-7d28-4401-9b30-0e7c17c28a70",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "843a3daa-96d7-4ef6-9474-b46b1a67f5a0"
        },
        "item": {
          "id": "21a5fd5e-6bac-4cb1-a9ae-453c9d8898e4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fed8c456-0617-430b-8508-47ad67645174",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cb258efb-f41a-4ac1-bf14-8b7626ad17fc",
        "cursor": {
          "ref": "94a6f0f5-4fc9-4f97-9496-4639627b2445",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "964f502c-5a16-4a4d-9170-d4ef9665d6d3"
        },
        "item": {
          "id": "cb258efb-f41a-4ac1-bf14-8b7626ad17fc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9a5ca494-dfff-42b0-8a4d-fab536f912ee",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "fd049921-9716-4fd0-bd45-b6fa12db1dc0",
        "cursor": {
          "ref": "ac8f9bba-fa06-43cb-b489-035379c6cee7",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fb6bb0af-a0a6-419c-a9e4-f6f6fc647246"
        },
        "item": {
          "id": "fd049921-9716-4fd0-bd45-b6fa12db1dc0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0bf4bacc-590e-4b35-a519-6019cec451bf",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "5907a0d7-1e71-4d9c-bd6d-ec6cfe6b20d4",
        "cursor": {
          "ref": "196f98d4-634a-4ce9-8062-b9d557adade9",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "aa7bc362-8b34-4468-be73-b7dcb7e4d15f"
        },
        "item": {
          "id": "5907a0d7-1e71-4d9c-bd6d-ec6cfe6b20d4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1441f8f7-56cf-4d5b-8b55-b2c606852169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2c1cad-34e3-4ffa-b534-b15cd2f6ceed",
        "cursor": {
          "ref": "c4153f76-20f1-461a-a762-c1621f6b9167",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f41a17d0-40ca-4863-8c9e-c3b05ea4bca5"
        },
        "item": {
          "id": "4b2c1cad-34e3-4ffa-b534-b15cd2f6ceed",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8e0279cc-bf4c-4ba1-8b0d-4ae2be3a83b0",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "269d4a13-83a7-4614-9d65-7dcbc32bf108",
        "cursor": {
          "ref": "8d9b7da3-b3b8-4285-956a-c818f56dab93",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3c14b987-81c0-4e86-9484-19a099b5d379"
        },
        "item": {
          "id": "269d4a13-83a7-4614-9d65-7dcbc32bf108",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1cf59f10-b3f2-47c4-a7a0-bddcda169a6d",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a53cd594-ed24-4bac-8ae8-88845ee1f8a9",
        "cursor": {
          "ref": "9bde0793-e7f5-434f-a5d2-3a95c61448b6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "52db0cfa-1aa9-4b6f-b653-154763b39a79"
        },
        "item": {
          "id": "a53cd594-ed24-4bac-8ae8-88845ee1f8a9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5c3d6f31-f05b-43b2-b07d-f0a486e0919f",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "28755921-7488-4d4e-830f-9e08ab648635",
        "cursor": {
          "ref": "d86d524d-8323-4a32-8766-3d7179c93eaa",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0c80f8ae-ea39-4d23-826e-afdc780a30bf"
        },
        "item": {
          "id": "28755921-7488-4d4e-830f-9e08ab648635",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2f92df0c-edbf-49ba-b1d2-7cea2d800dbb",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f7e50cb0-6c9f-4c8d-a570-8431e1094914",
        "cursor": {
          "ref": "07dd972e-e634-487b-93ff-681edb5530f5",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "414a2231-5686-46a7-9f1f-781ca3c55f34"
        },
        "item": {
          "id": "f7e50cb0-6c9f-4c8d-a570-8431e1094914",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1f8d771f-c42a-4cf5-b914-063f138a1c49",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "42ff005f-feb2-4f63-81fd-0962a45b7850",
        "cursor": {
          "ref": "1f5ae4b5-0c2d-417d-be97-74f941b74944",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "473de74d-fc17-4969-b46e-a1fb9da956fd"
        },
        "item": {
          "id": "42ff005f-feb2-4f63-81fd-0962a45b7850",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b433755f-8b5f-4345-89d7-4461c572f670",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "17303a81-d21b-4974-8cc4-aa91933181a9",
        "cursor": {
          "ref": "4b71b015-8e8e-43e2-85c4-f3cee0917472",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2c74ce94-c0a7-40e5-940f-290f5ec23fad"
        },
        "item": {
          "id": "17303a81-d21b-4974-8cc4-aa91933181a9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dd906d21-2bb4-416a-9ddf-c73b187c07f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cc3f7c-87b2-400c-b119-f2384f0b8851",
        "cursor": {
          "ref": "44cc5474-e74f-469b-b29e-ae87da9af2a3",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d5799841-144e-439c-a417-6c6d1cab05eb"
        },
        "item": {
          "id": "75cc3f7c-87b2-400c-b119-f2384f0b8851",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "aa6231a2-9329-40d1-a0a5-5aa8462515a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca124306-f5e7-4380-9892-35d9cab72fbd",
        "cursor": {
          "ref": "6ffa4e76-7423-4ebe-bb27-99409f55cd20",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a1536075-b46b-48ba-9685-665c53038bc5"
        },
        "item": {
          "id": "ca124306-f5e7-4380-9892-35d9cab72fbd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5d7fdeb8-9033-40ce-9d1c-4db56bb4ab7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6155a46f-5403-4c97-afff-109ab991e41a",
        "cursor": {
          "ref": "54aca2f6-f4b4-457d-b542-8f29e05798ff",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "620ab09d-ee23-4f23-8a8e-dc2b47306cfc"
        },
        "item": {
          "id": "6155a46f-5403-4c97-afff-109ab991e41a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8ea95d6c-a298-4ffc-90c7-d8bad361d444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2fe7a0-c9e2-48a8-9dfa-aaed51ade5e8",
        "cursor": {
          "ref": "fb9f95a3-d5f4-41c8-bb73-49bda4ae9f01",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "92006eae-bc79-405e-a47e-2ca227a68d6b"
        },
        "item": {
          "id": "ed2fe7a0-c9e2-48a8-9dfa-aaed51ade5e8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f2cf9d12-ad2e-43be-bdb9-cf87a84ad26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f0eb0d-e681-469e-8214-e436d0b6b367",
        "cursor": {
          "ref": "26c1adb3-a3a4-4c49-bd7d-abf183275413",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9db66a30-4527-474f-b6e6-a705c62acf0e"
        },
        "item": {
          "id": "d8f0eb0d-e681-469e-8214-e436d0b6b367",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ec1a16b4-8808-49f7-a383-204b526888fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b16193-e737-4824-825d-f9ebdee98ced",
        "cursor": {
          "ref": "14000380-26de-4e3c-b68b-322174a7d2f5",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6fdad128-9374-40a7-830e-65ee2ea1af69"
        },
        "item": {
          "id": "b8b16193-e737-4824-825d-f9ebdee98ced",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3b292afc-a6fa-4727-b44d-761848d2dc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44bcfe2-a9ec-44ae-b8f8-c48160f4dcd0",
        "cursor": {
          "ref": "aa0f5d22-e833-4d35-8abc-43627d632d51",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ffbbe8ad-b4e4-4574-8b35-b5027fbc398d"
        },
        "item": {
          "id": "e44bcfe2-a9ec-44ae-b8f8-c48160f4dcd0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "741ccff7-4b76-40c5-b9c5-7c4955e599f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4870f9-b0c5-45ce-94be-2cd79e3aca69",
        "cursor": {
          "ref": "3f247fa7-3f15-4e75-aa92-c3e372116124",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "760d28cc-d400-438d-ab72-4b2d29e1c883"
        },
        "item": {
          "id": "2a4870f9-b0c5-45ce-94be-2cd79e3aca69",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7ef4c37d-7e60-4ab0-80eb-9ab87be2a504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6231f709-a352-4bd1-8011-b07cf6d9e4e3",
        "cursor": {
          "ref": "8983b8c0-b070-4060-adbd-0d8c986a0511",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "87d9381e-0ad5-4f92-9f8e-a2a5d897708e"
        },
        "item": {
          "id": "6231f709-a352-4bd1-8011-b07cf6d9e4e3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "372458ef-c27a-4ea6-868d-de8d3e6f5da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c98cf35-5ea9-4940-8afd-579eda62500f",
        "cursor": {
          "ref": "fc107df3-5bda-4987-9e78-3964d0bf900c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4b7be6ae-85fe-4783-afe6-3e88d06f4120"
        },
        "item": {
          "id": "4c98cf35-5ea9-4940-8afd-579eda62500f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e092a059-1608-4662-a52c-be86d2e59fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203c1ad8-5f61-41c9-be21-08b41e9ff8e2",
        "cursor": {
          "ref": "183eead0-2c26-45e3-8eb2-cccbda751de6",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d38c3d11-49b9-4bcb-b30d-e3c53edd2c75"
        },
        "item": {
          "id": "203c1ad8-5f61-41c9-be21-08b41e9ff8e2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3cc28151-2622-4c9c-bdb5-56fcca73e02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea71b98f-7375-4013-bd2d-427083a7c6dd",
        "cursor": {
          "ref": "ee440098-8248-402a-9b0c-fa26304d6aeb",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "81a70344-f31f-4d21-ad92-a832b33791ac"
        },
        "item": {
          "id": "ea71b98f-7375-4013-bd2d-427083a7c6dd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e0aff359-376c-4f05-aa60-0b0fdd75c2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcd07df-10eb-4b6f-853a-7930cfb36034",
        "cursor": {
          "ref": "bee21ce9-a2d4-4772-b319-65375889725c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f147f45b-b80b-4dda-ae23-909226dc83e8"
        },
        "item": {
          "id": "9bcd07df-10eb-4b6f-853a-7930cfb36034",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fe2e0437-f958-491d-90b8-e46a8b7a2c22",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fbe95218-b9fa-42ce-a24a-330c5c7f8ed6",
        "cursor": {
          "ref": "2fde679c-a84b-4285-8753-37ce2ca40c2b",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dd56db0a-132f-4596-bd0c-2b2d9fa49ba3"
        },
        "item": {
          "id": "fbe95218-b9fa-42ce-a24a-330c5c7f8ed6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8e5e2be9-5443-411e-9675-07a3363cfe5e",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9089b0e9-345d-473b-a39a-f6d560af2304",
        "cursor": {
          "ref": "9deb27ed-8c94-44ca-9f53-47802947f909",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0fe193ad-d055-4d6f-afcb-b45a682a210d"
        },
        "item": {
          "id": "9089b0e9-345d-473b-a39a-f6d560af2304",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0693ecc6-ab82-4d29-a1bb-c691d3e3ed82",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "88231cf8-4d1e-40b2-aa9f-11a916b80ebf",
        "cursor": {
          "ref": "0a588d4e-e2fa-44d7-a0bc-2e6df695ea11",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "efd5c865-4889-415e-b84a-d48e149c9725"
        },
        "item": {
          "id": "88231cf8-4d1e-40b2-aa9f-11a916b80ebf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a6e55dc7-edc5-4a13-a5df-e71a0272862a",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9f70545b-33e5-47ac-99e1-f950f958ae7c",
        "cursor": {
          "ref": "644914ed-c883-41d9-9832-c8d4c014fcbd",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8cf723c7-8762-4cfc-9bfc-1c8229313da5"
        },
        "item": {
          "id": "9f70545b-33e5-47ac-99e1-f950f958ae7c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "afc520da-c6ec-499b-9b69-00480532145c",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8e80c6d1-f600-423b-aa1c-61b9bf24f253",
        "cursor": {
          "ref": "79871e90-32e5-4396-ab33-6998ce28e262",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0cf9f032-5394-4dc8-8b9d-28630071f5bc"
        },
        "item": {
          "id": "8e80c6d1-f600-423b-aa1c-61b9bf24f253",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "76e77c9d-e915-41ac-a124-8b3601f8cafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8430b559-2a07-444d-8b9f-007f8755f3e3",
        "cursor": {
          "ref": "c57f9a34-cd2b-48e1-b3d6-2a329a6b8c6b",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1c84e61c-b456-4691-a123-058020d61d7c"
        },
        "item": {
          "id": "8430b559-2a07-444d-8b9f-007f8755f3e3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3a2afd08-b897-45e5-9fbd-e79812c625fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9318656-3902-4a8d-8e00-37b627b1f26b",
        "cursor": {
          "ref": "6d8d8b09-af6f-46bd-8d0d-efdfb2a66ad0",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "87566ac3-f903-4a7d-93c5-5b347ce3d9fb"
        },
        "item": {
          "id": "e9318656-3902-4a8d-8e00-37b627b1f26b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "89e514c6-2b84-42f6-baa3-75ebd6efa6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d00d044-8f7d-4030-91f6-ff5c8ea9d64a",
        "cursor": {
          "ref": "6a0ff783-f3fa-4745-a3b1-b4d7688ea7ca",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7109098b-363a-4734-b3dc-57181ee699e1"
        },
        "item": {
          "id": "2d00d044-8f7d-4030-91f6-ff5c8ea9d64a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a8cb4a18-0eb6-4acc-982c-c2ac0f14cd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0049f51-064b-492e-a5a2-849ddbdf0eb6",
        "cursor": {
          "ref": "899e7e0d-3b04-40b8-aa71-a65b8f9e8347",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ee1e3d87-d8ff-4a07-bc4e-89e5d6ff490d"
        },
        "item": {
          "id": "c0049f51-064b-492e-a5a2-849ddbdf0eb6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b25d1668-79c4-4343-bc1a-b00fe21d4e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770c7988-08cd-41c7-ad68-48005c6d0a46",
        "cursor": {
          "ref": "84ccd532-761c-41c1-aa62-4685194f8c5b",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ff895b41-10ac-40d2-80b0-bb20886c61a2"
        },
        "item": {
          "id": "770c7988-08cd-41c7-ad68-48005c6d0a46",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a046fdb5-9d57-4283-8545-9971e2e15b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0099d7a2-9fca-47a2-908a-7422b198a009",
        "cursor": {
          "ref": "4b0d31fb-e477-4fd7-89b5-ef101dede5b2",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d8918afa-6448-41ae-b655-29069c3c3172"
        },
        "item": {
          "id": "0099d7a2-9fca-47a2-908a-7422b198a009",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "293ca2fd-ed9c-4172-ac0a-6c739d2e9a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ace1d55-5c3e-45b6-882b-8271449bd1d7",
        "cursor": {
          "ref": "9c1fd23d-ca0a-4021-afcd-f1a07fced100",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ec7b902a-fc19-4a60-9329-0d28cc37c121"
        },
        "item": {
          "id": "1ace1d55-5c3e-45b6-882b-8271449bd1d7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ab4dd90d-4841-4291-a1a9-5f55b8b70f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa52a974-385c-4c75-8f5b-37cd5a5a52f2",
        "cursor": {
          "ref": "0d67e518-1c11-4731-b6e4-0b11b156a3ab",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ac64214f-e13d-48f5-92fd-f4e73f731b6f"
        },
        "item": {
          "id": "fa52a974-385c-4c75-8f5b-37cd5a5a52f2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "aa131268-48a2-4bc1-bb95-915f62c4e353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df16082-bc3b-402a-bf73-d6be50487721",
        "cursor": {
          "ref": "5f65af69-a846-4055-9600-f8836f56263b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "cc0e8216-9ddb-497e-b441-0a032fa11ab1"
        },
        "item": {
          "id": "5df16082-bc3b-402a-bf73-d6be50487721",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "95dbd5cc-6da8-43cc-9313-481feb7c3334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf95022d-f917-4956-8500-3938bab0a1f2",
        "cursor": {
          "ref": "4c1d0f6a-a25a-48d4-8c4e-2f751845c76d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9b3702c3-6ce4-496f-a11b-673d75d7a35d"
        },
        "item": {
          "id": "bf95022d-f917-4956-8500-3938bab0a1f2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "64e78de7-f81a-4458-bd1b-9ee44421a09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda90cf3-5d82-4dd2-9fad-30ea1fb01175",
        "cursor": {
          "ref": "4b821a7e-1e29-4909-8a36-6382a5553272",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ec15f838-69e6-4f60-af84-2f0eb7ae9f88"
        },
        "item": {
          "id": "cda90cf3-5d82-4dd2-9fad-30ea1fb01175",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2d0a439e-2f66-4bff-8f84-d51581a8dd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef20ce9e-ec0f-45ad-8dba-4da01edd5dae",
        "cursor": {
          "ref": "212685c2-0e93-4fb3-a4a6-3847e3227e43",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "afa8d299-8cc9-4d20-a64d-439231274bc4"
        },
        "item": {
          "id": "ef20ce9e-ec0f-45ad-8dba-4da01edd5dae",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5bf045ac-fb26-40cd-998c-05859893f064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1efdca1-f371-4a56-9390-5482597f7d3c",
        "cursor": {
          "ref": "6ac28401-d4de-400f-99ba-518fb7bd80a6",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "1d158ed5-1c13-49c4-90c8-83beb98d3d7a"
        },
        "item": {
          "id": "c1efdca1-f371-4a56-9390-5482597f7d3c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4b11bcd7-f6c9-49fe-a532-0375dcf32fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7b4736-2ca2-4db6-8b7b-ec38bf227dad",
        "cursor": {
          "ref": "98e1e94d-7e8b-4972-a852-dfedfbda2f7f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ce8e5385-7bc3-4141-9420-13077524c4bd"
        },
        "item": {
          "id": "aa7b4736-2ca2-4db6-8b7b-ec38bf227dad",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "43e56384-01fe-4454-94c0-eb68fd9e6613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643bfe86-d4ce-4124-9e63-af988dfebc26",
        "cursor": {
          "ref": "2601f78e-16a6-430b-80ad-49e6764736e5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "154dd386-ffa8-40d7-9973-579121e66f9e"
        },
        "item": {
          "id": "643bfe86-d4ce-4124-9e63-af988dfebc26",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3c95a2a1-4cbb-45f4-8937-506318b7a31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ab69f5-f309-4eea-b7b5-18314f5c26f2",
        "cursor": {
          "ref": "36181c77-fee2-46b2-b505-492e36d415c3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b51f817b-438b-4ca1-bafa-35b62679e115"
        },
        "item": {
          "id": "43ab69f5-f309-4eea-b7b5-18314f5c26f2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "09866198-1d81-495b-b244-48bcb971eebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f663c66-7a86-4ecb-9a8c-74243ead5e27",
        "cursor": {
          "ref": "e359e5ed-28c0-4b00-86f3-a278a8dbcbf9",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "4c638023-2b0e-4728-9fa5-67a97c38ed30"
        },
        "item": {
          "id": "6f663c66-7a86-4ecb-9a8c-74243ead5e27",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5cdfcbec-4f32-4894-8a34-47ace1935859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b48417-730d-43d7-a788-69ba508864cd",
        "cursor": {
          "ref": "73cfa1ed-0b4a-452a-8ed4-44d0de4d2e1f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b5ae85dc-5bcb-4f57-bad0-40867bc9977e"
        },
        "item": {
          "id": "93b48417-730d-43d7-a788-69ba508864cd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "206332ba-5e23-4378-82d4-bc1d254ee03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7720996-87ba-48ba-ab08-03a09bbf15e9",
        "cursor": {
          "ref": "df45b560-b5ba-4abf-8fbf-d9dbbce2fe26",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "92848c25-fa6e-43bc-9079-839592ee3cbf"
        },
        "item": {
          "id": "d7720996-87ba-48ba-ab08-03a09bbf15e9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e3390fe9-da18-4310-a61f-16b8f2a4b5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d42832d-93d2-4435-a778-2b6e5d9193a9",
        "cursor": {
          "ref": "8c69b62a-bf3e-48dc-86c8-b4130bf1a35f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "f67d9aef-b1e1-4a45-a7b1-3e6a71f5a035"
        },
        "item": {
          "id": "4d42832d-93d2-4435-a778-2b6e5d9193a9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6f07ed01-5086-4ce9-a0e5-2e90b47ceb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d549e3-cbd8-4fc6-8f74-8aeec6ec753a",
        "cursor": {
          "ref": "59e7f7fb-58a5-4b19-b635-0664a214cadc",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "41b68cdc-ef06-4cda-9439-281921ff410d"
        },
        "item": {
          "id": "08d549e3-cbd8-4fc6-8f74-8aeec6ec753a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b697c491-b7e0-4768-ac09-a3b05004b7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc062f78-2614-48d7-bec6-ca8a5317ecf5",
        "cursor": {
          "ref": "c6cdd95a-6526-48b2-9c33-24c80f41744e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ccbe5a9b-01ce-44a6-8e8f-f96f2ef8a2f6"
        },
        "item": {
          "id": "fc062f78-2614-48d7-bec6-ca8a5317ecf5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "db85b08a-d311-4dd9-9953-4ea334439f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d9e741-0d9a-42d1-86d4-e21ba8fd9277",
        "cursor": {
          "ref": "fa168865-addb-46e2-9d3f-2c0fe0021ec3",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "8a7e0826-66c1-46f2-a7c3-1f99ff0ca885"
        },
        "item": {
          "id": "55d9e741-0d9a-42d1-86d4-e21ba8fd9277",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7737a728-1984-450b-877e-ee456b57a213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5399ce3-8569-4c18-87e4-b4bfd32266da",
        "cursor": {
          "ref": "621ef059-3b88-444e-8895-576595d2d9a4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f2c71c21-fc5c-4a7a-a5af-28e21426d402"
        },
        "item": {
          "id": "f5399ce3-8569-4c18-87e4-b4bfd32266da",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "29e11c34-8409-4671-aedc-b474ae3d7898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9398a2-5c6d-40eb-8685-0619e062e69d",
        "cursor": {
          "ref": "8c9ef25b-f122-4850-8d9d-9173482fb32a",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "fdd499fd-5cbb-4de2-9404-1a9b2805acfc"
        },
        "item": {
          "id": "8f9398a2-5c6d-40eb-8685-0619e062e69d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a7d7dba5-6b3a-4c7b-94a2-4a586792ed89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af947f55-5bd0-4215-b6ea-fc6310141647",
        "cursor": {
          "ref": "bbdebd6f-148d-4ada-8a38-903f65fb4356",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f2adf4cd-4785-4d08-9d73-a8dba004a592"
        },
        "item": {
          "id": "af947f55-5bd0-4215-b6ea-fc6310141647",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e737ed14-2a84-4e20-ac99-a8bb454babd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3621da-26b9-40da-b6a2-42c8c6c5b0c4",
        "cursor": {
          "ref": "4b7f0305-e58f-45e6-ac6e-f4fb068a7fab",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "050f42ac-c6cb-47e0-b5dd-b49fd7215728"
        },
        "item": {
          "id": "cb3621da-26b9-40da-b6a2-42c8c6c5b0c4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2c82e7c3-17f2-4e09-83e3-d6341556bb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5331437-8b03-46a3-afad-25ed887cc59b",
        "cursor": {
          "ref": "3dc68e6e-5c9c-4ba3-ad61-db2b7603799a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "983ccb79-c2c9-4c85-bfc9-765bf4faefa7"
        },
        "item": {
          "id": "a5331437-8b03-46a3-afad-25ed887cc59b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "031f0b99-2485-4cd2-b674-e5d65ecb9fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a03697-15ab-4d39-8ac5-90265176893e",
        "cursor": {
          "ref": "cd06acb2-4b02-4951-a296-f0ecce7f7c61",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c1873b8f-3629-4ac7-a582-4b419600dcd6"
        },
        "item": {
          "id": "d8a03697-15ab-4d39-8ac5-90265176893e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "41be9045-aba1-45f7-9f67-0b5fedac36b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9916f3-7049-4b83-ae75-36a609a79355",
        "cursor": {
          "ref": "3955deb6-c877-421d-bf8d-cf1ab3a015e0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a57db1c0-ce54-4ff1-825f-9daebdc265a7"
        },
        "item": {
          "id": "6a9916f3-7049-4b83-ae75-36a609a79355",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "038dd9ed-5a9a-4028-9dc2-a20568d52ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74367f04-7132-4f68-aeac-c5d1b7280d23",
        "cursor": {
          "ref": "ba221956-22be-4077-a3a2-ebcfd79be66f",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "6ca89687-ed8a-4f5c-94fb-ca6a4b6a3f2d"
        },
        "item": {
          "id": "74367f04-7132-4f68-aeac-c5d1b7280d23",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1b7d8143-9d54-44c9-b740-dca262a03004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9ca520-ac55-4a85-8230-dacdb5b2e378",
        "cursor": {
          "ref": "4b51d6f7-39a7-4575-9f8a-4dea9a6e31c9",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "846fcfab-cb8c-4e57-aef9-97a053230675"
        },
        "item": {
          "id": "1a9ca520-ac55-4a85-8230-dacdb5b2e378",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "762e0c1e-31a9-4818-97e1-db949622cfc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87789779-5da0-4a3c-b888-6c40f9cca376",
        "cursor": {
          "ref": "a3549e70-9c95-4ad9-a162-ed1346a44b40",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "bb3c62c8-90b6-49aa-bdd3-8baa3479e1bc"
        },
        "item": {
          "id": "87789779-5da0-4a3c-b888-6c40f9cca376",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "39a4d0b1-2f1f-4f7f-af3c-2ff731b6ad33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db40320d-3fc2-4ab9-b378-28607a8075f8",
        "cursor": {
          "ref": "cfa81ebf-4cc4-4776-8dee-f9816f2bdcf1",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "488b265b-ec54-43cf-bdd9-95d30e3caf70"
        },
        "item": {
          "id": "db40320d-3fc2-4ab9-b378-28607a8075f8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f33bc768-6c45-4214-9463-ef111c2ca303",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d31280c-9583-4367-b3e0-de6afbf7ee78",
        "cursor": {
          "ref": "b567ec8b-39ae-470e-8011-a3bcbecf498a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1b4787c8-fc11-4bf2-a19e-b047cb42e55e"
        },
        "item": {
          "id": "2d31280c-9583-4367-b3e0-de6afbf7ee78",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7f489780-b034-4946-82b6-015ddaeeb32c",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "637eabf8-b0f3-42ee-9d10-b51107223fb4",
        "cursor": {
          "ref": "c355c797-d583-4a28-a727-d9ca701fcf74",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7100d457-8003-4d4a-8b6d-fd887b45c590"
        },
        "item": {
          "id": "637eabf8-b0f3-42ee-9d10-b51107223fb4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6709c6df-97da-4026-bffe-1d88102f1cf5",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "029f4d4b-9f91-4254-92b2-0ad84906664f",
        "cursor": {
          "ref": "8d426840-7595-4641-a6ef-701cf5bf4991",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d9abdb6b-2cb5-4a8e-ac83-fdbf4899add5"
        },
        "item": {
          "id": "029f4d4b-9f91-4254-92b2-0ad84906664f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8aee2438-a892-4175-9972-e9597d17741f",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a356ad6-9113-475a-8924-f51d32ae1906",
        "cursor": {
          "ref": "d50a655b-8b42-4e50-a9b1-82ebe41193a0",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c62ecd73-a07a-4091-90ff-1b14bb5e7f9e"
        },
        "item": {
          "id": "7a356ad6-9113-475a-8924-f51d32ae1906",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "37db3331-5641-48cd-9bb8-41834a77b2b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a356ad6-9113-475a-8924-f51d32ae1906",
        "cursor": {
          "ref": "d50a655b-8b42-4e50-a9b1-82ebe41193a0",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c62ecd73-a07a-4091-90ff-1b14bb5e7f9e"
        },
        "item": {
          "id": "7a356ad6-9113-475a-8924-f51d32ae1906",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "37db3331-5641-48cd-9bb8-41834a77b2b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89efda7c-5269-4691-b3df-2c7de16685dd",
        "cursor": {
          "ref": "05edb7d5-2b08-4f3c-aabc-9bc142ac256a",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a4f5b18e-59f3-489e-b502-69e178502e00"
        },
        "item": {
          "id": "89efda7c-5269-4691-b3df-2c7de16685dd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "263a09f3-394a-4beb-b331-8626d1fe508f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bb2455-37a7-49da-8a3f-0c4c1f5140d8",
        "cursor": {
          "ref": "6ab87166-e049-4ebd-9638-77e989d81787",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "286a016e-8c50-4079-94c4-c28f6b5534bc"
        },
        "item": {
          "id": "77bb2455-37a7-49da-8a3f-0c4c1f5140d8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3d5ddf64-d148-4262-9062-95096cb1b349",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}