{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "27b00810-2ba3-4c20-869a-5f03eb13da5a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9ce69649-ffc1-49a8-b6c5-c8eaed4d1775",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "33bf0077-46d1-48a7-9432-cc6c67774b70",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4e2e18f4-4818-4e96-97a5-afca30b694a5"
                }
              }
            ]
          },
          {
            "id": "cab13471-49ae-4843-baf1-84375a41c24d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "907b25d4-d2a3-4e3a-9c4a-4da724938468",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9e3fadcf-6ebf-4068-ba06-4d7d3dc44f3f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6309cd92-6b71-468d-add8-6918c1283b93",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5d731022-1b54-4897-9a23-132e18ce3fe7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f4714b4-f1fc-4f62-bc9c-4c39088cd4f1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d65e1ab-906f-4816-b837-51dd8517213a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3b22986-ab35-4c1f-b6ba-e56822d6525d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fb835e6-e0d9-4c34-8f54-aac34d405753",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e7c0426-ece0-4b9a-91a1-2e62cb1573c8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "81beac3b-26bf-4a5d-840e-440dffd13df3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a884212b-496e-44af-9d67-ace17c520978"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86d28999-1c08-4754-824b-a0f505cfea3d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a4239752-5596-47e8-a808-09eedb64b0c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd7f8566-9b51-458b-846f-9ac2f13c5725",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9f7f902-5851-447f-9124-d80539d07986"
            }
          }
        ]
      },
      {
        "id": "9f276bf0-2b80-4cf1-9056-7b102808265f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7e2f2635-3351-463d-acc3-6195e7e97df7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "160ea428-7770-4ae1-8f97-2ab4e083e3b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "09c2e2d4-ff09-41c9-8c6d-06d18c21cda1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a5ab13-1b88-4c69-841f-57e5f2a32be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4984f6b-d8b5-451f-ade0-73d06aa6a297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184e4794-56a3-4ab2-8e86-69a7432b7268",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b100e74e-b567-4965-bcb4-ab9be4f73ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02ee5700-295c-4ae8-8679-547e7b24f629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63d388d-b218-43a5-8ba0-f5c9da3678ef",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b55e406-6391-4061-bc4b-680317eaf1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "128d848c-0450-4b7f-8377-6f1a15a45697"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebe3ed98-c253-4116-b23d-e9abf0fd7f37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8841193a-ebca-4845-b484-c0c1a9fd508d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f501ec-38b7-4c3f-bdba-a8c33650a031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "609c83e9-b996-455a-a8c1-6ef512ddf649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259ac73a-7cec-4cd9-9cfd-8c3ab7f46f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6709fb-5104-4311-a31d-18c96fd30426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ef7b78-07ab-4fee-8cff-f7d9896d6044",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec458f1-2674-46f3-9168-91df64ae25d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6a9d31f-f716-4130-a218-ff32e59629f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b55737-d840-4d1c-8754-1643f0575852",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "bbb5aa2e-0ae9-421b-98f0-ade4c2794360"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "de6ef8ac-efbd-40ed-8a0d-78c459723732",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a8a918af-82d4-4c50-9732-1ca3bd99d5f1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "348ef09a-dfd1-40ea-8782-21e7afbac784",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b20274f7-e9d0-44c0-9512-6957a547fd02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d98e3cbf-301b-4bf3-8064-373109e84c58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4488170d-4d81-43db-929b-e07497595098"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2451a457-2652-4d8f-8008-c84002c4ebdc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da2a2e79-5320-494a-80be-cb372f91a476"
            }
          }
        ]
      },
      {
        "id": "dc91bc6b-6910-4782-bd69-ae8aaaeb2cf4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7f0c9e90-9c0b-498c-8686-214ac865d253",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5a44d6d-03e7-4537-9ee6-cd3ee830c28b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2cd5835c-560f-4d23-aaa3-baf6a78aa0e1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7107e1-afca-41e0-889e-7283da1eb92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5515c5b7-dcb8-489e-a4df-fd1464b3d2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136ee531-17e9-4cfc-8c29-617d5d88fb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcf2dd4c-a245-46a2-b826-b5066f9cc5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af5f23c-5081-44cd-84bb-ee26e28d41f3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ff1f8c-645d-493f-9c2d-087ddebea250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1eeb11-f44e-40ca-bece-31b35e53c900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b1f63d-60c6-4036-96ef-8aff2598fc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20ce47ea-f91d-4411-ae5a-30fc439f47c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c757103-44db-4c67-864f-3ddb52f050a6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4a224d-2bc5-4529-812b-1725317bd89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb99c920-a6a0-4805-9616-bec400f3f800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510096cc-5a53-4a3f-a3bd-fc02255d8096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e871e8a-fbe7-4b92-8e48-a31a11160e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2dbd19-05be-4e41-bd12-7909d1b32aec",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9167392-9d34-4946-8cb5-b2f978a74b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f5f70b-88ae-4c1c-8e7e-2cd706b4067d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999f3e8b-8ac7-4090-882c-32b373a98f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afd6f935-11e0-4ccf-a5a8-1e90f7c732ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353ecd76-dd2a-46b9-aaee-8ca113290c2d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6544f845-26b0-4a5c-b82a-9d8d9663de19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9424210-ea1e-412f-82a5-2904ab977181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7212a4f-09c3-4c16-b533-d7b4a1c0b46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6ea40bb-82b4-4d87-b081-144f102a8d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e77b92-e5f2-47ae-8f3c-f6f1744e9db4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b325034d-d121-4703-a1b6-49e31d66780a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b518925-6ba1-41f9-9f3a-971902581a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e92ed7-5e86-44e6-b6a6-6314807ae24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6569e218-0b8c-4ae3-a57f-0d9f721870ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d299ac-2c59-49fb-8ed4-76770f80e796",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3405b02c-f353-4177-a8f9-d8a3367ecb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f4c4c1-de1c-45ae-a0cb-a48f5f05828b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ca0052-53cf-4845-b173-fb7a37ba2952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "752cc135-3e1d-4904-b02e-2d83c3a15651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b81c6d-7e25-4dbb-85a7-5db5148764ec",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2519db1e-e7b4-438c-bfa8-053aaa38e9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146f325e-70eb-4594-896f-6bbae7a000cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1350620-47fd-4524-b3c5-5a449b678996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "929dc31e-81e4-4691-9ce9-49219b2c546f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2510b87d-8d07-4d59-9ea7-2aab2c6b7cdc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16706aec-90f3-4d9f-9e42-b9ee5b66f78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c06b9a-c6d9-4100-9d9d-5c3c8306a63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbf5299-6306-45f1-a69f-1abd17540650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18c90e21-53b6-4a13-ae17-b6dcb65af232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad0ff76-477d-4ad6-9b06-086d87d8a5ec",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bcf02a-8c58-482e-ad24-d2c64efddb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b662893-be5c-4036-8392-bc5791754be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3a1edc-90eb-4c0f-871e-44d6fa08b36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d6beff8-868e-45a1-b837-5a60880d6734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af96ac4b-c5a5-4410-9a56-58992b9c932c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8607a3d2-e449-4322-988a-265696b2f21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8721b6b2-782c-4071-b3a5-42123c51a68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071cc4f4-8da1-4d30-a9bb-bfe732a067e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0048a37-7cc3-4c89-a79a-920d1333cc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e291ce90-745c-458d-9f0d-b379e495dcb4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c451a13-495d-4e11-b576-270b0168c9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e630cd9-8c0a-42c3-8862-0ec6349e6892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddb6fdb-7b9e-4f72-af8d-d9b4d0202bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b853402-8be3-48af-a3cc-ed11bc54d4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d08a23b-2338-440b-ab7b-9459537a3a38",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cd0e44-e0c3-464e-b35f-5e0685b0da26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab35f42-32eb-45fa-a9ff-d6a1c4dde2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302bbb72-e0c0-4e8d-99f0-9a900400154f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15553d94-ed1c-4bf2-bf00-e49ada6b80bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96aa3506-95bf-45d5-a6aa-9bef8e241dae",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c7a2da-15d5-4f71-ba62-6cb718b7d3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a446a75-0066-4a88-8bd2-133974ba2d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977a9993-1c27-4ef8-98cf-012d44324a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "186a234c-76e5-4116-8b5c-8481a66f2b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cedc28-62ff-4c52-9810-25890e4ac0c8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e9ef61-9381-4c97-856a-29bb83fc9c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f21532-163c-4d3d-965f-c45a0b8a9d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c3c382-9cef-4fcc-b2a2-e32c4a65ba09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09a152fe-a886-48d8-8217-37ebc2f24c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918a483b-67ec-4ea2-a437-0aebb0d96768",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9527d02d-d5ca-4372-8713-bb48e26616dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f94b067-549e-47e5-8d7e-b81ab00b5cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5f21f9-6194-493a-87ed-cf19063d123e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc84a841-a71e-455a-809d-bcd1d8d0506f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9252fe-493e-49b7-b8df-a22a88546086",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5862995a-3870-4fef-8835-4e031d107ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f966920f-1827-4fea-be9b-2a2664d7d428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf1c687-a279-45b9-a256-77aeb9dad1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "910fb599-49b4-4699-bf58-db3ade8d4f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692187c2-f2a7-4e30-afd5-dc1560e92c5c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2f823a-e8d1-45f9-94c8-7f15ef23e9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be7cd93-73aa-440d-ba76-feb89c86362f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f24ab6e-6896-40d9-ac4a-e8d0352428f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9e9716-6d9d-4d9b-ba6d-381b4f54017d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a630f437-a510-4adb-8d5f-7ae33857887f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15db00fc-e96d-460f-a5ed-cfe80b20fb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beee6786-b9b6-4aa2-93ce-5f712ce9e113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649c79cf-10ae-41f6-98d3-3e7a197c38ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f56ce380-2fae-4bf6-8425-5f8d278b66a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137074c5-f9de-4aa9-85ef-a18ba8ac9561",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e99b4c7-dc89-4f28-8755-b443eb62db85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291b8052-d6e7-4f74-8de4-4a8587ebaf7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06b383e-ed31-4e6b-b2ac-2e68eb487a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25ecdc13-2fbb-4040-acac-ee8581bf453c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19cb7b9-cbf4-4a44-b111-3cdf54dc20d8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d60367e-33b4-4c33-ac67-16674f60b7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1385347-7393-452e-bd43-800e5e31ce09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af33684-3bda-4c91-b4fd-52a9f0aeb8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11b11f11-c860-40bd-8ca3-354ae9a6320a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0994ad4-0543-467d-94ff-1b346cb569fd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8beae49-8959-4c2e-953a-dd8e2d5f8a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9041864-532c-4477-bb83-1f34fd97dfd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6133b6-233d-4c4e-9355-f02a9109e3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99d52864-2bbe-40cd-a71b-76026e084396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c38ef29-e83a-4547-b5bc-82fd46e915f4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f56982e-b623-47af-8378-71debb511b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4389c1-11bd-45ed-b7c7-20f852da207a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf3c792-81fd-4556-aa5f-1e6938569580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31705ccc-d6cb-43c5-9fa2-c682ad342ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67148a4f-311e-45fe-b1c0-85fadccd3d88",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafae4dd-033e-43aa-aaf9-f795e2d39919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa918a44-92e2-4447-a5ec-cc8f806c86bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a6aad5-ed29-49b9-bb4e-cf52d5ef31b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb54eb7-adf8-4157-849e-59e1f57eeac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de03b14-f3c8-4c8b-b936-2c7f3435b5c7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69ecdf2-d4a9-442c-9b18-b1df3b7caede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fe65a1-a6fb-408a-91b0-ae9a80fe6e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15d755a-a808-4480-b9d3-1b4255ebe6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b66d10e-9198-4ec1-8bee-36e806b6ea24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a005b873-6a2f-45ae-854b-2ef754eaa263",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af7b41c-7989-4dc9-8ce2-caa8ef176458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b799d1bb-f9e0-442e-a80c-74af5b14cabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5351b7cb-ddae-4824-b78c-a1a91ed9ee51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67333045-422c-417c-8b21-8d9a011be1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804a4479-e4f5-40b4-ae8c-d78b1d30b389",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36bd7e3-7550-40b2-b67e-0ae3d3e26755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe63e487-8842-4fbc-9bf4-724212d18f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f94e9c-9bd7-4d3c-857e-ce51097d9cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f61fb0c-a9d1-42bf-af24-5780c50e35b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c3fef6-2a35-4b39-9ee9-0ad6b3e3aa18",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c87550-bad1-49da-84be-1e6eb989f69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27cf9ea-5c36-48a4-baca-bc1784292795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ed0a9e-d3c9-4c73-92ca-d91eba06c986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "769afd04-5014-449a-a3a8-d017ab4de82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482a2f70-d69b-4e10-813f-107c37c12cad",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fea26ec-c6f7-4e7c-9469-c287461b3a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95764cef-cdd2-48af-887c-83d9ac832eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ac0961-e3a9-452d-b224-625a431c7094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "50ecbc0e-492d-4c5d-a850-5d22d5ba50fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b064378f-68e4-4eab-ac7d-f5daa0d221ab",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac4f1e1-e1ce-43ba-afbf-1054016d22f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9feb9e-bdc5-4380-a265-cb2842dd251c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff9fa03-8f62-4cc3-8f8c-0d1d9a8e2ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb97be8-a59b-445a-bdc3-857d5e486d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826a3773-669e-42d0-9a0f-a464a44a10ff",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddea078a-7775-49af-9e66-b64bf10252ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8661363-5814-4bdd-a735-77f9b78f529d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9835fb-f04f-49fe-b6c6-c9c6cd48b1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57dee538-868c-4a0a-824f-75424b11df53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2090694a-21a1-4e06-9355-0de48c552d55",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c2c834-35c6-4121-8cda-e10a5e87babf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b250067-0d2e-44a1-af75-b7d2cd3bdf4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54ef2b9-b8c4-4252-878f-f2d986b8d597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13842dc2-2f81-49b9-88fc-f25c4d2ecde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81ea2fe-2bfc-4e78-bff6-7d342f43a2c0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618bfaaa-43b0-451d-ba1d-d9f49beceb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca059ad7-65f2-48a6-b260-f2e3ba166b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f22cab-eb17-47ba-9d84-9f9e679b4562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb9c2005-d32a-42fd-be32-948f9a42350a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f34bbed-4da3-4b33-89f7-b34720f019e9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21f3d1a-c1ee-4de7-bbd0-1b6150ef7860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3588e42-fa3c-42af-9a8b-2170c152769b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7a4401-b56c-4849-a965-f1bbebc82e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a123f5b3-e236-4c62-ad1d-1a3fbde21b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d194369f-0f9f-41f1-9096-f29b01908329",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85bab55-56ec-4c8e-b3cc-54e51cf3af27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2a6959-7c62-409c-afc9-39eef0f0dfd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e38d82-aa75-46ab-a7c1-f614baeac30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0324b19a-07df-45c5-9d39-6f27c7df1bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44e95f7-df3a-4f97-814d-c5b86e152a42",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea20b3d-a9d5-4fb8-8472-7743543dc556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "804397e8-d1af-4186-9e9f-7dc79462998f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53fea0c-693f-47f2-aa1e-e6dcb32097b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccfc50b-6d87-4e03-9b39-226f41c99b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e373d23-014b-4108-9434-c27cdafbe4c6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748deeb3-2a1e-4da3-abca-38c8fa6060fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da45e528-6693-4838-9c74-492b7080edee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a143a146-8c5d-4ef7-9e97-849eca4dc7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea483ba1-509e-46ec-9dd1-8b76ca736163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2253910e-c90e-4672-8f55-f88513f6979e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3d67af-c315-41f8-a15a-20aafc805401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e57adf8-6059-4128-aee7-c67d3680aedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96adbbc5-230b-41bf-9ef1-1e26bd55720a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "97c35830-5b0a-4cbf-baa3-14a3508643e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff0ca4e-6ba3-4876-979e-c795937ec350",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5810f080-1eb3-4ea1-a5d9-3d9ce2d151c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f633677-cbe5-4d07-b0cb-25b9277e52df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9423ba88-9189-4ad4-bf4b-cb653651be0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e2cd88-32cf-4f0e-8bd7-7bd2f65ff110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6da23ea-3714-44a8-9077-d3f7d103908d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61523c7f-9086-4eeb-97f9-2cb8c30ebbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9332637e-7a80-45a9-94a2-fad7ff06235f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e682fd2-8290-4b0f-bb67-3b4c5190d63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c180bbf-46ad-49dc-98de-0069570aa04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2210b74-a265-4a53-9b15-ecdbd84b31df",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e0e34b-366f-4253-8634-bc4948d289bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05992b47-22a8-4ba3-898f-56f4b190c59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8485c1-c211-4e56-a684-b2a6ba702ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47c92e33-e44f-4885-a797-38843f634836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffbc5e3-af5f-4e2f-a193-6af76a6cbb83",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1de633-61ba-4239-b949-307a352be3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f35ef9-7364-4548-8968-cef2f772e272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc274ad-8fc2-4dd5-acbb-5ae584c34d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "aec4faf5-8078-421b-b22f-05d9b1a2afd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3342b677-183a-4fe9-b055-b7aaf7a12dd7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6acddff-c508-4148-a0b3-8a8bb27f3e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0cdab8-0e8c-4feb-9e6c-5e430e2c7c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5b307a-11ff-40f8-986d-9b008c08536e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0cf99c-0963-4ab1-9244-52ed6a614a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eaecdcf-ce4f-465e-9821-646d9b7073b6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2da5f4-29d3-4183-bd0e-6267b56e5301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f9c967-c462-4a1d-87e6-fd4defd6273c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f3d92b-640b-4993-8020-86fb717702a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7acedcf-a818-4aa2-88e0-1d62567113a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6293fe2e-1ae3-4908-9fb0-0a49070377be",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b983d9-c5c0-4415-9d46-ae55d23a5b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659a71d5-9479-4182-a289-44fb4ab974a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ec5c2c-ab26-4a2a-b4b7-58c754b64056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d50b64-cf51-4858-9366-9dea0bc4ce83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9c20ac-1d18-4098-97ae-e1c5e5d83b07",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d88def-fdd9-4dee-809a-84026d527aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82e210c-879a-4ab5-898e-78103006b6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b8b5b5-1399-412c-a6cb-9be7cc0efa86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51e2302f-f344-4c51-90c6-17f482710bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3f45ce-fea8-44fa-a069-fe4fba3660ce",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969d6b85-0cc0-45f3-9708-417e5e05e26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a147b8-29f4-441b-a181-6bb0d1ec3576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b32feed-d5cd-4549-965e-3104509947ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb293561-b291-4982-a161-8321991bea86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3610b16-0eea-4601-ad89-c3d4e5479895",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfda2723-0d4f-4941-9639-d8ad1139fa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ccfb05-d562-4f42-b7a6-ab6d689f3656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc937c2-e3f3-452e-a270-34e71ff90ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7db6fba6-3eb5-4958-a847-cf5bf91067ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f7c66b-3c63-429e-848a-5b52f5517ae7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c845d4-a736-495b-878f-7b5a9ffe9bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe54292e-e7a5-48e3-8a95-3bd8cb2efee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8439a8-2026-4cc7-a6f5-61637846a0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c31a973-c206-4682-8917-da895f9293b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066f523a-8bc9-4447-ad6d-b40e2bd6dd81",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9b8365-e36c-4347-b1b5-990baa8c3fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42a7796-a784-496b-9405-742ad2c1efb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338b99ad-5b04-44c1-9a2b-408fbe7a350d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "149ac495-8c29-434a-b1f5-4d4493f90da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cca9458-7676-4a3b-9607-cf5119d322d7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21252aa9-bde8-4e23-a45d-e7484999ee60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68020130-e7f9-444e-8e58-81dc7c4e4b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8773a3-3658-49df-a00f-b5473f7ea284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2bbbbb-a253-4362-be24-29846c9616c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcbfbb0-fe68-48ef-b601-c13586388623",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7e1c24-a966-46a3-95fd-d985334d7b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4947a9fe-b608-4b0d-8768-c67650353c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5167fe9-a1e5-4fb2-b1cc-6b6dee48915a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b1da92-4662-4de6-b3f1-f598993493a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30375d1b-4f3c-43a5-bd59-752dd6c88166",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98057dc1-e709-43e1-bf14-2d543bc6f2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc875a8-da8e-4a91-9c03-8566a9032b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e2d23a-bd05-4cec-bf3b-9027faebb9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac42594-90a1-4ed9-b426-99992de136c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c21586f-73bf-4bee-ac94-6325efde2623",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a70841-5c05-40ef-866d-2877cb7f02c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37810bef-38f0-4fb9-a646-e6fc09abf837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b169ec6f-7fc3-45c6-ae71-0b4a7cd5835a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb00b64-2635-42b1-a659-fbde7f0678c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f858d39b-3fca-453e-bbee-18e4beda8897",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfeaddd-b32d-4bd9-af54-da80862008d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a141b5-49ff-4ac4-8af8-8b7a20f4af7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da13bc8-7875-4f4e-8331-2f2b038e5f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "938c735a-4c67-482e-b2e9-b892cf352aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e15bf38-8353-4642-b738-852497e86f04",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5925a351-2605-42a0-b5b3-52a54068a2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1db13a-9150-49bd-a90b-2a5ba9613a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2b1080-08c2-4e39-9a08-ba1c7733be74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4a008c53-7cc8-4dbc-af7e-468b26311f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e4f5a1-7872-42f8-a49a-c14c78ec9457",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ac07f8-e880-42ff-92ec-778531222e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc88106-d0d9-4f7f-9b65-caff53a0ccc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f5bea7-4a52-459f-8a55-701a0fa52762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9edbef4e-033b-4a2b-b9cf-b36e68b91acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3ee01e-ac12-4fe4-9b3b-3feb6eccec1f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704b0382-327c-456e-a4a7-1c20726c71fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe24449-7913-48d8-84e8-1203496a9c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f246989-8a3b-48f4-8737-d5c41e917137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b704693-fa81-4281-8213-fe7b3dc5a6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cca47b8-9592-42cf-b407-98ef65f00fdb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15c6ea2-6580-4e6d-8567-39a20001ed0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0383090-8628-4542-be50-598a0fc6bd35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2708efe-5fcf-48cd-a813-a23cb2661d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf07038-30db-4b01-9bac-df0d48b2e0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6189a3d0-1e9f-49ff-ae11-023d0d00f3fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be37f47-b8ef-4146-bca5-141b9e135eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4af8a0-ff6e-401e-81a6-75909899718a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5310e075-2dc0-413b-a319-7e51965c4e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b157b8a-1900-49b2-9562-cc6e8d51b73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48185956-b5c7-4d4c-a802-fb4cae00dc9d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3f16c8-7b1e-4660-9814-72a263490db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a27400-748e-467a-9727-b3674eace3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16418aba-6ea4-47d7-ae5a-87c7bbb5309d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bbdf1ce-42db-43a3-bae2-b60abe3a01f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a1be00-d803-44f7-ae4e-5162151c1c77",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c84d11-6497-46d5-89ff-cd34b71a4a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec783cb-4d7a-403a-ab5a-0bee7f62844a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9556b8a-c3d9-40aa-a0f9-65e9472ecbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc91e0e-3350-402c-9b7f-a98245b0009b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe188f1-8762-4caf-9dcb-fb8893af4e11",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd81e9c1-a5be-4e1f-a8b7-5ce3142de37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ec784a-ddd2-4edf-b8fc-77aac1868df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f8b4ef-2f95-4729-bc3f-55e4dd340551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe651ea2-9f6f-4bc7-b150-b352ab682f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84edc6de-dde7-449a-9721-1dec179d1e86",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886e029d-f65f-42ff-a794-bc1d9b5bbb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46e2bd4-4bae-4930-86a8-701f2f9a019c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587f63bb-b88f-43b1-abff-e975fae3a0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8af90768-6709-4b3f-9c0d-8b87f6794efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3c36a8-ba24-4529-8643-b403c325d299",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a004b8ed-403c-4c13-970e-21130518b362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d8fdedf-c3b6-43c8-a23e-f89c26b58456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071468d2-906b-45c5-a1f0-3553fedf4375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d41909-4273-40f7-878a-99202ab7eaeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfa0325-6813-4b45-908e-7c479e570dbe",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc13952-7b03-4574-86e3-d0c32d1fa98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91eeddfb-ec85-4b47-94dc-d1866e29a7f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c73aa2-d6ad-41ec-abb7-f14bd94d62db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd172253-cf67-46bb-8111-992195c2a6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e770734c-d9af-4179-b8be-90dad6a43b69",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4142de3-325c-41fa-af62-8b718b44ac99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10de92c0-4b32-468c-baf8-8a2f764bed0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9e37d2-f72c-44a7-985c-96b5ae74f829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0278721d-0f2a-48a3-908d-d0210bc645c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68e8850-aeb8-4c70-86eb-16ebe211930c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f5903f-f151-4977-98bb-0f504384ec37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6fedfaf-9ba6-4b34-b9e7-256b74e2fb3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03143205-8423-4cce-bcf5-0644f960fb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d60b2bf-c927-466d-9629-efecde2abb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d174358-1eae-426c-9bec-9575e392b10c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64e2ae9-786d-4fe7-8e53-8c518a76b100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bc1e28-64a6-45f6-a240-820a0e9c0fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7b7ac5-114d-4721-9449-bd4d5cffc53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7721e074-8cf1-4688-b278-4c0c58dab61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3a559c-13eb-444f-b640-07cf834b0a8c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b20183-4f84-4e92-b9d6-8b71f1efe310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d256c344-0532-49d5-b409-bea8921be176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c0aa53-9d46-46bc-9ffc-a24d54d4fc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4311414-2751-445f-a05e-3cb5c84d2f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93b9ef6-6fa0-4bcc-a976-3d2c83e9ee6a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086c2c9b-c035-4e44-8e46-dadb73f2229e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ed9445-2f8a-4a6b-8105-01b1662dd8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ef23d5-70fb-4049-96e7-26ad4f955d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a19d20-75cd-4b55-87af-7826072717eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1a6130-6432-446e-904c-1954ad8f1554",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c957a5-40e8-41c8-9f4c-ddcae5283cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5399aa81-d268-4a69-9bfb-7ed498198335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fca089-e6df-4fb2-bb9a-6642fc2a06ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f404bab6-cae1-4933-8292-d82fd3d3d019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4431201b-bcba-4fd5-a48f-3fe23eafa5f3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01443d98-970e-4283-ba15-3e2935bb0a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3f2e1b-ae1e-43c7-b73b-d9683ed1fb7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed701021-d64e-43b1-865a-daba1edd77a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5caa9aa-75b1-48d1-8ba9-f5dbf5ecd82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1150de32-c216-48f7-8165-25c1d81c649b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f44c509-2122-460b-8074-8d6f6bd457fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ed295e-0ebd-48c8-9c6e-dfbc9af5d602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213057e6-0227-4647-a799-8ff5170194c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fc0f70-1592-445d-a151-220a8174582b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a925f1ba-756b-4dc7-b013-083d807eefe0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d86ece9-9d5d-44f0-9803-e55b56344529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257e8337-deed-4b54-8a66-e870e91e9994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748200f1-779d-4ecd-805a-ef29ed56f49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af5e9e23-9eb6-4c94-ad1d-70f2bdd02b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc615806-bccf-4ed8-8967-c5818f4f9c9e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9e481f-e835-42e2-8c1d-2dee29f9b8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e54db15-4c41-4536-ac1f-cafa8bde2ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d36738-9841-46c1-ab6f-286183ec85d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "657cec0a-c579-4d2c-97aa-4495640a6ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33370bae-29fc-42ab-8581-7e5215f9193c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5053c916-ebf5-4e16-b9ce-edac42692e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e399ce-e705-4203-9a03-487e4f1b5bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b59fe2f-8e05-4642-a544-44f923fc0de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85df5892-5172-4777-9cf6-8ce9e9d733a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8992ac-8eab-4a9a-b42f-ddb31b83846f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa3372a-00a4-4f9b-9c7f-f507c4f774b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612bb970-e291-4267-b51a-e955b5641ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f149bb21-509d-433b-b489-3c7395c50ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26454efb-2676-43be-a568-95b79531b063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecc9466-803e-4f3f-8430-c357ab3f8769",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49b8b4f-a1e4-47d3-bf48-bc86a8faf47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b2399e-8940-4580-b6c7-e36e84175777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd83ce84-daf7-419e-a7d2-04b59735fe3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77563bdf-f15f-42d9-9d72-b75aef01199c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eee81a-8278-4c7d-b6d7-88236eb127c4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44254cfd-a6f8-41fd-a191-30a352093687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735e29a8-d90c-4942-b209-852a4da421d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff8bb66-2491-461c-b6bb-654741744696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac043dd0-e015-44fb-9ae7-192cf645c4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce5756c-803d-4b38-a811-cb1c22de797b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccc0227-ccf5-439e-8316-6e7df9a94189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11254249-570e-4ebd-9a12-a72f88ac4df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f23f439-b0b3-42d9-92c5-a2a390ef361c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f65be848-0770-4b98-8db5-36034d715b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fc4b2a-b8ab-46b2-8916-95ce7fe94bbd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4164a8-44a6-4fdd-97fe-a704aa6e4ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59884e6e-3a22-4de5-9dec-432fa645c520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4b465c-8e1f-4768-b890-d6cdcfe08712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8a9147-16b0-4d4e-9cb3-0147ee6bb9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b25a03d-a51a-4bad-b712-7d9754851b71",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e58e48b-4d70-49c0-baf3-8dba6f749980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8168b6e4-0771-47c4-83b5-deed915dde3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6175da9-572b-407d-bb79-dbf878c3cd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb396a9-1bdf-4d7b-9781-ce14cf1462ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4493ef7-c887-4b0b-991d-6ca934085566",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e511721-35ef-4a68-aecb-91da8051cdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adc9c73-5c73-4923-b360-7ed06a5c11df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6f8fbe-1dbf-447d-a430-06ca505163d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2679ec89-d611-44cb-b1e2-24d4d8ec6312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386f0979-0eb9-43a4-9a75-3e5c1482bd8d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4150342c-25e1-41d8-b97f-53bb712d01a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0feb236f-ed3a-4bf2-872f-48ba3bac6b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abab49bc-f014-4681-a8fa-4a03beb6e611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98f59afd-28cc-4663-8907-436623f7e91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962027b1-d4dc-4397-953f-e52e79cd3415",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54549e1e-40c4-44be-abe9-1dba0bcfa61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ee13c0-1162-4b89-a135-892dfd6d975e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad3c460-a665-463d-9d34-31977a0d5aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "925e7886-dd2e-4b9e-8418-5b0982688ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30702f5-3e38-4b36-8d3a-6db0f20e3837",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abdfa01-74c1-49d1-bc4d-326102ef17e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4583fe69-39ef-49ab-81af-2e3d10cee931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6991977-c432-4ec9-85eb-eac2d9f1a206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c616c37c-f71f-4b75-9557-8e2e0de9c544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f246eb60-5c8a-467d-a9b8-3acd9ea63623",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3af415-0498-46db-b68e-d323ae22d1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fc62ce-24e0-450d-be96-fb4bcc30e503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12b6065-0363-47dc-8250-6f822b610e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "089d1116-1413-4a7f-b4c3-a5c93f4d5947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a08882-dfc6-49a5-b285-e96480c48143",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55158713-6989-4683-91db-9e963bce6cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8609aef-10f3-4398-ad2b-c120a903dda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b1d37c-d9c2-4dc9-b5c3-064d0a54e4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f1166c-9fce-467f-b26a-b73181aa9ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ad738a-2550-4db3-a8c6-116967ee2f8c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aad696d-520a-44f2-8b4a-fc45cb8741f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ed33f3-0bab-4cb8-a937-5b77ed8c8d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4097896c-6e22-4631-962f-b5a8cccbeebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a76b0fe-5035-44b5-8850-bc74daace516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d38bac4-a3da-4499-a442-50a642aba689",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28feed41-0eba-471c-853b-228846709d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f471aa55-a38d-4013-b990-50138b68ab7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862cead4-5cee-4668-a22d-2208a1748dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1bb60e1-1984-4708-ba42-c7ca5e591c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10df4dd-5069-4233-9f51-ad01ac65a72c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc02636-62ec-4379-96b9-9d647099d513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2bee5678-d1d9-4781-a265-bf9111ca3ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4965571e-42a6-4a65-91a6-8dad341e6e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3ece95-5423-491e-8a14-e44d7658b58b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d809f5e-d318-4b66-bc7b-78a3190de59b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e78d33ec-59fb-4282-b6bb-03aeaac187c7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b98f290-de9b-42f6-9e34-081a26a1df27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fc91015-46df-459e-9a9e-0b7360d1077f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8cfbd1-1bc5-4c6d-95d4-7a97fd04770a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a911d66-b4d0-452a-ab4f-6c21efe801a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3731f16-21d4-40ae-afd5-01209dea5947",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661cf92b-152a-4976-b83b-d09f5948b0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a87f2a7-4cb5-4c3b-8d55-fe525bf3cff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38e85a7-5352-4eb0-994f-56a3aaa6cff2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "351d4d51-4acd-4319-935c-1b532a650227"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95c8031e-2c98-4019-8141-3eeb095f88aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81520cff-04d0-40fe-be9d-d9e4615a2113"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d36d4ab-1fa7-41f9-8cce-6fdab138b872",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa1be7f6-0eb2-45b1-8140-c819e4dcc15c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7affdbd-6758-4aa6-b5c3-a5777eddee1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9b1016a-c038-4d4b-8457-4ddf9970c91d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d3fdb06e-57ec-484f-8c0a-5a2825e9f562",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66ea3c82-737c-44a8-8b6c-b42550e956aa"
                }
              }
            ]
          },
          {
            "id": "4fd6ce81-5ac4-4719-b6a9-8f2c91410ffd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "89241378-0b92-4161-b699-cde297e6e080",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be2c5b50-6b78-4d48-8479-5e62d0feae10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0811a877-1593-4c76-a9ee-ec325db21c7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f526fcd-1106-4984-b3c3-b1d1474cc805",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd447916-3449-4446-83a0-7d4b275655dc"
                    }
                  }
                ]
              },
              {
                "id": "03d66719-cff2-4ee4-a3f0-157035145957",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ce5bdbd-23b4-451d-8852-e1e2d81ab43b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d47dbbe-c260-4e91-b56f-ee7fc32f5398"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da442aec-ecc8-4850-aeda-0969a153590d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b70ec4fd-2493-4fc8-972c-47fea3bf7d37"
                    }
                  }
                ]
              },
              {
                "id": "b2fca7b5-04fc-47b9-8c9a-85841042fdb5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e3a67ef-ce2a-432a-b8f8-61686b05d50e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c2f33f0-751d-49b5-b4de-73875180aec5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cabfcdb-44be-4de2-8b60-74d82d0ccbfc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8b5db832-b799-477f-902a-1b1b855a0d20"
                    }
                  }
                ]
              },
              {
                "id": "993184e7-d32e-4c83-8739-7fc4ec46c113",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9d9281d-60a0-4b20-9d2b-641fc8670002",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d655cb64-cad1-4324-bf49-6bc70e463eae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b46c0b9-cce9-4095-a447-de6d60cf9252",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "84cc2bc1-5cf3-42ed-842c-3096313278fb"
                    }
                  }
                ]
              },
              {
                "id": "906ad142-a5ce-4b50-9fdd-29e66ee7470e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b3cce45-ef04-48d5-b5ae-a93bf5e27fbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa05e4ef-c1b0-4e9a-8845-4463f13af226"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47f8dcc8-1e1b-478b-b663-32dc5fbf318d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2a60ff7d-4729-49fd-840e-cdb6e8e3ac19"
                    }
                  }
                ]
              },
              {
                "id": "672af039-d89b-44e4-9d97-8c3d25d8db60",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c06dc9a1-38fa-4cff-93eb-7e1eac0727ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7abd876-7eed-4386-a9ed-e300f43a1816"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9b19a45-5cc2-4b95-bcce-1ff92bd6495e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2cb791cd-59d8-4320-8693-7fa68e0c722c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e67b2ace-9045-414f-931c-fea4a600ffaf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c0dd617-de7e-4e58-86ee-1a1e60e8e7e2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "218db47b-bc6e-4d3d-94e9-a71281b54858",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4fff45a6-9716-4706-8440-80ca28f5a197"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6deda35-88d2-4efc-acaf-14cd4433189b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fbcb6818-3134-4e6b-8ebc-b4e6cadb570a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8267930-584f-43bb-a2de-4c3faa531c43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c10b0dd-363d-452b-807b-c627dc8e8332"
            }
          }
        ]
      },
      {
        "id": "f317945f-6f17-49b1-aad9-36978353dbf9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6ca98101-39a5-4aa5-8479-b1b40f104ac6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c550b8e-45f7-40c3-b7e2-69553e4f23f6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "edfd8997-559a-40de-8be5-d9080d6529a0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f0fc50-1713-40c2-bb78-f60e3a9a1974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5976f0c4-12b4-46dc-9943-f4fefbd618a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f372f723-c3c5-487c-9265-44591c76074b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a69d9561-1079-4758-879f-eedf92ebd7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec97f16-a697-4f54-bae9-19267a0b1854",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5baae980-6997-47a4-9e99-6bfb22a3ebaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37340e9-924e-4e48-aa02-66d69a040a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98702ae3-683c-4172-a433-9b51931b9592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b5f9e2-73d5-403a-b709-5dcd162082ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b39283-3a95-4ae4-b3a0-3036b1902133",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e5e7ed-a868-4daf-a843-6476486ee26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53be1817-0581-475a-98c3-62970ea22ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b912762-243d-44d6-a2eb-397806ea2978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "821ea159-66b4-46f4-898e-c4187e18c82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9863b90-6c04-45c0-be4c-a244087eacc4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a63ac1b-e496-41a7-8f24-282b168e702f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b286eee5-ab9d-4f10-891a-01e1e60a7074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e04649-dbbb-4220-8496-af977988f976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0af88aa-435c-40f5-920f-671332264406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d1a36f-b6f5-4483-aeaf-e784e4fb6843",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69777e0-11e6-4ac2-b072-3617f4aae867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2777218-e5dc-4df9-9f2e-93af21986dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c919c50c-4ee3-4ad2-ab6b-a627fd15231b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb2f6fc-7df6-4302-aaf7-b7f083994963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1987a56-ff1b-40e7-aa44-9a548857e068",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ee1af6-f7be-43de-95fb-2def087ee128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a79533-6537-4395-9ea1-b4a22243ae3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c450a7d-7e1b-4d13-a61b-c64d49663d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c8f5a9-b97b-42fc-9ee0-618753b5fe62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8faaec3-d215-4793-b093-4ac7f00677d8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead4175e-c4bc-4b46-b761-d180500baaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b01f97-1b81-470d-b3d1-6c323c45000f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44179964-80e1-4999-8cb6-6cea5bde0c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e966404-b401-486c-8f32-1641bddcd927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb552bd8-6970-4ff3-a990-c233a4e22acf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655adfa9-d208-47c3-8b70-d3bd96a75d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a875b90-90f2-49e6-88bd-dd6589b59563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7f91d1-bdc8-4160-acb3-a8e29fa54077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc35ce88-256c-4c6f-b46d-70c2f201c166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923e9208-572d-4a10-a8b8-c928ebe4ef14",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81340b1e-609d-49b8-92e9-f9b1d61a761c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5e2af2-0b3c-4661-a5f7-7bf6cd1f4371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa48bf78-964f-4a2c-83dc-87cb45f7fff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22e8f25c-e76f-4cda-abee-702e86a2c3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357aa924-9c61-400e-9a93-016eacda95dc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d5459d-5f03-4de6-8cfe-22c6827106f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7e5a7fe-afe4-4733-99fa-2c2d25523173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7bf01b-52f4-4c5a-b28c-c9d5f7c77579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83044bbf-a4c5-49c3-9f2e-3ecae08418e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c3709a-2922-4942-88a7-d213e2f2d9d7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4055f4-89f3-43f1-ace0-8d4d9023483d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd66099a-da47-4e40-9e7e-de8fe7be9a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c59bb9f-47a8-453b-acc3-d760f1b53743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "67e43f23-f1f6-460b-9cd0-d063b9a03e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e35bc1c-41d6-4af7-8837-eaadca8357af",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4b684e-07f5-4116-9057-40d98a7fead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c7f238-ba3c-4b01-a513-1c7158e3b1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7777f313-e633-4f98-b771-b6ceeacd2395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "422046f9-0639-4023-9f94-a4eec857597f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53273e02-41ff-442b-b7c6-dac4db753485",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396f86ac-4b69-4826-8e22-6419d5e4aca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45946c85-6480-426b-b171-1840f0f69290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7743d00-6a1d-4c76-bad3-529b1f46ba8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "068e0643-beec-49dc-aa6d-0290d0becee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9adb393-5af5-4aa7-919c-07ed5ea6f542",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d64756-7720-48df-8fcf-92d3c9cabcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5913f0b9-3d8a-45d2-ac1d-99b878ce939b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea84a0e-e8fb-48d9-82c1-0df75b16b1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0481cd12-5f29-41db-9578-920f7882513b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c5a512-5cd0-407a-a1b0-c0374ec57c06",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4968e8-9ab1-4bc9-99a1-963f4b309e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26c8fd1-050b-45ab-863c-610887d81e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a7149b-9637-4df6-89f4-ff98155200b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "64b65400-daf7-4fb7-b9f6-d6428ab4835d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881d28c0-e6ec-4ff5-b1c4-0660b38aeaf4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b360082-615a-4f3e-990f-26f06a29d12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2d2f14-b6dc-4696-876c-22d2b9639f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb25725-47f0-4a5e-9960-9b7d478bfe27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "818d5bd0-eb5d-4ebb-be8f-2c7ae75a4a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f1fb65-aeef-46f6-a3d2-1255d79f4464",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6eec439-1600-467e-9388-295851d3c1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad85e47f-a977-4709-96ea-fcf2cd162978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77811c0b-be98-40df-bf5a-91d6250acd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba76006-669f-41d0-bf14-5b8816ccd359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2656f5c5-2701-4be9-aafa-1b7af4020f60",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f5e0ef-3b87-46bc-b0d0-8c88516df0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb29d64-8b4c-4535-a45b-5ce5dd154aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60949b0-6ff2-4ffc-b644-8adb53e8d6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "efa4cb37-b65a-4a7b-a51b-f3d1feb4daa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce65a090-1f5d-4bd8-babc-384c735fded8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be161072-5d71-4199-a767-9f5b7878de5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce818cfb-6dd6-47b6-af41-1361f61a826e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445b539a-3208-4dca-90c3-2adfb2e6a207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c337fc5-c65b-45ca-baac-6f29c141a599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9850e6-702c-4b7f-a973-e49f7fd993ee",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5791f3d-a72c-4dbc-8144-1c64472592f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ab92fb-6fed-453a-a2e9-211680b89b8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62625d20-a26e-49a6-9463-a75f5880473f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1b45c9-b6e7-4810-a889-b3fbe41db8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615d4c63-1d8c-4077-a3a7-b9c4d17a7db3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cdd131-5336-4fa8-a4a7-f2aed7be2a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943b3f64-baa5-4bbd-b36c-3d1845d19032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22fe761-0c38-4ab1-bf02-30553b72903a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e19416ed-246c-45b2-ae3a-1a2c4fd0cfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a2e611-f100-400e-9a1f-753cef5868ea",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0420ca-4e64-498a-83b5-a626184df953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de32ca9a-71b3-4995-ab1c-0dbea471482c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de88b20e-5097-463f-9db5-e6df106ac5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8491a2-5aea-46bf-b706-ce1582687115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7085de-6de2-426f-b9ab-48b6c310f6a6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e3922f-d64c-4232-861a-977fb8def29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b352c30-51ca-4d2d-a7bd-0eee2f07500f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33c6aee-641d-4fb3-842e-a7ebcd3e1516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62ffe107-e031-4ffa-a763-8036652570aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37779994-e239-42fe-8b37-cf6f99e48c3c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0533fae-e403-43c9-a62a-5b0e366a1f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f31c6af-ec9b-405a-8f71-81987e8dca39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3e362a-5769-493d-bc7e-b2f50da445bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfba6ae7-4ac9-4dce-8deb-1d8441a67237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dae96ef-f471-403e-ad74-fec77755ce6a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0ac73e-d715-4cc7-ac9b-c55a79014dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc256dc4-e29a-4b68-bb97-588d42eef094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf34d05a-7e94-4867-9233-bb053f807de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be4e6722-9214-4f02-8d91-829874fa2dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0942997-0eaa-446a-8dea-4a8b8964473b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ae35b3-41e3-4533-9771-aa0bf7e79b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149eff20-391f-47be-9e5d-1f2aa8c9b28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e238d26b-9750-413e-b7bc-944095db0c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3342046-3594-44da-a9ea-78c13b0c53a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd0c798-eaae-4f10-af04-0482f9e713f1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5953ab8-e16f-4f8b-8182-bb72d83b6fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4d8844-30d6-465c-a243-5a0f9e6a13e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941d53d7-f8cb-47f3-9d24-a854534cb94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffec2f01-1989-46cb-9e00-b778e04b174f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0765a48-768a-4deb-8ebd-b2b51f457b28",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32af9954-d9a1-4de7-83ef-81c14ccf819a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28832af-3235-4161-b606-31ab19c8eb64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb891e6-0fe7-4355-abcd-5147d2306c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62de35d4-f5bc-42d3-aa80-b6965bb70d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b14771-eb9e-477e-8a87-5d78aaad129a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fbbd50-0867-4396-b420-2cd5454e64af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a28aee-7a83-4818-a374-cb80cc8146a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61a8e4e-2fcb-4dd1-87db-766dcc90231b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0aabc3b-63ad-4631-98fb-845a7ae197f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32dbfd69-8e03-4bfa-8f36-24f2957aacf8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c5fe01-6053-4e7b-b922-4b6e69bdeae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237b3e2a-d247-47dd-89e3-1d2756444ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5efe787-a945-42e0-9c73-32d9f401597e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec8003e-8743-451c-bc4d-5194f8e789e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6279341f-06b8-4914-bce8-a18861090910",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9646ba66-f21a-4cca-b560-af344cc7abbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4242e8fa-9b29-44e9-a4c2-482ac509929c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25c8373-137f-47fb-a915-fc54554feef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5674e143-bc11-4396-ac7e-1a1a8e588901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5ad698-771d-4822-87ee-f473e86b473a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe7f80a-f4ba-41b1-b9d3-351c1f350308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fd289b-24f4-4d24-af84-b7baab714574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26ce59d-ce6f-407a-a46c-8d13643dd54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "688cc661-5e2f-4aff-96ee-ec4c6882f66e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "286dfc69-9143-4116-8073-fbda11153b6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20ec3149-c252-4228-bbc3-3f1f7383605e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1e73d2-8930-4c63-97aa-17b51f75abf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "73dff2be-a714-4d11-b30d-5889581c6f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c2c647-6aae-4958-97b3-83b84a1a0692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7acdf901-80d4-45ee-b972-a312ca7c05c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5deeb692-cb28-464f-a4b5-2730199cd87a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8965d22-8525-4f36-980f-f3e584803263",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ef721d57-6e5b-4432-b4f3-e5676210d74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb0d934-aa1f-477d-8208-5bfc1ac4fead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "309e33e2-302c-45f2-8e33-161fe1221b32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d60aa4c5-c1ad-4e9c-b6ac-d204748beacb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5c0d505-c2fb-4e1c-8105-e4c32f7a9e40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a840e2ee-d7fc-4cbb-8b8d-8709ac0ccadc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22110453-f071-4dd7-96a9-6eae63e6cf82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4edbf4aa-4701-488f-a07b-3e00e6b8bf29",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3b906be9-6363-4d7b-a255-c8fe4410fc63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3c60444-97a8-4585-89c7-d19b0a11f4fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed340905-bcb3-41fe-a539-c5234735ec93"
            }
          }
        ]
      },
      {
        "id": "45915726-ba6c-4a74-9ed6-544c0a509282",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "570f59f5-f175-40b9-a8ec-cce2cf4dc75c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ae4af41-ade9-4fdd-9f5a-f832fec7f463",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a49d74d4-66fe-46f4-a594-c673954a13b5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7a96d6-071e-4b82-9118-3bb20298ac0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a438e7b8-682a-40c8-a883-55c3bbe9b41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8967b31a-c7dd-4736-bf2b-ad01b7735e58",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40c6e80-0fa1-431c-8139-ebe64547e375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bbc96b-eff2-4ec5-b584-bd161ec27d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482d9b91-e4d4-45b4-842e-c60bfbbade60",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f94c74-ec8c-4f50-980b-31b41a1c562d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcab2f54-8957-40cc-bb7e-d1bad5ce5fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992b88d0-88c0-44b4-951e-8a6483c303f5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fac8a8-681a-4372-8c13-075616be508b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f450dff-c86d-4730-9c1f-68c9851c58f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c874556-186d-4b29-aff9-d728a7dc4d45",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a1d53b-8ce9-467f-b445-c4d44a446205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca70468-b4ac-4917-891b-ef2e059f4886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f815ccc8-fc16-4765-be03-9aa1089d5fa1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17375e68-8e9b-4adf-880d-327cf8983ee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ccac30-7fbf-4117-a7c3-9a77512dce54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0170c1ed-184f-4586-8386-fa1c620bcb65",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1f3d21-0c16-4996-ab6d-e8ac9520c3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "392d37a8-2bc4-4f67-813f-5aae24c20fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c07a6a-a45a-4178-9196-52ce1ed22d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21ef39f-0639-4edb-af80-05d9e3bd6584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce541600-aab5-4e0c-9251-8fc30bab0c04",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07faea39-8e0c-46be-9782-1e0c2cc83d3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53182e1e-dc5d-49de-b4ff-35bff5494a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0307812-161b-48ba-b8a6-bfd8df42af75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb66923-8098-4b9b-9bce-444aca36a23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99024134-edf4-4fdc-82b5-5eac0dbcde4b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6832b842-7f34-4ee5-83f9-727a40d0b750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d155ffcc-2d5f-48f6-b6c6-e55778155fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1204cc-ad28-4051-9305-85d9d651a1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b5651f-fa18-49b2-bd34-0320292ba5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6438b1-237a-402f-ab56-a1fb9f9d1271",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6850bd37-b7a5-417b-93f6-373f25a3114c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af62fe96-fdfa-44d2-a729-219d8eda9500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48404ef3-bfd7-4b4b-96c3-d4bc820a0e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17509498-b805-476b-968c-ecb005d8197c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33908b2-ca9d-4630-a4f3-edf30994b426",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259b7e34-1da9-4acc-880f-24e820284432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e7b107-04a2-4dd1-a46c-3c9ced1cd47d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddaa948-0684-4acd-b04b-775040cc8cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2915da8c-719b-45fa-bca1-d125ca46b137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76c5326-f6b8-4ae2-ac25-399733791411",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bb3ce4-d62c-4201-b233-4bb9e9074679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3ace7f-95a9-45ae-851c-f8789c2bb906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab36af5b-d53b-4bb7-8ce8-aa18e2863359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72ab63a-bb0a-4a95-9c1d-91b7a56bf483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e583ba4-bba5-48e4-afd7-f41e5eb58616",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e39fa6-7304-43aa-9f63-7fba044a02c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da572a73-ba60-4c7e-991b-65d5e5313e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc32f826-ee0b-4862-96d3-f656fba7da6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68de94a0-bad1-4550-ba44-d6e93653ea6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6423d6-7e06-4699-8aa3-dfda15268d9c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76545f84-687f-449a-a7c9-d0f6892ae303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e5d7f8b-f053-4155-976f-2de01eb818d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2b2933-abaf-42df-8896-e2f7665a98e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64113e84-85f0-4d2d-9859-b3b887e69d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681a87bd-7c86-4121-af0e-1ce5ecdf59d8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9453a00e-ede0-40bf-a893-e475f6a09438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75e74d01-abb1-47b5-ad58-2abf2e3068da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b5610e-86aa-4c6c-8c64-5cf6cf8cb00a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2876c6fc-4a87-4f7a-8bae-34b9ed728632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b4e069-598f-48c6-b204-e1218863d244",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f588deb4-9c38-4eda-aeaf-146771dc37bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e08fba37-cc8a-4175-a6a6-4429042340d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfdfa1d-be8f-45af-b308-2132c3e52ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce44a31e-9c1c-4c22-afff-a5e39e6dcc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be18df21-28f8-4695-ad41-5ffc90511e0b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f4d602-655f-4dac-829b-c255798779b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1db4af4-c9d9-4fd6-9155-f6d06e386940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27394177-c795-4054-9394-3e0865645edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ab276d-073c-4671-a14b-e2956070cbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2128268-ce7d-4acf-b9ca-f708f6315689",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac717f4-8555-45b1-ae9d-a66546221b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8dc1e7-aa3c-4cb6-aa15-e076a5d50b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e59d4a0-d91d-4dcd-b5eb-b359d9748e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20aff8b-bd38-4741-8f19-59141bb18b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bbdb12-0f2c-4cae-a272-18670e08870b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fc6d01-6ea0-47f2-8019-dcb7721a6717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c5864f-5643-4ec3-aa91-c3091b616310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a0ad91-930b-4194-a8be-b3ff19633a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2242310a-2367-4743-a297-e13a7ac62b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7770362c-18b3-485d-84d5-8ac6a826e48c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d5fee3-eafd-445b-9ce0-9488d43e033f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d68bed6-2b31-41ca-b645-665590356b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c0fa92-5826-4486-8b77-6e67d8d7b649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7034cc12-c56d-4aa0-9cf2-8bb3beadc885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4ef57b-edd2-4edd-8b10-3c557285c28d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22e5ad6-b71d-4d60-8557-f5915eea4695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31a6e09-d866-4a50-8427-5c0220f488f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d80406-a3ed-4399-b7c0-6c7d2929bac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e620e923-c534-4212-a617-4c851b9abc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80e14ec-4a39-4225-8909-f49d00d5c7a6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26a67c1-0214-4e70-9fad-5aa29b47c251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa8ec13-6fee-4b33-bdb7-88984ae52687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b65da1e-8bd4-4cf6-842d-b141f3ed83cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e239aa9b-11bf-4018-b9aa-37bac92e2c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5f8b3f-6f4e-4cee-ae46-004517886150",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577f9013-89f9-47e4-9630-d5c9b5853d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149cbc08-f33b-49dd-941a-6bf18f161deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c0d31c-d661-4918-a7a1-311d39d07659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d7a931-a94d-4b73-93bb-4e5ccd1ebbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c98c2f2-6d11-40d1-9b83-9646795b9fc5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fde69f-4f49-41cb-86ac-9396cca2f222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d98915e7-8c47-4f6c-8aea-b0b937e8ed14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f93746-404c-40cd-94ce-1b717e27df3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b58235a-1d8f-40ab-aa3a-c3bfed20eb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e53aab9-d5de-4adb-acce-dcdeaba2dcdf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78dfcf74-9837-4e5c-8f26-1da0f5a9b434",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a9bffb8-c0ef-4c09-a8b4-2349eb7d0fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417307ec-f484-4a5d-8ec8-c888e4617934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41dddf6f-8c4e-4508-b3b4-bdad25f9bd52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772ff6d3-733e-492c-8866-1337f17f7a5d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c72d66-e638-4c4e-8124-db5216f97187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cb1e734-ff4c-4e6a-a0d6-4ff73a91c5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde71c32-6c0b-4932-9c92-5b7f16f4d9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385e07e8-2500-481b-8c8a-592c6358af0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6840df7-1446-4562-ae51-6baa3c736b02",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2225d80c-2324-4859-b25d-014047d50990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08e0ced8-c58d-4ed6-8eba-d650bec6e0c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75500314-3216-4890-92bb-5d33a7cf07ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03af8cc6-844e-4df2-8e9a-b1d3d0840ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abde5738-0f39-4fcd-bf46-9f00804c21d2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410814f9-c174-4c9b-a670-55d0c62cce31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6320fec1-6c04-4ff8-a2be-c70a517f5edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8816046-e703-489a-a44a-173ec989edbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb8bdb7-82dd-4814-9e87-c6d60cd57435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bce31e1-cb5a-40d1-9f99-b35a27633a0f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e716c79c-2257-4e60-b8c2-d34a8d01f4fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec947674-3296-41a3-8cb9-0164c2b26edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5c5f80-5cdc-4db6-8094-2382955bab0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8c2969-7d08-4128-b619-f120c20d1878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089066ae-272c-4c98-aff5-b8c68dd3d765",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cb8aac-0273-4df0-a7ea-13d40ac0ac18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66cb1a7e-cd34-4bc9-83bd-2e999aa5df7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e683151-cb0d-4ff6-9b3c-be45dea1584a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2beafdc-0abe-4195-9548-1a5c09f72f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabd5450-b6ba-434e-896a-4522c39ecb95",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efce8867-9051-473e-9d04-07edceb502cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df2dd33f-8298-4af6-97d8-943a5b683261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dde1a00-6d63-4738-b1fb-b053e3d17048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c70c6fe-9239-45dc-9dc1-3a2bcaac81dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af22262b-d7d7-4236-88a4-07a80839b72b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39144f0-f1d3-4d38-93a2-0e33b883d701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8752fb2a-571e-43cb-9588-519f80adfa0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5b729d-be5f-4466-816b-1a716371982a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9118c611-d038-4dde-87a6-5ecbd12111fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d264c51-0b53-413f-9f1b-a359f9256dc5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b845408-421e-4c68-8261-821af459bc56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd73bcd1-9642-4b29-97dd-15013fbc3a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3d7498-482f-4a5f-8fa6-05b6a853995e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f62e1b4-965c-4a8a-8acc-47067d331b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6145172d-aecb-4c73-860d-8bb7ae74b23c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a355ce-1948-42aa-9616-d51360c56f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40d0c1d3-570d-4740-87db-fd353f78bffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7445134c-8349-4852-beaf-2f25e8491024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f1fc2f9-5876-4748-aa7c-3e74dd7b3486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21913fbd-5436-4103-b754-009e27e3bac8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c783e386-8e0d-43a2-82ec-d4a41f3958a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b73d44-06e6-4199-8ca5-0806a81cb795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c11d1a4-3f24-4b16-b956-aa764271f70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8058490e-7577-4dbb-bf01-835fdcb81162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddb709b-c9f8-4c01-b15b-4346cdf0ae16",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc992e2d-770c-4230-8862-0143961dbce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd59f04-91d0-4ef9-a1c7-3b3b89b12707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06532ac2-d380-44a3-8a47-260cb0936c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04d6282-5733-4e45-953b-266b39ed92b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b214d62-fc68-49f3-8195-2d3aaf3b72b0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acad09d-0bab-4be3-a30d-9d8666777f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839d0730-287a-44b8-ae06-abf86bc648ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cf3996-4573-42da-8cce-f5809bb6742b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a113d13a-4193-45ff-84ba-245e1ca97197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f9d7fb-f901-48c1-812e-d5712b39d047",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438ffafa-bbb0-4203-a746-9a14ae014752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae7eb4b-0105-4a8c-a186-b6358803dfa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59772828-f189-4289-8a95-014483f909e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014adae7-8473-41e2-bda5-2b167b1c8a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e732c9bf-1212-44c5-9b0c-93d61badaceb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8300539-cde4-4695-abba-589f88fac206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c61c5b5-0a6c-4e39-88e9-8301d1cad8c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40f1cb2-a5a9-4a2b-b390-5bae4fc63370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba2ded6-0ebc-43db-92db-6e42a1d9b029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11a7e81-2907-4de5-9367-76099e0b984f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b915291b-5af1-42c1-9ae6-2d21c15d36a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3644cd-a5ac-40b3-830d-2a5c5d997f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "395a1616-aa65-497c-98e9-68c797730288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4bded5-5b59-44ae-9f31-b3b94d13027d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8191296a-e91c-4637-8ecc-ae9ff1dca9a9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8307533a-84ba-49a0-a27f-6d68c3f30b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd4e1d4-e42a-45a2-89b5-8401846a653c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd482df-5b2f-404c-a59f-453876ad65fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8e041a-b0ab-4e9f-90f0-466b197ae878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e33940d-57ed-4c72-9447-68d01f9b5d5f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fea60a4-f8d1-4fd4-a1c2-28b530a04279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9a415a-04b6-4c6c-87b3-95c3efb56022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bfa964-b2a5-4b92-a7dc-92ba0761d98d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cc0aa9-25db-427a-8474-02b904ce85b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b97ba6-e63d-4f33-bafa-91e13ef55127",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65e1759-8ae5-4321-a828-eb5a88ab22bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ac6115-d2ef-4679-9da2-845d6bd0716f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd229efa-e9fe-490a-8a8a-86f22637b66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e86450c3-0c8e-4d71-b833-c6e717d66341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c50c82-b27c-495b-8f26-a9b64ca025cf",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff993d3-adcb-482a-b802-1255b1285ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd427fb3-561f-4872-931f-5cc18ff87265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbfce10-caaa-4f01-83ee-75f9427aaf4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efba702-f7d8-4aaa-a2a0-160bec1c7f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cd32be-3c14-4af8-8601-eb2393b4a166",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbac870-9fd9-45cf-abd3-8661171ed21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66cc22d7-c013-4d7c-a148-ec2ff7e492b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675d0a40-9676-4f82-b84f-fe610972d03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d829e8a4-4361-4e76-8aa8-688fa8990c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0b97ef-4b03-4e11-8753-960bcd422d63",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f0d929-345b-45b5-81de-2b7338f1bfc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7324c1ca-4171-4fd1-88bf-2b80f11c3e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "693e0dad-9b4e-4707-b066-521aa7d0338f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a8e935-81d4-4d59-912c-3d9ae287c96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c75658-4615-46b0-8a12-1e582e698f5a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494081a2-8bfc-49d4-9732-68b8217ff5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86443df-4d68-4689-ba9c-698339dd741f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e4a9f6-c15e-4574-a0f2-5271b44210d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc673333-3334-4e74-b77c-9625dd54547a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3648cf65-7a57-4118-9c19-f5f5ded8dd19",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f046d6f1-c9fa-45b8-8655-630b58d5879a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796532d2-7b04-4ee2-8c78-7c86d9ce42f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb15c413-907e-47e1-afaa-26d846ebcdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5538d5-f10d-4146-b4b6-efe083d4dfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ac7b2d-4176-4883-a80c-2660f8252252",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efc8a40-7ef2-42f6-9300-8308e0886549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ad35a8-24de-4f86-b6e8-f04b05a7ef53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816c5920-218f-4a79-a9d5-5f11acff69f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e919c58-e366-4923-8b49-44270e8df285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3ebfcc-04e1-4c83-83b9-d3397b185d86",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155a8d7e-671f-4c9a-a5e4-4979545fd3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "240dc477-b92c-4d16-b820-f27826f54fa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7caa1c-c720-46a1-9d0a-00ed9d9c8ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69090e48-e38d-48a3-9d30-8bb3a6a04e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1daa9d-51c3-4674-af47-93b10a4804d3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4f0db3-f462-4f01-8ae1-5d411affe04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca64c1e-8a2b-4e72-b27d-26fe7cef3643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abecae98-ed67-4644-ae4d-b6e04a6779a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fa8346-aa5f-4d74-872f-7c146f55d4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a2f31a-390c-4ca7-8ea6-bdf289cc99bf",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc41f78-02d3-456f-b635-44f3be0bf224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1633b76-0604-4b34-a549-989d42e4708a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49e79ea-2aba-4db6-9942-8eac33bd8c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969584c2-d2c6-430f-b162-34f2d7ff4b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a299623-c402-431f-afbd-7fb30787bb63",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebcf917-428b-44d7-880c-8a9a8a538afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058ec614-599f-488b-a1db-4a1736d2d1e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f59159d-1b78-4bc8-b720-9f6a57fcaf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa96ba74-9b68-4e76-aa80-85fe1c33fe6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9606cb02-de1b-4fab-8cf5-41a9c663d3b5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fecb67-7244-4a01-898f-b5ce87a94b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd31f75-2d5c-46f2-bde1-daf26056f5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3f8e98-af41-40ec-8704-4932b143cb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395ccbdf-92b3-4358-a39c-7df69130b618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c46f081-c85c-47e1-80b3-1afa21123612",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf7e64e-897d-49b2-aafe-6d24e87940f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259ab09a-dc7e-4c92-bedd-30a738b8439c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b73b05-26b2-431a-aea5-1b8b7399edc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcde348d-c9fc-4001-b838-b91e797f3d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b32c50-2ee9-4303-929b-7a950898e110",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eceeabd6-b34d-4cd0-9c4d-6e8ec9042113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07d907b-cabc-4f1f-ab5f-355571e2b99d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b725591c-95e4-4ed7-93c8-b443a21444e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0c1580-50ed-41e5-9dc6-2ee5366a8da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0666cef7-09c0-4a1d-b79a-85a8fe654e1b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf58f27-85db-4d0e-b061-e71a9ec539b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab56c736-c120-4d0f-be72-820ad9d5b67c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b8fba5-9dce-4114-85aa-53a087ff89d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007afba0-6cd9-4b0b-bc7a-ad50a68371ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9433146f-6326-4c7e-8a8b-da289b247bc1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4742b998-c832-42c3-a026-d4e90ff70bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228a544e-bab2-4c06-9cd8-d9ee6d71db40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c0b402-e923-42b1-85df-0d98010959b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd31280-c4bf-42c4-9b0e-cd429206db41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa14a8a3-cc4a-47c5-8191-19e9571695d1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cb1884-a4a2-4913-a300-8ea5097680ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fca9f8a-b7b7-4dcd-8869-33602fe285e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694be71f-cf62-4b09-98e9-3dcf6882dedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48804bde-bdd5-4a8d-b5f4-c970e8511260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59eeeea-df02-49af-a21a-f54dbf1607fe",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6f9972-352c-47ee-bfd5-a44ad04ffdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e5b787-5686-4193-8049-8a34ef83b089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1ec4cd-c0f1-45d4-8ca6-c248f86e942a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa949197-4629-43b7-b88d-dcb57d348455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a29f1f4-6809-4472-a8b5-78ec901d44a0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99294f2-491f-417d-89e0-d59a973badd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f67a66cd-68c2-4165-977b-b619579ddfc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b56208-d453-4268-9356-335b32052f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ca15ca-56cb-44b8-8197-b2ed9d45d601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c514380-9cff-4dc0-b796-784e1ddfdc19",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4cea1a-cae9-4ae7-b13c-62f3c673ba35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a8d939-19ca-4157-95be-048edd0fc51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8c586f-4485-40ca-b70e-c2929d22a102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a0935d-abcd-4747-9311-9691b4b238cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3a09a5-84b6-4875-8eb5-24c4c817fb97",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6627949e-8751-42b8-95a0-a6d8da2d34f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be2c6f0f-b9b0-4cb1-839a-ecd382fbede4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1cd1f3-af80-4b16-b8cd-ac071c330d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2863bc1f-8722-46e1-a189-b72c21ab4939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9017670-e278-42d3-ba6c-20257f23e2d7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b762ea-85c9-448c-a093-5950bf5719ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "216e78d3-11e0-4b55-ab1a-433b7f68b44b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100723af-7893-44c9-8fc7-74c9e9b39caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2add4f-1ff5-45f9-972d-b2c1a81d6534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a02295-ecc6-4e6c-af0a-933636272c94",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf273dc-e056-426b-bba4-4e5f6f67931c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1ef26b-48ac-44cc-840f-430c2a149da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96b0e6b-f49b-4834-b622-48a151730532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e26c27d-3205-49d7-bee5-5280231189bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7471bb39-ccc3-40f5-8540-60c27e41d8b5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc66f1f-d7af-4923-8336-a8673b8e9284",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b360f2ac-69a8-4b5e-9a15-89a061ba994b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8835dc30-a870-4a87-945f-05ec7381e572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ad72cc-88e3-4005-800c-7871b3578a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbd1dc6-fe72-4787-88dd-e868dee735a6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985485d2-94c3-4d9f-b57a-69eefdef26c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bef938b-676c-4961-b7c1-f8c46c0471ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d052b485-467c-4f0f-ae58-e36ce41d1f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07f2af6-27cf-4490-990e-6fde4cb31208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85ffc54-b689-4963-9189-d5cd12db23e9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4dc228b-df58-4e74-9e77-5bdd1452564f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7df54e1-bb4c-48c6-85a2-3ace41bf2801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d5998a-a275-4f1a-8505-b2df74ef61d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca0e307-db43-4f94-9c3f-296e6cd13afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8241d036-ae34-44ac-9f6f-a7dec280595f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a11d1f9-71f0-476e-aff3-e00e72e904c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b7f5bb-e9c4-48b1-be36-cb6b07f25c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee740c5-ad63-4582-9cc9-6efcabc4549e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5972256-452e-4c81-b9d3-5bb6b284c0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f051c65-5362-4e86-b26f-dc6b29635869",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1175ad7c-d5db-48a7-ba30-92f57e2f5574",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33b09c9-0cc5-407f-aa68-0effa2a9bef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5309b6-1471-482d-af82-4a8ebce4fca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d773d0ed-d469-417c-a4c6-ebceeb5cdf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c808c4-b82c-47dc-81bb-ed116dff8667",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c5376a-8ff3-42d1-bd7d-7421c5fe6c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35c3cb4b-7868-448c-8d35-b15bc8761164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b206be9-e078-4e36-a8e1-c766a530d4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5540f28f-1edc-4eb9-86ab-ebf25c08b1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e04745-aaf9-4536-a06e-ceae88f63520",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543b3a59-a0fe-467d-8ead-d6309a3725d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaca579f-da1c-44a5-8ab3-65c3e3258f51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29af6d33-5510-4156-8867-fb0b38295304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f4724d-b973-4df5-8687-456a68d7f2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91756e1-55e0-4641-965f-aaa4b8bdc1a9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43883df-589c-46b9-8fc1-6bc203c02835",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe215ca-bdc9-4d4c-a784-ee77ee2f007d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f632b36-4fc5-47e3-8a19-776da96c55f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa63fdd4-8ae7-4d7c-ab2b-aeb629bee70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6502540c-3711-40fb-a025-32c9e6d11e45",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80db61a-a092-455b-828c-0d7a23f05d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "116d6867-89fc-4b97-a9c7-69be830dbd73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493fad11-e555-44f9-8e66-7f9ae756c997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74cf0d8-4b58-4292-b06f-ecf95f75517b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3289e817-4b8f-4aeb-bbce-11dd3adb0369",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f21e91-08a6-4ee4-8369-cc81125a90a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de5f8d6-c3c7-43f4-a73e-3fb2dc5fdbf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3e2ee6-3eef-444f-9857-7776b5d4c293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f848d5-f456-46c3-a995-688011746f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e768dec8-f473-414e-aef1-03064e6f0c94",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b43b91c-c2f1-43b7-9407-9b01c249862f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a73aceba-485c-463f-a6fc-e94b364c7823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ad2d6c-47be-4d1d-a8e0-a11ee62f4b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c00edb0-d090-4bf4-a3b4-841933f53a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843a709d-aafe-43e1-9bba-74e7f558719a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd7d570-10c7-46b0-856a-4bebdd53807b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed347bbe-97fb-47db-8ca2-2fce436804f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d30d00f-ce30-4d99-8982-f400fb4cd05e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ded9b7a-c42e-45b7-9300-98eff7f9dc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e139c37c-0d6f-40e3-b37f-45e6b6755f41",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935b1a43-36eb-480a-96a7-ab8c26cda626",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b79dc10c-598a-409a-809d-f27d85970dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27422c5-5254-4656-a64f-0a40e3ab948d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0452e6-9a25-4eca-9fe5-f79dc34a3404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bea013-141d-42ce-aea2-5ce9d22a0d90",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7c611c-fbf6-4044-a796-ce15fb1342e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a49b933-7969-4797-a8e9-747ac5313980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a512ae-065e-4127-8da7-210c48d2623b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea006811-53c6-4afd-94fc-240e055145bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b149aa8-2f36-4a62-a3ca-4ced94fd250b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d9fcd7-e41f-4c07-b5ff-1790b50ec275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d54b9b3-564e-4440-832b-80a78aa90d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5096f2a-6a41-468e-b8f8-658fe7182cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f938121-1f21-4812-ba68-2bb4a02c92b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935af89b-3ff5-46df-b3ee-5a74c20c7036",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca25413-e6da-4fed-b26f-50ffecbc6918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "155e2e17-d16f-433f-8ddd-598328a22b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05f1213-9e9a-49d6-a5a8-258f2838403e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba3f34d-870f-4dea-936a-6454b932c1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3554706-d51e-4a5f-80ff-5c2fde62762a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9446368b-f254-46f1-900e-935a7129edff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a9b539-0a39-4982-ad95-dfcdcff10411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91afcb16-4df2-4086-a6fb-cc060806f6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f14618e-2965-4d99-974d-3e576e907393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e9d189-30e4-45f5-8974-653981c9c87f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826d23de-c45c-464f-bc24-8d377e3473f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ae311c-5869-40c2-9130-5d3ff2b3e93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348c5c52-b156-4c92-abe0-fb07783b323a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445da5cd-5ca8-46ef-bbe7-cbd0035750bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f644dae8-c0f2-49ee-94af-be982f62e338",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7754a9-153b-4683-b5ab-3789b368a3f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "976a4635-22c4-49ee-a35d-2b3fd87ff0e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca4b41a-d5af-4ea0-8fb4-fa78148bbd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8734420-c65b-42c7-a37e-c04e079d6056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b17c832-daf3-43b9-86e2-e9094be80e2e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be7fe15-5ea5-4990-b605-fc836a34c29c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d9bc4d3-8662-4281-99ce-e94b7e0fa386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d7ae97-970a-4a4f-96b4-1faa3d7158cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db02f09-40dc-48a5-b3da-d0be34168d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8eaeaa-1c05-4dcf-8873-874743e77dc4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7761da79-4d2c-4593-9c98-363ddff0eed4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e027e044-8ea2-4ea0-a29d-9285aa6ccb5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac41cb29-0693-4f3b-9c59-7831e61aa0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4275111e-2f31-46c8-b5f5-7b4a98286825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcd8de6-0911-4366-90b2-9b9eaecc8c76",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0507fd90-81b2-415b-9ccf-87188245a1ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d23c70c7-e41a-4b87-8bf6-3fb9b1478ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15bb581-932d-4a39-aece-41cb31de6ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299f6979-d11e-4108-875a-4c39cece33da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f151490c-1efe-48ce-bd02-7b04efc052f6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7082e8a1-a6b9-4649-850b-8f4961c4a7bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43a082a0-5cf5-4d19-bb2c-8497e6f84ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabfd086-c31a-4395-95dc-dcd556cab13b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "519e0b6c-126f-49a4-ba28-7b4c2af8e2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1478c89b-c7da-400c-ad0c-a7a854df64f1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80613793-9c5e-4675-a3af-d7d2e08d0515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f4d44a8-f38b-4c8c-a327-8294429531cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf5556a-3140-4f6d-b838-592c2d8d2a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6e0bc4-fb46-486e-b06b-48bdff802e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d5e12b-b710-4f7b-861e-ad97a4ab65df",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813edc31-dcb4-49f2-86a1-6f70a32e0691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "767df10b-df34-4106-911a-76fd612dc9cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53adc607-88b3-4b07-b649-171211cad0d3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ebfd67-b2dd-4186-b6af-d70af7167ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad619bf2-58e8-4a0f-959c-109211ea14a3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2c4aed-1e2d-48c9-8e38-1cef01e53ad7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc9ca36e-1a9c-430e-9bdb-2efbcf0a0eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4609818-f513-4d85-bb00-b6a8ab0b1e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a96009c-d4d6-4f4e-af84-dac61a03f3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099b2d48-fac0-4cc6-a869-4b92b0504786",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d2eeac-1046-4c50-9c42-b1043b64bd1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ea20372-c6ac-4cfe-9f1d-1de054681e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bb348d-7acf-47ea-bb55-73e9a50fd114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28251cd-f3f7-4fdf-a17e-0ec432a40a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933b9461-2a46-4a09-a413-ff78ea74aa03",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d736c3-91d1-45d3-a08f-8bf399e7af57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "474e9c66-0ed4-4ef5-9a00-5a392992a4ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e195f21-d89a-4170-96cc-790cf646945f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589506a9-5bd9-436f-9d96-279027ee4417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cd039e-8de0-4f20-96c2-db355252c8a1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ca2c49-e152-45ef-af66-508a783c504e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7666dd5-04be-48c2-a8fc-4c17800ecf73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3566e9f2-bbde-4975-a9a0-5f862b50f048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d81a5b-3496-4b0a-a477-9eebefa5cebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434b5074-1304-4c42-91e2-4d4bba3f4401",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c1791a-16d3-49b8-8874-843929479d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8815bffd-f033-45ef-891e-08874a1572e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6de620-1bdc-474b-b66c-31ebfbe47c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22146575-e093-49ec-9d17-586ec475939c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a23330-9dc3-44ca-b420-117df0f27eea",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5587b42-29c5-4be9-a5a9-9e85730eaaca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec9000c-a94b-4489-ae46-3ecbc517c644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f4347a-2119-435b-bb6e-39fdbacae7f0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a82485-366e-41cd-a206-2f673fc6a22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca427406-1c67-4806-95a0-bbe19e42d74c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74f9ca9-fbc1-43aa-9740-98a04889c027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "627a4ed6-8844-45c9-a417-85051114741d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb207711-b55d-4aa7-88c7-56b82f6ff516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63938877-8866-4a7c-a2c7-0041a660c1b2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91e08946-f7fb-4e22-8e7b-d6c304a6a15c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99b18695-ad86-43f9-aa1b-adf016948626"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "095c3f8b-dcf1-4b15-8647-7a75f2f9ec89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b4bca57-c62c-4956-af64-9b0c5123924d"
                    }
                  }
                ]
              },
              {
                "id": "d8417be2-793d-41c7-b0ca-12de024b387e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a107583-bbda-498b-85d3-b2bef98b24d2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d109f031-c25a-434e-b2b3-d7238f2b1878",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e395879b-f7bb-4be6-a084-2ed1ea2fa07b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7f8c72-ffc6-45f1-b7ce-d18e87a800c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c852f44-5e62-4e24-8ba2-68514dfda58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310b6376-af68-4ae7-ab93-ee233a6ca4f9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebfa30b-7c7c-45e2-b0bc-56ab426e324d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "13b67491-a37e-44ca-b3aa-17907b5e7859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fbc56f-a8a6-4116-87ed-a26c6110e06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "971565fc-d5a6-40b3-ba79-acdffc9ea3dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bda4ee6-4574-40bc-b57c-54eb800cb00b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4ce4e86-4a2a-4382-8988-5f6a2e2ce92d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51955870-24fd-42d5-a26f-00360c05ee7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62313b37-c953-4917-adf1-293c9bacb521"
                    }
                  }
                ]
              },
              {
                "id": "ecf095fb-48dd-4625-9606-2ffa3bc76954",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9551b945-d93f-40d7-b382-8ff4bcb81ac6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e458c002-c31f-497e-9ab2-5db2a39e87e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e4e3177c-4daa-44df-8136-fd90b8a64d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be364a5-06f2-4c6b-87ac-f7775ee4eef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c24831-1714-4834-bf37-d5c4852bfcde"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "42bf25b3-e346-407f-89cf-f84ae5d703fc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "08634d26-f6cc-472a-8c71-c2e5ec409503",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6b93635-0aa8-4a07-b6a9-50d46ab9efdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5a3995e5-d740-4e4f-991d-1788eede42e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "813c1d66-6e84-4eeb-8f46-64d91ce90e86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d984276-f235-4d2b-9508-77c353272540"
                    }
                  }
                ]
              },
              {
                "id": "f7d9a048-93b7-4d6b-9ede-42d124a5ca7d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aba54965-0ecf-4337-bb0d-4dfc0cee114b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ce267c03-a77e-4b69-bf3d-ddd67f0a59b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae0768da-a123-4f12-9f70-c7bfab08e81d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fed21442-e5b9-47c5-8f1e-59d82873522e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2dc87fda-e7ad-40ae-853a-f6ba2bd13376",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "03d50944-c386-495d-aa29-1ab4245c3c56"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ccfb6ca-409d-4373-a323-837238c14496",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77f85244-857e-45df-be90-cc592c70d42c"
            }
          }
        ]
      },
      {
        "id": "3ed73ed3-44c6-409b-8d62-6d5c28aa6976",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f5153d55-f571-42f9-b5dd-4937e69735e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "adc42080-d804-4db2-aca2-797bfa9bd02b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a77e2bfc-af85-4b0e-99e9-a2227e3b3038",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17825b15-9ece-47ad-836a-a13d789be3bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "165bc818-6ebb-4d3d-b2e7-25c536d1b8d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c671ee5f-afd3-4d55-b3bb-d4a0abe098bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c4c7568-b7dd-425c-a7f3-2f2aff81d59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552800a2-e19b-4415-9e97-f177afc9a508",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f993c98-2492-426f-96dc-ff6ffa82da9a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f94fef4d-d85d-4466-acba-81c0f9152b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71703d0-5dfe-4622-9966-0248ebdd9809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ef4fc19-5339-4c37-9911-5655810ffc45"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac938a15-a912-4af3-8448-e3067a4bb516",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "434230e0-eb4c-4768-8299-07ee0ff8d2c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42cc3b5a-9a11-4cc9-a24e-c9ccceeb25e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf6cdc34-9979-4ee1-ae30-cfd4ea5f8a88"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd1f0096-4feb-4b78-a868-5b203d607f48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f522d117-5931-4402-96ef-0dddf0685ae6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b48dd9b-c4f1-49a7-87d3-55bf7918d9f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b09a664a-527d-4b51-971a-e00b6b6bb0e2"
            }
          }
        ]
      },
      {
        "id": "2bc726cf-45ac-413f-b4fa-ba29d65a4736",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b37f3efe-75b7-485d-a1dd-3663753d8559",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81e77d7d-0361-4cb2-9d68-d1b9a67a7372",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "332a4ed0-04cc-4e3f-852a-bda6ae12ba31",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2899be2a-4ae4-474a-9b5c-045f066ca478",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5475103a-3d4d-491b-b979-889341a797bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125b30ee-c497-4eba-8f52-f3270c6b6baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8724e0e-9e0c-4f02-83e2-5fbbbb9644e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca332cf-6902-4f9a-b6aa-a34da7f4e09a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4025d62c-0dba-497b-811c-b9ed15bf84e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f727edd0-11a6-4153-9e26-bc465838f838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3da678-60ee-4e5a-8a65-671deb53c044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7042ff30-ff25-4060-b955-63e2abf3043e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67c922f5-0795-40b6-a8e5-39a39fc7d516",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93eeded9-38d2-4883-817e-cc9418003e0b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acdb2e0c-1724-4e7e-9bf7-534ba9d50cb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e453812d-4399-439c-a134-e4ef9efd7fb5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97ab1991-cf32-4f81-950a-3c9a8bd88418",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "910a3fc5-53e0-428e-bad0-393d43eca6c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "585a9dfe-9426-41f1-bcae-b0bcbfc709a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bbab02c7-c7aa-4730-b25d-c5c3810ff165"
            }
          }
        ]
      },
      {
        "id": "e66fc17e-045e-4f5b-8be9-3a1caea16a51",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "91b66f96-bd3f-4a11-9e08-f82b3511853e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "620bd33f-155d-4918-9200-45a4bf291d91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36859b59-2caf-4bbc-8254-8ab11838962e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ee7ea8-ace9-438e-b90e-30f369bd7e94",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1616d3de-044c-4693-9d63-adc5a5994892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44df549-46e5-4a98-9858-7074eb22550b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd834a96-c750-4341-810b-af4e8c536f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6e5414-afe7-4718-9226-03e75737b3ba",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c6a90c-439c-476f-b5a0-62fbef3d7000",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bf98c0c9-0776-4462-b971-1c01f630e404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1376843e-b464-4caa-9ce4-d1fb597084f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9c0e2a4-bf58-445d-a947-d5315fb2185d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fc1c785-87a0-4105-a2e7-5ee5295f48c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8c2c037-53a3-4f57-a215-6ea370cf45d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57e0c450-738b-40af-82dc-53f7bef1112f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d20971be-0368-4034-8145-0c1a82c06b9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b938d1c-3be8-4c94-96db-c02e9ec75fd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5a7fca6b-0c67-4ca5-89b1-2fe755f646a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fbf9b4d-bbe0-43c4-8dcb-5e4aeb856609",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee4e054b-a1a5-44cf-92d8-489c7a4ffc97"
            }
          }
        ]
      },
      {
        "id": "946dfb65-b1ed-4eba-9664-8a4ebc271f98",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "558ddebb-fb91-454c-98d6-dcc1a98a7f26",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76a173a1-9985-438b-b9fb-bf9af0f767a0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "951e8513-a4ad-49ec-91ed-ae74fa967ca6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16a01dd3-acb3-4e99-a1e6-a4455181ffd1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e0036fa-9c65-4003-9bfa-46d9a766bfb0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 257.06153846153825,
      "responseMin": 10,
      "responseMax": 6635,
      "responseSd": 774.3708538484269,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684888664183,
      "completed": 1684888741796
    },
    "executions": [
      {
        "id": "9ce69649-ffc1-49a8-b6c5-c8eaed4d1775",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b16f1b8b-843a-439d-8f61-0f559382f14c",
          "httpRequestId": "401bf19f-d378-4dd2-a2a6-23a1fac3957a"
        },
        "item": {
          "id": "9ce69649-ffc1-49a8-b6c5-c8eaed4d1775",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "84e14dae-d2b8-40e9-a7e9-9ab8345bc58a",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 0
        }
      },
      {
        "id": "cab13471-49ae-4843-baf1-84375a41c24d",
        "cursor": {
          "ref": "07b999b7-a735-4e1d-bc9c-f4637d112ecf",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8025a36a-bcbd-44da-bdb2-d78937f067b9"
        },
        "item": {
          "id": "cab13471-49ae-4843-baf1-84375a41c24d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "da9be9ea-f92e-4761-a2ac-85bd9af912ea",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "2f4714b4-f1fc-4f62-bc9c-4c39088cd4f1",
        "cursor": {
          "ref": "377e65a4-f63c-4257-8879-42fb8f059490",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "acc0ba33-d09d-4e5e-b4ea-41c1187c9740"
        },
        "item": {
          "id": "2f4714b4-f1fc-4f62-bc9c-4c39088cd4f1",
          "name": "did_json"
        },
        "response": {
          "id": "06bc636f-e76d-494b-b1f2-25d0acddafbe",
          "status": "OK",
          "code": 200,
          "responseTime": 451,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c2e2d4-ff09-41c9-8c6d-06d18c21cda1",
        "cursor": {
          "ref": "026e86e0-b2ec-4c0c-8c31-232852d22259",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a1092dec-0cf2-4120-8898-113a08e3e2f7"
        },
        "item": {
          "id": "09c2e2d4-ff09-41c9-8c6d-06d18c21cda1",
          "name": "did:invalid"
        },
        "response": {
          "id": "e0adada1-9968-4620-b980-b8e4c1a698ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 735,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "09c2e2d4-ff09-41c9-8c6d-06d18c21cda1",
        "cursor": {
          "ref": "026e86e0-b2ec-4c0c-8c31-232852d22259",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a1092dec-0cf2-4120-8898-113a08e3e2f7"
        },
        "item": {
          "id": "09c2e2d4-ff09-41c9-8c6d-06d18c21cda1",
          "name": "did:invalid"
        },
        "response": {
          "id": "e0adada1-9968-4620-b980-b8e4c1a698ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 735,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "184e4794-56a3-4ab2-8e86-69a7432b7268",
        "cursor": {
          "ref": "b2c46d54-0a3d-4b2c-8fda-4517cb38e26a",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8909a21a-2976-4e17-9013-f78bd0b3d64f"
        },
        "item": {
          "id": "184e4794-56a3-4ab2-8e86-69a7432b7268",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "62dbb560-9ed1-4cb4-b7ec-c09218238977",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63d388d-b218-43a5-8ba0-f5c9da3678ef",
        "cursor": {
          "ref": "6d4160bd-57c2-4d34-8b2e-548323442460",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "85c4946e-fcf7-4b22-8689-d8cb46fa41e7"
        },
        "item": {
          "id": "f63d388d-b218-43a5-8ba0-f5c9da3678ef",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b2ffd750-6b79-480d-9ae9-f10a0a48afcd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8841193a-ebca-4845-b484-c0c1a9fd508d",
        "cursor": {
          "ref": "b897ba00-7aa3-4bc0-b0b2-2624d1a24a4e",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ccbabd46-dcd8-4149-a40c-bd80ece34dcc"
        },
        "item": {
          "id": "8841193a-ebca-4845-b484-c0c1a9fd508d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "80146a15-517b-4de0-ad71-7c98a488d8dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "67ef7b78-07ab-4fee-8cff-f7d9896d6044",
        "cursor": {
          "ref": "442c1a38-2d6a-456a-9819-e700914be716",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f7b687d5-2683-4117-b3e5-2b1636fd8846"
        },
        "item": {
          "id": "67ef7b78-07ab-4fee-8cff-f7d9896d6044",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2f0da90f-6966-4d3f-a472-5fcbaadf70f8",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "67ef7b78-07ab-4fee-8cff-f7d9896d6044",
        "cursor": {
          "ref": "442c1a38-2d6a-456a-9819-e700914be716",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f7b687d5-2683-4117-b3e5-2b1636fd8846"
        },
        "item": {
          "id": "67ef7b78-07ab-4fee-8cff-f7d9896d6044",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2f0da90f-6966-4d3f-a472-5fcbaadf70f8",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a8a918af-82d4-4c50-9732-1ca3bd99d5f1",
        "cursor": {
          "ref": "67f97d9b-0b3c-4be2-94dc-e0722649776a",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "23e23de5-5846-426a-9626-aef6bdf0d435"
        },
        "item": {
          "id": "a8a918af-82d4-4c50-9732-1ca3bd99d5f1",
          "name": "identifiers"
        },
        "response": {
          "id": "89600bde-a17a-47bd-b016-146599dc6142",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd5835c-560f-4d23-aaa3-baf6a78aa0e1",
        "cursor": {
          "ref": "93764274-a465-42af-815e-c1b1fc507af0",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "86ff1663-e8c5-469b-bd55-333a084459f6"
        },
        "item": {
          "id": "2cd5835c-560f-4d23-aaa3-baf6a78aa0e1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9d0c8172-f105-4327-9eb9-1bb0e1dd5f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd5835c-560f-4d23-aaa3-baf6a78aa0e1",
        "cursor": {
          "ref": "93764274-a465-42af-815e-c1b1fc507af0",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "86ff1663-e8c5-469b-bd55-333a084459f6"
        },
        "item": {
          "id": "2cd5835c-560f-4d23-aaa3-baf6a78aa0e1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9d0c8172-f105-4327-9eb9-1bb0e1dd5f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af5f23c-5081-44cd-84bb-ee26e28d41f3",
        "cursor": {
          "ref": "0f7ae78f-2db9-4405-9900-28c2cd0159de",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da0c5247-f80c-420d-ba32-c7f5392faa05"
        },
        "item": {
          "id": "1af5f23c-5081-44cd-84bb-ee26e28d41f3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3c063180-19c4-467d-8a88-dd1dbd34e6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c757103-44db-4c67-864f-3ddb52f050a6",
        "cursor": {
          "ref": "5a0ed5cd-a861-4464-941c-dcf5fb8e9b0d",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7280f378-208d-452d-8b5b-a5f16c76272f"
        },
        "item": {
          "id": "1c757103-44db-4c67-864f-3ddb52f050a6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9faf172d-830c-4ef4-903d-87a8e7cc21bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2dbd19-05be-4e41-bd12-7909d1b32aec",
        "cursor": {
          "ref": "c01edab2-b116-49c1-906e-d3decd6764eb",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c0a835b9-6a9c-43bf-839c-3d0de232e48e"
        },
        "item": {
          "id": "fd2dbd19-05be-4e41-bd12-7909d1b32aec",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "85af4c5d-818c-450d-bc48-a8a5db054986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353ecd76-dd2a-46b9-aaee-8ca113290c2d",
        "cursor": {
          "ref": "42734fa0-5e7c-48cd-8699-974a6df3d84a",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "284dd394-d386-4a87-a11b-bea01a4f417e"
        },
        "item": {
          "id": "353ecd76-dd2a-46b9-aaee-8ca113290c2d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d157d8a2-2fe5-49f4-8f97-202023d960ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e77b92-e5f2-47ae-8f3c-f6f1744e9db4",
        "cursor": {
          "ref": "615f6a39-c711-4b9f-a2aa-44a6d7245dd2",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8adbe2d4-abc5-4ae5-8a9d-1d2294e6df77"
        },
        "item": {
          "id": "c9e77b92-e5f2-47ae-8f3c-f6f1744e9db4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d682c98d-1fab-436f-949b-92dca4fd828c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d299ac-2c59-49fb-8ed4-76770f80e796",
        "cursor": {
          "ref": "4834d0f8-f169-4b33-b4bf-0f33f6aa89c3",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "67d08378-db6c-4191-b03d-0a72f407e5d0"
        },
        "item": {
          "id": "05d299ac-2c59-49fb-8ed4-76770f80e796",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e1a80fa9-3592-47f2-b349-984171f8a864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b81c6d-7e25-4dbb-85a7-5db5148764ec",
        "cursor": {
          "ref": "14cdf06d-ceaa-4753-9188-7efaad9f3fd0",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "39f109c9-3c51-419a-9333-46fe98a76505"
        },
        "item": {
          "id": "61b81c6d-7e25-4dbb-85a7-5db5148764ec",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c28f56d7-d12b-4910-8959-dfc68d5debc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2510b87d-8d07-4d59-9ea7-2aab2c6b7cdc",
        "cursor": {
          "ref": "040a5e18-f8a0-4228-b2d2-b28382ac1d62",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "100e57a5-a29f-4e6e-ab6a-95b6ac61efe1"
        },
        "item": {
          "id": "2510b87d-8d07-4d59-9ea7-2aab2c6b7cdc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "444cd649-866e-4555-b96e-7453b13b0f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad0ff76-477d-4ad6-9b06-086d87d8a5ec",
        "cursor": {
          "ref": "21a7bce6-34a7-43c2-bcb1-94bac91b7fd2",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b8572cf5-715e-433f-90b1-cc90ed94650c"
        },
        "item": {
          "id": "fad0ff76-477d-4ad6-9b06-086d87d8a5ec",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "15417f99-108e-460a-aa02-5dcd188ada26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af96ac4b-c5a5-4410-9a56-58992b9c932c",
        "cursor": {
          "ref": "1c7b11d5-fe70-40c2-a1ff-aa9264e7c31c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "138e3b09-cade-4400-ae00-23de4bc32c96"
        },
        "item": {
          "id": "af96ac4b-c5a5-4410-9a56-58992b9c932c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dec270e6-30b4-484e-b43a-076bc1cac704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e291ce90-745c-458d-9f0d-b379e495dcb4",
        "cursor": {
          "ref": "0267b392-ab1e-45b3-999c-efe3cb9d1456",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ec89e37e-2711-4f18-a7fe-0d3cc68dda64"
        },
        "item": {
          "id": "e291ce90-745c-458d-9f0d-b379e495dcb4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f0635775-104d-4aee-af00-aba18ea0082f",
          "status": "Created",
          "code": 201,
          "responseTime": 1934,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1d08a23b-2338-440b-ab7b-9459537a3a38",
        "cursor": {
          "ref": "c3ff6962-0ede-43e9-a8a9-ef8e1d0db385",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b87bf58b-01a5-4a43-9384-dccc17d19072"
        },
        "item": {
          "id": "1d08a23b-2338-440b-ab7b-9459537a3a38",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "34e6e1cd-5d61-4680-9130-74cb197692b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96aa3506-95bf-45d5-a6aa-9bef8e241dae",
        "cursor": {
          "ref": "6d96dccf-b22d-4ac7-a170-1ea325137afb",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "df786514-a2cc-4512-82f7-0a46ef4734e4"
        },
        "item": {
          "id": "96aa3506-95bf-45d5-a6aa-9bef8e241dae",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "494374e7-f8ef-467e-b578-b249d427772a",
          "status": "Created",
          "code": 201,
          "responseTime": 6635,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a4cedc28-62ff-4c52-9810-25890e4ac0c8",
        "cursor": {
          "ref": "00c40b0b-1452-4629-97b9-7ff9450ed534",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "712af05b-4ecd-4283-96fd-e6a1b2fee990"
        },
        "item": {
          "id": "a4cedc28-62ff-4c52-9810-25890e4ac0c8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "62a4a3c2-cfdd-406f-a4a2-6f97ea61febb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918a483b-67ec-4ea2-a437-0aebb0d96768",
        "cursor": {
          "ref": "16ae5822-6ed3-4e3e-a9d4-5b974a9f04e8",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "933de303-f630-4512-ab36-ca3ba19f955b"
        },
        "item": {
          "id": "918a483b-67ec-4ea2-a437-0aebb0d96768",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4e83a98a-3d88-4855-bf1e-9a6e597d2324",
          "status": "Created",
          "code": 201,
          "responseTime": 5149,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "bf9252fe-493e-49b7-b8df-a22a88546086",
        "cursor": {
          "ref": "2dc50f36-fa9a-4c53-9430-8fcd00abd788",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "db153cd6-29e0-47b4-8237-d9bd42945201"
        },
        "item": {
          "id": "bf9252fe-493e-49b7-b8df-a22a88546086",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7bc094cb-c1f4-4867-a316-340908a23ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692187c2-f2a7-4e30-afd5-dc1560e92c5c",
        "cursor": {
          "ref": "a1c6b8c3-222c-4ae5-86ba-f7ce0c7e6ed1",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e2ed6330-cf7e-4ef7-bd13-6b4927ea2309"
        },
        "item": {
          "id": "692187c2-f2a7-4e30-afd5-dc1560e92c5c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "89787855-da25-481b-ac9e-b9c3ecce3519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a630f437-a510-4adb-8d5f-7ae33857887f",
        "cursor": {
          "ref": "d60a1b1a-7f83-4243-aa04-d7f38c5b60db",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4b834791-d22e-4d69-83ac-7a6084b31c9c"
        },
        "item": {
          "id": "a630f437-a510-4adb-8d5f-7ae33857887f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8b433065-8a4b-4b04-8e06-aedbfae5068d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137074c5-f9de-4aa9-85ef-a18ba8ac9561",
        "cursor": {
          "ref": "d9fcedf4-fdf2-4527-81b8-0c15ede1070b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9ae063ab-26b6-411f-ac50-e9cbdbf2307c"
        },
        "item": {
          "id": "137074c5-f9de-4aa9-85ef-a18ba8ac9561",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4f51c3bd-6502-4b1e-8f39-137070155bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19cb7b9-cbf4-4a44-b111-3cdf54dc20d8",
        "cursor": {
          "ref": "c50b5fed-2acb-4cf5-912a-b1a9f3cf2a5a",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "69e16429-f305-4258-a3c9-83239ab5e883"
        },
        "item": {
          "id": "d19cb7b9-cbf4-4a44-b111-3cdf54dc20d8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "931f477d-482b-4b2f-9192-e3e32752b9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0994ad4-0543-467d-94ff-1b346cb569fd",
        "cursor": {
          "ref": "1c00809e-a98f-4557-98e4-35f65c239b9a",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b9d21a22-e8e2-4fa0-b867-1926d64940e9"
        },
        "item": {
          "id": "f0994ad4-0543-467d-94ff-1b346cb569fd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "be17dc03-1a3d-4c8f-8c72-31657a74cd58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c38ef29-e83a-4547-b5bc-82fd46e915f4",
        "cursor": {
          "ref": "8d6e875f-e4e0-467e-b50c-94398162fce8",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "99f1c33c-9c32-4196-90fc-f7809a68c582"
        },
        "item": {
          "id": "4c38ef29-e83a-4547-b5bc-82fd46e915f4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1e9568b3-0274-4ba8-b8a8-7d530cc6aee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67148a4f-311e-45fe-b1c0-85fadccd3d88",
        "cursor": {
          "ref": "ee735a6f-9505-4d44-bb6d-5438595cb1cb",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "98edc293-bbd8-4208-8461-72b16e9060dc"
        },
        "item": {
          "id": "67148a4f-311e-45fe-b1c0-85fadccd3d88",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6a6d4a19-1588-430c-84d5-083f7ae5d5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de03b14-f3c8-4c8b-b936-2c7f3435b5c7",
        "cursor": {
          "ref": "7dd28cd8-17ea-43fd-9763-395f7435da86",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe01188b-5af0-4913-a2b0-c973302e41bd"
        },
        "item": {
          "id": "1de03b14-f3c8-4c8b-b936-2c7f3435b5c7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a4d89950-f379-4412-928d-efa99507539e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a005b873-6a2f-45ae-854b-2ef754eaa263",
        "cursor": {
          "ref": "f50cf7d3-7539-47af-8fae-0e8b7a66b6a9",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8bbbcfe9-d62a-44d6-8da4-2e94a620ab65"
        },
        "item": {
          "id": "a005b873-6a2f-45ae-854b-2ef754eaa263",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "43d43702-3b47-49e0-995a-99a12f413883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804a4479-e4f5-40b4-ae8c-d78b1d30b389",
        "cursor": {
          "ref": "48143421-15ac-45c3-838a-b21c873ab0d3",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "badf953b-fda5-4de2-aab6-026014791571"
        },
        "item": {
          "id": "804a4479-e4f5-40b4-ae8c-d78b1d30b389",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ee03ddcc-9854-4bcf-8343-4d12c8d93490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c3fef6-2a35-4b39-9ee9-0ad6b3e3aa18",
        "cursor": {
          "ref": "2b993ef5-1967-4d02-9bea-7d81ed257509",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "412a8e12-ad94-47e4-917e-aaa305e9de8a"
        },
        "item": {
          "id": "e6c3fef6-2a35-4b39-9ee9-0ad6b3e3aa18",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "26da952e-c3b6-4423-945b-6d936fb468bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482a2f70-d69b-4e10-813f-107c37c12cad",
        "cursor": {
          "ref": "1d3294c8-af6f-4f11-a83b-a3b24e3feecd",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1f37f00c-d369-4f69-b41f-6bb5e6c44312"
        },
        "item": {
          "id": "482a2f70-d69b-4e10-813f-107c37c12cad",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c48f9ae8-e070-4a8d-959e-293e4ead4b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b064378f-68e4-4eab-ac7d-f5daa0d221ab",
        "cursor": {
          "ref": "c09e6b56-b00a-4365-aff4-6b05d79a9ac6",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e7973100-11f9-4105-af01-53986051c1b4"
        },
        "item": {
          "id": "b064378f-68e4-4eab-ac7d-f5daa0d221ab",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a9962fe7-abe0-45fc-9276-49978e25e50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826a3773-669e-42d0-9a0f-a464a44a10ff",
        "cursor": {
          "ref": "9e5d4585-151d-4d4d-a3e0-26d878d390a9",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cca5eb7e-ccb9-45c7-b3ab-9c0fd9d45e92"
        },
        "item": {
          "id": "826a3773-669e-42d0-9a0f-a464a44a10ff",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "810d321c-d1b1-4c5d-a69b-d1f33b3225ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 594,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2090694a-21a1-4e06-9355-0de48c552d55",
        "cursor": {
          "ref": "5b11fe71-6685-43ff-8e3c-497b77b8b623",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c28beb48-ff42-4f53-8e29-3de41fde431d"
        },
        "item": {
          "id": "2090694a-21a1-4e06-9355-0de48c552d55",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7c19aab2-15d0-4bbb-973c-65dc9fb82286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81ea2fe-2bfc-4e78-bff6-7d342f43a2c0",
        "cursor": {
          "ref": "2c893fb6-67ac-4aa4-bac2-eab62abdc9c8",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "aa3906d5-6ac3-481e-9bf0-129c7500eaed"
        },
        "item": {
          "id": "a81ea2fe-2bfc-4e78-bff6-7d342f43a2c0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2ac14fbb-e2c6-47bb-b61b-11ba5fc2e687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f34bbed-4da3-4b33-89f7-b34720f019e9",
        "cursor": {
          "ref": "6c6ae144-d86e-428c-beed-6066af3e80c1",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d848d280-3fa5-45a8-9cfe-2de1819a9396"
        },
        "item": {
          "id": "9f34bbed-4da3-4b33-89f7-b34720f019e9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0eb5e74c-6dde-42ee-ba9f-c2745ee1863c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d194369f-0f9f-41f1-9096-f29b01908329",
        "cursor": {
          "ref": "2b6cb54a-b8b3-4206-81fc-c41f2bd24660",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fcde7dd5-117d-4f44-b93a-5a7294ecdefd"
        },
        "item": {
          "id": "d194369f-0f9f-41f1-9096-f29b01908329",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3546d92a-5136-40c3-8b70-0bae3049bd16",
          "status": "Created",
          "code": 201,
          "responseTime": 2692,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a44e95f7-df3a-4f97-814d-c5b86e152a42",
        "cursor": {
          "ref": "ca09999f-2ed1-4d52-ab75-f1b517d89deb",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e6a785ff-cc6b-48e3-9058-bb477a59ea54"
        },
        "item": {
          "id": "a44e95f7-df3a-4f97-814d-c5b86e152a42",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f099af88-e4da-4546-9407-839fb421e6c3",
          "status": "Created",
          "code": 201,
          "responseTime": 2526,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8e373d23-014b-4108-9434-c27cdafbe4c6",
        "cursor": {
          "ref": "e0fb2a3d-eaf4-4fbc-801f-2a60570c84fe",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c2ead10b-438d-42de-a4e1-55113de4b4da"
        },
        "item": {
          "id": "8e373d23-014b-4108-9434-c27cdafbe4c6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bb50664e-d2a8-4f79-9bf4-45c0e68965a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2253910e-c90e-4672-8f55-f88513f6979e",
        "cursor": {
          "ref": "873a470c-7128-4006-85d3-eaee6bbc6f26",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c3998a80-a0d4-42c1-afff-93232ec254fa"
        },
        "item": {
          "id": "2253910e-c90e-4672-8f55-f88513f6979e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2a2a9818-27eb-4a8e-b500-b018f894077b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff0ca4e-6ba3-4876-979e-c795937ec350",
        "cursor": {
          "ref": "fd083e54-3e63-4986-a913-caab375e8c15",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6ca03f6d-cef3-476a-81ee-7c02070784c4"
        },
        "item": {
          "id": "eff0ca4e-6ba3-4876-979e-c795937ec350",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c2732e5c-d809-4e5f-be1e-b9960a014fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6da23ea-3714-44a8-9077-d3f7d103908d",
        "cursor": {
          "ref": "050ea76b-ca1c-443b-8858-e8d957ea8cc3",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bcba4e5a-fa31-4ff8-b4e2-56aeccfbf397"
        },
        "item": {
          "id": "b6da23ea-3714-44a8-9077-d3f7d103908d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "86e35434-58f2-4419-a27c-f4e90f9b4e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2210b74-a265-4a53-9b15-ecdbd84b31df",
        "cursor": {
          "ref": "2c6efda8-79c6-4412-8504-b4dd18c3e3b4",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c91cf7e8-4922-4919-9404-e7086dee7548"
        },
        "item": {
          "id": "f2210b74-a265-4a53-9b15-ecdbd84b31df",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5575f8db-5e74-4e8e-bfe0-4c262071e2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffbc5e3-af5f-4e2f-a193-6af76a6cbb83",
        "cursor": {
          "ref": "305c9697-8886-4dec-9aeb-761635aae12e",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8f9e6885-df7e-4f37-8aa6-1472ec597822"
        },
        "item": {
          "id": "8ffbc5e3-af5f-4e2f-a193-6af76a6cbb83",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dad368ea-fc5e-4f4a-9686-e647c522cbc5",
          "status": "Created",
          "code": 201,
          "responseTime": 2494,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3342b677-183a-4fe9-b055-b7aaf7a12dd7",
        "cursor": {
          "ref": "48d435f2-9fef-4166-b18e-4eb9848562bb",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3feebf55-222e-4d4a-8df4-862ab634adb1"
        },
        "item": {
          "id": "3342b677-183a-4fe9-b055-b7aaf7a12dd7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ea6337ee-b6fa-4c49-93fc-6b858c83b243",
          "status": "Created",
          "code": 201,
          "responseTime": 2653,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8eaecdcf-ce4f-465e-9821-646d9b7073b6",
        "cursor": {
          "ref": "aaac0269-b2d7-42f1-830a-e64a47c34eb4",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cdd590ae-f14d-482b-b9f6-ea0bc3ac1667"
        },
        "item": {
          "id": "8eaecdcf-ce4f-465e-9821-646d9b7073b6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "06c951a5-a5eb-4864-9ecd-1ff16953017f",
          "status": "Created",
          "code": 201,
          "responseTime": 2708,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "6293fe2e-1ae3-4908-9fb0-0a49070377be",
        "cursor": {
          "ref": "dd416514-cb76-4ad5-a831-87f727280b7f",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b95794a7-afef-44ab-a23a-8528f43e7006"
        },
        "item": {
          "id": "6293fe2e-1ae3-4908-9fb0-0a49070377be",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b1c71a6a-bbd0-4671-a095-7fdf3743c404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9c20ac-1d18-4098-97ae-e1c5e5d83b07",
        "cursor": {
          "ref": "c5ea10e9-11b6-4fb3-ac81-6c7328367f3f",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c6a2a8ba-ef3a-489f-94b7-b3b8804bfc02"
        },
        "item": {
          "id": "dc9c20ac-1d18-4098-97ae-e1c5e5d83b07",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "eba3a89a-c0c8-432a-b770-3ea5dfa2f2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3f45ce-fea8-44fa-a069-fe4fba3660ce",
        "cursor": {
          "ref": "ff819590-cb1e-4631-be77-7203fe7b0f63",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a2a720cd-b9ac-4ce8-b8b4-460682791eb9"
        },
        "item": {
          "id": "3c3f45ce-fea8-44fa-a069-fe4fba3660ce",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "75a58f87-72b4-4a87-8dc5-3e5dbf788890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3610b16-0eea-4601-ad89-c3d4e5479895",
        "cursor": {
          "ref": "f4122c23-5c35-45a1-bf98-2c968bddf68f",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e5cd10b3-4f59-42d1-8bd9-ed8eddd34f9a"
        },
        "item": {
          "id": "a3610b16-0eea-4601-ad89-c3d4e5479895",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a701060d-5ccb-4188-9146-732f8a7b18ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f7c66b-3c63-429e-848a-5b52f5517ae7",
        "cursor": {
          "ref": "c34d7835-caea-4d28-b0a3-1db4bf7204a0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "baff007e-d42e-4c52-8325-976c3ae570bf"
        },
        "item": {
          "id": "a1f7c66b-3c63-429e-848a-5b52f5517ae7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "905c66e1-7093-4d66-8b02-30b1812335e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f523a-8bc9-4447-ad6d-b40e2bd6dd81",
        "cursor": {
          "ref": "5e3c2d61-6d59-4678-bd3e-5caba690c4d4",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "73415cd6-eca8-41ec-8899-1b4f7bb88c4d"
        },
        "item": {
          "id": "066f523a-8bc9-4447-ad6d-b40e2bd6dd81",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "04e9cfdd-4d6a-4a4c-955f-7da524072c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cca9458-7676-4a3b-9607-cf5119d322d7",
        "cursor": {
          "ref": "9d27c751-1eab-4984-ac40-02de5141a0cf",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "36ebfabd-0daa-4548-914c-d70231e7aad0"
        },
        "item": {
          "id": "0cca9458-7676-4a3b-9607-cf5119d322d7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "37172029-6e2c-4d7f-af4c-7cd0b0e84d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcbfbb0-fe68-48ef-b601-c13586388623",
        "cursor": {
          "ref": "aaf03d18-d91e-4a00-a17d-1151d3a49aac",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "92821f79-7a41-4643-bcba-07c1d71ac63e"
        },
        "item": {
          "id": "ffcbfbb0-fe68-48ef-b601-c13586388623",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8cd8ec0c-8074-4fc0-83eb-5084803764df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30375d1b-4f3c-43a5-bd59-752dd6c88166",
        "cursor": {
          "ref": "16f67563-9566-4f9e-8efa-09a940b86dc4",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "56569710-9499-4f3c-94c3-abe51b58d7f2"
        },
        "item": {
          "id": "30375d1b-4f3c-43a5-bd59-752dd6c88166",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "efd68495-08f6-4d50-afe5-e19e6c01f3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c21586f-73bf-4bee-ac94-6325efde2623",
        "cursor": {
          "ref": "ff6754fa-1694-4133-824e-c1f461371e75",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8ef20d4a-ce50-4189-aeb7-5338eeb33f7c"
        },
        "item": {
          "id": "6c21586f-73bf-4bee-ac94-6325efde2623",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ce18e7de-af76-45bc-afd5-3c52b5bb85c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f858d39b-3fca-453e-bbee-18e4beda8897",
        "cursor": {
          "ref": "ef34f546-f327-4693-859c-d8935a62ecf3",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5f5d72f2-abea-46ea-8fda-176cffc08309"
        },
        "item": {
          "id": "f858d39b-3fca-453e-bbee-18e4beda8897",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bb8dec89-5f1e-4210-895d-f95a5300cd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e15bf38-8353-4642-b738-852497e86f04",
        "cursor": {
          "ref": "750bf8a9-6171-41c1-b760-b57316cd598e",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c12d065e-636f-4cb4-88f6-c3667f78fed7"
        },
        "item": {
          "id": "0e15bf38-8353-4642-b738-852497e86f04",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b45e18df-f611-46e1-98c6-f7ff08d7f1aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e4f5a1-7872-42f8-a49a-c14c78ec9457",
        "cursor": {
          "ref": "95cd1aa4-0708-44f1-8b96-073ff5732db9",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "12be8b0a-79cc-4b2c-b6f1-3c0b17c1fa9a"
        },
        "item": {
          "id": "07e4f5a1-7872-42f8-a49a-c14c78ec9457",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "53327627-ffb1-4ab0-bc77-4e452f7c436d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3ee01e-ac12-4fe4-9b3b-3feb6eccec1f",
        "cursor": {
          "ref": "40998135-0698-44cf-9d68-f6dd49d959d6",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f22f4412-e283-4150-a522-61a77f5c83b3"
        },
        "item": {
          "id": "0e3ee01e-ac12-4fe4-9b3b-3feb6eccec1f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "99da73d1-8c54-4e62-bdcc-c5285ba6b6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cca47b8-9592-42cf-b407-98ef65f00fdb",
        "cursor": {
          "ref": "923927dd-e82e-4034-b026-d20e5a76b592",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "90e3a1ce-b79b-4bca-adde-428fcac46119"
        },
        "item": {
          "id": "3cca47b8-9592-42cf-b407-98ef65f00fdb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bfb9ea19-3b4e-4614-ad2b-4ed1b7b953e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6189a3d0-1e9f-49ff-ae11-023d0d00f3fc",
        "cursor": {
          "ref": "84002e87-b8cb-4814-a58c-ab20595399e8",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d234a267-86bc-4bd8-8f08-a73e3947496b"
        },
        "item": {
          "id": "6189a3d0-1e9f-49ff-ae11-023d0d00f3fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "96b59bed-a8b1-4aeb-a6fe-624da284f906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48185956-b5c7-4d4c-a802-fb4cae00dc9d",
        "cursor": {
          "ref": "d010ac09-f541-4a36-a2d5-0a368981e551",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a454ef84-4857-4fae-9511-5245e84b0615"
        },
        "item": {
          "id": "48185956-b5c7-4d4c-a802-fb4cae00dc9d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0d60be81-88ff-46c4-900e-2ed5567a7efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a1be00-d803-44f7-ae4e-5162151c1c77",
        "cursor": {
          "ref": "b2f25a18-c106-4160-8413-b998840e2984",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "455145ef-ae2b-4128-abdb-780b8e4ff176"
        },
        "item": {
          "id": "48a1be00-d803-44f7-ae4e-5162151c1c77",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1d023de7-0bd5-4568-8db2-4aaf3b16c5c7",
          "status": "Created",
          "code": 201,
          "responseTime": 2759,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "bbe188f1-8762-4caf-9dcb-fb8893af4e11",
        "cursor": {
          "ref": "4ac655cf-2558-44ba-93ad-bffc47903e9a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "05671600-0dab-47b7-9cca-8683ebb259a3"
        },
        "item": {
          "id": "bbe188f1-8762-4caf-9dcb-fb8893af4e11",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "19191931-b1ba-4c94-8d51-3045c9e245de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84edc6de-dde7-449a-9721-1dec179d1e86",
        "cursor": {
          "ref": "732625e5-1a04-4967-82d5-2f92830f46be",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7be364f8-4c04-41e9-83bd-fe7b08c898e6"
        },
        "item": {
          "id": "84edc6de-dde7-449a-9721-1dec179d1e86",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a86ffaee-d810-43ae-acb7-3611a8a1648f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3c36a8-ba24-4529-8643-b403c325d299",
        "cursor": {
          "ref": "7f5be047-937e-43d2-8fb2-0e97a5344ff4",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8b12b314-c9f9-4667-af41-b4fdd9677f4e"
        },
        "item": {
          "id": "0f3c36a8-ba24-4529-8643-b403c325d299",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7df7463a-7761-49df-ab6d-bffd129f35b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfa0325-6813-4b45-908e-7c479e570dbe",
        "cursor": {
          "ref": "78f47f46-94b5-45f2-ad92-abaf6c801a6c",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bc792493-0142-476b-8b0a-8e2631200c68"
        },
        "item": {
          "id": "8cfa0325-6813-4b45-908e-7c479e570dbe",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "200de5c8-7e9b-47e7-b1bc-ec8d781f3752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e770734c-d9af-4179-b8be-90dad6a43b69",
        "cursor": {
          "ref": "07daa15a-f23d-4f4b-bc48-88589093ca26",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c52d0e7b-7a7b-441f-9d5f-2da72ec47b0a"
        },
        "item": {
          "id": "e770734c-d9af-4179-b8be-90dad6a43b69",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a1d3d05e-9d97-479a-b1e2-8f9182e1865f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68e8850-aeb8-4c70-86eb-16ebe211930c",
        "cursor": {
          "ref": "f8d0f8ec-bc83-4c32-9921-1c1c3170dea9",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a0279dfa-a97a-4f6a-98a1-c90f384ae1f9"
        },
        "item": {
          "id": "b68e8850-aeb8-4c70-86eb-16ebe211930c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "11317f03-ad3c-4ca5-a84a-b3b6bc2ba7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d174358-1eae-426c-9bec-9575e392b10c",
        "cursor": {
          "ref": "ec8bd296-c731-497c-95a8-cdcc80189dbf",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c0e91f48-5887-4dea-9989-2971fa2df73b"
        },
        "item": {
          "id": "7d174358-1eae-426c-9bec-9575e392b10c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1c360c34-dab4-4c34-8272-984c54f68078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3a559c-13eb-444f-b640-07cf834b0a8c",
        "cursor": {
          "ref": "aaa08af4-c649-4011-8e10-45fba9cd9bb7",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "af5fe186-f416-4a8b-bcdd-9e3203ff2dc7"
        },
        "item": {
          "id": "cb3a559c-13eb-444f-b640-07cf834b0a8c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c6d10234-31bd-49a2-bc08-10a0fa66242c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93b9ef6-6fa0-4bcc-a976-3d2c83e9ee6a",
        "cursor": {
          "ref": "575b2146-e9b6-4c26-a15b-d00632a49e81",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1c81733a-6e14-4b3e-8817-6092438958a4"
        },
        "item": {
          "id": "c93b9ef6-6fa0-4bcc-a976-3d2c83e9ee6a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "56a54d2a-8e05-4812-865c-4948577f1c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1a6130-6432-446e-904c-1954ad8f1554",
        "cursor": {
          "ref": "5475b5fb-6e5e-4f82-a5a8-45c7a25b68bb",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ef70edeb-7149-4ea3-841b-811fdcc24593"
        },
        "item": {
          "id": "dc1a6130-6432-446e-904c-1954ad8f1554",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4a8dd1c6-c93f-4a68-8ec5-3bc633db6f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4431201b-bcba-4fd5-a48f-3fe23eafa5f3",
        "cursor": {
          "ref": "b91756f0-441b-44a8-a2f5-0db42284a606",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "853c41e5-ac95-4fc6-ae86-20d73c5613fb"
        },
        "item": {
          "id": "4431201b-bcba-4fd5-a48f-3fe23eafa5f3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6f158ff0-ebf3-4108-931f-74d40ed96436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1150de32-c216-48f7-8165-25c1d81c649b",
        "cursor": {
          "ref": "02670d3e-d3dc-4551-8b09-f927b7b214d0",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c722a538-dc87-4f57-9abf-9bd561a4b3c5"
        },
        "item": {
          "id": "1150de32-c216-48f7-8165-25c1d81c649b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5f2de4fa-65e4-4646-98bf-b754fe5bc89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a925f1ba-756b-4dc7-b013-083d807eefe0",
        "cursor": {
          "ref": "74d281ab-7b17-4716-9295-96520412d438",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fa13f730-b2a1-47d0-8749-921a0b6fb912"
        },
        "item": {
          "id": "a925f1ba-756b-4dc7-b013-083d807eefe0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0b9e6666-9657-43da-a733-99c0990407b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc615806-bccf-4ed8-8967-c5818f4f9c9e",
        "cursor": {
          "ref": "66d9deb6-da36-4260-bb9b-9d9ae6d063c1",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0400a706-55c6-4589-97a8-2dddafc6da9f"
        },
        "item": {
          "id": "dc615806-bccf-4ed8-8967-c5818f4f9c9e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "47a566a1-4b68-49fa-902e-4b3094808f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33370bae-29fc-42ab-8581-7e5215f9193c",
        "cursor": {
          "ref": "e8771732-49b9-4dac-8388-535dd2e4af7b",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b58f88e0-127f-4d74-a95a-034b696e361a"
        },
        "item": {
          "id": "33370bae-29fc-42ab-8581-7e5215f9193c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fe58415b-9060-4ccb-a79c-724a102e7caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8992ac-8eab-4a9a-b42f-ddb31b83846f",
        "cursor": {
          "ref": "708da3e3-00d4-4453-a9a5-dddf25dd60c6",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "63427ab4-ce60-46d2-b378-66839d27e754"
        },
        "item": {
          "id": "db8992ac-8eab-4a9a-b42f-ddb31b83846f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0081ce48-6c82-4fe7-91ac-b279cf47c789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecc9466-803e-4f3f-8430-c357ab3f8769",
        "cursor": {
          "ref": "d7fd5c80-f09b-43f0-b642-78e588865033",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4c2881bc-0088-4586-9fdc-aa7f8e5b4429"
        },
        "item": {
          "id": "aecc9466-803e-4f3f-8430-c357ab3f8769",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "320c5fa0-1479-4f4c-8817-d2a55243cef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eee81a-8278-4c7d-b6d7-88236eb127c4",
        "cursor": {
          "ref": "7bc15b3e-d74e-433d-ab38-5fb59d444736",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9d42483b-b938-46c4-9ccb-5c56ca4a112f"
        },
        "item": {
          "id": "f1eee81a-8278-4c7d-b6d7-88236eb127c4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "77e5bb1d-c6a3-42e8-8caa-3984d3745bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce5756c-803d-4b38-a811-cb1c22de797b",
        "cursor": {
          "ref": "3a42c187-2dbe-43b2-8ae0-8cfe4157f50a",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c970bbcb-7ab4-458e-a196-a6ee5afc17d3"
        },
        "item": {
          "id": "8ce5756c-803d-4b38-a811-cb1c22de797b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3540b1f5-36ff-43c8-b3f5-b4542f8c0870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fc4b2a-b8ab-46b2-8916-95ce7fe94bbd",
        "cursor": {
          "ref": "97e385d9-050a-45b9-85b0-2dd65b8d2d7a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "92ad1f63-9deb-48fe-8a9f-23e91f2e1f77"
        },
        "item": {
          "id": "42fc4b2a-b8ab-46b2-8916-95ce7fe94bbd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b9b785ac-a462-4ae6-b77d-6776c47fbcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b25a03d-a51a-4bad-b712-7d9754851b71",
        "cursor": {
          "ref": "e4966bc9-9158-4e02-9f5c-b384ba22b42b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c9a84a6a-957c-4832-b51e-7f27388f62e9"
        },
        "item": {
          "id": "8b25a03d-a51a-4bad-b712-7d9754851b71",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b3f2758b-8fdc-4129-ac69-989a2e3d713c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4493ef7-c887-4b0b-991d-6ca934085566",
        "cursor": {
          "ref": "8068d1e6-4b3e-4aec-88fa-87536f5d89c0",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "43390c8a-1c21-41c0-8c28-f24e010ceaec"
        },
        "item": {
          "id": "c4493ef7-c887-4b0b-991d-6ca934085566",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b7285f30-b0fd-418c-af37-5a090bc0b71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386f0979-0eb9-43a4-9a75-3e5c1482bd8d",
        "cursor": {
          "ref": "c33348d8-fc43-484a-9be6-cbc7ccc68a5b",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8a464ea7-8368-4901-b009-4e56dac837d3"
        },
        "item": {
          "id": "386f0979-0eb9-43a4-9a75-3e5c1482bd8d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "388aaf58-4804-4e20-9b5d-92df453fb5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962027b1-d4dc-4397-953f-e52e79cd3415",
        "cursor": {
          "ref": "c04749d4-0d74-4530-9714-b4bd6ae99e33",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ea3939e1-c8fb-43ff-a071-1c8731f2ec37"
        },
        "item": {
          "id": "962027b1-d4dc-4397-953f-e52e79cd3415",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6f76af52-e89b-489d-97a5-506d864a4a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30702f5-3e38-4b36-8d3a-6db0f20e3837",
        "cursor": {
          "ref": "19267068-eddc-451c-9bb3-8a8535a922ca",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "085ebd68-3795-4c58-917f-f0b4e05dcaf3"
        },
        "item": {
          "id": "b30702f5-3e38-4b36-8d3a-6db0f20e3837",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7afa37f7-afdf-4eee-8443-4f9f8816f892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f246eb60-5c8a-467d-a9b8-3acd9ea63623",
        "cursor": {
          "ref": "480e843f-eb08-4f28-a1be-b751e5f80c73",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8d7bd848-6c47-4985-a51a-15e169c33a16"
        },
        "item": {
          "id": "f246eb60-5c8a-467d-a9b8-3acd9ea63623",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e819331b-7b17-4814-b9e6-f94cef554ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a08882-dfc6-49a5-b285-e96480c48143",
        "cursor": {
          "ref": "70d051ff-8b24-4ef9-89aa-4896d5ad8301",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "77b0d21a-607a-4f61-b7ea-b5603e31c035"
        },
        "item": {
          "id": "13a08882-dfc6-49a5-b285-e96480c48143",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "53c57998-16e0-4af8-94c4-3ac887454942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ad738a-2550-4db3-a8c6-116967ee2f8c",
        "cursor": {
          "ref": "029680d5-6d96-452f-ab04-ff3a7fa3a853",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "57be33fd-5239-47ad-9f2c-21a7cda466c2"
        },
        "item": {
          "id": "c9ad738a-2550-4db3-a8c6-116967ee2f8c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "946128b0-5de6-4dc1-9a1c-5120d4cd8389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d38bac4-a3da-4499-a442-50a642aba689",
        "cursor": {
          "ref": "40153752-a7be-4298-87ec-8ef088d6219d",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4de75fcf-4ecf-4023-89dd-78a5ecc4edf8"
        },
        "item": {
          "id": "7d38bac4-a3da-4499-a442-50a642aba689",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "43c5ac85-df16-41b4-808f-0bb47f6a6341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10df4dd-5069-4233-9f51-ad01ac65a72c",
        "cursor": {
          "ref": "2d2612b0-29cb-455c-af57-c593952ddefa",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7224dd38-6a41-445e-9145-c00772f0690d"
        },
        "item": {
          "id": "f10df4dd-5069-4233-9f51-ad01ac65a72c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "602251d3-eb93-4d81-9c1a-9ff8b15c32a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78d33ec-59fb-4282-b6bb-03aeaac187c7",
        "cursor": {
          "ref": "9d42044f-f856-4065-94d2-437ac1064c7c",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aff20888-e658-4a01-9e8c-e821257cde2c"
        },
        "item": {
          "id": "e78d33ec-59fb-4282-b6bb-03aeaac187c7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e51b3911-7680-4140-af6e-39f4e3e211ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "e3731f16-21d4-40ae-afd5-01209dea5947",
        "cursor": {
          "ref": "340dbe55-6c9f-438a-8ddc-9ceabace0d3e",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f05dde9c-6bb4-4c00-b159-4c0c8f81d9dd"
        },
        "item": {
          "id": "e3731f16-21d4-40ae-afd5-01209dea5947",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "bf19b524-8882-4fc6-abb6-35ad0b70025b",
          "status": "Created",
          "code": 201,
          "responseTime": 2179,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "89241378-0b92-4161-b699-cde297e6e080",
        "cursor": {
          "ref": "e853c0b4-bf8d-423c-9225-b2c8cc94d302",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6d471a8f-8697-4d4e-8c02-6783001ce412"
        },
        "item": {
          "id": "89241378-0b92-4161-b699-cde297e6e080",
          "name": "credentials_issue"
        },
        "response": {
          "id": "40179697-4b3a-42c2-8c8c-e9a9297da60c",
          "status": "Created",
          "code": 201,
          "responseTime": 2668,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d66719-cff2-4ee4-a3f0-157035145957",
        "cursor": {
          "ref": "52fcfb0a-904d-4d17-a0de-def3e523bc53",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1e536fa9-77c6-42e6-809d-58d52f89dccf"
        },
        "item": {
          "id": "03d66719-cff2-4ee4-a3f0-157035145957",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b7c33639-d1a8-426f-8140-89e236c96f88",
          "status": "Created",
          "code": 201,
          "responseTime": 2625,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fca7b5-04fc-47b9-8c9a-85841042fdb5",
        "cursor": {
          "ref": "ba5aea43-df7e-44db-addc-6f410d830c5a",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7dc3aafb-51cd-42db-ae7b-ed7eaddf4707"
        },
        "item": {
          "id": "b2fca7b5-04fc-47b9-8c9a-85841042fdb5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2a76cbb0-b641-469e-aad7-a5f651d78f62",
          "status": "Created",
          "code": 201,
          "responseTime": 2406,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "993184e7-d32e-4c83-8739-7fc4ec46c113",
        "cursor": {
          "ref": "4de24505-db86-4b35-9d98-15b96fc67de1",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6b123c0a-2804-4745-b10e-d52e309b976a"
        },
        "item": {
          "id": "993184e7-d32e-4c83-8739-7fc4ec46c113",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c68bed02-b2f4-43d7-a2de-c2cfc7a0d725",
          "status": "Created",
          "code": 201,
          "responseTime": 2507,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "906ad142-a5ce-4b50-9fdd-29e66ee7470e",
        "cursor": {
          "ref": "a2223924-0860-4f1a-87a7-98332fed674a",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7fbef3a6-36e7-40d4-8d20-6df8fb9df5ba"
        },
        "item": {
          "id": "906ad142-a5ce-4b50-9fdd-29e66ee7470e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "53f6a4cb-4587-440a-adb6-11a3c8227d5b",
          "status": "Created",
          "code": 201,
          "responseTime": 2428,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-24T00:38:39Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-24T00:38:39Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "672af039-d89b-44e4-9d97-8c3d25d8db60",
        "cursor": {
          "ref": "e8bb9ca6-0778-4c55-8412-61207c5c3327",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "89c92310-87d8-4b20-92a9-a22e417fec3c"
        },
        "item": {
          "id": "672af039-d89b-44e4-9d97-8c3d25d8db60",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c3f4da59-1a7a-459f-b253-48339dd2586f",
          "status": "Created",
          "code": 201,
          "responseTime": 2257,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfd8997-559a-40de-8be5-d9080d6529a0",
        "cursor": {
          "ref": "f2edb1b7-aa68-4e64-8a7f-c91122e9bc8e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "392aa421-9aaa-418a-9bbc-eb300bb42293"
        },
        "item": {
          "id": "edfd8997-559a-40de-8be5-d9080d6529a0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e7d94328-5ae3-4ed1-8b03-49b41aeeedd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfd8997-559a-40de-8be5-d9080d6529a0",
        "cursor": {
          "ref": "f2edb1b7-aa68-4e64-8a7f-c91122e9bc8e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "392aa421-9aaa-418a-9bbc-eb300bb42293"
        },
        "item": {
          "id": "edfd8997-559a-40de-8be5-d9080d6529a0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e7d94328-5ae3-4ed1-8b03-49b41aeeedd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec97f16-a697-4f54-bae9-19267a0b1854",
        "cursor": {
          "ref": "1f8a6a76-2e97-4fd3-ae51-aef345baff7b",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dfab52d9-a398-4d2f-8347-a3fc6f16f652"
        },
        "item": {
          "id": "3ec97f16-a697-4f54-bae9-19267a0b1854",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "663d0dc6-139c-4a86-b8d0-af02cc9055ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b39283-3a95-4ae4-b3a0-3036b1902133",
        "cursor": {
          "ref": "afdd94bc-236d-4697-ab4e-7dff4cd24cc1",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "668c2875-f266-49a8-a731-cade7cbf32ae"
        },
        "item": {
          "id": "e7b39283-3a95-4ae4-b3a0-3036b1902133",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66e110af-ef9b-4b50-8e4e-792a40adcf67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9863b90-6c04-45c0-be4c-a244087eacc4",
        "cursor": {
          "ref": "e9fdf91d-5d34-4c4a-a431-f540296503fa",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "20a1d4e9-846c-4871-b828-166d1c123cdc"
        },
        "item": {
          "id": "c9863b90-6c04-45c0-be4c-a244087eacc4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fad9984e-b029-4c3b-b3e1-174ff35bbef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d1a36f-b6f5-4483-aeaf-e784e4fb6843",
        "cursor": {
          "ref": "5989fd00-4e71-4095-8737-9d732e187214",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3cb3097a-ebe6-49ff-bd12-010a30252aac"
        },
        "item": {
          "id": "12d1a36f-b6f5-4483-aeaf-e784e4fb6843",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "94092478-d1b6-4f64-b45e-b04e7d389083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1987a56-ff1b-40e7-aa44-9a548857e068",
        "cursor": {
          "ref": "4b2c60ca-79b7-4a84-9955-aae2223c2d3e",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6726abd6-0204-4a79-94e4-db51615c6e35"
        },
        "item": {
          "id": "c1987a56-ff1b-40e7-aa44-9a548857e068",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7bf78f7f-cfbc-4cc5-9a71-02500e21cf36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8faaec3-d215-4793-b093-4ac7f00677d8",
        "cursor": {
          "ref": "3ab2bb07-5779-4c4d-b4cf-f70ae493679d",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c595f065-8d60-4a6b-93e3-a91cecb7cc32"
        },
        "item": {
          "id": "c8faaec3-d215-4793-b093-4ac7f00677d8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b2c6cbd1-ac06-4eb9-8e7b-87656017003f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb552bd8-6970-4ff3-a990-c233a4e22acf",
        "cursor": {
          "ref": "ee0cd843-4006-4752-a8dc-dcf072d66b30",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "78ac6712-b941-468f-906a-73d233212aeb"
        },
        "item": {
          "id": "cb552bd8-6970-4ff3-a990-c233a4e22acf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1dbb07f2-32c1-47dc-9425-74d6a2a457a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923e9208-572d-4a10-a8b8-c928ebe4ef14",
        "cursor": {
          "ref": "39e85676-69aa-439b-8205-4041dbe9f52d",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "05ec77f4-52c0-406f-a663-c7b81f2387ca"
        },
        "item": {
          "id": "923e9208-572d-4a10-a8b8-c928ebe4ef14",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "296ef730-833a-4f0c-b81c-31ccf0dfe516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357aa924-9c61-400e-9a93-016eacda95dc",
        "cursor": {
          "ref": "5e9900b2-f06b-43e2-9cb2-6bf0093334fe",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f9c3ff6a-fd5a-42c0-b1e3-7e7bef6870f9"
        },
        "item": {
          "id": "357aa924-9c61-400e-9a93-016eacda95dc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4f062ff0-c4aa-4333-9dbc-0f2c9281fcf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c3709a-2922-4942-88a7-d213e2f2d9d7",
        "cursor": {
          "ref": "6e54cd51-51b9-4dca-9f0f-7a77dac58015",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "650a6c01-b740-42c7-bde8-d545a9c28c28"
        },
        "item": {
          "id": "96c3709a-2922-4942-88a7-d213e2f2d9d7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b065b603-46ba-4a9e-9661-8668ba983914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e35bc1c-41d6-4af7-8837-eaadca8357af",
        "cursor": {
          "ref": "eb5aa584-9087-48b0-b3dd-a693bcb753e9",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "28a1727c-8aa2-473f-8aa7-f627cb6213f7"
        },
        "item": {
          "id": "6e35bc1c-41d6-4af7-8837-eaadca8357af",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0422d8b3-3255-4e76-8e6e-fbb5b19a0a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53273e02-41ff-442b-b7c6-dac4db753485",
        "cursor": {
          "ref": "30be591b-3f0c-4f12-861d-3fed564a82d2",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d6360aae-90e8-4d97-a33f-8ec0bd3c8154"
        },
        "item": {
          "id": "53273e02-41ff-442b-b7c6-dac4db753485",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9e47998f-028e-48f7-8e22-8bd7fef6192b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9adb393-5af5-4aa7-919c-07ed5ea6f542",
        "cursor": {
          "ref": "0bd51fee-46d0-434e-bc70-8b60625cc4ed",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ea83a00a-25f1-4caf-93bb-2cc3f0fe23ad"
        },
        "item": {
          "id": "c9adb393-5af5-4aa7-919c-07ed5ea6f542",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6d7e2b64-b723-4414-98f4-27d03a05e280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c5a512-5cd0-407a-a1b0-c0374ec57c06",
        "cursor": {
          "ref": "89feb62e-204c-487c-8bf3-5e8b99dec17d",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e7dfd1fb-2f4b-47f4-ac2a-b1473834d60d"
        },
        "item": {
          "id": "73c5a512-5cd0-407a-a1b0-c0374ec57c06",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7b632cc3-29a0-4dbf-bc6e-a8b5fb9ea5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881d28c0-e6ec-4ff5-b1c4-0660b38aeaf4",
        "cursor": {
          "ref": "92be4a21-048b-4d37-84f1-0fcaa1c3fcec",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a4d8c60d-a85f-4a83-a9e2-ae753c387406"
        },
        "item": {
          "id": "881d28c0-e6ec-4ff5-b1c4-0660b38aeaf4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "92c02303-cf43-46f4-a075-31073bccc769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f1fb65-aeef-46f6-a3d2-1255d79f4464",
        "cursor": {
          "ref": "fb43ca57-2851-4a6a-ad45-48dd20076974",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "08e3b03c-4e0a-40f6-8578-d87a9978a4e4"
        },
        "item": {
          "id": "a1f1fb65-aeef-46f6-a3d2-1255d79f4464",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "170473ec-db1a-4071-997f-aa378abc5e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2656f5c5-2701-4be9-aafa-1b7af4020f60",
        "cursor": {
          "ref": "9ea327fc-6f47-48da-a44e-3e3e050bd578",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "82e35dd6-da55-4023-92f1-aa1894528b07"
        },
        "item": {
          "id": "2656f5c5-2701-4be9-aafa-1b7af4020f60",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0e31cced-f30d-4729-8d6e-e0d4031839d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce65a090-1f5d-4bd8-babc-384c735fded8",
        "cursor": {
          "ref": "1e4e44b6-acf1-4c01-b229-0a52877632e6",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ff3465ca-5db5-4cc7-bbac-31e3bf08b47f"
        },
        "item": {
          "id": "ce65a090-1f5d-4bd8-babc-384c735fded8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1f7472a4-e9a9-409e-ae43-2b151693ef27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9850e6-702c-4b7f-a973-e49f7fd993ee",
        "cursor": {
          "ref": "18a678dd-c03c-4d68-907b-5805e7cce079",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "eaf3203a-9a0f-476b-83ef-551caa29f041"
        },
        "item": {
          "id": "ee9850e6-702c-4b7f-a973-e49f7fd993ee",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "20f17e01-de71-42cb-9b54-2d3e07e6fc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615d4c63-1d8c-4077-a3a7-b9c4d17a7db3",
        "cursor": {
          "ref": "fdcef66a-5144-4ffc-b5e0-b12538a5b9fc",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0c1fc2f9-737a-45c7-a84d-a3ae3d6c7765"
        },
        "item": {
          "id": "615d4c63-1d8c-4077-a3a7-b9c4d17a7db3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4932d827-c3a6-4bab-9423-68590fa94913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a2e611-f100-400e-9a1f-753cef5868ea",
        "cursor": {
          "ref": "2e28a18f-3344-411e-a3aa-611e54fde477",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f12df38a-4825-4def-ac33-baabf73b99be"
        },
        "item": {
          "id": "78a2e611-f100-400e-9a1f-753cef5868ea",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e2ca05a8-80cd-4bfc-b40d-e1328ef2c41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7085de-6de2-426f-b9ab-48b6c310f6a6",
        "cursor": {
          "ref": "b2b07fa0-20a2-4c62-aa6e-3b9903f3f316",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "402e866d-c93a-428a-b3f6-7361214be4cb"
        },
        "item": {
          "id": "5f7085de-6de2-426f-b9ab-48b6c310f6a6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "433a6364-2c38-44f1-bd59-7a53f231ecb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37779994-e239-42fe-8b37-cf6f99e48c3c",
        "cursor": {
          "ref": "c3fed292-7864-4773-81e0-7e55fe96809e",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4149911e-3a17-49d2-9ff7-d43363752ff4"
        },
        "item": {
          "id": "37779994-e239-42fe-8b37-cf6f99e48c3c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d836e2b5-a05d-4017-b0f0-89c6bc8f8467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dae96ef-f471-403e-ad74-fec77755ce6a",
        "cursor": {
          "ref": "4c138a70-f137-4184-a985-7962609a8013",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1c8d7cde-186f-4ef6-acb7-09032b9f7c57"
        },
        "item": {
          "id": "3dae96ef-f471-403e-ad74-fec77755ce6a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fd0dab9d-1aff-4ed2-b88f-9ac7713db5ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0942997-0eaa-446a-8dea-4a8b8964473b",
        "cursor": {
          "ref": "df0ac46c-f6ff-48c6-bc5b-80b9a7468b89",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2cb35d85-bf4a-490b-b6ff-6f92fcedb8be"
        },
        "item": {
          "id": "f0942997-0eaa-446a-8dea-4a8b8964473b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bd4cb4d8-91ab-4726-867f-a15be226869e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd0c798-eaae-4f10-af04-0482f9e713f1",
        "cursor": {
          "ref": "3c132f50-035b-40e7-ae4e-89c90510fe78",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "32b89b72-2aa1-49d9-821b-710431eaf40f"
        },
        "item": {
          "id": "fdd0c798-eaae-4f10-af04-0482f9e713f1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3fde75a3-7552-4086-b914-08faf216ab40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0765a48-768a-4deb-8ebd-b2b51f457b28",
        "cursor": {
          "ref": "04c253cf-e7a2-48c6-bde1-4b9f3eefff24",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "37d34450-e6ac-4250-a6ed-03a3b2ba2fc2"
        },
        "item": {
          "id": "f0765a48-768a-4deb-8ebd-b2b51f457b28",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "64dcec2e-f31d-4095-b604-65f46f1eee33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b14771-eb9e-477e-8a87-5d78aaad129a",
        "cursor": {
          "ref": "001a3c26-b226-46a9-9eda-05a1d5239e69",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1039a98d-d47a-4f4f-ac26-325876547d89"
        },
        "item": {
          "id": "70b14771-eb9e-477e-8a87-5d78aaad129a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f20bb16e-b77b-4970-bfe8-3a51d1a927ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32dbfd69-8e03-4bfa-8f36-24f2957aacf8",
        "cursor": {
          "ref": "414f63e8-cec9-4fe7-ba1b-cda822fe51b4",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d60bcb85-a86e-4968-9549-3adfd0c211b3"
        },
        "item": {
          "id": "32dbfd69-8e03-4bfa-8f36-24f2957aacf8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fb66ef8e-9cc9-4cff-95b6-91349e89b0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6279341f-06b8-4914-bce8-a18861090910",
        "cursor": {
          "ref": "654fc3da-df51-490e-adcc-ff373a4efdca",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3c99a812-45ac-4c73-a29d-355e3ba4c4f1"
        },
        "item": {
          "id": "6279341f-06b8-4914-bce8-a18861090910",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c5435662-b56f-4134-b55f-f9c23cf2c6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5ad698-771d-4822-87ee-f473e86b473a",
        "cursor": {
          "ref": "bc5120c5-ef25-4f45-b018-4c9c0d940944",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "68788e45-9c3b-49de-a689-ff4aefdcb20c"
        },
        "item": {
          "id": "fe5ad698-771d-4822-87ee-f473e86b473a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d6e1e127-2d84-4f5f-84de-42bdaa3ce8e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ec3149-c252-4228-bbc3-3f1f7383605e",
        "cursor": {
          "ref": "39fbebed-24ee-4edd-8ff4-219d68139d84",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "47145522-a070-4356-a653-244f8649c4bf"
        },
        "item": {
          "id": "20ec3149-c252-4228-bbc3-3f1f7383605e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2e635dc4-ec44-410f-899e-5d28b0ea38e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5deeb692-cb28-464f-a4b5-2730199cd87a",
        "cursor": {
          "ref": "2a36da74-c7aa-4daa-ade3-e4b03d646511",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "66602999-c283-4d1f-a70a-340069cba8a9"
        },
        "item": {
          "id": "5deeb692-cb28-464f-a4b5-2730199cd87a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "618208ba-dd71-4a53-9119-7b5b965ead81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "a49d74d4-66fe-46f4-a594-c673954a13b5",
        "cursor": {
          "ref": "4689c922-dfa5-4eb6-8bc3-49d47fba0609",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "70a24e11-e270-4cdd-89a1-382a111f9e4b"
        },
        "item": {
          "id": "a49d74d4-66fe-46f4-a594-c673954a13b5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b6daa511-7233-4aa0-a3ff-1ec7ba5bb671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49d74d4-66fe-46f4-a594-c673954a13b5",
        "cursor": {
          "ref": "4689c922-dfa5-4eb6-8bc3-49d47fba0609",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "70a24e11-e270-4cdd-89a1-382a111f9e4b"
        },
        "item": {
          "id": "a49d74d4-66fe-46f4-a594-c673954a13b5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b6daa511-7233-4aa0-a3ff-1ec7ba5bb671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8967b31a-c7dd-4736-bf2b-ad01b7735e58",
        "cursor": {
          "ref": "02775ee4-5ee1-4165-93ef-210ead0e7c90",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "232fcf44-4d8a-464c-90e6-ca4dfecf1626"
        },
        "item": {
          "id": "8967b31a-c7dd-4736-bf2b-ad01b7735e58",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d9fb0023-5d11-4dc5-bbbe-8cef78467aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482d9b91-e4d4-45b4-842e-c60bfbbade60",
        "cursor": {
          "ref": "585df60d-2910-490a-b3e1-8f18072ece7b",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9c8868af-68de-48f9-a15e-d8827f5930ca"
        },
        "item": {
          "id": "482d9b91-e4d4-45b4-842e-c60bfbbade60",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "19f42b8b-7695-4c16-9495-c9ff401c3b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992b88d0-88c0-44b4-951e-8a6483c303f5",
        "cursor": {
          "ref": "d9936cf4-e36f-499c-9f3d-125544190152",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f483d3ac-4355-4c87-9e7e-1b640dcc62d2"
        },
        "item": {
          "id": "992b88d0-88c0-44b4-951e-8a6483c303f5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7bec2a0d-3022-4224-8c26-07301e011a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c874556-186d-4b29-aff9-d728a7dc4d45",
        "cursor": {
          "ref": "f50cce8b-684a-42ac-a326-e32754c798b6",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9635d4a3-d937-48b9-9e86-8d570412251e"
        },
        "item": {
          "id": "4c874556-186d-4b29-aff9-d728a7dc4d45",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2fcfdc7b-f69b-49fe-a929-28a2cde2e39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f815ccc8-fc16-4765-be03-9aa1089d5fa1",
        "cursor": {
          "ref": "510a18c0-f42e-4794-9aaf-47826995800d",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d647d90b-7779-4a46-b553-cd70e5d19cba"
        },
        "item": {
          "id": "f815ccc8-fc16-4765-be03-9aa1089d5fa1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "406cbf17-b8c6-4dd8-8631-223c49ed426a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0170c1ed-184f-4586-8386-fa1c620bcb65",
        "cursor": {
          "ref": "a570a42d-3722-4312-bac1-eab9b24a0bf0",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c26b19d8-ce7d-4047-bd34-3e4ae9f16cab"
        },
        "item": {
          "id": "0170c1ed-184f-4586-8386-fa1c620bcb65",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ce98d444-3bef-49ae-8469-42fc24970a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce541600-aab5-4e0c-9251-8fc30bab0c04",
        "cursor": {
          "ref": "23ffb4aa-2c0f-403d-a1c5-3fef82320bba",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bbf8d9f0-553c-4f3d-82b5-d9ef0850660f"
        },
        "item": {
          "id": "ce541600-aab5-4e0c-9251-8fc30bab0c04",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "484e9278-56fd-4da1-aec2-a5c89a66bfc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99024134-edf4-4fdc-82b5-5eac0dbcde4b",
        "cursor": {
          "ref": "36bc61b0-43ed-4275-97bd-37f842e19177",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b66946b7-a55c-4bc2-9f8e-00ca3cffda30"
        },
        "item": {
          "id": "99024134-edf4-4fdc-82b5-5eac0dbcde4b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f5967b83-eaee-40c0-8782-2c16e33863bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6438b1-237a-402f-ab56-a1fb9f9d1271",
        "cursor": {
          "ref": "834ec973-620e-45d5-b6c0-19fecd9be557",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b7ce72a5-315c-4b52-859e-3a22a2299a64"
        },
        "item": {
          "id": "bc6438b1-237a-402f-ab56-a1fb9f9d1271",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cb893b38-0b4f-4afc-b7d8-ee7a58246250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33908b2-ca9d-4630-a4f3-edf30994b426",
        "cursor": {
          "ref": "0a97a730-2cfb-441f-af67-368238b651e6",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "aa92453a-2d97-4ed7-b9f9-1fd460bcd9f8"
        },
        "item": {
          "id": "e33908b2-ca9d-4630-a4f3-edf30994b426",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ddc70edb-f45e-40eb-9f44-61dd295a7b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76c5326-f6b8-4ae2-ac25-399733791411",
        "cursor": {
          "ref": "898f31a4-10ac-48a5-873b-bf15bfb67695",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e9b6499e-4001-4f67-bd55-b052a027422d"
        },
        "item": {
          "id": "b76c5326-f6b8-4ae2-ac25-399733791411",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1e6a8ae4-9a15-4bb4-bf7b-aa826b021089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e583ba4-bba5-48e4-afd7-f41e5eb58616",
        "cursor": {
          "ref": "6c53c8e9-dd9d-4cb8-a7b1-80e7179fdb9a",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ed27768a-55dd-48a8-97a9-93662bdadcd8"
        },
        "item": {
          "id": "2e583ba4-bba5-48e4-afd7-f41e5eb58616",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fa17fe69-3a1b-46ff-b187-293e4618e3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6423d6-7e06-4699-8aa3-dfda15268d9c",
        "cursor": {
          "ref": "b82e692c-31ce-49b4-85da-61b2b0508578",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5d21d1cb-5ac5-4cf2-80b2-eac0aae7bd5e"
        },
        "item": {
          "id": "0c6423d6-7e06-4699-8aa3-dfda15268d9c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3dd11aac-260d-4c90-85a1-daf317d4026b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681a87bd-7c86-4121-af0e-1ce5ecdf59d8",
        "cursor": {
          "ref": "16067e1f-688a-4061-9e86-3d16d6e8caeb",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4460dbda-b860-4b55-a0e3-85d018235e95"
        },
        "item": {
          "id": "681a87bd-7c86-4121-af0e-1ce5ecdf59d8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f7973d7d-990e-4bbb-8900-38288be00093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b4e069-598f-48c6-b204-e1218863d244",
        "cursor": {
          "ref": "0eb0168d-e6bc-43cd-9ccb-7f2b7cffaff0",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c26782ee-89e8-4741-90df-3b36a944c0b7"
        },
        "item": {
          "id": "e2b4e069-598f-48c6-b204-e1218863d244",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "657f0928-05cf-446c-b5af-5eca92d33e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be18df21-28f8-4695-ad41-5ffc90511e0b",
        "cursor": {
          "ref": "ee07915a-5c74-45ee-9ea7-ded35449e1a3",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "bca73b04-9f0b-415c-a069-681dd4eed94a"
        },
        "item": {
          "id": "be18df21-28f8-4695-ad41-5ffc90511e0b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "92787054-60fb-4013-bf1a-f9c63c5f80c9",
          "status": "OK",
          "code": 200,
          "responseTime": 329,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "b2128268-ce7d-4acf-b9ca-f708f6315689",
        "cursor": {
          "ref": "6a6cd3d2-be39-4176-825f-41bf26a78bd2",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "eca1b48f-12d3-4b82-8ead-ff9096c53524"
        },
        "item": {
          "id": "b2128268-ce7d-4acf-b9ca-f708f6315689",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9facca44-8ed7-4b8a-88aa-3d2dbafd4ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bbdb12-0f2c-4cae-a272-18670e08870b",
        "cursor": {
          "ref": "5074d835-d5e2-4678-a5e0-fe4c798a8fbc",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f29aede0-63f7-4b28-8491-29cb8d0027a8"
        },
        "item": {
          "id": "b6bbdb12-0f2c-4cae-a272-18670e08870b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "130af436-b155-4fb1-8648-1561a5d2015c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7770362c-18b3-485d-84d5-8ac6a826e48c",
        "cursor": {
          "ref": "641eaedf-3fb7-48a5-b478-be034b21ec6e",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "80628c02-e19c-4f64-a15b-b9b7bb2f5645"
        },
        "item": {
          "id": "7770362c-18b3-485d-84d5-8ac6a826e48c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1fa9eb8c-14e2-43f4-9363-18128bf86dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4ef57b-edd2-4edd-8b10-3c557285c28d",
        "cursor": {
          "ref": "05a6d71f-1c8f-4fee-9f0b-88775c8402ae",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fc2cd5b7-db16-4b9f-81f8-a0f864fbb92a"
        },
        "item": {
          "id": "9c4ef57b-edd2-4edd-8b10-3c557285c28d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a884f7a5-4305-4e4f-a361-8afdae13c88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80e14ec-4a39-4225-8909-f49d00d5c7a6",
        "cursor": {
          "ref": "cc7b60bc-1383-49aa-80f3-dbc33ff20444",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f3eba977-d362-4169-8146-113d2ca1f50c"
        },
        "item": {
          "id": "c80e14ec-4a39-4225-8909-f49d00d5c7a6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c3e11751-9b03-4540-9b12-2562a7434d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5f8b3f-6f4e-4cee-ae46-004517886150",
        "cursor": {
          "ref": "a257401d-fa1b-4efe-a963-0ad0fe011875",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "de95ce75-3de5-4ec0-9edd-ada7a1eb9326"
        },
        "item": {
          "id": "5f5f8b3f-6f4e-4cee-ae46-004517886150",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c73942e8-179d-458e-a241-8f81b879105c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c98c2f2-6d11-40d1-9b83-9646795b9fc5",
        "cursor": {
          "ref": "6b2ccc67-2aa8-447f-8f61-27be9aae4247",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "371181e0-9cd9-4fac-bbd7-d4c79906e018"
        },
        "item": {
          "id": "1c98c2f2-6d11-40d1-9b83-9646795b9fc5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a4131835-9308-4447-b7c1-836083110c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e53aab9-d5de-4adb-acce-dcdeaba2dcdf",
        "cursor": {
          "ref": "95eec235-8bf0-4846-84d2-17d1a6eaa8cf",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "58695d74-171c-4836-9ab7-4396c465ca46"
        },
        "item": {
          "id": "7e53aab9-d5de-4adb-acce-dcdeaba2dcdf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5fae73e5-15b2-424a-b04a-6898eae22fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772ff6d3-733e-492c-8866-1337f17f7a5d",
        "cursor": {
          "ref": "f6fbbf2c-18b2-42a3-8aa4-b5ad984f99f1",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d7c1f677-b6b4-4a59-860e-c56939184ae7"
        },
        "item": {
          "id": "772ff6d3-733e-492c-8866-1337f17f7a5d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "490b4b0b-d2fe-497e-82d2-59e4dee7efc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6840df7-1446-4562-ae51-6baa3c736b02",
        "cursor": {
          "ref": "4813148b-e5bb-4ee4-b5f2-a20c7fc0f138",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9e841d0c-bb55-4bb6-8a0d-3a46a00dc778"
        },
        "item": {
          "id": "b6840df7-1446-4562-ae51-6baa3c736b02",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bf326e4c-5a20-4e86-ac19-72894111922c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abde5738-0f39-4fcd-bf46-9f00804c21d2",
        "cursor": {
          "ref": "0bc739fb-6ab3-42af-801a-e4c97a7735ad",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "749d4f7f-2eb1-472d-b6c3-919b0d20dbdd"
        },
        "item": {
          "id": "abde5738-0f39-4fcd-bf46-9f00804c21d2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1a10ef3e-0ab1-42ea-9f48-ae21d4b1df0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bce31e1-cb5a-40d1-9f99-b35a27633a0f",
        "cursor": {
          "ref": "8f377cc6-5c86-4fb9-93ac-42e5f4de1699",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7486186f-794c-466a-b5cd-43864fe86d87"
        },
        "item": {
          "id": "8bce31e1-cb5a-40d1-9f99-b35a27633a0f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d29b32fd-0863-4949-9b65-ce14544c780d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089066ae-272c-4c98-aff5-b8c68dd3d765",
        "cursor": {
          "ref": "f37725ef-b14d-4dc5-a41a-4cae3b7ad181",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7bff9940-2143-49c7-8b38-5248caec3db9"
        },
        "item": {
          "id": "089066ae-272c-4c98-aff5-b8c68dd3d765",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2c6485d3-6807-444d-b16f-ce2642d5f1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabd5450-b6ba-434e-896a-4522c39ecb95",
        "cursor": {
          "ref": "b2ec9eaf-c95d-4209-9e8e-203fa79c8944",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "747e54db-fa5d-4c77-8365-e16f4fcfda04"
        },
        "item": {
          "id": "eabd5450-b6ba-434e-896a-4522c39ecb95",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3645f10a-bd03-47ab-aff2-5db6648916dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af22262b-d7d7-4236-88a4-07a80839b72b",
        "cursor": {
          "ref": "aa725603-788e-4dc2-af14-0e911b94dd27",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5991cf2a-1990-4bf7-809a-f38a0ffbb07b"
        },
        "item": {
          "id": "af22262b-d7d7-4236-88a4-07a80839b72b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b07e0270-1a57-435c-b966-53e158b773f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d264c51-0b53-413f-9f1b-a359f9256dc5",
        "cursor": {
          "ref": "bcc687dc-646e-40a8-b800-a02241443dc1",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "164d1ada-d106-4a23-9e5e-20fab09fae5a"
        },
        "item": {
          "id": "5d264c51-0b53-413f-9f1b-a359f9256dc5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5885f1a2-fdec-4bf2-83a1-7837faef9c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6145172d-aecb-4c73-860d-8bb7ae74b23c",
        "cursor": {
          "ref": "85ea41ee-3cf7-47c0-a7fa-db74d58ac49d",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ae746b9e-d182-495c-acae-7824a26fc379"
        },
        "item": {
          "id": "6145172d-aecb-4c73-860d-8bb7ae74b23c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "684af80f-566f-4f9d-b399-4eac07b43dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21913fbd-5436-4103-b754-009e27e3bac8",
        "cursor": {
          "ref": "391d10d6-7c5c-47e2-afcf-033e0d1892e9",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dc9e2e19-5d89-45f4-880a-34b675baf894"
        },
        "item": {
          "id": "21913fbd-5436-4103-b754-009e27e3bac8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a1076dd4-833c-4096-b96f-d6efaebef3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddb709b-c9f8-4c01-b15b-4346cdf0ae16",
        "cursor": {
          "ref": "f4caa80f-7138-4bda-bf10-ea010091dbe1",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7b779790-1d7b-4d25-bcc2-e922775ad8d5"
        },
        "item": {
          "id": "cddb709b-c9f8-4c01-b15b-4346cdf0ae16",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "31adc70c-948c-4c54-a746-10e1d85c8781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b214d62-fc68-49f3-8195-2d3aaf3b72b0",
        "cursor": {
          "ref": "70fbb9c5-d06a-4b1a-bddf-6c1072a56c69",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2e80cce0-f71d-4261-9a58-29b089f930c1"
        },
        "item": {
          "id": "0b214d62-fc68-49f3-8195-2d3aaf3b72b0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "beb9244f-2561-4d69-b4fe-500d503e98d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f9d7fb-f901-48c1-812e-d5712b39d047",
        "cursor": {
          "ref": "0fc6d66e-bfe8-436a-8fe6-c5600de99043",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fe34bc88-16fa-4129-886e-154bb546a8b3"
        },
        "item": {
          "id": "88f9d7fb-f901-48c1-812e-d5712b39d047",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ba106e4e-0c29-4d35-a827-4bab551d905e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e732c9bf-1212-44c5-9b0c-93d61badaceb",
        "cursor": {
          "ref": "236c42f2-65f2-45c1-b9cb-2c7348f3d6a7",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7a4bb232-ec6c-45bb-8216-b0216009414e"
        },
        "item": {
          "id": "e732c9bf-1212-44c5-9b0c-93d61badaceb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "80b3b12d-94ab-4389-a40f-431b8351433c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11a7e81-2907-4de5-9367-76099e0b984f",
        "cursor": {
          "ref": "9f7f9e75-3663-4840-8372-ede5759e90eb",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9e474d55-b65b-477f-88d7-4e0c7398de53"
        },
        "item": {
          "id": "f11a7e81-2907-4de5-9367-76099e0b984f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9f56e8b7-0bae-4d3f-b363-0a9473b83ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8191296a-e91c-4637-8ecc-ae9ff1dca9a9",
        "cursor": {
          "ref": "b047579b-d4f3-45ce-87ba-158e4ec78af7",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1a4059aa-73d2-466b-827e-527a05d73c86"
        },
        "item": {
          "id": "8191296a-e91c-4637-8ecc-ae9ff1dca9a9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2fb78dd8-af96-4632-91ec-5173b4d1bc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e33940d-57ed-4c72-9447-68d01f9b5d5f",
        "cursor": {
          "ref": "02e2b3c2-b8c9-4bc0-ba65-f12167f549f5",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "69f01d9d-23b7-42ba-a36a-b1e1516d43e6"
        },
        "item": {
          "id": "3e33940d-57ed-4c72-9447-68d01f9b5d5f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "67ef51f4-0c6d-4ea0-80d0-586e9303fe79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b97ba6-e63d-4f33-bafa-91e13ef55127",
        "cursor": {
          "ref": "f831d1ee-6e03-4a78-b35b-c0375d85d0c1",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7806e718-eb25-4633-a0e1-16795270a756"
        },
        "item": {
          "id": "e6b97ba6-e63d-4f33-bafa-91e13ef55127",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4d961550-061d-40fa-8b96-c4e9e9f1e8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c50c82-b27c-495b-8f26-a9b64ca025cf",
        "cursor": {
          "ref": "5db2802c-3c9e-4fb3-9983-a0ce0b53ac6b",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b2a21d96-276e-4495-b3d7-24bdeafc27e7"
        },
        "item": {
          "id": "f1c50c82-b27c-495b-8f26-a9b64ca025cf",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2ccddd94-f9a8-47ca-822f-cda564130dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cd32be-3c14-4af8-8601-eb2393b4a166",
        "cursor": {
          "ref": "0ae3f5a0-6fc8-4662-8ec1-59d918bc00c7",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b3e6da8f-96df-4a11-adf9-062a20fc9c58"
        },
        "item": {
          "id": "03cd32be-3c14-4af8-8601-eb2393b4a166",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "111b1ed9-1639-4e1a-9ee4-69bc16f4847a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0b97ef-4b03-4e11-8753-960bcd422d63",
        "cursor": {
          "ref": "de3dbf76-71da-4631-83f9-74599677ff09",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "20964950-031a-4497-9cc1-c9d0a17426a5"
        },
        "item": {
          "id": "4f0b97ef-4b03-4e11-8753-960bcd422d63",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "521ca918-5ae6-4e55-98da-934434de77a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c75658-4615-46b0-8a12-1e582e698f5a",
        "cursor": {
          "ref": "e80dc7aa-ac65-4aa1-b6ec-a8d84d966e0b",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ee68df43-57a4-4329-9cd7-fe15922d0ed7"
        },
        "item": {
          "id": "47c75658-4615-46b0-8a12-1e582e698f5a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fee490e1-f795-4537-ab66-0b3e50cff7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3648cf65-7a57-4118-9c19-f5f5ded8dd19",
        "cursor": {
          "ref": "a72d830b-aa6f-4ffd-9fb8-ec9f8fffbaf9",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "35b18efe-1408-4c1e-9ae8-2bd26b0ca5b3"
        },
        "item": {
          "id": "3648cf65-7a57-4118-9c19-f5f5ded8dd19",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "cc723929-2176-405c-b6d5-a04a9899a278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ac7b2d-4176-4883-a80c-2660f8252252",
        "cursor": {
          "ref": "c706b40f-eb69-47e6-8de6-9ab6fbd52539",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f53fbbbe-6600-45c4-8316-3ad7540d191a"
        },
        "item": {
          "id": "93ac7b2d-4176-4883-a80c-2660f8252252",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ee2c2144-9c61-424d-a29a-7c3f483f7ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3ebfcc-04e1-4c83-83b9-d3397b185d86",
        "cursor": {
          "ref": "d98e008f-d2a3-415a-a828-7a5d6c0f2859",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5e2e44ee-3ec6-4b5c-9989-fa8073b3380f"
        },
        "item": {
          "id": "0e3ebfcc-04e1-4c83-83b9-d3397b185d86",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1a4e0ccf-1a54-4350-96c5-b9f1a7c62ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1daa9d-51c3-4674-af47-93b10a4804d3",
        "cursor": {
          "ref": "273d136d-14a1-4ba1-bdea-7344bfcc790e",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c9e7f8ba-6484-4ee2-b465-2c917fdb943e"
        },
        "item": {
          "id": "eb1daa9d-51c3-4674-af47-93b10a4804d3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "88a1b74c-28df-4d2f-9424-3abc073fafae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a2f31a-390c-4ca7-8ea6-bdf289cc99bf",
        "cursor": {
          "ref": "e46cd2b7-1c1a-4991-b2cb-a456dc6bc853",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fc474209-52bd-4799-8c4a-a53440845aa0"
        },
        "item": {
          "id": "89a2f31a-390c-4ca7-8ea6-bdf289cc99bf",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5cc49849-a5b0-4b39-a6fd-c07b76bbceff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a299623-c402-431f-afbd-7fb30787bb63",
        "cursor": {
          "ref": "e9357db4-c820-431b-a695-23e1a98a8706",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4811235e-6bf6-461d-a44e-1b67d092c28b"
        },
        "item": {
          "id": "4a299623-c402-431f-afbd-7fb30787bb63",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "450fc926-5cf1-477c-9ec4-78a82fa5aa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9606cb02-de1b-4fab-8cf5-41a9c663d3b5",
        "cursor": {
          "ref": "96aa65a1-865e-48f2-b83d-7e2d4038d4c7",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4adc327e-0672-4d23-9cb7-44350cb6f34b"
        },
        "item": {
          "id": "9606cb02-de1b-4fab-8cf5-41a9c663d3b5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0b07b21d-dabe-4269-9f11-424796cfa36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c46f081-c85c-47e1-80b3-1afa21123612",
        "cursor": {
          "ref": "985021a8-a438-468e-b19b-c94e2d086001",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6aedf95b-379a-47c8-896c-a8872ffb1a93"
        },
        "item": {
          "id": "4c46f081-c85c-47e1-80b3-1afa21123612",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f95e6bf7-73b7-4f9a-bf95-a270b3cfcc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b32c50-2ee9-4303-929b-7a950898e110",
        "cursor": {
          "ref": "43d6789b-ec4c-4532-a3f8-a54495182ba3",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "02b468a1-8b5c-4405-91af-a5e4300f8bda"
        },
        "item": {
          "id": "50b32c50-2ee9-4303-929b-7a950898e110",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b3f0ab10-39bb-4cdb-9b71-272f2b4feb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0666cef7-09c0-4a1d-b79a-85a8fe654e1b",
        "cursor": {
          "ref": "e9373c9f-f940-49a4-8f01-51e094039d1f",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0e1692d6-3287-4b92-9fa6-f3621c01490b"
        },
        "item": {
          "id": "0666cef7-09c0-4a1d-b79a-85a8fe654e1b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3da202d5-19c5-4c6c-b103-211cdd5a1f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9433146f-6326-4c7e-8a8b-da289b247bc1",
        "cursor": {
          "ref": "c197d95a-8de4-4108-b13f-42b96c2c97c6",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "dcd6612a-368d-4e88-8812-4217796d7f12"
        },
        "item": {
          "id": "9433146f-6326-4c7e-8a8b-da289b247bc1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1a670f44-8c23-4c10-bcd2-d72574ee7592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa14a8a3-cc4a-47c5-8191-19e9571695d1",
        "cursor": {
          "ref": "b2e058bc-9e47-47eb-a314-5647a8f4d8e4",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1b3df040-4543-48d0-808c-582e502deece"
        },
        "item": {
          "id": "fa14a8a3-cc4a-47c5-8191-19e9571695d1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "28bfd265-92d3-480d-aa42-92c5ee44ab06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59eeeea-df02-49af-a21a-f54dbf1607fe",
        "cursor": {
          "ref": "b69fed8f-03b7-47e0-8ffb-f99bcb5b5af8",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "38c123cb-377e-492c-b51b-174b26fa63fc"
        },
        "item": {
          "id": "e59eeeea-df02-49af-a21a-f54dbf1607fe",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2f32b7e3-c9de-459a-8da1-c4295427d326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a29f1f4-6809-4472-a8b5-78ec901d44a0",
        "cursor": {
          "ref": "2372ae3d-a39d-44c8-b55d-e63eb5056c22",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "54c73140-ba6f-46b5-93dd-a7e15ada54f8"
        },
        "item": {
          "id": "6a29f1f4-6809-4472-a8b5-78ec901d44a0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cc926fa7-ef65-46e5-9048-eb7a42c89a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c514380-9cff-4dc0-b796-784e1ddfdc19",
        "cursor": {
          "ref": "4a373e9f-e6a5-47e7-92bd-a3d8ad659110",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e282a87d-8359-4339-bacd-2821e436c70f"
        },
        "item": {
          "id": "6c514380-9cff-4dc0-b796-784e1ddfdc19",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6ae2192e-919b-48ba-9a50-69bdf7da48ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3a09a5-84b6-4875-8eb5-24c4c817fb97",
        "cursor": {
          "ref": "53f693d5-1fe5-44da-b626-e73edb2a7e4f",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ff9a4f31-57f2-4bcf-ac37-ccf3f9c29ee8"
        },
        "item": {
          "id": "2f3a09a5-84b6-4875-8eb5-24c4c817fb97",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1bc570c4-0162-41a0-8a69-f6e703986c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9017670-e278-42d3-ba6c-20257f23e2d7",
        "cursor": {
          "ref": "a6cb551d-8d10-4861-9560-c144c372d27c",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b3af8f50-f655-4d18-b808-d48091f1b375"
        },
        "item": {
          "id": "d9017670-e278-42d3-ba6c-20257f23e2d7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "16ed2db9-a18a-42fa-aaba-ce35d14eb129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a02295-ecc6-4e6c-af0a-933636272c94",
        "cursor": {
          "ref": "a21f4728-35a2-4935-8022-1fda3e60c9c8",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bd620e55-1d1e-4b10-84f1-b471949918a8"
        },
        "item": {
          "id": "89a02295-ecc6-4e6c-af0a-933636272c94",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0e7d2435-1597-4c4f-82a7-279f73227e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7471bb39-ccc3-40f5-8540-60c27e41d8b5",
        "cursor": {
          "ref": "20caefc9-80ff-4809-9743-2484dd5c99ba",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a5a2155e-1612-456b-bd71-f0fe8d9f8f5d"
        },
        "item": {
          "id": "7471bb39-ccc3-40f5-8540-60c27e41d8b5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6bc5582f-b645-41ae-ac6c-c6a940140ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbd1dc6-fe72-4787-88dd-e868dee735a6",
        "cursor": {
          "ref": "c04f0dad-2698-4df7-ad87-f38639d844f2",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e43decff-006b-4ad0-b4f2-42caa5e839aa"
        },
        "item": {
          "id": "bbbd1dc6-fe72-4787-88dd-e868dee735a6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2c76de00-98e3-4099-8cf7-05116e25f321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85ffc54-b689-4963-9189-d5cd12db23e9",
        "cursor": {
          "ref": "16320240-1b49-45db-a7f5-f2dd36d580a9",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cab6752f-0182-4fcd-b203-3f46f51e56ca"
        },
        "item": {
          "id": "f85ffc54-b689-4963-9189-d5cd12db23e9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "28bb3e82-a551-4ea6-8ebf-ea3164af62db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8241d036-ae34-44ac-9f6f-a7dec280595f",
        "cursor": {
          "ref": "5a5706c0-d322-45e9-8ed8-a2bbf33f009b",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c2536b22-dfc7-4352-a8b4-811d563677e5"
        },
        "item": {
          "id": "8241d036-ae34-44ac-9f6f-a7dec280595f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a6a1ad7f-e80d-4723-b55c-ed90e8fc3b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f051c65-5362-4e86-b26f-dc6b29635869",
        "cursor": {
          "ref": "5286056a-f002-4004-9019-e2991d957d05",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3878a582-7701-4467-8ce5-ec031653dd6c"
        },
        "item": {
          "id": "7f051c65-5362-4e86-b26f-dc6b29635869",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ee0898d0-9e47-48ca-b214-379f56c2fa58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c808c4-b82c-47dc-81bb-ed116dff8667",
        "cursor": {
          "ref": "6b9ae46f-6654-4e4b-b793-d17e3f4bccfa",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "56f165fc-b1d5-460a-8fc5-f2ea1fc70593"
        },
        "item": {
          "id": "67c808c4-b82c-47dc-81bb-ed116dff8667",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4792ed86-6416-4405-915f-62c32fd6e4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e04745-aaf9-4536-a06e-ceae88f63520",
        "cursor": {
          "ref": "7212c997-feef-4b4f-9671-82893498403b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0a5e8b11-29d5-4641-8931-0fda770b8e20"
        },
        "item": {
          "id": "31e04745-aaf9-4536-a06e-ceae88f63520",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fcc28572-d6fd-490e-a9fd-ce54262a67a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91756e1-55e0-4641-965f-aaa4b8bdc1a9",
        "cursor": {
          "ref": "a33b1daa-b221-4e75-85e2-28a9f4413b0b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c1c05f17-211b-46cc-97ce-987b3c2a3d05"
        },
        "item": {
          "id": "b91756e1-55e0-4641-965f-aaa4b8bdc1a9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cd6e618e-5dd4-43c2-a27d-59e03b50c362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6502540c-3711-40fb-a025-32c9e6d11e45",
        "cursor": {
          "ref": "6a2c8931-4f00-4af9-b2f2-19f04c5c834f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8c9712d5-52cf-41b4-8b86-a5d403ec6db8"
        },
        "item": {
          "id": "6502540c-3711-40fb-a025-32c9e6d11e45",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e592171a-ca9b-4dc8-8ce6-3c6e9ed72ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3289e817-4b8f-4aeb-bbce-11dd3adb0369",
        "cursor": {
          "ref": "f56ebb18-e793-47f7-b65c-5b411f711649",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3893aa8a-347b-4af4-8e34-43a68ed9ba65"
        },
        "item": {
          "id": "3289e817-4b8f-4aeb-bbce-11dd3adb0369",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c5bda610-7420-491d-ba2e-9bbbc7b8eca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e768dec8-f473-414e-aef1-03064e6f0c94",
        "cursor": {
          "ref": "af7fe46d-d49a-4423-b9a9-4e9cbf2fad98",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9c949405-5455-443f-9063-50a5824a4575"
        },
        "item": {
          "id": "e768dec8-f473-414e-aef1-03064e6f0c94",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "096a0381-dca8-4323-91e8-45df59fa3c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843a709d-aafe-43e1-9bba-74e7f558719a",
        "cursor": {
          "ref": "8cf9c06f-ff65-4e2a-8b05-ffab5e95d9ca",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "72c43f9e-4fe0-491c-a71d-9772aa9cf0ed"
        },
        "item": {
          "id": "843a709d-aafe-43e1-9bba-74e7f558719a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f0a8fb03-1a92-4392-bce9-1078f2c34d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e139c37c-0d6f-40e3-b37f-45e6b6755f41",
        "cursor": {
          "ref": "d508c41f-7796-488a-8d75-4bc1d548bb58",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "43301a5f-46ad-4e06-b445-a61a12850da4"
        },
        "item": {
          "id": "e139c37c-0d6f-40e3-b37f-45e6b6755f41",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e0beba5c-2057-4195-8399-131bc8cb61e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bea013-141d-42ce-aea2-5ce9d22a0d90",
        "cursor": {
          "ref": "cbb7fe8a-a5bd-46cf-ac40-05f8ecd3d6b1",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "002a485c-6728-4dc3-8cb5-8118a9310ba1"
        },
        "item": {
          "id": "e7bea013-141d-42ce-aea2-5ce9d22a0d90",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d35a8181-f380-49db-8aab-8ba0a122d37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b149aa8-2f36-4a62-a3ca-4ced94fd250b",
        "cursor": {
          "ref": "7cf5b2c7-f133-4dd9-9019-a719c53bc451",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "19e3b419-775a-4001-88fe-01172e7114ff"
        },
        "item": {
          "id": "3b149aa8-2f36-4a62-a3ca-4ced94fd250b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b8bbf3af-d4de-4551-be17-8f6edfa55f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935af89b-3ff5-46df-b3ee-5a74c20c7036",
        "cursor": {
          "ref": "e30e3d83-7d00-431a-920c-c07c8f5d2961",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "579479b8-5fcc-4092-ba5c-40f0b6d17235"
        },
        "item": {
          "id": "935af89b-3ff5-46df-b3ee-5a74c20c7036",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "302f417c-8139-4c22-b22b-a9380038a362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3554706-d51e-4a5f-80ff-5c2fde62762a",
        "cursor": {
          "ref": "ba2e9ee9-a0c1-4776-99af-75d3657817a1",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c9874541-b4ce-4352-bcd9-b60d340c0252"
        },
        "item": {
          "id": "c3554706-d51e-4a5f-80ff-5c2fde62762a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5f08b619-d4e8-460f-bc07-1341cb0e086f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e9d189-30e4-45f5-8974-653981c9c87f",
        "cursor": {
          "ref": "641baa2a-ce5b-44e0-b574-f1cd724e5f6d",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c386d60c-47e2-43c3-ac37-d6d215a8d841"
        },
        "item": {
          "id": "a1e9d189-30e4-45f5-8974-653981c9c87f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d6d4a5a1-7ad9-48e3-b851-b1cb4a4f2aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f644dae8-c0f2-49ee-94af-be982f62e338",
        "cursor": {
          "ref": "3f164e89-9ad9-47be-a85b-1662c3939114",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bd53ff6e-7346-49e5-8d57-6715a11c6747"
        },
        "item": {
          "id": "f644dae8-c0f2-49ee-94af-be982f62e338",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ed7c7067-5c88-4b3b-9622-d4d795ef5c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b17c832-daf3-43b9-86e2-e9094be80e2e",
        "cursor": {
          "ref": "a1f1dbef-9966-428f-ae98-65e4231dbaaf",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bff36de0-f371-405b-b8fe-b2a4309609c7"
        },
        "item": {
          "id": "4b17c832-daf3-43b9-86e2-e9094be80e2e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eb8f42f8-9a89-4914-a1be-f0bc241ea70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8eaeaa-1c05-4dcf-8873-874743e77dc4",
        "cursor": {
          "ref": "f91a1037-b3fb-46f1-a147-4e62850a0db4",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cb286559-6b76-4800-b78a-6a51368da9a5"
        },
        "item": {
          "id": "1d8eaeaa-1c05-4dcf-8873-874743e77dc4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "18474445-b003-4044-94f0-f2183a49a1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcd8de6-0911-4366-90b2-9b9eaecc8c76",
        "cursor": {
          "ref": "380c9a29-6106-4b8c-b064-1c5edf3aa080",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8562c139-6d3c-424a-bcec-5db61f6c35dd"
        },
        "item": {
          "id": "1fcd8de6-0911-4366-90b2-9b9eaecc8c76",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "318bf754-f74e-4dfa-87ee-1ab7a6210bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f151490c-1efe-48ce-bd02-7b04efc052f6",
        "cursor": {
          "ref": "c7b91d5d-17a0-4709-99fa-7e0f55fb16d2",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "17e14df1-eb1e-41b7-95b1-7f77e4932ba9"
        },
        "item": {
          "id": "f151490c-1efe-48ce-bd02-7b04efc052f6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ff644c48-5978-4178-a7ff-017ae0ba038f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1478c89b-c7da-400c-ad0c-a7a854df64f1",
        "cursor": {
          "ref": "b039ff5d-7e03-4f72-911f-cd4fefd0fe57",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "887a5792-c32e-4d83-9f7d-961d5713da0b"
        },
        "item": {
          "id": "1478c89b-c7da-400c-ad0c-a7a854df64f1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f1d2f3e2-9229-453a-bc8e-9474aacd78b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d5e12b-b710-4f7b-861e-ad97a4ab65df",
        "cursor": {
          "ref": "f63573a4-4d18-445b-af84-149c1dd46319",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cdb808ab-1187-4743-898a-6fca977e3172"
        },
        "item": {
          "id": "15d5e12b-b710-4f7b-861e-ad97a4ab65df",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "75ac7136-feb9-4dc2-82f3-d6396eb6e363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad619bf2-58e8-4a0f-959c-109211ea14a3",
        "cursor": {
          "ref": "a0288daa-1a43-4dd0-b932-920bd921e2af",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4e00d838-84dd-4778-a013-51ceacc394c1"
        },
        "item": {
          "id": "ad619bf2-58e8-4a0f-959c-109211ea14a3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "61821d8a-f4bb-4898-b4d1-f1a846479545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099b2d48-fac0-4cc6-a869-4b92b0504786",
        "cursor": {
          "ref": "1a9540c4-0ac2-40be-9905-543786076ff2",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0e95f00c-efa4-4fae-b8de-4ef93ca8f1bd"
        },
        "item": {
          "id": "099b2d48-fac0-4cc6-a869-4b92b0504786",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e8010381-667d-4f43-b6a3-1c6ae536b3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933b9461-2a46-4a09-a413-ff78ea74aa03",
        "cursor": {
          "ref": "fd14cf17-4557-435e-9c11-b989ef3108e0",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "72202e94-8292-49a2-8472-8829a7da157a"
        },
        "item": {
          "id": "933b9461-2a46-4a09-a413-ff78ea74aa03",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f1175220-cfa7-4152-ad8c-65e66ab54ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cd039e-8de0-4f20-96c2-db355252c8a1",
        "cursor": {
          "ref": "b7552641-d7e2-4856-a120-1c0ea7b0fc29",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a86c9596-370f-4cbb-acf1-3c7acf2018c2"
        },
        "item": {
          "id": "85cd039e-8de0-4f20-96c2-db355252c8a1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7396916f-e29c-4be7-86c9-6a92fa1dea38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434b5074-1304-4c42-91e2-4d4bba3f4401",
        "cursor": {
          "ref": "d118ff95-8c48-4b53-93ca-1c12928c8cb8",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "797be033-a296-4f3c-b74c-61464dcb7a2b"
        },
        "item": {
          "id": "434b5074-1304-4c42-91e2-4d4bba3f4401",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d45625a5-3c8c-4773-b091-98dfc24dc2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a23330-9dc3-44ca-b420-117df0f27eea",
        "cursor": {
          "ref": "6f64ce27-90f2-4e8a-b724-f897f47ec6cd",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3870984c-4d3c-4d08-a5e3-a5b5d4dbf738"
        },
        "item": {
          "id": "61a23330-9dc3-44ca-b420-117df0f27eea",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "97bb5d80-6099-4680-a77c-7737c658f287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca427406-1c67-4806-95a0-bbe19e42d74c",
        "cursor": {
          "ref": "021bbf17-e8f7-411a-8bf6-2b25aa34b89d",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "83ac91d2-f58d-4cfd-9331-dfbe7da81975"
        },
        "item": {
          "id": "ca427406-1c67-4806-95a0-bbe19e42d74c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7ea00814-ce4c-4d31-86df-ce48045faa4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a107583-bbda-498b-85d3-b2bef98b24d2",
        "cursor": {
          "ref": "d27040e4-8af5-4b92-92ba-0013e2adee61",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ea72aa88-fb7f-4aa3-aca1-013008ef554f"
        },
        "item": {
          "id": "7a107583-bbda-498b-85d3-b2bef98b24d2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b62987f2-f794-48d0-bcfb-9ff0d1c4c88c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "310b6376-af68-4ae7-ab93-ee233a6ca4f9",
        "cursor": {
          "ref": "80d80f8a-6054-4d34-a6f3-6ab8a764e3d6",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c2e1dfa2-53cc-48ac-a9d1-e6e32bb261dc"
        },
        "item": {
          "id": "310b6376-af68-4ae7-ab93-ee233a6ca4f9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "67b985d3-4d48-47d8-97e0-30b27fcbb45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9551b945-d93f-40d7-b382-8ff4bcb81ac6",
        "cursor": {
          "ref": "66c3e332-1e48-418a-8fdb-9b02c5fe84ea",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e8069bd7-c4ad-4dc8-97fa-fde696bffe73"
        },
        "item": {
          "id": "9551b945-d93f-40d7-b382-8ff4bcb81ac6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a3f1d820-65f8-4736-b998-8c363e563bad",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "08634d26-f6cc-472a-8c71-c2e5ec409503",
        "cursor": {
          "ref": "43d9afc8-2d3b-4dcb-8ab2-2a56d842098d",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4dceed7b-3ba9-475a-93e9-ad2d927a921f"
        },
        "item": {
          "id": "08634d26-f6cc-472a-8c71-c2e5ec409503",
          "name": "credentials_verify"
        },
        "response": {
          "id": "944e6bfa-f37d-419c-b5d5-3e331bcc78bc",
          "status": "OK",
          "code": 200,
          "responseTime": 1732,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d9a048-93b7-4d6b-9ede-42d124a5ca7d",
        "cursor": {
          "ref": "b929c129-6cb4-4c1c-8029-2d8b6ec1d239",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "47256c13-c007-4d6f-9aa9-fb7ec707b080"
        },
        "item": {
          "id": "f7d9a048-93b7-4d6b-9ede-42d124a5ca7d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3c74a4ec-161c-4b7f-95b4-13a1b36146db",
          "status": "OK",
          "code": 200,
          "responseTime": 2343,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77e2bfc-af85-4b0e-99e9-a2227e3b3038",
        "cursor": {
          "ref": "3f4ed9ca-70de-4574-9704-a5a82eb3f223",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a5df07e3-95d8-4b2b-9844-1d02be61ed25"
        },
        "item": {
          "id": "a77e2bfc-af85-4b0e-99e9-a2227e3b3038",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4b3fd7fb-d854-411a-b217-969b99974bbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a77e2bfc-af85-4b0e-99e9-a2227e3b3038",
        "cursor": {
          "ref": "3f4ed9ca-70de-4574-9704-a5a82eb3f223",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a5df07e3-95d8-4b2b-9844-1d02be61ed25"
        },
        "item": {
          "id": "a77e2bfc-af85-4b0e-99e9-a2227e3b3038",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4b3fd7fb-d854-411a-b217-969b99974bbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a77e2bfc-af85-4b0e-99e9-a2227e3b3038",
        "cursor": {
          "ref": "3f4ed9ca-70de-4574-9704-a5a82eb3f223",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a5df07e3-95d8-4b2b-9844-1d02be61ed25"
        },
        "item": {
          "id": "a77e2bfc-af85-4b0e-99e9-a2227e3b3038",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4b3fd7fb-d854-411a-b217-969b99974bbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "552800a2-e19b-4415-9e97-f177afc9a508",
        "cursor": {
          "ref": "77c6351f-c563-4c41-ba71-dde31476660d",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c72ec52f-3a1d-48a0-bafc-804e65e4e281"
        },
        "item": {
          "id": "552800a2-e19b-4415-9e97-f177afc9a508",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c0ebe463-c574-4a1a-9e20-912d81078533",
          "status": "OK",
          "code": 200,
          "responseTime": 396,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "332a4ed0-04cc-4e3f-852a-bda6ae12ba31",
        "cursor": {
          "ref": "c7e8149a-bbe4-4298-a980-2c8b0fdab01b",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "13972fad-5352-4af7-9a9b-68ac00ff8cf4"
        },
        "item": {
          "id": "332a4ed0-04cc-4e3f-852a-bda6ae12ba31",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "47ab00d8-de68-4cc8-80b3-c25ccc27b2bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "332a4ed0-04cc-4e3f-852a-bda6ae12ba31",
        "cursor": {
          "ref": "c7e8149a-bbe4-4298-a980-2c8b0fdab01b",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "13972fad-5352-4af7-9a9b-68ac00ff8cf4"
        },
        "item": {
          "id": "332a4ed0-04cc-4e3f-852a-bda6ae12ba31",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "47ab00d8-de68-4cc8-80b3-c25ccc27b2bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5ca332cf-6902-4f9a-b6aa-a34da7f4e09a",
        "cursor": {
          "ref": "d28524a3-3524-4fcd-92ac-224aeb979134",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a4166e33-b600-4dc9-bd06-384e017c0fee"
        },
        "item": {
          "id": "5ca332cf-6902-4f9a-b6aa-a34da7f4e09a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d8738d9c-0bff-44a6-b2fb-d5c6e96e2856",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 171,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "36859b59-2caf-4bbc-8254-8ab11838962e",
        "cursor": {
          "ref": "50a55bff-b446-4665-b98e-9c1384800dfb",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0f9f8f87-d55f-49ae-857c-a470a3d76183"
        },
        "item": {
          "id": "36859b59-2caf-4bbc-8254-8ab11838962e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3e3b5111-6720-45a2-b35d-76820c17289e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "36859b59-2caf-4bbc-8254-8ab11838962e",
        "cursor": {
          "ref": "50a55bff-b446-4665-b98e-9c1384800dfb",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0f9f8f87-d55f-49ae-857c-a470a3d76183"
        },
        "item": {
          "id": "36859b59-2caf-4bbc-8254-8ab11838962e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3e3b5111-6720-45a2-b35d-76820c17289e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "fb6e5414-afe7-4718-9226-03e75737b3ba",
        "cursor": {
          "ref": "b2ead87c-c597-4854-a196-0cabe7d24e45",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bd3c200b-e9e1-4382-973e-22e38ed7253d"
        },
        "item": {
          "id": "fb6e5414-afe7-4718-9226-03e75737b3ba",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7984d5a9-fc06-44d4-8abd-688a4271fff3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}