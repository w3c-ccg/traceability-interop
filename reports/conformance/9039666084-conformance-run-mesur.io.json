{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b9f69dd0-0e53-4bc2-b6a6-3f1b37cbe234",
        "name": "Clear Cache",
        "item": [
          {
            "id": "04035562-45e9-4125-9ce8-3feb4711d985",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d48cfa5-3bb1-4ff3-b88d-167fe801091b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fcc3d9fb-e5ed-490d-969f-0892c9e04221"
                }
              }
            ]
          },
          {
            "id": "1f796160-fd50-4933-8514-414e5644b8a2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0cdf94fd-3a82-4705-8809-d2a992f85319",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "87dffff7-5122-44bb-879e-4ef499c3e314"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e28564bf-3406-46c5-9603-3fe90e163be4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "348adc64-64ad-432c-a95b-2924c833bab9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "11ca24e6-06d4-44f5-b21c-f944c8cbfb57",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95e2b0c1-e190-47c6-bc2f-ffc43eea593a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27ceb863-b551-4c84-aba0-c1c921eee413"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2ee6e10-ab06-4c12-8af8-9250217fd4f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "367f0c94-afc4-4404-a88a-ac50597723ee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "03916c6b-f25e-4325-a359-b593828bd022",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8c96d28-1c6f-41a2-bfea-c681b8d709ec"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7455efca-6d78-4f39-b6ac-279298429555",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "393c74c5-7e48-4959-9fe9-8719332bb4b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34a726d9-6831-4ac6-9518-5cd9ba47d398",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff23d468-caed-44a1-a485-d0db99722164"
            }
          }
        ]
      },
      {
        "id": "d990dd18-e1ac-4026-8848-a675c902635b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5458ddd1-0630-4a8b-9e4f-ad4ce84100d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d39851ba-ba1c-4446-962a-b544f1b647d6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc374201-202a-4537-a06d-18485d941c4e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57584269-278a-43b5-8520-d56eefe5df82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cbe501a-a8d8-48de-bd3e-c2c9f7bbb459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc76a39-25ba-49e0-87fa-b850e9ec0454",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3996a2a8-b077-4bf6-9db8-13e795a7b0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1513f59-39d5-42bd-bbeb-53f3a5afb70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f352c58c-358a-4b12-9f29-ccf001afc99d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c2d753-c05c-46ae-ada5-a2d01ce59b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a362fcff-dbb4-4830-8dc7-4707493800c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14636856-c4ab-42a5-945f-c6d1d2cde876",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23938b6f-2484-4e39-a185-327b8d1214d8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7038f7-69d0-45ee-b0fa-6397574d172a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ff3e637-501e-416e-8882-42a682e91612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8543a942-131b-41f8-a1c2-63b9af5f27ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56084a71-c86f-40a1-9d0a-e5dbd6d8fa2a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a65398f9-fcc5-48a1-a3c3-c537e0889598",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8133b03-8c0f-40df-8ae4-90bf93383bfa",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "484629e7-2f21-4e14-8790-493d21dd2d54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3fefae62-6154-4e08-93f4-3aa912c898bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c3eb21e-fb14-43c9-9e4b-1af1df950d93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "262f5e55-c925-4ddf-82c5-db9ab6f6f6ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a3a71e1-2715-41a8-ad13-6c8d3708fca6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ac9f74e-cded-4111-8a0f-7ea7c7b06c3d"
            }
          }
        ]
      },
      {
        "id": "e1c200c3-fd50-45e0-971e-a3f2f6520b49",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6a4f7623-0830-490b-8c09-1dc97ae4ae1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13713278-3392-4a2f-a1b0-4908b9827a99",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "13795a2e-395e-45af-99d8-195efb9e4fad",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d4943a-2383-4ed8-9b58-a7d521daa74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f81c90c-7b27-4fbe-bca6-d71b6e6cf4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5131c8-3734-4dce-90c1-41c3874742e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f83db386-9e25-4bb0-b14b-88898e22bd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757d40d7-f262-4594-9590-ac4ab9543ab4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3453252-e187-4e5c-8b61-949a5c5f8155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad4f434-b1d1-4ca1-9612-23d7e3c177ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ae7eec-a20d-4797-ba74-a8dc185ec8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b299cbfd-04ce-46fd-8eb8-e975cd15c4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af075ba2-529a-4db5-b04f-302f53a3e9f3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8e5aac-3815-4e43-a2a6-3b62f5542fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baea3d91-9dcf-4afb-8c24-76451ba91707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767beb88-f93c-4e62-8c88-59b2049bbb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40138bfc-c007-46ef-a207-f9e6a56f1e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2327546a-f53a-4d17-b1b5-b6f3b31395c9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7da9314-d2b4-467e-8b81-9b040695f79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb67798-eecc-450e-aaf1-cbee3a604272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27442ff5-7e72-4225-a92b-ad36b74a2746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76748d6c-5866-44cb-a5a0-945fe4d8bbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db492236-f0a4-4e61-8ff3-a4c5e9f754f4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c1496a-9b5c-4286-a846-72fe23ffbead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9444a300-148e-4a50-8398-e088a9af481b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c7f909-13a7-44e1-8ab2-274ff866fb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84293c16-eda3-4840-a0e3-3f1feffa2fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944cb323-9ffe-42d5-b4b2-369edf452a5d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9353aa-dcb3-473b-a80f-21971d506578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3844cfe-ad1a-4dbb-bbfe-9bd2e17d8c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bb70e8-7ce2-4a98-8757-eacc13fa18dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3e9d2b8-6b8b-4bfe-bec2-bde1a24c7bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb50fba2-c943-4978-a63c-18f6e4b73eb1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cad5dd-1e69-4dbd-944f-f1c9507303c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd2380b-5399-4b9b-abbd-beaa1ccdb57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a61ab0-07f7-44dc-a301-95ec83a77f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62ee422e-1d69-4cd5-9eaf-4dfbb2f5dce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732d958b-107a-4543-8603-88772f51a2a7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710db535-c996-4e09-9a7d-a80fd3f1bf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20643127-e2b8-42d7-9e26-6f89571224bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a16bd37-8090-4fa3-b981-105ca7c25746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7a0c43f-2192-4912-9d1b-d9b12b8e4ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb270a6-47f2-44ac-a6ec-b9b72fe8aa0a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73041f00-818b-41ed-b6b4-f67154fb6d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deef698e-18a0-41e7-920e-50191453f5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf097098-4141-4377-9804-c6fb98f5b1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cef5dd59-727b-4720-99b6-5e5035485efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea01e6a-ef38-4551-a226-1c4da74f4bf1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f7f522-dc76-4388-93db-80105c0af17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f96886c-b0d8-4ec3-beff-ec16021e3591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e36c676-4740-419c-a074-7da10dd4c13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a88d8f7-d724-47c9-a80f-7eece9e0f539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2c40fd-6996-4d55-85c1-2176a19aa6e0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d854fb12-9e81-4d89-aeef-364a64845d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82908696-1644-481e-94c4-d860deeb518a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8297a8-6829-402b-acc4-31ed5aee0f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3270b13b-511a-4c75-8067-f5da7a77425d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6b0cbd-0895-4534-a1ca-0aa4d409d59a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ce3200-a561-48a9-a4e5-fce7730749ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a27e4d-7851-447b-9761-a0d984eea801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41ec8af-032e-4d9a-a3b2-c380e5612fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2f5e560-07ba-4c1a-ac8f-8b23e275a6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82a555b-f4ae-430d-b3fb-363229ab0175",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85111f66-202f-4576-8880-6736426b9e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59638224-3ac4-47f8-b3e7-121cc1d3cb93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29e218d-19de-424c-b136-90106d40d843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "876140fd-d7b4-45a6-bff4-10eba2cdaa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe87ae5-4eec-4bfc-8818-5d335ffeb0ed",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc70c7b-5774-4e63-ac21-ed021b8096b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0269d1f9-f1de-4edc-a179-2d321f0dfe8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d5f319-9f87-4070-b5fd-2ca71e396ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6165b088-00e7-4697-9e21-43586f773b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01a57c2-c321-4d8f-843f-cbd9f11e75fc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15db443-5f27-440b-95f3-3edcb268ed62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3f356f-4bf2-4dc8-a2d2-18d2c04827a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735aa3e3-c9c4-4688-b79a-eb73e2e76f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb52ef34-9beb-49d8-a96b-9834aae83fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c4cb38-1610-4627-9386-a4a0aa5de48a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff5174f-743b-4826-8461-fff883168d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd3e702-e210-497c-b126-53991d2e640d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b6d004-8794-4c27-aa03-45cab05848dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c38e999-4ea8-4263-9ed3-c24148079820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec02230-3224-4c19-823b-252e3bba22b0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de79b3b-0f7c-461e-8988-2b9f56c5f4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df30882d-0a04-458c-bf9c-7994f29a5a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93fbba0-28f9-436a-9f3e-15c339e180f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d70909e-85ca-423a-bf48-30911b1c9319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb93e2c-3dbe-4688-b8fa-052264a5692c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d773ff6-4b4e-484d-a5ad-8546d9c84a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3479f6b-d869-44e8-b6c9-accb3fe7b9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad69fccc-587a-447d-8937-56472cbcffaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b14b7da8-21fb-40b5-937e-74f9ed03d359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27588135-a463-45d2-8a79-aa0cad4732d6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffa032d-0e75-4909-97d6-70829f261bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3c061a-ca58-45e7-adae-8595a8a3535b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c26276-3575-4fd3-9edc-2d5b3fe222f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5981f52-9131-4e63-aa5f-afbbe4f5d783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9799347-424e-4689-96d9-c67921f56778",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91af4ef7-f74d-4b17-8977-870248bb2d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b294bf81-e809-4d6e-977b-7e1dde8a5c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec52bc3-97fd-43b8-bfc2-04ba4ef90a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb67079-737c-40cc-9107-5381a1e9d505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d96607a-7c55-4d2c-baa6-ffa9b9ebbb58",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69355cfb-246b-49bd-9ba9-1aff08eaeb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88cd918-69d1-4461-82df-ab573541977c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d831955a-3291-4160-82f3-26578b52eabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "242dba3d-f52a-483e-85a8-f13e7f56e451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80e8648-7f8d-4904-95c5-5cd1314f7a78",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e698200-6780-46c6-9b39-2ed552591178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc310ce-5d69-4c09-85f1-f3f70aae1d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9a3ed8-d1d5-4ae2-9353-6870b47546d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f80455-ff25-4483-8861-c0981eadc867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e720286-49ef-4b48-b850-3d7c390c2837",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e79f57-bc6c-4595-bf16-ca50a0a7be03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba90fcdc-6315-41be-a753-e6b9aa3be529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511a49db-f4cc-4828-a082-a00dad1fef87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b90f5c39-8613-46ba-9921-4c7a27d0ff42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee28519-74d7-4a7e-b28f-bf0a1b580378",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0be04de-3789-4093-a851-5bdb1dea5f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbdbaffb-f14e-45a3-b3ea-cc65a591f04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a566f082-2f14-480a-b2a8-28eb079ef644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "98a60886-21d5-4c2d-8b33-9107187c479b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b91cef-c4c5-40bd-a0e8-5735adbe7b64",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d36528-7e1e-4fa4-9861-a8321269fb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f44a2f-549d-4290-8d48-6d56d861ef52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb51d80-9d5a-46c4-9165-332e21f15fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae04878-25d6-4c17-af78-16e8e0267a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95a8efe-71e0-46bc-95c0-04ad0a36b075",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b927132d-1b29-410b-b110-c2c28dad68cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7402c702-663d-4898-8d81-047ceaadcd07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b529fa-0303-4a74-969a-f9679f26a453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4fd719-dc4a-4f01-88ae-b3ca53784140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc329f5-aa62-4d6d-af57-41c60318b22c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5ae74f-7445-493f-beb8-33269f76ba33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586606f6-2d7d-4663-a15f-3704428428a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fb9672-6e10-4b88-96d0-e82fe5d49449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2841af6-4e18-480e-8e8f-a08514104f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc6a78d-1650-4a1c-ad99-f4744f47d40e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe19124-3415-421c-954c-bd0bafaaca00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd04cc32-fe1c-4220-9de2-d5c48d88798a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fbec30-3f6a-458e-967a-b7a55f520087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8b2c43-0540-4431-b111-e8c1d01410a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfc2873-82d3-4e43-b181-7ccbe80d65fc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153aaaf8-56d4-44b1-b17a-9d1e89721fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9544befc-8ed8-4947-a770-5a1f94859c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8de19d-bcb4-496d-8a8b-44bd7ef06c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c90db9ac-1a7a-4e86-afd6-9210fb31065f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704ab572-48c7-447f-abcf-391c1e223c07",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0228962c-6937-4df5-be42-53cd8553ddfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36405863-4832-4aa8-98ae-1ae1a349db3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c342c3-2657-43b3-9de7-919a4eafd72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d908b57-da91-499f-aca5-f30bef5e0191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171ac88e-be29-430c-9034-2f228227fc43",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117d9440-f7d6-40af-ac19-9c0f6668d187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eaa85a0-406e-44bb-8d56-92a69043c2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a67151-b5c0-4ddc-969a-a0d0e586c722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c04d1008-2cee-4b9f-8835-dcd25f671148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c46bb6-f8af-4fd8-ba5c-f7b6ffe35678",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4521e6-ca49-4410-9c48-9f8a6dbbb044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7cbd69-9f4e-4fa9-8e7f-c73285bedab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9beee9-a6d0-4935-abbb-a9e24474806a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad8d725-123b-4cc6-b7f1-968e40c82726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bfdef3-a129-43ee-beff-a3e9a87885e6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb399f4-2cd2-4b52-9f60-26aa6a5af485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05372e57-eafa-4140-8a53-fa16d0c78663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00db7df-c89b-426a-840b-af2687f270b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcaed5a8-1ff3-4f77-8bcd-9041b7eaa583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6bb764-7bae-4a92-b523-dc471bc5aa6c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3701732f-a9ca-4f7c-970b-0975106305ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00e3bae-2bcd-4a1b-a2a4-e83be948c9de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd3f9dd-2b5e-4c6a-a131-ec525f98568e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f434767e-81de-4d23-8bec-fbf1ac3684b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab7e0e9-dbd9-4dfa-b469-08441c3610eb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed3ad7b-e351-4919-9293-dda0c100d631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90376657-ddb9-4ead-853d-08aa512ca398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67541e29-233d-475c-abbb-a943ce1d53fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "15277f42-8e16-4c9f-ae8c-b5ef86059135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60e677d-085d-42e4-bf7d-3d6a3697fb3d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1428d5-95d7-447b-80ad-5425ec23979c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5634418-2091-4126-836e-0f9d8c27cdf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22b47b2-8bfe-4527-8a0b-8e0debac7912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3b94fa-12a0-4110-820b-9b84f3cc2c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b95f2f-3292-40a8-b764-7f5f655ea1e9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4578f1f7-d850-4887-86a7-c6af119d2189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed715759-a789-4163-96ca-53913194b208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f097d298-29fb-42d3-8a8c-5b7bfb4f9967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "500a2255-22fd-4318-900c-c62dcaffc957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1650c028-2618-4ed0-ae3c-7ba519215889",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30290410-5364-423e-aa6c-110ad56cf7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317c9db9-ac36-4b48-b3ac-25b322733bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83f187e-a029-45fc-bda9-6a9b71cdab52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "30636a83-73aa-4deb-a567-850ba3dabb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fe8325-8607-4c4d-9ee3-d6ea4da7fea2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc42a0c2-cef2-4ca9-b7f2-9c604084b274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73eb2525-af48-46ac-a775-a16d5bda454f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ef355a-ce27-463c-806b-a025ab48d6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f0e53a-f4cd-4ad8-bea8-c01a827b3480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a72575a-1fa8-4259-aed5-1357694a8dc7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7819a5-58f0-4ad2-ac9a-8d95c053908b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5e4b19-651d-4917-bb4a-4da72dca9b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b713f6-adb6-4271-8caa-df38f3425195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "baca3739-aee0-48b2-9c8a-064dd88963b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2c3a0f-a482-4720-b801-5c7e3e85776e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098d90d2-71c2-46c1-936f-18827be92d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a1e640-8f12-4349-ac9b-a1f040fe99c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c372cd74-a287-42c6-add7-4202f853f7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d326a82-ba5e-47e3-b159-b00ccee971a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0310d30e-cb9a-423b-94a4-6dfb274dcf7f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662a4c03-778f-492c-9b1c-7f66029aaa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08022378-4578-4fbc-87ce-21d08def6960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c24a09-0c10-46d7-bedb-447112b68698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "97498886-7721-419a-8a85-a15fe701a899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab796b98-504d-441d-b717-c11fb99dc460",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5861cc-d32c-412a-b3ed-bdd341e42c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d43103b-1c5b-4b23-8b8c-b2aabf1f1f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b12a07-bb0c-4d25-aa30-c12d3ebef52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c30b593-6729-4d62-87ee-7146b9ac334e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e196ccf5-18a2-447c-ade1-8f541825c750",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eab9108-62b7-4e24-bee7-fb27a055175e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143ba5be-8121-46f7-a327-e9d7712daff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15356a5-737d-4d7c-b696-02b6f82b75dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "779c9403-38cb-42c4-a5a6-ac1326cb6539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ed25a0-7741-4bd1-a32e-7e0e37a66e42",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fb845f-30b2-41bb-bded-dd12b40ac000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b2f128-78a1-4a14-9bdf-343d55243321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f8fd53-b9ce-4b44-a1fb-d989b3f4b3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c98c6ae9-3d82-4acf-ad6a-971a72cef7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3857de-f4f7-4808-8da9-01cb47f14616",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96df0c87-3e85-44dd-bbca-156e706ad263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f5fa25-ec24-4758-9e0d-ed9a8b408608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49d41c9-c70f-4642-a029-049986165221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "914d02bc-c39e-4d34-809a-c93353cbeadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79817a85-be4e-4662-9771-2efc57131752",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc74022f-df23-4876-a3e9-e9ed518b7b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea51a935-8895-409d-8a18-d873615c0b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a9264b-43c4-4659-abd7-0930f397a7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cde47fb-8e6f-49a9-af1f-26ccd7e0864c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833b99bd-7874-49fd-b404-6858e77e3bda",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a89a3d-c5fb-44ea-b8b0-4d37598849cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ac20d5-7250-46c4-9601-8a1136a143c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce558ee-7c12-47dc-b08f-3c01c3d4ddd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e86c31db-5ded-41ac-a9af-4da2656e9bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915ea3e9-dfde-46e4-8726-a85525e88e51",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c18950-b58f-499e-8566-ebe2cab40f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e61fa5-6798-4230-b79d-71a7d05a6453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f20f56-9bb9-4aa8-ba96-0d91b9858c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d68458-a3c6-44ed-b025-430ed4427bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8907fc12-665b-4db7-828c-c0535df03c4b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453227da-8776-4df6-9056-7c84fa81f80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a497dd-1896-4085-baa9-b4e30badabd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b921f812-6d6e-4922-ac3e-9d972ddba32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2d16d5-895f-43e5-8c19-3083c9923383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228c69e6-ff85-47d4-81c2-89eb33bfc89d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0d3488-c05a-4ce5-b010-cace7cb92084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c195b6-3f06-4b92-9b01-a39fd9415a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86031bf-6bb3-4674-a26b-35c92d5fb6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad2484c0-eba6-410a-ae58-82fded904cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8addc7-ce5a-41df-928e-5ce1f75f7623",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39155be2-f7cc-4cf2-a0e9-ce82aa9f7b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19dabf1a-f8ac-4cce-9e7c-d59e865fadca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77f0b31-74d6-431d-884e-53ce1f4d9fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d48a2c4c-0d98-4118-b02d-ec7beb6cb49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd0433d-c021-42a7-a9e0-9d2e7e708115",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e8b675-b414-4ed3-976b-5b4db9c531b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afe5fc9-67e2-4eba-a145-77aaaf368a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acca560b-db2f-4fc2-9008-2e22d806d3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55331b69-6f70-4845-b9e5-c485625d2e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f0d0ca-aee7-48e5-a951-339606dcaf90",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dd71cc-3c45-406c-bdba-32da5cb1023b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982aed74-4488-4c87-9de2-7795e83c607e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b7e42f-f2b9-4c8a-9631-aa7d4aa52cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "583b6c3a-8ba6-4813-a6ca-f0b805ebd26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1925e4ec-3ad9-4bb0-9f93-699e531af707",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec15febc-475f-466f-b536-2ff4fe23daed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed7c11e-319d-425f-9ed5-2d728cebc017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d83827a-b1b6-4dd9-a7f2-8efdee334c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4ef1f7-68d5-497b-81a5-f195523a5b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7043950-176d-4904-924b-af25aac70560",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0407e4-b3bd-4ce8-8059-b86a7a195ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fa0496-d808-4c56-a209-a4e265002888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651647bf-b61b-4aad-ada7-8ef6a4bb4e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa2a051-4c7f-4583-a70d-684788c19f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f56382-dbaf-4067-b674-68ba7e2d8f9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6fdf23-a6b2-4727-a27f-bb30d5bc4727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1b6de1-76ce-46a1-af2f-713d1889dfbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98fbf02-c5de-4175-84aa-1484904be160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2db05e2f-79bb-49d4-8abf-32e91a7ebabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2ba9b4-9ccd-4794-9f9d-d3a843bac52b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b882976-aa88-40c8-bebc-533cfbf27760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a3cbf7-d509-463c-a5ef-8c56483ad37e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8527025e-ea8e-4689-b585-8e69a8868957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "364b4008-02a6-4657-a8a6-1966753a3191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fd1952-987a-4929-8255-9da925f8ac96",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71305383-5e51-4306-ae47-889fe354e484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c81b16-b57c-4aec-b2b4-befceeaf04c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8be0c2d-ea92-449e-b256-09df63ae2b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d46cd5cd-f762-48e8-8ec2-20cba87408c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09f555c-9981-47bd-81d5-bf9674169243",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1746ae-8e2e-4f96-8b33-81b785e7200e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517ff89b-6474-4dde-ae4c-e63809392e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933d86aa-a0f4-4cc2-96dc-6fcd52a488ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "346489d1-2780-4bf7-9e36-c4c7fdea9c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5c369b-153e-4519-9ca8-262b8c45d4f6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cc8cd2-ddac-4761-80c5-69723630e9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1081b23-964a-4b3c-9591-c685bff07ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb35257-fd9c-4bb9-95cd-09e9ff5fe936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd11d34-e128-4911-a90c-f456ceedb55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c527095d-27ac-49d1-9150-750f837dcd70",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5f057e-8e1c-4464-ace6-6c58420f48d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be225fb-7766-4f5f-aebc-8db48aead7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b631fdb-0c77-4ecd-97a4-381a58054cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0704968d-155c-447c-90c7-9b6ea563bb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff87adbe-7582-4efa-9a9e-17a3bde7c6e7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e88215-93ee-4339-8070-243ab7197a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91724a81-f4a8-4c4e-abea-9fdbbf042435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035fa0b3-01aa-4ce1-bc2d-b4d3fe7bab89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb7bbe2-a655-4a68-bcfc-3663ac905987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcab5ed5-930e-43ba-838a-9d1525ba4c78",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e076e2b-9a98-47fb-9b15-cfe70f548445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f33509b-97df-410e-a468-526e97645a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2013cf-2639-4429-a96e-44d837566f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4909b715-1e37-4885-9875-4f958b8928a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbceebf4-1c0b-4a17-9406-4c8132355a39",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b2852f-d223-46ff-8c42-e3acadd0c713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c7b123-8082-479d-bbd6-54e5f1dc5241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5326231e-d620-446c-96f1-75e86127911a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "648863d6-b926-42e5-b6a6-6f91cfab160f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a8b744-520f-47d1-85ae-5bc3f235252d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38345f4-bca0-4687-b8c7-1b7551380ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ebec87-35be-45fc-9842-a45abf80fdb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c7fd67-c532-416d-bb05-5e0cac5a4bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3301f369-9689-4553-ad24-27990cda25a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41b1d4b-5744-4811-9c5b-f0110793b3bb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d54576-538f-4731-ad16-417444452f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcc12b5-8df7-4557-ae4b-dcdc9fcccefb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014522ca-16a1-4311-af21-ade23901067c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb6bd36-2480-442a-825b-a9f6ed5b5ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78647a02-6b0c-4c4f-a189-c058886fc086",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9803e868-e99e-40be-9a61-a974d39a94cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966aa98c-aa28-4e8e-8f06-1217cf6f7a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397ec1e4-b73e-4f07-bd60-18673c9520b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "65a40ac9-0456-448d-89f0-dd6c75817923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7da3f30-9189-4cc5-95e2-e69ae6bca150",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd223b4d-b986-42e2-84bb-00e6f3e6965f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be27452c-4893-477d-9611-52a0c955e5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db8167a-3b0f-41c0-b4fc-d97d0424f80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee05b4cc-13c1-4c1c-9f26-001c6d7bd40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6d15da-82e8-4f47-b6a2-04bb77846fdb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b31ead-536c-4a44-9bea-449d6e72e251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b80b6025-eb29-4a4f-82d5-79335348f541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adb5257-8542-40d4-86ed-52204a125bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0d27d8-b96e-4db5-9022-0c79af55cfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b912e5-9ecd-43d1-abe8-d3e09b1979ca",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0bc80d-009d-4ac8-ab49-d6624353257f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f4b0cb-ee49-4864-9a3a-f60cf32a94d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44942bec-a5d9-4295-81ad-661a89d15184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "660ba00f-7817-4911-8d15-88b9d415304f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f345c7a9-491c-49d2-b1a5-dc760e26251d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79795e08-9f9b-417e-91fd-d64e3ce5176c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2181eef2-43b4-4e40-8602-f42202e9e1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7015303e-90ef-456d-af67-cdfd2620e199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98e44b4e-fcda-4acf-994f-0692478bcf62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c8b060-6333-462a-8ba1-23aae1303f48",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eaf927e-d5c8-4363-ac21-cf00b9a5adf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96321f7e-ea7c-465f-99df-fa405a4d7acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ad2e24-7421-4858-9188-c24ab9b427b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f445a7c-ecce-49d0-b7d1-22348c3e912e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac06c341-1086-4637-989a-a2a3b3080929",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56738a6b-a6e3-4f26-97ff-4f1f3763c9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5fd10b-debb-412c-81f5-c3c58a9d8125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953782a8-9d97-45bf-854a-f23565faa2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "adc7286b-03b5-470b-a5c6-00c7eadd784f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5e5c4b-b7f5-4025-9e49-c1404762b5ca",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0851f8-b704-45a7-a429-2b2ee5268a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bad85d-e2f1-418f-b107-fb6c11eaac4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd10c4b-3775-48ce-b5ff-56a5ec539b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31d08409-1f47-47dc-8ff8-062180c49d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fa6309-f544-4ea0-b4bd-9f756bcb800f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f98a73-80d5-4df6-9a8b-e751d9d695df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8859d2bb-205f-4408-8593-190897b30cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595bd89d-4a70-46e9-8775-4946ee8b043e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e0420c-f61d-4d40-a54b-e32a26b8e1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7013338f-5803-40c2-bd5d-049a484e3889",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9832809d-e2d6-4a10-9dd8-daa434e327c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046ca13a-5d8a-4417-829b-167c8b00e4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763d1e09-be2b-4413-a90c-d346bc808970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5563a56a-1851-4224-9d6e-a4f21a5a8822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe7f7e3-363d-48b6-9476-d3656e9621fa",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fe3ad0-9854-4f8f-8eac-5d464a4220ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f36e49-4b3a-4ba1-86b3-4025d82cc79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69196eeb-5e7a-4b17-8eb3-e12332e23be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d991007d-8246-49b0-a906-bc0538f1cdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46967d5-c9e2-40f5-86c6-266b0088f472",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12d9eb5-2d1f-4cfe-b1e8-09958f314810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2100e417-a363-4f6d-9826-ab86cf16de8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f562ec2-c1e5-4bd9-bf46-49a590d7efe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5446a215-fdef-4977-bee9-879d22eb7f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ced887-e7f8-480d-b8b2-0d470534caec",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c6f1b1-5293-4ecd-aad7-c80592cf619b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14c2bde-da67-4f62-baf8-2a1aba68b6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1037f94a-4dc1-4b95-81f6-70a08303d9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "daf66a9f-a335-4b5d-85d5-13144800520e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadfc632-7bba-4ef3-81db-4b3d920fd58d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c96f45c-4eaf-4ccc-bdba-f64a55c52abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2e3d2e-837a-4ce6-a6f6-60db9a5e44f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c26934-9364-4854-9701-504361fec94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1d1082-24bc-4f1b-8fb1-b8556cf0c389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34744f5-df62-4457-b441-1cdf1929fcd5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73115121-1511-45cd-8272-cd5cf6d24c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63cf6efd-a733-49cc-b35a-d8050557c1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e67a8d-32b5-4c36-a77e-fcc28bb90a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97a7cffb-ab94-4093-9144-9e09635f2345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567e66db-2e37-4781-846f-a257ad47f442",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d74d8e6-d75f-4141-ae70-fb4cc824b624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8d8582-20ee-4778-b87a-fcfca2dc21cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac8c09c-c8b0-43d2-8bc1-04e9fb07a914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e53f1e29-06ca-4c4d-96e0-2a6587f2ed5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39edcdf8-8356-49bd-b550-5f085a6e41c6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b52ba9-d364-478f-a0ae-0e064b512c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38a1402-af88-41fa-b108-239523830086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3f6ac1-09be-463e-a407-93d622cda6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f014ca-57a1-44fa-9cf2-1019be37b831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f17fb5-bd9b-43fa-bc3c-e7a1d7575447",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ed71e5-a93d-4b55-9cb3-1319b0a340a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb134582-a4bf-4a04-8348-ecff2122a629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f137155b-a3e2-46fc-96e2-2a9bfd74996b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "442da0a4-bf8b-4418-9fbe-f286eee966f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa75143e-e012-42bd-a294-05b4b8730e2f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f14d6a-b37e-4abd-b966-01d80d45799c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdbb139-612d-4bf7-aaa5-91c2cb1d035e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2771ee0-7d46-4ae3-ac1e-7cded337abe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37cf4732-a24a-4e9e-b8ef-b79a72566882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287b0615-8dd3-4f3d-afb3-159e56389ff7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5b8bef-4d48-459e-9546-bf9bf4344c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39866bc-4862-433b-a645-601e4ac1286f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91527da9-6d7a-47e1-a1a9-063658273aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3ec2ae-9219-455a-bced-77070238d4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661c90cb-70b8-466d-96d4-d652b04c2b90",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e26c3c-d0f5-43e5-a727-b24494e1ab21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0c9b41-9798-49ac-92d9-3cc3a0ee76f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740ca2e7-6be1-4a59-93da-db2ca256520e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "076c7254-26c6-4e34-8b3c-c572691b042b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9544f462-e6d7-41c7-a23f-931aabdcf94d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1b336f-1372-4b63-86c0-7367721d17a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3422e9bc-ef44-48d8-a05b-acdaec91805c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf063ff-5ebc-4f8a-bedd-b1239a14e656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b96f3f13-e12e-4ca3-8ef9-727e6dbe56d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c663665-cfb1-4263-a19b-8d549162171d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49add91-f765-4f11-83cb-2f3d36a7c2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8a2c16-9077-435d-a9de-dcbe035393d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed71d02-4eae-4977-ba98-9a2e1a1c8746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5425515-3921-40c7-94b8-b1679f91a95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfa0953-cd57-44eb-a748-7e8d6fe8c0bc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a312687-55f9-4334-9b48-5b454ebc0287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c65c060-f076-4fef-a33e-e12477f1639b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e546e5e-ed3f-462f-ac17-4af122672907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3517d25-4b86-4510-a9ed-08251c730b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e3c8bb-19f2-4843-9d01-ce2d6d780017",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cef4ae-7fd8-4f8a-87a6-bab0dcfa78af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9884ccaf-5b73-4da8-8285-a5f2f1ad7cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c259d0e7-9f9e-4a7e-85e0-1516d898dd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "97985b16-6a80-45ee-bfcc-9ec1287c61b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d81f0921-8524-4641-9574-29ccb9128cb7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f92138eb-b845-4bac-8198-98b887a8f5a7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d863b0-8983-40f2-bf00-bea48436da59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fe7d794-562f-4e91-a2ba-d0d970363f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c041d83-471a-411e-be2b-2bb4dce59e5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a6777a9-bdfa-42ac-b2d0-4e5a75429bfb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7124583-8e9d-418e-924a-e9c7cbfd4fd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef94598-5514-4b49-a787-45756006890a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f4ed7ab-cffa-48ae-bc06-352e9dd01d3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8adf2522-8284-44cd-a384-2e8326b296ab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "53599b32-769a-4516-b9c4-6b931d565e7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d32b89f7-3dbd-4e93-b174-897b1453467e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e045afa6-0d2b-4e45-bbdf-220d76238d8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e11c3b26-b1a0-422d-b6be-088f9e94c79e"
                }
              }
            ]
          },
          {
            "id": "499cae4c-0521-4d13-9281-6a794d74f949",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e2e8517-2e62-46a0-ac95-f264a2822b34",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0c617eb4-f55f-4e87-9bdd-9d256c14d370",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba48df2-7e28-458d-bfbc-a3a64afd6277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7e4b4631-3f14-4801-9eed-683d96d80342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4088c67-8d56-44c5-b26e-9ecf6579cf73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602bb056-01cf-4703-8785-0f7c14232d56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0991591-3683-4c36-a367-cbee25c31f8c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8944284c-3cd4-4448-b0a5-cb372e321fff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b934665f-029e-4bbd-95fb-bbd9ee592760"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaf723ea-422a-48a9-b777-09339fa59bde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec14b3bd-3212-4818-af19-0e5e9b16ccc1"
                    }
                  }
                ]
              },
              {
                "id": "40ba9bb8-50bd-4857-a188-1cb66b8e1a06",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d93097ab-9407-4343-87c6-925d7bd0fd45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "206790a2-13e3-4175-8003-a2d293591906"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63f6e08d-bd5b-4242-a0e7-9ce15263bb2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5e63a585-9123-4c4a-8521-6b74b56f23ec"
                    }
                  }
                ]
              },
              {
                "id": "eb0430ff-196f-4ed4-af81-76101c47c0e3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "655735a8-426e-4313-9c16-b2aa060ce344",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "686d7587-6d1a-4fac-bc2c-bba6a5437883"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "439f85f1-d812-40b0-923b-8f798aee48d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c13cd41-2bce-4fe5-b5d6-f28f576cb6ed"
                    }
                  }
                ]
              },
              {
                "id": "dbe60a73-11ea-42d3-85ca-efb330acec3d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2c91fe5-8097-4b44-b474-35eab66b8048",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d89cdc0-9cee-4183-9d5f-ee4c3456ced7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98ebe657-c8d6-4598-b4a8-07f2e564b774",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ced67ccb-dcf6-407a-a817-dac3582e0f84"
                    }
                  }
                ]
              },
              {
                "id": "87b7146b-b923-4214-9fab-e9a4772a1ae8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cac13df6-2ac1-4acf-8e7c-ac814ea91aeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "026b9a48-ba01-4d8a-a800-028fac5e3550"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "175ce8b9-331c-47ca-941a-5a681bb401ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8b937d81-b6c3-4c81-adeb-af87a96efe12"
                    }
                  }
                ]
              },
              {
                "id": "487139dd-3e7f-4260-94ad-d677c57abcb7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "134331ef-0a23-4817-a8e9-4e7d94d7f568",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e193ee0-d9f2-4836-92ea-59247266dcca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "574ee01e-5701-41ce-8c8e-01e7fc34cbc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "251d50c2-b849-4ea8-8188-914645851273"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff252c71-d5ab-4e04-8437-f01d5989c1ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf046053-8787-4e0b-a906-9a60d982a7c9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "65134dcb-e6ec-4d24-83c3-0c75d096ef8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f250f035-5845-446c-9367-04fd14cb8d21"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6fbcb8b-421b-4453-ad1d-a5f1414cd020",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "92893c9a-f75c-47df-933d-92da50d67050"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ff1e254-97b0-4fe3-b610-13666b952053",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c7a45b0-2e35-4db2-a103-c5452b2b75ed"
            }
          }
        ]
      },
      {
        "id": "d4b0ec23-632b-44bf-8fb4-6b7b073546e4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8db5c4ca-7051-4da4-8497-5678967bb059",
            "name": "Negative Testing",
            "item": [
              {
                "id": "178083ba-1681-4389-b0e1-05668ee27393",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f3525d6-00e4-4c38-94f0-4c238a36c8af",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaaca8ee-65b4-4bdf-a4e6-878c2d8b70f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ee57d9-31ef-4a52-8683-31dd4d67072e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef57dace-fb42-4a81-8556-9138f31ee765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "91ed793e-bfb4-43b0-ab19-84fb11f15e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11356dde-9925-4369-94f1-439f1905011d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf380082-e1fc-442f-9ba8-70402896c479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165148c8-dec5-4be8-9da7-e966ecd254fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349c0bac-e3d6-40d9-8349-cc9b6b604716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc618f8f-8194-4937-9a9a-a03d52e56339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a435f140-64c7-4d64-b49c-dc427ad4e95d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb488b7-7da1-484f-b515-90fb5469b665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e849c8b9-9536-4b50-89c5-b78abd06192b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44d9cb3-a4d5-4204-8754-bd89c426ba51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "039bc822-3e88-4ff2-a617-08738f743eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7610631-0c79-485f-b7b8-3e226d5cad12",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b73f47-e691-4560-985d-ebb4952cc99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb17e52-bf90-46e9-b851-fa7d5124c533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be10d7b0-1eca-4dca-b85b-0c6a0e067bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b354cb2e-8380-4fc6-8643-a488b247bccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789b477b-2dba-4a10-907a-7c9df1b28182",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02039270-4ee3-47fa-bf85-df68de083c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a13b0fe-defc-49de-9c42-b9ea8dc9c8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e4075b-1952-4be0-ab1a-30cbd8f2ba8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1feaa44f-9a88-4948-bf4d-fba8f7e9baed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e1ac51-2f02-4184-b298-808388ecb1d6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3751456-f5f6-4357-ab5d-deec8ca1f6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91164113-45e2-4c64-a2c7-d835016114dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4bb46e-e3f2-4d54-8afe-a7f8597f93c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b392b36c-f19a-4dfc-8393-0dffe1210e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a68eee9-f01d-487f-b018-b59cfe287937",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c73f9be-2f27-475c-a5e4-cb56a1756a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e0db8b5-9f40-49ff-8eee-30462415a34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4939abe0-ac60-4d57-97ee-e4af39be3b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b46e441e-993b-4ba3-ad0d-d79e3523e94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0dfaf0-dab0-4c24-87af-a5db286bd77d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7250669-bf80-43b6-b1b0-612e2b19131a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c39074-f240-4d61-9774-56e5fbc4dda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe456d9b-857e-41d9-8645-22211efbaff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35f29e84-ed55-46e3-9b04-6ece8b072450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7d5397-26b9-46b9-9af0-4391bd766daa",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc098f7-e5cd-4add-85d6-d2d282d95819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9575cdd9-1514-401b-ba4c-4b9e0bf00623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d059231-0aee-4856-ab4d-3399cc403899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b03bac70-4ec5-41e1-bde7-5a2938e851e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995b7a39-3a92-4f01-a7ae-de2087bd16e6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fab942-ef9d-4339-ac06-52e80d09048f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12595c7e-20cc-4bbd-894b-c4cca9e4f5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2988dc-23f0-4229-8022-e4b2a10923e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f78fbad-a681-4cc5-9159-6b649394974f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64169728-6128-4a16-ae3c-ce5cec42c035",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a055cc18-33c5-498e-9c76-0997259029c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fab56e-9010-4d5d-956c-35119c8722da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4171e980-c216-4815-a8a3-def4991a4baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0b229825-1006-4008-a71d-bba6687680e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b3d8f6-b75a-4e3c-849f-b5f08f0f485b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db59a98d-fd66-4d8e-b671-7b04baf4667e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b6d8247-c89d-4099-a455-76efd0b9c097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475ad6ee-cc6a-4681-8bdd-f37b385fed71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfddfe7f-c435-40f0-aa3a-b54fdb2181c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34251cf7-66e7-4de7-9320-30575156297d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b23b30-a72b-4470-b883-92c6f9e98302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae2fdeaa-5228-404a-a37d-f90cce56f423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05fe2f3-cdfd-4b4b-aeec-944887e48944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dffd9511-b307-4ef2-8ed5-c56e8c6ac05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05c69f6-c16f-4676-94d0-46b6c3bbcca3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968721ae-908f-4462-8747-928b282c1942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5273d8-af37-4d73-a38e-b266fd6abc72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58161051-d07e-4fd3-a475-adb5d3b009ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcea12d6-78f4-4b1f-a57e-9e24b5b035c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9105d0ab-c6c5-43dc-8655-4a3ddc00cbe4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9651bf4-826a-4a5d-8f49-a3d92dba2892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0795f7f-7bb9-4ee8-af19-a0d442316a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e0b9dc-32a6-414b-977c-e875be7d59f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfe2e2cf-6a7a-4c21-9904-94c40b338474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859f2661-7468-4a80-bb73-adfcef26b621",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e62fbf7-95a6-4fb0-8f6f-0b6f3da9e8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c6e450-7233-4710-9948-7aaf3658ab4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80eadab3-f4ee-43de-925c-26d50456b23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "00adc45b-aa3a-478b-a034-fd6d38a53d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0663cf64-10e5-4a12-803f-9753eede822c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3627cd28-da3b-4b1f-8afb-2a83007d7dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9eee4c-ed35-41df-8613-c2c614088b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68eea3e0-8791-4e2e-aa30-12c566844dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd96453-46ad-4df8-b5f6-a10ea375a0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3063cc95-ad0d-4be4-8cf3-83d1f17ae830",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be77e272-7ed2-4ef4-9a14-cf692e61c8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c594a0e-c24c-4e02-984f-35f39308c038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfcc3fd-3963-4b50-be03-d4c995a77b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "777d5347-e1cd-43db-a0d2-903d31d83d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae36a43-0a37-4eb6-96ce-0b1e67813019",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2952576-9287-45ca-8c87-05e39420fa59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d730d8e-457b-4f9c-a2c8-9f5e18f471fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9586e709-f524-4c3c-867b-49f31aa7bf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40ea0188-134b-4646-9a6a-6386208cc508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61baeeeb-29c4-4d95-b6c5-3caa1665119f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb105e5-529e-4ddd-baa6-e6e3e42c7350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14bc4386-8534-4d78-b6ee-55aa1fdba076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c171422-ee72-4648-8782-b648007afbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68fe5621-400d-4cac-9c01-f6866c304798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc2727e-fab3-4fb9-a544-08769fe99db8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78124eae-0620-4099-9721-dab6f6b5030e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633c1cd7-a227-4902-a038-cb39011cf0a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607c02b6-f1ff-42a7-b856-f189c63466ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9395f0e3-139c-4248-ac1d-8f1aaeb3a87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4c6422-8474-43d5-ac99-d302d286d235",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7696b3fa-fa74-48dd-a886-50fe364e36e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907ebd03-92e7-412b-9ec0-5d2feb4b65d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cbdfb0-d949-4f0e-acb7-f70464291a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ebfd3c1-42a5-405b-b39e-1fca6818eb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba7f367-89b1-4312-948f-bf3a9619540b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9011b5e-6ddd-4190-b8d0-70dcc6a2eff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6219f95-801f-4de7-b2b2-8e76ff6e2e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750ea6bf-b381-44f2-bab5-122e30679d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4758b4-fe88-434a-a396-7822820399e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c0f9c4-b4dc-421a-89be-9913bfe62856",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea05c78-65b8-499f-b234-a3d99635b9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90826c1f-c55b-43bb-b089-0cfae99594df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5976fe3-c608-4b5f-a2c5-6078da0b6c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5744dc6e-5dcc-4985-9171-e361118e4850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabc2984-286c-4cc6-9869-b4dfd15816b5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282ff067-2d66-42c6-9bec-2e925eeff4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35cbd29-2336-4e26-996e-19ccd21776d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eda9fa7-3a48-4a7c-b5c0-a7743d229009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "220fe03e-ebbd-4c96-843c-17fbb81c1ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5912d960-fc03-4b8c-89eb-27fdf02a4d95",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd0ebc8-27ed-4c8b-87da-aebd922840ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8617e287-7434-4d9f-9e95-1dd1d2e16286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1123b1a8-e452-4794-a2b5-86ee329d2ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c747270-de45-4918-845d-2dff54e3b93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb562f3-3ca0-4226-9e27-1d051bcee4b6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89fade7-d128-4a3f-9c78-c05e76c4bb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4d96ae-3663-44bc-b5f9-42ac2b5a81e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7537bf-5957-4182-a6dd-3427f1cb407a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82e4e4b2-d92c-460a-bd64-f82df116950b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba013c06-aa97-4759-9f67-97d43dd790ab",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08b53a7-724d-403f-9040-2be14b12641f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f84d4e-d8b7-4efb-8bfe-be12249079c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92a0a1d-b9db-40c5-9ecc-79ca18220783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1b568a-ccf2-4fd3-a6f7-d3663f98731e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258d9709-a88a-4277-b173-ef3a6ce84421",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b65549-b31f-4d74-97dd-d8ae8bf47db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a696cf-be76-4640-9058-dfe08a83bcbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2fc36d-e5b3-401d-99cd-2a8453fa58b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5680897c-915d-4aa9-9204-f122b703d0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff866732-ceaa-44f1-adb8-f07c6b798f4e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115fe61a-872c-4658-a63f-a278dd37d0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a0b0ae-261f-4148-bdcc-62d53195c5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08f0aa2-ce15-4922-9cba-8fac993e2352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "972c6075-0c52-4de1-967b-e7af72c82b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75d3fa3-0f22-481f-b973-a698c0308884",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6367527-1e8d-4103-89dc-4c1c0ccd4bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eac7de1-8bc5-48a0-89dc-2d483f0c1598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6754ac2-04db-4786-adcc-0fa487b82a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77531ba6-7615-4bf5-9788-4bf97baf8986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd15580-bab2-4f1d-8a9e-fbb3ca0afb81",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "806287f8-d540-44c7-8354-fb1f7752a170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3be7d79-e1fd-41bf-a6d0-e87146156d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb57c1b-2f11-4b76-ae48-a00a056ff8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf94446-1d37-4b47-8bcd-88ce34bf7343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a66d9fd-0059-4859-95c5-e25a7ae84ae4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64920ca6-c72f-469a-b805-0982e74ec74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d549f341-6e39-4c9b-a5c0-db8e164a4660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fea7524-624a-43a4-ae49-11d38c7a984a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3e7cc0-383b-480b-b32c-97dddcc45a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb56737-6769-4d6f-8e3c-3d9516fa1323",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41152be-db3c-4f3b-9dac-3f1c9646a9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e5a233-75d6-4dfd-bd21-06ada358d28e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f290a972-69c6-42f1-91b5-43d594bc4259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23f94024-453d-45d0-8fce-f793c309ceac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4690ebf4-0d05-4c57-8bb9-a57c7772f368",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb62b280-b1f7-4955-bbc2-5707980e02cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07081ce-7d70-46fa-8e91-96f6643ddc80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e791f57-7db2-4f86-b577-9d5ff421f88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8fdf7b6-4486-4dc6-a58a-f8192e8cc018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a28b952-c664-4c2f-95ca-c5777c654158",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66a651b-f4f3-45ff-a342-7929224461ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e5f8f0-96c5-4e7b-804a-0d880b55958b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4852700a-cc6b-4c88-95d9-2c912822b548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df315445-e71c-4cf7-8302-02fe031c1873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babc9430-1b90-49d3-9123-e86930fe0de6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc6c4a3-42b4-45f9-aad5-cb4f4e0f4b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653209e1-5938-455f-ae50-d13684512bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d912739-37b6-447f-807b-7ef8ad53c472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "050bd139-49b3-44e4-9d65-82f65c3b4ec7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "360aa243-23e8-4f42-b5e9-471f46e1a05a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0801fc26-62f7-4104-97c9-3e9a55f53b7a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af77b4e5-5c0c-4a04-bf65-cdad83e95cae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b562da-0936-4951-9c48-a5fb0f9c5586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dab6eb8-2078-4958-bd97-e761b70f67e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e840021-e7dc-48f5-86d8-34f211c133fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2969e71-d096-49d0-a7d8-4dbe32520521",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a3e9a26-d6bd-4150-9895-abfa8aad9cd7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fac45c1-63d5-4ebe-a8aa-f680622f0814",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb8c2bb0-2d2e-41ed-8021-a5ff76aa9d2f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab67d076-f341-4822-bb6a-fd9d14e236ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b9b3e74-abb2-48e4-9c99-a0b60d58772d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea798abb-bde1-48d0-94ca-727bd945cf22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a6d51c62-5075-4e18-a8eb-bc3341698323"
            }
          }
        ]
      },
      {
        "id": "0fa6a35a-8dc9-4c14-8ba2-efb817193f12",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "870e53b0-53c7-4659-b5b1-bd229bf54392",
            "name": "Negative Testing",
            "item": [
              {
                "id": "79179074-ff03-48ef-87c1-92468e8fc895",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a32be0f6-c7c2-45fe-b379-b66e235b40bc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47913c17-4c6a-45e8-9eb3-4846ba2bc0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df197265-eff5-4c05-92ce-7c4f72678b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7f0cda-0018-4e78-8b70-6e4a5f0a7f6b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e460bfbd-93fa-4571-ba23-1eb12ec4f7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86690d8b-5bce-4e4b-9ebe-03c6f5199bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f2e522-0b0a-4bd9-ad5a-e18ec349b0a9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe99e2fb-c785-4258-adb1-6b004dcc2a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284f971b-ccf3-4edd-99ae-07da0574cb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af8a67e-fc63-470a-9ee8-fc5ab5e1eaf6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a3893f-d624-45cf-9527-22fa0593d74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7146d06e-8bd1-4cc7-8515-ad9a3deba167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c643dbab-366b-45c5-9d2a-c8562929c14a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b53f777-03e2-42b0-b641-6557b5a9abef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84226d1f-91ee-44b8-b8a3-0c36a3cf0db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575704db-1228-44a5-b74f-1782583b4826",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12a191d-5fb2-4ced-ac8e-973e966590ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9070d63a-8e9d-4d40-888c-6386cb0dc6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d7bd45-982d-42c7-81ca-d4a98d39f426",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be06d07-e02c-4288-b229-484563d64442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c61aee6-ce70-4bce-a2b4-e3783dc74176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b0ccdb-1d08-4fd8-af31-68980be777ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac2b733-c388-496f-980c-5bf89e2f30f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7fbe6c-d451-4298-847b-9e93a715d948",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca55ce0a-12df-4827-8620-d7316d4a695e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "506e5214-4e67-43eb-bd6e-cf60d1feeab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e661572-8d57-46aa-910a-83c6e749eaa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44da78a5-2c55-4876-ad46-f38a3961bc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04afc587-92ee-4133-afe5-b80a9c3db9d7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a044bc77-1341-40e5-a5a2-e0b1df1d105e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb69b52-1008-416e-be60-06ad158df985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6491a852-2486-4e18-bc34-7f1a7ef9031c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7681ce37-c346-4c04-a235-b37e551cefd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7259657e-847e-4749-ab34-55d51b0f9aca",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba5c692-f802-4a8a-9c6a-fce2e58eedce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c37159d-f735-4d86-bfe5-a927a8d73b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcefec2-82d9-4d8f-bd64-9cb0aefa970a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a7103e-3a87-4304-9626-8ab636666aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c41a1e9-0176-4824-ab9c-d82f73ffafee",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5136c6b-871a-4243-9228-afc7b5997eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91167c4c-cc6e-4c30-be56-35733ce1a95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c756023d-af98-4b2f-80ec-90e55538681f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3554a348-d216-46ea-8c80-2a914b704376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1acd7ca-f49d-4734-835d-acadbcd3fa4f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba48fc8f-2119-4473-84c0-5379056408a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbf5536-56e5-44f5-966d-e7212f2fa7c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8011f94b-09d0-46fc-b54d-8bee6229763b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73885131-7c14-4653-b9dc-8d714b0ebc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db9c712-04c3-488b-857a-8beda0a4d4b2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca2b99c-77d2-42e2-a1a3-a4ed590656e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca62a0c0-6a07-466c-923a-f948900e5cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e3ba26-e082-4780-b6ab-9d894841556a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2723a264-3b19-442d-8888-6c93a0157766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cc8935-0866-4515-8a8f-f99a4c11293a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec76404a-3811-4183-887e-f6a843c9043d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d994f4e-ce3d-44f6-817d-2448dd47a60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d287823a-06bc-4743-8d3d-f90737bc78a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7358f6c0-d104-467b-a7d6-978728a990ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64a8601-b7a1-4bff-8870-1d5f9e1ddb9b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408d5f31-74a1-4e22-8044-732fd3e2dfa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff253bf1-6e34-4da3-92de-33b116b117e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb3c31d-87c2-4d33-8805-4cd192f2b3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f308c953-aeac-4a5b-a6d7-909ab0775954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28161f4f-feab-4512-9bd8-a9908ebc37c2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e633d7-145f-485c-ba7b-27ba485ee49c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12e213de-e891-4b1d-8f03-ceb3bb5d1b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8458264b-5d8f-447f-8b5b-18d9fc74b47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75e4ea9-9fdb-432a-bcd9-86384c344ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46fbab5-d8b6-41bd-aeb9-a25abf2f0bef",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3dd96c-6078-47b7-9617-992bb282e4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ddb4b0-a2a7-49c8-8ccc-bf65231c7d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7450c15b-bd1b-4c85-80f8-cd4144b0417e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0bb946-2161-43ad-924c-0373ee65e7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c681570-514e-4e3b-99f5-f51c14259a2b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a7acfd-a4a1-489a-9076-88b81d8289de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b56414e-7951-49f7-b8d3-b706fa8d13c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74227c06-e4c2-450e-9883-d8d341d8649b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2860eb58-6fdc-4940-a046-22ae162f91e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53c94b4-0b6c-41e6-a0de-0940e86ece02",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9749009d-2ced-4226-b230-cb2c950d790b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9aa4f9e-97a5-4566-8fe7-5679e87e3bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1880fecb-4d44-4e43-b1b9-0adf648cdd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08085386-9557-4fbe-a039-faf538c8d224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3d0390-5ede-44bc-a402-365906e94a12",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088c39f6-3673-46e5-a53c-4aaa437edb06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1fca54-f045-4edb-a86d-2ddc7b1b6ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a60bfe-b91b-4277-b090-b1b79dd63378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11cab36f-607a-4cc6-8c46-7b3e7e808d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504c245d-83a4-44db-93d9-3d40a1745e4a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10267790-a272-4a60-910c-cbea56c2fe60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffe1f86-c30d-4549-b871-2cab69a61f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f1169e-c708-45bc-9682-b4d38eca8129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231465fc-2ae2-4deb-b1ed-4d7889462d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def0ec4c-f456-4b20-aa77-0eaff1aa4d7a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d040c20-6dfb-42aa-a068-d40f0533991e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571108d5-0199-4b89-95f1-6417cff6b47a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ad9118-a007-4568-b766-5d4ff7bbf625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e558b6-7288-4c7a-8ac2-6f226eb0c212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4b1f98-6388-498e-84f7-a4b5becaeec7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d407eb1c-96f7-4ded-9e97-e36171810860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edceb455-cc85-4e1a-9f1b-bf0420f3bc4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d28819-6f6d-437b-8bdc-b7d5909f79e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3984ea-bbaa-425e-9b21-a51ecd497aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e36bfd4-639d-4aa5-82df-96420afbc0a8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1377e16-3478-4dcd-abe8-906cfc517d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "354d41e9-ff5c-4f44-ac54-657024e5a3cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934aba4b-ebcf-4f6e-9019-ac932a457862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3f80c7-49cf-470b-9965-de1f6fd7ad3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9444e1-c7c4-4853-bd89-5cf6eafe7633",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfec18f-cf9b-4329-a3ae-7bdf1a069b26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bbe3150-8a42-42a2-8a74-2a9c1d6f35a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb41b07-bf79-48e4-a335-7c402c897579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e55144-5901-47c3-9984-86d928cb298c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582a53b0-ab1f-48d9-bdfd-9b3d36bfa00f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72312373-10aa-4cf6-ae3b-6c85be09e68a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae7b2701-86b9-409f-a337-f821b80afce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd92f69b-da96-4e79-afea-355d26f80862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6175bf45-c8aa-469b-86b5-f609c5ae9769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d38eebd-b428-4350-8cda-09889aa48124",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ce0c18-4abc-4170-9f88-6b010219896a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6be6f40d-e20e-42f6-862d-f0239b907bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf39d260-6326-47d9-8eea-1d11fd27e6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0a8a96-a01b-40b8-816f-fb13af25352f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167ccd4d-b57c-41cf-91c6-1b38bc9b72ac",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7aba78-1974-4831-85b4-c6bfa140b345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f86b0a27-ab3a-4840-9cb9-a178a1ca9b1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbaefdc1-2421-4b06-ac5f-6af20771820e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16005b14-4aed-4582-b771-e4c9214ee744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15370ef0-6817-4ddb-829b-e90a11548e64",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db32a662-cb1e-4d59-9f1d-8456e75fa498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c49168a-3d2b-4992-8943-327c55b10cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757af25e-1c06-4445-9b53-85cb05c05dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62742d4e-8b43-4436-bfab-9a2aeceb515e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dafdd6-617b-44fd-a425-3ea32296c2d1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4856a605-440e-49cb-8ac6-304da3c00665",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fe39ea1-7fba-4293-a388-7d04f64c6c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6914e8ce-5e7f-481a-9ea6-b1385ed26e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c20515e-63ac-43b1-8921-2951ead00c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c904ec6d-5b97-45bd-ad3f-51d6f16331aa",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c82037b-a411-48fd-ba09-f6796f96bcd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cc66914-eb9c-4bd8-a57f-f03b9aeeef71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ff90db-f196-4fa9-86e9-894f9adb66cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a8c104-f0fe-4164-94f2-569813ac51c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7501b4-9dba-4773-9d4b-da30c69f3e9d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d53b9f-7486-43b0-812d-511b3965b401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4a456e2-ae5a-44a4-88a4-f5c80d8e99eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9114480-a8e3-47b8-aa78-7c4aa884e519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c4ce50-630c-4c00-97e1-3da59031c659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431af4a5-8f1c-4ad6-9c28-f7705dc7d28c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32992208-e710-4cf1-8ca3-17559b625010",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b15511c-f6ca-4478-bbaa-0dd2c2ed7a02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e628d5f3-c497-4587-9e8e-c1552ccf0eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2af976f-6c37-42ac-b36f-c5ab2992e54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9617765-7aef-4dbd-81c5-86e22d2be044",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a74a253-d6bc-4800-833a-1278a947f9c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af0d05f-f9f4-4624-a778-454c5ce15496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f22080a-5d37-4dc7-8d8c-9af6afcbda8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc78abd-ac00-4f5e-9ec8-dc081bda348e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa4ebe5-ac49-40a2-aa41-a3a4b5022263",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901fab3f-cdbd-4384-bdf2-ca714574e0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4854d1-8769-442e-90a0-6f98a4fe1e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55e55c8-4509-4244-a982-bd695c8e5300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ab0cec-6a44-4576-a946-b5fed4cc69d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0255f99a-ebeb-4f48-bc0f-d80ea2e07ada",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a291cc-1215-44da-978d-b5744121c445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a16a60-2cd6-4860-b35f-bb3a8f70a270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e0a41b-b2ff-44e2-b06f-e40ef20323a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d5002a-3d25-4929-aa46-8da98f5bdd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a66f84-4f47-4d89-a3b7-45c84e859d03",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eca6161-38f1-4d8f-b998-0e535f816a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467d55d0-9ea0-428a-aa43-eb6199b21df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98223706-d108-4313-a1ec-1cd7d6a00fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178ab1ed-3e54-4b88-b456-7b0a6f81936e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbbcc24-ee5b-4927-8c3a-af50a63a84a1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e32f6d3-6e65-4f44-8abc-dd84327d23ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10afeb9d-b6dc-483b-b8f0-37c058cfa792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3133f322-91bd-42bd-bebf-30d80270a158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5111b0c2-a38a-4761-b3cb-7f218c4e8aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d233acf9-484c-4412-92d5-b0c488b0cd58",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ded9a91-522a-47a4-b0bb-8a5fd863058f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cfdd091-e4f1-4d6c-8223-2ef7f9dbbc19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2c5069-3ca2-42d1-9d51-c1668fbbd859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8010b381-e9a1-4524-a365-36794734a639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667b1b0d-9e4b-47e8-9bc8-74108bf05db1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776b5b32-31e8-4a5f-8766-9ed6c3791963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d910de-be1a-4684-862b-c45b8bd03539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c346fe38-b6ad-47e9-919a-73ab887aceab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc05fd9-4c5d-4548-bc8a-1a7933ff3239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6657e82-131c-4c34-b3e9-6b35190691d5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9feb515b-9608-49b9-a8fe-d9141d811c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e056011-c173-4b6c-8330-286ae033e546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddb5d0d-9d41-49cf-af55-5d75ec66c8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624962a0-bc3e-4133-903d-26592cef8ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e46248-8787-4927-b510-760550f5a5df",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f48e35d-8a16-4ede-bb7f-36395eb19cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546a3b55-8d92-4ac6-bc84-6aca75e7bc26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af49eb6-9090-4bb1-982a-9948949b9cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07acec7-511d-47fa-8657-1a7618dc03eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae50a4f-4b7d-49ea-969c-6551a4354029",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7737014-48ad-4390-b1ea-b9f71b7a8d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d890d065-ce4f-4cb9-bbb1-2abea452da86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc99702-ce64-40f3-8721-602971724bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0452c75-afd8-4c7d-a754-69c223503868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d38b027-fa42-4762-bf0d-fbd3a3168987",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6968d7ef-911e-43c8-bf68-e73c0d993ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44cf189-3d88-4016-8d82-3a3708a57ba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d77062-c654-4892-bb34-2cabc22e871c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f858c1-45ac-4ab7-b4b2-4fa844f4afee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f89962a-bba0-4299-a679-e3d8368fc7eb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aead73a9-d2d6-4b8c-963e-c0494fedd2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6234da-5dc3-4bf7-896c-c2f161da80bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ca1eb7-d572-4161-b63f-d3c7166cd3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c488efbf-c9fd-4b54-b619-e7f53b0b9926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69859116-a2c8-4a74-9658-f4852db812a8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92b65d6-79c6-4c54-8b11-aecb287019af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb57fce-842d-4dca-ab1e-d6dbe8cb8ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7421c6ab-50d9-420c-ba05-a26e823005cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b6b685-0bf8-463e-8869-447fce4b1ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14ee15c-849b-4b60-bfe9-058c9601525e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08157a0-dd09-40aa-8acb-fe4a7f335de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a221e1-014a-45c4-96ed-b60aa7867610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046ce6a3-5896-4742-804e-5381473e87a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945b23ca-2f2d-45e3-a342-2c40f78840cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdea1b3-a611-424d-a610-3916914f7389",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec8a320-347f-48e1-98b8-dd70467d7b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c2f33e-db39-494d-a53e-4d5432fd4c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3731faa8-8f66-4489-9bd1-65f3f58c1bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5795ef98-f5a4-46b4-af09-5ad5dfd8c73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b50231f-56fa-4188-8a33-b4f7b18e745b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75e7546-4257-4434-ac73-aebeb61774e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687764d9-a298-44f7-9ec3-46360d163e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f23341-1fa7-4779-8c8a-7c11fb7ab917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f92e77-444c-4ebc-8dd7-bd8c7b7fedd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d348fbab-8060-4ef8-b493-b24f2dfa29b0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68565e7f-c42f-46d5-bc0c-27b6b05f5f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b27aca-55c3-4c26-9764-f1bd1d1af0d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c121953-a424-420f-9373-cd6e8624d55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fe825b-6543-4c85-a5f5-5f1b99147fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68adb65f-30d7-47b8-b5ed-cf26375f7a8b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2669db39-1d35-422d-bc7a-c73954217027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15321f9-228c-440d-b507-46be7526b748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5763bd91-a690-4043-a69f-3d15684a0e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e844441b-a91f-460b-ad79-6dd67aa7537d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a03b4d-76aa-4ac1-a5a9-27df88a2458f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5b6a1e-11a6-48ba-a9d6-5e386a135f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409b34e3-8036-48bb-83bb-66170f351976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187b7a4d-c266-4d29-bdee-0d21b89b6789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f77157c-6868-46cc-a6e1-07f6f208a3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3911882-3b25-4b04-96bf-d0337b6e6097",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91cb4e7-2222-495e-8506-5c7bf97ab51e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4250c0-1958-40f0-b025-4a8340a62631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168e592b-56c4-40bf-82c1-cd6e153e8fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5bcb94-c963-442a-b613-4aacfcc35ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112f015d-37f7-4eef-a092-e52be59900be",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785ea68d-4a23-45f3-bf99-a298c8208803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81501db1-0a17-47ad-8626-a354f61919c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb9633c-0a0d-4848-887e-dd0fb9790d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072273d3-cd3a-4769-a25f-4ea108f66a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d71f8d8-31b7-4d8d-9777-893ef2a19337",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543e5907-b6b1-487b-b5c6-c57ffd013dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147ad33d-1955-4ed4-8142-2a412b06bd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5d231b-b3a6-4b31-b93e-1771fe29b23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d777ccf-d11b-432e-8cf4-4420ac14a3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4010e92c-d7cb-4c27-a567-51be6880e20b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f844f5ad-fe1a-4f51-a2f1-be838d4c50c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5497091b-1a70-4a28-848b-ae5a10f3a595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5194f47-6cc9-494a-a88f-c48702e56131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fdf2aab-1921-4f55-832b-9d58b53c0b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b319131b-0bb4-4322-acb7-c6c31078b03d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14604d9d-de05-4bc0-b535-7c2f34490992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dead19be-6aa3-457d-b36b-e96dc91ee7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4c69eb-1073-4d2e-86e1-5ec87d1851b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23016c9-37e2-44dc-897d-56835f2bdbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255eaac1-1741-4ff1-ab47-47d4c3e9610b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85445947-1275-434f-94f5-96e058b1c1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ee0d50-ba7f-401c-a247-79c78a249110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa742da-f155-4903-8e70-4a02a465defb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65f333c7-5557-4c0d-9f7b-54ebb93030f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d634448d-609a-472a-93a2-989ce35ba5c5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb68a97-4125-4800-ad8e-b2fba3f4ac01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104415b2-b991-4ddc-8e64-e3c4bf0329ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b498ec8d-3382-4fe1-9a44-5a7dd8614db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18ff0c2-42fc-45e8-833b-6f286eb445ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ec4064-af6f-410e-9963-0befdf2c9814",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6175564a-5f41-4950-a84a-6263a4231c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017138bb-08c9-4eeb-b434-038f399b8aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a463b29-ec03-49f5-b7cd-59c525d0d56a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69286593-ff1c-4fc3-8801-74916720f0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ab657c-075a-4e29-9b84-15921adc1144",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8736b903-2e71-4154-80f2-5021653f68b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed453d11-5fff-4c02-8f94-119c1f1481f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a94f19-f51a-438a-84a7-69eaf22e8af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ad3aa4-71ce-4868-9aa9-7ac40092c363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee24f70-3829-4027-8309-0a033b76be93",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4f0b26-c622-492d-8102-1ec8575426d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff8ce8b-7720-41d5-a85b-aceee9dedbe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a6df6b-3803-47b2-8c16-ca38dd702fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebaf0219-a928-45b5-89e7-9678721b297c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2925f16-6f58-47b9-a49c-70434f875277",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0de64e-4c54-4c57-a14f-5bb822090c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1a7c9c-558e-4c9a-8602-0079d7e2863f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0cd68e-d051-4f49-a46b-87858cfaa3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582c7319-1389-49fc-b2e2-45eeb20f96d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bcb8ca-efa2-4eca-935a-87e4a456fb07",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b3815a-70c1-4e54-84ec-a1c99c5af53a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "070ef736-5fb4-458d-9513-0934ddc97714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd84a9a-7159-4236-bd96-0f5fb222cd67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f70ca0c-21ff-48e2-8c3d-cf0697426a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931c6b6e-0b1a-4722-99d8-2cb221f7afb0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085a0534-c868-4671-b840-da4024c2f961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9476487-18c9-4d21-b0c6-a88f55d78cc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce96d47-a155-4756-8f52-a76785e96dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62fbd8b-3453-4b0b-9f18-3f2ba6259276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c94012a-670e-4317-953f-c93628225b46",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988fac67-2d09-4412-9fd0-98b5ac76bbb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dab907c0-6857-48e4-83c7-ac862b9e2feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8c7854-66c8-44c2-8f6d-10ab281f4dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c7847b-68b5-49f5-a50b-72b813da8c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54a243a-f67c-4d05-ace6-96b559605ff1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0c2821-2a0a-4c59-8ada-cd08687b6045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "456c792d-0da9-4660-b665-08d187e2fe8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a7bcd1-36d9-449f-9997-89f3fd9491f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf52c3f1-5f4a-44de-96d8-26121b74a60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa28cca-05b2-4289-afc4-8185b9f33c79",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdde5824-dfbc-4fe7-98c7-bb9731341d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b6843f2-a1ce-4335-9fce-267418f95b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f523e26-9616-458a-97a6-ca385cbc2114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8147d6f1-ef97-4780-bff2-c708782077b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01e672d-347e-475f-8eb9-40379ff6f584",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c275113f-7e47-4647-b888-df5d56dd6ffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b5721e2-f397-48ff-8756-48e4892c5011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bea8ba4-3bce-401b-85f9-0b828d49cb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d19905-0033-454d-ae42-f47c787ac309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4576e86c-fb4f-49ca-ad77-83d050d73d4a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8616100d-b3a5-4f16-a609-27553406f5d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23566a14-61c5-496d-9f11-c5b528633c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0ee584-5489-48d9-8836-16c44e625e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4562da59-651f-43b0-bbea-8f8cb20f9569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94dabdf-88b7-46f0-a7de-c036120b65e5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8981c1-6399-4e34-97c1-298b3605c98d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e352742e-d2b4-48ec-b64a-8792caea1beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f845c55-bed1-4614-89e9-2497c7a091d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e6e695-08ff-4bf0-81d2-4eafbe9cf966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dcf130-9b44-439f-8533-9511142fc4d1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715fbeaa-7fe0-4432-b213-051130fa4025",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7407c623-5086-47e2-9598-2bc49478f7fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590b2d3c-c55c-4a5d-a754-db0a8e3b94e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55074a24-b69e-41b3-bb35-9b2403d9374b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4143a9b6-10d0-477c-93f3-f7d9d060efcf",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9858695e-591c-4b7b-aa43-85cc84fee7ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7abc384-23a7-4e84-b153-e3bb1a6b4cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329ca91b-4167-4248-ae50-34ebd08eb48d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f0cd4c6-36c9-474b-bf1d-37ee432a7adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14c4c49-cd1e-4789-afed-2924834445cd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c104cac-f9cf-4c27-be1d-534bf57c3b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b08124ef-b272-4ade-86f5-e58d80299106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18093208-a4d4-4199-adfa-e639459a7d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293d62e6-d369-43f4-ac59-f06baf42fad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a38b6b-0e75-4b07-b040-ae68398085e0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22496d86-219c-40cd-9d1d-2f7040935d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e900d2b-daf3-4bc4-979e-e039edb46289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feede5ce-5247-4c6a-be12-9afc2c522fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7bfe52-5653-4689-a577-bddc3d096a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ce9bd3-7ad9-4da9-b7ed-97daab561f5e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a13c404-0f54-4d52-897c-e4cfefa05586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af09cf6b-044e-4e6b-9ac6-3e42a2fc9dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7487b8e1-381d-4109-9216-85e2cb3843dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176f81e4-2f18-4c2f-9645-5c32ba6e9056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1ea04c-963a-4477-ae69-a2e9c6989d57",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52b81a2-8b4d-44eb-b1df-b3506aa05ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023e9716-c36c-4142-83f4-3a196208e56a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113c9acc-2223-4ddd-9ee3-51b2b8754173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c685edbc-a379-4665-8791-b3f76d948da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340e6640-1dd8-4d4a-8e7b-20c8c0511ab2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef1b597-c746-4468-b23a-f5c402721173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0f53464-5be8-4c81-b872-1b1d1c7d89fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebfc984-9f2d-4e14-9696-06b8a6a9d623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f9c9cc-0ed2-40e3-a5f1-a1ffd7f46379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273950e7-cbb1-4369-a205-79c69c070e13",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d892b413-4843-45a7-bcb5-57f41107337d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26afdd35-a9ce-49f1-bd94-8aa03afe406e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283e1bc0-ad5d-4f82-8732-9341ddc6b6a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8393ee0b-f8f2-48d7-9b1d-30bc82f38404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8503d7e9-f91d-44a1-af7f-c42887eebfa4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce4b752-e0be-4198-b199-e84c1608896d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9dc4a42-9d3e-4b9d-afa9-cc88cb7b5946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7681f10a-3257-4baa-97e9-b3939502a293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164d4d02-9e7c-4bc3-b790-e45b571ecaba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d16dc2-30f4-4735-b740-fa6248e652f5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d99937f-d05d-458f-a536-248770b29aeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddfc1722-cb26-4b55-b5b3-402901396c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c0d5c7-8838-49ca-9f3d-21871a963ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0409c5-61fc-4c64-aec1-d60653da7446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e6180c-0b69-4d03-a1ea-b1b569c6b3e0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598e0b27-24b5-4409-a2ef-56270a0098ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb605f85-2853-46ce-98c1-f3c42a268bca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bea7f2-53d8-418f-8cd9-78bcbee4a4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c717ba93-f798-432e-ba80-01c6e7760890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec07484-7d7c-4133-b9e1-2336c9e4d2bf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9cf7cd-24e8-4d25-9da3-0e9ecfb3cff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22d4b381-0a0e-46ef-9f10-a3d65c5c9ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebc5dcb-4f16-43f7-a62a-dbf3a10191bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71421c46-663b-41a0-bbfd-7704f34bb902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce450d97-2e52-472f-912d-a86fc2a11f75",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9533ff5-5176-4f4c-856b-8f393552913f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ed00ec-61b7-4c0e-b4ca-ddafe9503385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72992f3a-d729-4dad-9e2a-8452abecfd95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e8db47-aaf9-4739-bbb6-3e58edc501f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f9d7eb-5477-4d8f-999a-2aaf1c94b015",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796c9529-e94f-47b6-ab5d-1e9f4d847dfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76f28032-3ecb-45c3-91d0-86b46fb9d830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4123a192-a936-4bfa-8d15-96fb0b1d0e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01de0eee-f7ea-4b06-b7c6-a9ecfe3ff872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99255ae4-5752-4cb0-990a-9ee06dcc9ad9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12501f1b-05db-40b0-8efd-0ab0bd171c72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7c17687-27a4-4b47-86d2-26ac26fe706f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e5d3ff-8db5-4121-9700-faaa39bc2d8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04dca2f4-c60a-4d4d-85ab-a59eb54af9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92d1fd0-cb09-4cab-95da-93e3580a8197",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c15dd3-1119-4a82-8357-98c3423de071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eee705e-5e30-448b-9c39-f9dfb93df051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebeceae-df8a-4675-b17f-cd64de78ac43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8474a6-cc20-4658-886b-d3181dcf26c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68dfbc6-8c29-4112-aec2-71732c42b675",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea094b78-d946-42ec-b092-551c8a488d3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49d1c09c-dae7-4571-96d1-6639025c40e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2654e3-ecaf-4d63-b95d-00dba5c3b1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e075e7-14ca-423a-b1ac-ce460fbc84e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf50517-46fe-4070-9191-b6b67c7fb556",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a255f579-f653-42fe-ad5e-b8e187995f17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8de6acaa-b036-46dd-81b8-87d1b31965f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5510384b-ed52-4d54-929e-3ac8fa14bcda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae131ab-3466-4794-a3ea-c146e4bd4211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cb21fe-98b3-4e45-942d-902dab644552",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c84866-8dbe-43fb-a0c9-36c9735cb2f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43c8b6b1-c259-416b-9805-1e9b6580ea26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7716d23-8f97-45a0-b9cd-c6aa838234ae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f717c2-a4e1-4aac-9f04-65ac5cfe906f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f22496d-e2fb-4706-9d94-16da2b3e3a3e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0264e443-81ff-43bf-8f9e-b0fe02f88689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "012235f2-0633-4210-8914-8588d7285d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112263a6-a26a-497d-9caf-947d3a3557f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9a07b6-52c3-4636-8304-278df6d0ab2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7822b3-3673-46ef-a727-536352aec5b0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af90ecb3-4eac-41d8-977b-e543c519a0c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db3745e5-b7ef-454f-920e-c48c2e064ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef70d17-2572-46fd-b0e8-10bc0cd222ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c90d69-8efd-4cd9-9aae-620761d21fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc16779-e427-4636-bd37-a1e5f1d0e972",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e140a7-b56d-4a15-8893-7f76cef5d8e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7555b343-dacf-4641-a2d3-42a8fa21d605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45010735-fd93-4d06-acf1-a5650c80cbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48655cf3-be51-4ba8-816f-c5bbbfd12783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9953442b-e4ad-4e28-ab18-e45dbda612d5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5d6d30-92c6-4cf8-814a-28ce930c189f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8964fd75-e705-4727-9669-d7308e98a9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f77c01f-bbb7-4532-baa5-1c8b909609d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9044500a-74f2-4fa1-9fd5-120974bd52c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094c5711-0083-4684-bdbd-f1ba998e25d7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b59141-f57a-4688-a6cc-706437a26862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a7a233d-da1b-4de5-9578-849c57482d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7393020e-5206-4aae-b6ba-c60c19539f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58dc7efc-bb97-406e-b89d-9418376190bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb049c91-5159-4375-b017-fa6d49435d54",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0398f69e-9161-4ba0-92bc-db2a08b8ce01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69738c0d-6060-4f92-b5e3-5713c6dba6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3f246b-6657-4a59-bcae-d6d9eace05eb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd166200-825d-4587-bdef-7268d1f1727c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756c175d-947a-4934-9162-1e89b9c2572b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f27c70-c906-4c77-b6ff-6ea4ed059ba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ab3caf1-c8f2-4de3-b5f5-d7a637bcf587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f70624-2571-4b20-9d7c-50c2e7dd584c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ce9c39-91dd-4353-9e5c-c189092c4ba2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caaeb8f3-1dfa-4caa-96ca-5d49c96bbca1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58358aab-f2ac-40f7-908d-51da11f99371"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8de8fdf-08d7-422a-9fec-b58185ec6184",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "072365e3-60b6-4123-926f-d0531714d87a"
                    }
                  }
                ]
              },
              {
                "id": "d6452c11-e8bf-4477-ac99-6aab1cb678e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4f680d5-86c9-4cb6-9289-d51eb06a4ddf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05eca56f-b814-4ba7-9360-45181c2a96a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1d2d14d6-c1c9-4b93-b48c-7b6c46a5c787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629ff15d-f3c3-4d49-a4e4-8880629752ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "166390f9-9d82-4e06-85f1-c4e7d65b0206"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e302307-9ada-452e-9939-2d10e64eaf84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70cf46a9-bb7b-43be-9041-6442d53b6c5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d15940bf-2938-4142-8b82-f5d6502b2f9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a552b052-58be-4b5a-bf39-d75a5eb607fe"
                    }
                  }
                ]
              },
              {
                "id": "8da1a00c-45e6-488f-a3d6-f0ead368ab66",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4377adeb-7656-4857-82a0-b358674492bf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a501911-4b3e-4ae0-9d74-90eb15a8afa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e00bcfe6-ea5f-4ea8-a173-f83aea77c042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f93746-ef8a-4264-84ea-aae91d1dad94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d029a1-308b-4b63-8533-19196574a0f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c34bfde3-01b9-4d1f-b5c4-0998eab5c357",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d716ff37-9f88-4fa2-a11a-a97698075c0a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01e6138b-ea6f-4013-bb8b-8aa38a45771c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4333769c-8f74-4751-ae11-15c5ff4913ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c10aeaf9-f571-4fa7-a572-3e79617ae80c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5038455b-46ff-466f-abcf-547197a8d4d0"
                    }
                  }
                ]
              },
              {
                "id": "87c232f4-dd23-4394-8a0e-5497eeae9bc7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1151688f-9ef1-4c2e-8930-6f6305449500",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dcde24b7-16b6-4774-94b2-a046eb746c85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00f14aca-4d27-4a18-8ec6-7e7ea824a463",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a262470a-08a1-4698-89a6-0889e1de7d66"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25590f61-fde9-43f3-990b-112cd28c2cf2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "da46cd63-1093-4219-bb9d-a1411facf44e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea333168-f3e9-463d-a930-6b30cb55375a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eac778f8-0216-48aa-a33f-95e6bc40da65"
            }
          }
        ]
      },
      {
        "id": "3256923c-0bce-4a00-b816-0fc67660b7bb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3cf7fae8-21f1-4d7f-ac6c-d6cca5bf3664",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ca71796-7483-4509-9948-9f0a1334247f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "077e1098-d798-48d8-b9ec-0441153cdf00",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1631cd-bd2c-4f66-b639-181785906d38",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "002638aa-cbd8-4591-a8b8-13906dcd682d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3851027-21b9-4737-977c-fcb1b7116df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40297d41-960d-4244-a194-587f14d32e53"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "610c520a-7995-4039-8d89-aecabb3aa742",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00026ce7-4f8f-4b4b-a52d-bcc26a3886b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "612267ec-802d-4451-bad8-cf54d22cf62f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a73dfcf0-f4ed-4bca-8fbd-cee382196373"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "581be7be-f99e-4ef0-b296-fa195d6464e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ad532d5e-9501-4bb9-af28-2d8066655ffc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a215286-217d-4a3b-ab4e-e624974bc7da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb32a770-3ede-47ce-b278-eb2a4e82e90a"
            }
          }
        ]
      },
      {
        "id": "8a8311dc-cd63-4f63-bd1c-cb5468daca4e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e0112bc8-329d-45f9-b4cb-89b1be35aed0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a2b1ad9-0bb2-48b2-81ac-89f4dd935279",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ab5da84-67cc-4386-9538-5011157ba1b9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d739233-b0b4-4a20-b579-9e8497d27219",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2c96ce7-7a82-4296-bd8a-f5e6cd2fe466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52853b65-a257-4661-945b-982943556f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24b2971d-3a55-4d81-bc11-9dda488f7f2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d997a59f-2b5c-4e26-ab32-cea2af8bab79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5f4527c-44f9-4786-b95d-67276732ad90"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c03363d5-13fe-4dfe-beb1-fc8346d8f5c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13706730-6073-4647-a8a9-6e270c4393b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d111cc68-76d5-48d5-83d3-ee77f71bd41b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5741ac60-553f-4632-9db8-fbc34fd3c5a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b494cb0f-9436-42b5-9111-327ab2282354",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad19a6a0-4941-4fd5-ad84-557dc0469e92"
            }
          }
        ]
      },
      {
        "id": "30cbaf07-c34e-436f-9608-bfee86dd00bd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5604bb71-bd1d-414f-ae3f-ec73f8e5338c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5e3f5b9-9dbf-4359-9c84-8e0ebca96c16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a321c59b-39b8-4d16-8ae7-c40d223c0612",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6871d7-30cf-4f60-b823-3195fd1e80b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a582f95f-851c-4139-9945-506e171ff195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37ae275-d2f6-4f9b-8c3d-fa10c56c005f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c59fd48-d192-4872-9ee5-d5115e01f999"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4235010e-6baf-4a95-9a58-cbfe0347aacc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41f2ea3f-dfb3-44c2-bf84-501834227032"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a51aaa1d-6a8d-4c8a-8d5e-9156d3acd081",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03ac6c0b-810f-44e4-a1d1-30539b5ecb49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cad2ab6-1ccf-4477-b7e2-9f695d37844f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64b2c2c4-0d1a-4811-86d8-4135f2266d1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "418df188-0f6e-4a94-bbff-3dda5fea55a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5459a355-950e-480f-918f-d04c861b3b02"
            }
          }
        ]
      },
      {
        "id": "4129d9e5-c045-42a7-ae30-ac48ca57ea98",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35f1cbaf-a528-43d3-be4b-7e17546d93c9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3967ea8f-9879-4356-b1f6-c323ef5b32de",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c4d7d563-20cb-4e30-bc25-6df215bc9dfe",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f891f1b1-106e-4178-a88e-cb327c3547b5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fca94c7c-2fe9-479e-ab69-2fca5527c624",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.56349206349209,
      "responseMin": 6,
      "responseMax": 386,
      "responseSd": 40.16562852476756,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715387737827,
      "completed": 1715387764174
    },
    "executions": [
      {
        "id": "04035562-45e9-4125-9ce8-3feb4711d985",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7e1ef41d-0a46-4eb9-b66a-7d5817a6e9b7",
          "httpRequestId": "264bcffc-5328-4108-8fe7-3df0cb9338e4"
        },
        "item": {
          "id": "04035562-45e9-4125-9ce8-3feb4711d985",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c0ffb5e1-c66e-4403-b350-41de723fb0a8",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "1f796160-fd50-4933-8514-414e5644b8a2",
        "cursor": {
          "ref": "66c2184b-876d-4d0e-83c6-8dab9367b5f6",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1b2e0a39-9d82-411a-ba5c-d571301d5ccc"
        },
        "item": {
          "id": "1f796160-fd50-4933-8514-414e5644b8a2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dbac0017-6fc5-4302-8fab-ce8371557afd",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "11ca24e6-06d4-44f5-b21c-f944c8cbfb57",
        "cursor": {
          "ref": "bbaef918-bb53-400b-8017-afa6bd49ef71",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "908573ff-9028-46b4-9107-ada089dfed7f"
        },
        "item": {
          "id": "11ca24e6-06d4-44f5-b21c-f944c8cbfb57",
          "name": "did_json"
        },
        "response": {
          "id": "4e754b34-eb9e-48ed-a914-409db7cb23cb",
          "status": "OK",
          "code": 200,
          "responseTime": 386,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc374201-202a-4537-a06d-18485d941c4e",
        "cursor": {
          "ref": "ae68a209-9aa6-4423-9172-e4300fc2c6b1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "405423b4-45fa-47b2-bdbc-d5bb49b298d1"
        },
        "item": {
          "id": "dc374201-202a-4537-a06d-18485d941c4e",
          "name": "did:invalid"
        },
        "response": {
          "id": "f2d8f672-d1b1-4f12-956c-48006070cd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc374201-202a-4537-a06d-18485d941c4e",
        "cursor": {
          "ref": "ae68a209-9aa6-4423-9172-e4300fc2c6b1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "405423b4-45fa-47b2-bdbc-d5bb49b298d1"
        },
        "item": {
          "id": "dc374201-202a-4537-a06d-18485d941c4e",
          "name": "did:invalid"
        },
        "response": {
          "id": "f2d8f672-d1b1-4f12-956c-48006070cd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc76a39-25ba-49e0-87fa-b850e9ec0454",
        "cursor": {
          "ref": "f61f2f35-1c37-456e-b6ff-7267bec93b1b",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "32188369-5633-4c04-9dc1-31699ceba189"
        },
        "item": {
          "id": "6bc76a39-25ba-49e0-87fa-b850e9ec0454",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9a8bd60b-265a-4785-887d-43da5dce479b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 186,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f352c58c-358a-4b12-9f29-ccf001afc99d",
        "cursor": {
          "ref": "769276ee-2f0d-43bd-936d-b55998b94c93",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3da71fff-7e14-49e5-8d21-587780459010"
        },
        "item": {
          "id": "f352c58c-358a-4b12-9f29-ccf001afc99d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "adbb2de8-e2d5-4933-bcd8-16dd92530d1a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 69,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23938b6f-2484-4e39-a185-327b8d1214d8",
        "cursor": {
          "ref": "db6c57bb-346b-4f45-9e85-8d66b13b5df5",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3acb5d95-2c27-431b-9c5e-aa6ad9d64157"
        },
        "item": {
          "id": "23938b6f-2484-4e39-a185-327b8d1214d8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7b395096-e0ec-426d-90e7-da223cd9842e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8133b03-8c0f-40df-8ae4-90bf93383bfa",
        "cursor": {
          "ref": "97d1ac51-32ee-4c0b-aa38-91f7c9b0a0e0",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "878c3652-ecda-44ff-aeb6-0369fa61dd52"
        },
        "item": {
          "id": "d8133b03-8c0f-40df-8ae4-90bf93383bfa",
          "name": "identifiers"
        },
        "response": {
          "id": "d2adae5f-4354-4c63-950b-e51d77f4dfdb",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13795a2e-395e-45af-99d8-195efb9e4fad",
        "cursor": {
          "ref": "ae3e010a-8063-43e4-aa82-7aab1328b8a1",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ecc79b61-0994-412b-aebc-8aa776a94c63"
        },
        "item": {
          "id": "13795a2e-395e-45af-99d8-195efb9e4fad",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "19542f63-d21e-440d-b9e7-90c2d7092b47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757d40d7-f262-4594-9590-ac4ab9543ab4",
        "cursor": {
          "ref": "a3cae733-5f3f-419c-8eb3-33718bb1dbb4",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "69a9e6fa-92e5-4e53-bd23-8c386415935a"
        },
        "item": {
          "id": "757d40d7-f262-4594-9590-ac4ab9543ab4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0d373aa8-7781-4535-b6ee-e2f270ba1ea3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af075ba2-529a-4db5-b04f-302f53a3e9f3",
        "cursor": {
          "ref": "b3ded36c-f17e-464f-a7e1-97f147f69f75",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "792d9a4d-a37d-470f-a74e-f5aaae45cfa1"
        },
        "item": {
          "id": "af075ba2-529a-4db5-b04f-302f53a3e9f3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "84c2ff70-96c0-4cce-9bec-56576fb4e896",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2327546a-f53a-4d17-b1b5-b6f3b31395c9",
        "cursor": {
          "ref": "973bf253-f00f-4b63-89bd-ac6868b0d056",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f61c0864-9b52-4c13-b209-54ab91208a33"
        },
        "item": {
          "id": "2327546a-f53a-4d17-b1b5-b6f3b31395c9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6a4f7230-1e0d-4a87-a410-3a2ea02fd1bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db492236-f0a4-4e61-8ff3-a4c5e9f754f4",
        "cursor": {
          "ref": "6e42c853-9590-4509-a2c3-71643bd86458",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "261e7f73-bf2c-4165-99fc-f3d35eea9ea6"
        },
        "item": {
          "id": "db492236-f0a4-4e61-8ff3-a4c5e9f754f4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d5edfe3f-aba8-495c-b69f-5dcc53bfea02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944cb323-9ffe-42d5-b4b2-369edf452a5d",
        "cursor": {
          "ref": "e16ba757-4fc6-4cfd-aa43-09fd188a8547",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "698cfcd5-b3cf-48d0-98fc-9a2230c5e1c8"
        },
        "item": {
          "id": "944cb323-9ffe-42d5-b4b2-369edf452a5d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5e9cc7cf-aa84-4826-85ce-acefe272a8f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb50fba2-c943-4978-a63c-18f6e4b73eb1",
        "cursor": {
          "ref": "f56fe24c-2447-4e99-b0ab-ce91efede4d4",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "12b6cf8e-53b7-42e8-aa3e-29be7b78764c"
        },
        "item": {
          "id": "bb50fba2-c943-4978-a63c-18f6e4b73eb1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7b6a7034-091b-45c4-a7dc-ef2776422f20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732d958b-107a-4543-8603-88772f51a2a7",
        "cursor": {
          "ref": "28f6358f-cb4f-497b-a531-735807444277",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c8930ac0-c26f-4b65-b155-449ec3316bc1"
        },
        "item": {
          "id": "732d958b-107a-4543-8603-88772f51a2a7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "739440f4-c4dd-4334-ba06-b278ec62c0f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb270a6-47f2-44ac-a6ec-b9b72fe8aa0a",
        "cursor": {
          "ref": "a75ffc47-3349-4bb4-a014-0adabbb55d4f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ba22c729-d632-49a6-b066-96e5a6f0e778"
        },
        "item": {
          "id": "3fb270a6-47f2-44ac-a6ec-b9b72fe8aa0a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b4d5e0b6-a24f-4996-a07d-e0923cdf96db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea01e6a-ef38-4551-a226-1c4da74f4bf1",
        "cursor": {
          "ref": "a037da37-9896-4a39-81ad-d1e799fd2be4",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "83dd3409-e692-4240-bc0c-7d3fd7de0152"
        },
        "item": {
          "id": "1ea01e6a-ef38-4551-a226-1c4da74f4bf1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2f905b88-c269-466f-afa9-77fa0d3835c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2c40fd-6996-4d55-85c1-2176a19aa6e0",
        "cursor": {
          "ref": "27495c9a-c2db-4d27-b429-828ffeca07b8",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "28f68583-405b-4f99-bc9a-f1843a9d9e0b"
        },
        "item": {
          "id": "6e2c40fd-6996-4d55-85c1-2176a19aa6e0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b7925a1c-26c9-4688-827b-d786acdb7af7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6b0cbd-0895-4534-a1ca-0aa4d409d59a",
        "cursor": {
          "ref": "33d74af3-28fc-4c6f-b7ff-79878b1ad907",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "58e19452-e802-443c-863f-1793a2ebd954"
        },
        "item": {
          "id": "3a6b0cbd-0895-4534-a1ca-0aa4d409d59a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "07f3a801-9903-4640-9916-9e7c5b0d7d4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82a555b-f4ae-430d-b3fb-363229ab0175",
        "cursor": {
          "ref": "7afe3c1b-e3a0-4b01-99ae-e8287cbdb700",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e858fbbc-8c28-4aaf-b91d-a822e6a05446"
        },
        "item": {
          "id": "a82a555b-f4ae-430d-b3fb-363229ab0175",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2ebe33a9-7e30-48e3-bfeb-3bc5df20acf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe87ae5-4eec-4bfc-8818-5d335ffeb0ed",
        "cursor": {
          "ref": "092bd252-c580-444e-84d2-804c2325bb0f",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0f464bb6-784e-4594-b275-45103344a206"
        },
        "item": {
          "id": "abe87ae5-4eec-4bfc-8818-5d335ffeb0ed",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d0828320-f85f-41ed-8409-fe191cf6941a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01a57c2-c321-4d8f-843f-cbd9f11e75fc",
        "cursor": {
          "ref": "45a95a06-b740-4eab-8ece-28dfa5daecee",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a43ead97-e023-49fb-9f4e-838102469d22"
        },
        "item": {
          "id": "b01a57c2-c321-4d8f-843f-cbd9f11e75fc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d2b09ce4-1651-470f-b89f-21326fa80375",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c4cb38-1610-4627-9386-a4a0aa5de48a",
        "cursor": {
          "ref": "59ff8b6f-1419-4747-9f58-61d117ddff25",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b1f99445-82f5-44c5-a49e-1d805a34be79"
        },
        "item": {
          "id": "b8c4cb38-1610-4627-9386-a4a0aa5de48a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "24b4c910-b768-4503-bc8b-63bae48d4ee9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec02230-3224-4c19-823b-252e3bba22b0",
        "cursor": {
          "ref": "e6d4c917-e3cc-4187-a361-21213be89654",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8430b709-9fa8-4101-a00a-13b75c7182a0"
        },
        "item": {
          "id": "6ec02230-3224-4c19-823b-252e3bba22b0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8265f0c8-3232-4102-958b-9a8c3f90838c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb93e2c-3dbe-4688-b8fa-052264a5692c",
        "cursor": {
          "ref": "f6106189-4b17-42de-9080-482823695529",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0d0ad5ca-3241-4e4d-b518-84b1273012fb"
        },
        "item": {
          "id": "dcb93e2c-3dbe-4688-b8fa-052264a5692c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "202646fb-4822-4952-a90b-8ad00ddf87d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27588135-a463-45d2-8a79-aa0cad4732d6",
        "cursor": {
          "ref": "3a9bf598-6219-4b2a-a59d-1d3c8cc0baec",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7c374d97-2a4a-41ea-a8f2-b9644bad48c3"
        },
        "item": {
          "id": "27588135-a463-45d2-8a79-aa0cad4732d6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "57ce5fe6-f4bf-4984-82fe-7d8abc280e32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9799347-424e-4689-96d9-c67921f56778",
        "cursor": {
          "ref": "e5ba8ac6-14b5-41f9-b573-4fcd603ebf9e",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8d511938-3543-418b-91f6-af217d80005e"
        },
        "item": {
          "id": "d9799347-424e-4689-96d9-c67921f56778",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "82dcd3d2-8144-4338-a9ae-7169b3c31423",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d96607a-7c55-4d2c-baa6-ffa9b9ebbb58",
        "cursor": {
          "ref": "37409a38-f4ec-42c9-87bc-7f3e7535562b",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a1dea3cd-05da-4d84-9c22-c6c71177c5dc"
        },
        "item": {
          "id": "4d96607a-7c55-4d2c-baa6-ffa9b9ebbb58",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b8203fda-1b44-4fcc-8b5e-3a4812e82e72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80e8648-7f8d-4904-95c5-5cd1314f7a78",
        "cursor": {
          "ref": "f3c00718-e294-41e6-92f1-121708117a64",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6f592b46-5b4b-4380-870e-82434f30f29b"
        },
        "item": {
          "id": "d80e8648-7f8d-4904-95c5-5cd1314f7a78",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ba2a5dbb-10e8-4983-a98d-d2f00b572f21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e720286-49ef-4b48-b850-3d7c390c2837",
        "cursor": {
          "ref": "2c2b9b78-f29a-4b79-819d-3a92242d1357",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bbd563f3-50cf-42e5-8a15-d267eceec1fa"
        },
        "item": {
          "id": "0e720286-49ef-4b48-b850-3d7c390c2837",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cb017530-5b6f-4c78-9df5-b72c276f8452",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee28519-74d7-4a7e-b28f-bf0a1b580378",
        "cursor": {
          "ref": "55c261cd-c7c0-43f0-a592-2b261649cfc8",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f8f9fce8-c434-4ee4-8b05-4efa198a9d5d"
        },
        "item": {
          "id": "7ee28519-74d7-4a7e-b28f-bf0a1b580378",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "25f8d736-4a22-4d4c-9140-88d441cb27ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b91cef-c4c5-40bd-a0e8-5735adbe7b64",
        "cursor": {
          "ref": "fb406465-b051-4b96-8e6e-58aec04bc97b",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "71358956-c3fc-406f-8899-a995d822a29c"
        },
        "item": {
          "id": "38b91cef-c4c5-40bd-a0e8-5735adbe7b64",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "36fd96f6-ce21-4183-b009-a5e13ddeed21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95a8efe-71e0-46bc-95c0-04ad0a36b075",
        "cursor": {
          "ref": "6c2c5e7a-d463-440c-9d5b-5e4b35516465",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c9f683c1-b9e6-4524-8c7b-20d325cfda23"
        },
        "item": {
          "id": "a95a8efe-71e0-46bc-95c0-04ad0a36b075",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a5892d9a-1aa8-4314-92d8-431899aa6799",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc329f5-aa62-4d6d-af57-41c60318b22c",
        "cursor": {
          "ref": "f5a4c251-9802-4957-a238-e9ab65c45a0a",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9843494e-0c96-4333-af31-e362eb3e4f96"
        },
        "item": {
          "id": "3bc329f5-aa62-4d6d-af57-41c60318b22c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1c094da1-8591-426e-a6c5-3f440e976838",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc6a78d-1650-4a1c-ad99-f4744f47d40e",
        "cursor": {
          "ref": "09b62143-6ab2-409b-b90d-fc22310f7e5c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4fe1e7d4-f6e0-4dbb-a637-cc8e8d8e5e48"
        },
        "item": {
          "id": "ebc6a78d-1650-4a1c-ad99-f4744f47d40e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "74d96f03-a50c-49f4-b115-5a00aa1c7b9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfc2873-82d3-4e43-b181-7ccbe80d65fc",
        "cursor": {
          "ref": "32bb24cd-cb59-47e3-804d-f5d5dba636f8",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d8a159d5-65f8-4ae8-b40a-5ef8c015426b"
        },
        "item": {
          "id": "ecfc2873-82d3-4e43-b181-7ccbe80d65fc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b5410b6d-134a-4af4-9fef-05f94e3a4644",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704ab572-48c7-447f-abcf-391c1e223c07",
        "cursor": {
          "ref": "deefabe2-8666-4b87-af20-4aa15611d249",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4477dbc9-4e1b-45da-98bc-e3ca3c601b66"
        },
        "item": {
          "id": "704ab572-48c7-447f-abcf-391c1e223c07",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8ff41310-a327-480f-b7c2-8459dba5667c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171ac88e-be29-430c-9034-2f228227fc43",
        "cursor": {
          "ref": "be8ee101-ef1c-443f-a771-f34fd767b9b7",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fe7b7be8-1739-4fdd-a6de-d4cbd547c4ae"
        },
        "item": {
          "id": "171ac88e-be29-430c-9034-2f228227fc43",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "029b996e-66e1-45ec-8591-21b566cf835d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c46bb6-f8af-4fd8-ba5c-f7b6ffe35678",
        "cursor": {
          "ref": "2e1992ae-9d8d-423a-845c-5555db010296",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3f07434e-ba34-497a-baca-cff8f2923150"
        },
        "item": {
          "id": "22c46bb6-f8af-4fd8-ba5c-f7b6ffe35678",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2dfa412e-7d93-4946-bb13-600bad64f922",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bfdef3-a129-43ee-beff-a3e9a87885e6",
        "cursor": {
          "ref": "368d454c-6001-4bc4-a61d-ecd27c4e7803",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ae341d66-a0a1-4447-a3ad-c90984bf85f0"
        },
        "item": {
          "id": "26bfdef3-a129-43ee-beff-a3e9a87885e6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b72a4c4d-4749-4cd8-a7b2-733973cf1eac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6bb764-7bae-4a92-b523-dc471bc5aa6c",
        "cursor": {
          "ref": "740c929c-cb2a-487d-9604-1537cb443bc5",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "32aa193b-5e8c-4d58-b322-0bed998c77f5"
        },
        "item": {
          "id": "6f6bb764-7bae-4a92-b523-dc471bc5aa6c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6e38ce44-8896-4a0c-9456-79f3c127000c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab7e0e9-dbd9-4dfa-b469-08441c3610eb",
        "cursor": {
          "ref": "43408db5-5961-4553-8c88-e95f00f55cdb",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5b95b9e6-c6c7-4bf9-80e5-a1e74eff152e"
        },
        "item": {
          "id": "fab7e0e9-dbd9-4dfa-b469-08441c3610eb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "525c9c1f-2bb7-4b7c-b256-5a8c4a685839",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60e677d-085d-42e4-bf7d-3d6a3697fb3d",
        "cursor": {
          "ref": "b49d77f2-d737-45b9-9ef2-7c716434ab62",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "12e98f57-3e0e-4b69-8492-8abc9fb8f6c2"
        },
        "item": {
          "id": "d60e677d-085d-42e4-bf7d-3d6a3697fb3d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "65740276-a3e1-44d9-bd6e-4c66eee05e32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b95f2f-3292-40a8-b764-7f5f655ea1e9",
        "cursor": {
          "ref": "f228f0b0-3e31-4da8-b36b-9cb96320bab4",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "90f51364-78c1-40f9-8f61-c59cce6a64ef"
        },
        "item": {
          "id": "e9b95f2f-3292-40a8-b764-7f5f655ea1e9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "49bf6fe5-906e-4454-908d-37785a945839",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1650c028-2618-4ed0-ae3c-7ba519215889",
        "cursor": {
          "ref": "fdab43ef-cadf-450b-958a-6d7f8fa37832",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8dc84211-2b21-4a6a-b8c3-2343eb1daa9d"
        },
        "item": {
          "id": "1650c028-2618-4ed0-ae3c-7ba519215889",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "48114415-1647-42a4-b796-f4df32868796",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fe8325-8607-4c4d-9ee3-d6ea4da7fea2",
        "cursor": {
          "ref": "35ec504b-4a00-4f84-8cf7-866ea2407032",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "65592585-f14b-4995-a084-69ad014d1e9b"
        },
        "item": {
          "id": "f7fe8325-8607-4c4d-9ee3-d6ea4da7fea2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6f39f1cb-0e08-4dc2-a427-39575ec265f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a72575a-1fa8-4259-aed5-1357694a8dc7",
        "cursor": {
          "ref": "e0dc60db-6d45-4ad5-bace-618dd5d3d735",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7297e2df-cd00-4b68-b39a-36f1546e0e89"
        },
        "item": {
          "id": "6a72575a-1fa8-4259-aed5-1357694a8dc7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d608ad59-066d-43df-9f1c-6a7ee7a39f0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2c3a0f-a482-4720-b801-5c7e3e85776e",
        "cursor": {
          "ref": "d403dbd8-6bcb-4477-ac0c-039658503440",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d98303ff-e2bf-4951-8bd1-679a75dd039e"
        },
        "item": {
          "id": "3d2c3a0f-a482-4720-b801-5c7e3e85776e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "31c008c5-e88e-4f15-ac7b-e9128073f26a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0310d30e-cb9a-423b-94a4-6dfb274dcf7f",
        "cursor": {
          "ref": "a53b18f7-7238-4258-b458-2476c6a90653",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7cbfa22c-58d1-4c2f-8f51-861aa83bdba7"
        },
        "item": {
          "id": "0310d30e-cb9a-423b-94a4-6dfb274dcf7f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "28609abf-a1ed-4bc2-89f1-3242f33a4a43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab796b98-504d-441d-b717-c11fb99dc460",
        "cursor": {
          "ref": "e0652d6a-0595-4155-bc9d-3b5b5ce8cc8a",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "88dc5dc4-3c6f-4fb5-a656-08a328f94576"
        },
        "item": {
          "id": "ab796b98-504d-441d-b717-c11fb99dc460",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e5a89044-8c09-466d-b331-75114787d81d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e196ccf5-18a2-447c-ade1-8f541825c750",
        "cursor": {
          "ref": "58b6688a-8a9c-405d-803d-e13845cbb1c3",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a01fe58a-86a5-4228-a407-d042eb0cbd0b"
        },
        "item": {
          "id": "e196ccf5-18a2-447c-ade1-8f541825c750",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0d688d45-73ec-4fc2-aab6-9a7a1d71f320",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ed25a0-7741-4bd1-a32e-7e0e37a66e42",
        "cursor": {
          "ref": "e85892bf-51aa-4357-a4a1-e0e32a893831",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "45850577-a93e-4b7c-8dfa-833e80fc9bfd"
        },
        "item": {
          "id": "80ed25a0-7741-4bd1-a32e-7e0e37a66e42",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5a891d5e-3a88-49dd-9261-1a636073edf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3857de-f4f7-4808-8da9-01cb47f14616",
        "cursor": {
          "ref": "fa67ae2c-fb59-41f3-85a9-856407512365",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1d90ce1d-8442-456f-982c-d0c09025992a"
        },
        "item": {
          "id": "7c3857de-f4f7-4808-8da9-01cb47f14616",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e3de1b85-1717-4f66-9ff1-1c4d788b0648",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79817a85-be4e-4662-9771-2efc57131752",
        "cursor": {
          "ref": "7ce3ab41-e121-4965-ac6f-43c3d8b7c430",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "158ad821-7f4d-4682-b246-450fb24b1d29"
        },
        "item": {
          "id": "79817a85-be4e-4662-9771-2efc57131752",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4bb90802-ce3e-4b35-971f-6a0d58565b20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833b99bd-7874-49fd-b404-6858e77e3bda",
        "cursor": {
          "ref": "09587d9d-ce5f-4117-9502-3cfc0da6f50d",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d8554166-95ae-4945-81df-9681fa58c1f9"
        },
        "item": {
          "id": "833b99bd-7874-49fd-b404-6858e77e3bda",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5ad3fa88-daa8-4af7-afea-ea7b0507a2a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915ea3e9-dfde-46e4-8726-a85525e88e51",
        "cursor": {
          "ref": "782ee2e2-83e7-4d5f-bfec-7398cb688ab0",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "65083007-506a-4244-9d13-c8d1e35bd77d"
        },
        "item": {
          "id": "915ea3e9-dfde-46e4-8726-a85525e88e51",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "957e5908-81ae-4102-af28-06a91eb413f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8907fc12-665b-4db7-828c-c0535df03c4b",
        "cursor": {
          "ref": "d7b4b31a-4fb2-46c5-94be-4de5f01da359",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f66b3b99-7b9d-4180-bb02-70a49427342a"
        },
        "item": {
          "id": "8907fc12-665b-4db7-828c-c0535df03c4b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bbed477f-0076-4f07-903b-26c848cf2cd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228c69e6-ff85-47d4-81c2-89eb33bfc89d",
        "cursor": {
          "ref": "9e7f62dc-852e-4c28-9ba7-37e781c7b631",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d08bff61-909d-4191-b21a-7a76d2e6cbd9"
        },
        "item": {
          "id": "228c69e6-ff85-47d4-81c2-89eb33bfc89d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1b54e448-3c15-4a14-97b1-ff647aa4c97c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8addc7-ce5a-41df-928e-5ce1f75f7623",
        "cursor": {
          "ref": "57ff2975-33de-4601-848a-c045b3007e4e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "28d06462-a608-4803-ade5-791191a12660"
        },
        "item": {
          "id": "1e8addc7-ce5a-41df-928e-5ce1f75f7623",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "efed3344-0f8b-4afb-b0a4-faa0319ff1d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd0433d-c021-42a7-a9e0-9d2e7e708115",
        "cursor": {
          "ref": "4ce53f6c-4df6-43ec-bcbb-6ad563327173",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1fedb01e-651b-44d3-bd03-65e4ed042fcc"
        },
        "item": {
          "id": "cfd0433d-c021-42a7-a9e0-9d2e7e708115",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "accce9cf-d32e-4894-8a11-816e2f4ca956",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f0d0ca-aee7-48e5-a951-339606dcaf90",
        "cursor": {
          "ref": "2aadf982-5710-46f1-8076-79141e098335",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6e1c856e-be7e-4c76-a551-682a6b4784a1"
        },
        "item": {
          "id": "13f0d0ca-aee7-48e5-a951-339606dcaf90",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1cbb752e-4fa1-48ce-b642-def499a4a048",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1925e4ec-3ad9-4bb0-9f93-699e531af707",
        "cursor": {
          "ref": "0066e3a2-86f4-46d8-a897-5fe31ef25c2a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f9b0eb99-ba30-4458-907a-c4ca8ef808bc"
        },
        "item": {
          "id": "1925e4ec-3ad9-4bb0-9f93-699e531af707",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8aca8203-c6e6-4b0e-a1d1-0eb896d6d534",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7043950-176d-4904-924b-af25aac70560",
        "cursor": {
          "ref": "6bad7069-c31d-4df9-be17-6c0e2341adf5",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6e8bc88d-abbb-4366-a24a-b48bd292fd88"
        },
        "item": {
          "id": "b7043950-176d-4904-924b-af25aac70560",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c2d3ff38-d236-4c93-a47f-7c6203308055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f56382-dbaf-4067-b674-68ba7e2d8f9e",
        "cursor": {
          "ref": "09308869-853e-4f72-a94a-4774b3dd96a7",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0615031d-80a8-437c-8f5b-b1796789d696"
        },
        "item": {
          "id": "a8f56382-dbaf-4067-b674-68ba7e2d8f9e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f7cdce90-64aa-4b58-a45b-ff3b4dfa5d3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2ba9b4-9ccd-4794-9f9d-d3a843bac52b",
        "cursor": {
          "ref": "b0b83ff5-5050-443a-93a3-c9d444a76963",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "13208a52-46cf-471a-bfd6-c2890cbf7f60"
        },
        "item": {
          "id": "3f2ba9b4-9ccd-4794-9f9d-d3a843bac52b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e7fcfa1b-8251-4fbc-9c28-c7fde4543bb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06fd1952-987a-4929-8255-9da925f8ac96",
        "cursor": {
          "ref": "f32fba3b-e16e-4c11-8180-9fc62977ab59",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d85792df-cf3e-45d2-86e9-af17d478dbd6"
        },
        "item": {
          "id": "06fd1952-987a-4929-8255-9da925f8ac96",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "36a82c1a-aa92-42ee-b29c-d093a2fce165",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09f555c-9981-47bd-81d5-bf9674169243",
        "cursor": {
          "ref": "c77941a9-b957-40be-82fc-bfe784763e35",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "248d23e9-83a9-4e67-a054-0a5b5da78d1d"
        },
        "item": {
          "id": "a09f555c-9981-47bd-81d5-bf9674169243",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c07d93a5-7dae-4da3-a138-05b2222d99ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5c369b-153e-4519-9ca8-262b8c45d4f6",
        "cursor": {
          "ref": "c947cbe6-9a30-43d4-9041-5cd674ed3a00",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "962efc86-8c10-4c18-8017-05975b470804"
        },
        "item": {
          "id": "6e5c369b-153e-4519-9ca8-262b8c45d4f6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bab1f91e-e5e3-4c2b-a71d-f1b8098869ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c527095d-27ac-49d1-9150-750f837dcd70",
        "cursor": {
          "ref": "645a26ed-c229-4ba6-be55-8485264cf9ff",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "479e230c-b9fd-4902-9c01-80d7be107b5b"
        },
        "item": {
          "id": "c527095d-27ac-49d1-9150-750f837dcd70",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2c6eab28-40f9-4b5d-a8af-34fef1a303b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff87adbe-7582-4efa-9a9e-17a3bde7c6e7",
        "cursor": {
          "ref": "731f9ce4-c9bb-4d54-ab00-f6fd45c13edb",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "273e145b-ae5c-487d-84c8-43b97d920be6"
        },
        "item": {
          "id": "ff87adbe-7582-4efa-9a9e-17a3bde7c6e7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "64b17365-41e8-40cf-8359-f4935ecd3870",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcab5ed5-930e-43ba-838a-9d1525ba4c78",
        "cursor": {
          "ref": "f7e757c8-dbbe-48f9-bbd5-7fa47db21d57",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f777af53-b1e8-49a5-89a8-3447d367ab16"
        },
        "item": {
          "id": "dcab5ed5-930e-43ba-838a-9d1525ba4c78",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a59b1a00-2445-4577-98d4-a03065746c66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbceebf4-1c0b-4a17-9406-4c8132355a39",
        "cursor": {
          "ref": "06c5d6c4-e98f-4c76-abf0-490c6af969c9",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4dfbdae6-a6b8-4d38-b8e3-b3de74544496"
        },
        "item": {
          "id": "bbceebf4-1c0b-4a17-9406-4c8132355a39",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c9c80b09-e898-45e6-ae73-56ed50fc8247",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a8b744-520f-47d1-85ae-5bc3f235252d",
        "cursor": {
          "ref": "2318e72d-b2a6-466b-b4f0-1e13e7ca541e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "98f55246-0d69-4546-a184-5cd3449ab9e0"
        },
        "item": {
          "id": "20a8b744-520f-47d1-85ae-5bc3f235252d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "826d6e6e-fd30-4b08-b904-7cacaf87df73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41b1d4b-5744-4811-9c5b-f0110793b3bb",
        "cursor": {
          "ref": "6ed01ed5-4e6f-4fc3-aaff-40342ad0a9a8",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3f64fcfb-4d92-4a68-88e3-2bb68f4e63f1"
        },
        "item": {
          "id": "a41b1d4b-5744-4811-9c5b-f0110793b3bb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b3293614-6439-4103-9d41-ea4fc140873b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78647a02-6b0c-4c4f-a189-c058886fc086",
        "cursor": {
          "ref": "abafa7cd-e0a2-4524-8a79-d6c8e52733d2",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "56800b17-17d8-4158-91c5-591c01f67782"
        },
        "item": {
          "id": "78647a02-6b0c-4c4f-a189-c058886fc086",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "18aa5110-f7b2-4a36-b787-3337747c2529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7da3f30-9189-4cc5-95e2-e69ae6bca150",
        "cursor": {
          "ref": "c4b1b1c5-53fa-4231-8779-ddb2f092fe6d",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f224c339-507a-4251-896c-5008c5ba330e"
        },
        "item": {
          "id": "f7da3f30-9189-4cc5-95e2-e69ae6bca150",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d659bac7-7497-450c-a317-160560834947",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6d15da-82e8-4f47-b6a2-04bb77846fdb",
        "cursor": {
          "ref": "acf7df55-b45f-41f4-bb87-f6938b13055f",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b8a25e5d-3697-4901-b36b-ab2d5f20047f"
        },
        "item": {
          "id": "4e6d15da-82e8-4f47-b6a2-04bb77846fdb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b0c6378f-827f-4bb7-934e-1f8a3568972a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b912e5-9ecd-43d1-abe8-d3e09b1979ca",
        "cursor": {
          "ref": "5fe17a8e-5fcf-44d6-9dd8-b53b59b1ff38",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "13c03689-4e1f-4c47-9111-e2958d4723aa"
        },
        "item": {
          "id": "c9b912e5-9ecd-43d1-abe8-d3e09b1979ca",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "662aa303-a628-428d-84cb-df06b472ab08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f345c7a9-491c-49d2-b1a5-dc760e26251d",
        "cursor": {
          "ref": "ae99363e-2e45-4108-a61d-c9960ef8fbd3",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "54056fbc-4c6f-41d3-8076-9e21c3c02e89"
        },
        "item": {
          "id": "f345c7a9-491c-49d2-b1a5-dc760e26251d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fc9ae739-71e2-4ebe-bc1f-293aaa0e4224",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c8b060-6333-462a-8ba1-23aae1303f48",
        "cursor": {
          "ref": "468aedb7-f45c-450e-bdfa-89c830598c60",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "70119da7-8d0e-401a-9290-b36dfe3dc27c"
        },
        "item": {
          "id": "83c8b060-6333-462a-8ba1-23aae1303f48",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cec6bca6-54ca-42b5-9b78-edc6153a1f1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac06c341-1086-4637-989a-a2a3b3080929",
        "cursor": {
          "ref": "c2f040f0-2f23-488f-a2a9-4b38681f6a42",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "380d3f9f-2619-46cd-a89c-bd74c89fa3e3"
        },
        "item": {
          "id": "ac06c341-1086-4637-989a-a2a3b3080929",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "084c50fa-efc2-4ef0-9cb9-cad5f4d793ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5e5c4b-b7f5-4025-9e49-c1404762b5ca",
        "cursor": {
          "ref": "3a744a4e-2e4e-4226-96b4-6b8be4c55714",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2b2c44e3-5c76-4cd1-8807-f6c79c7235a7"
        },
        "item": {
          "id": "dc5e5c4b-b7f5-4025-9e49-c1404762b5ca",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6dc711e8-bdd5-44de-9fb4-f0d84d2a7443",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fa6309-f544-4ea0-b4bd-9f756bcb800f",
        "cursor": {
          "ref": "660de7c9-a584-4af4-aa01-29e2c8afc9d1",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3cf19b87-42b5-41e6-bca6-46297205f7d5"
        },
        "item": {
          "id": "c0fa6309-f544-4ea0-b4bd-9f756bcb800f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f1b0891a-da08-4da0-a276-60e917d28777",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7013338f-5803-40c2-bd5d-049a484e3889",
        "cursor": {
          "ref": "a34979a1-7219-447a-b7bc-55bad7235c7e",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1e49805b-bed8-4cf0-85ef-e2256981a1af"
        },
        "item": {
          "id": "7013338f-5803-40c2-bd5d-049a484e3889",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "761c2508-2896-44c7-9104-4b9e005da6ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe7f7e3-363d-48b6-9476-d3656e9621fa",
        "cursor": {
          "ref": "f89e361c-32e2-4a89-8f80-00217ce42090",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0c767424-28c4-4f18-aaa8-c98c72121dad"
        },
        "item": {
          "id": "afe7f7e3-363d-48b6-9476-d3656e9621fa",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "69e79518-0a1c-49e7-884d-33fd68af721d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46967d5-c9e2-40f5-86c6-266b0088f472",
        "cursor": {
          "ref": "c0e7beef-993f-4e2d-a7a1-2d9511b4d135",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "02dca329-b9cd-41a4-8825-c63aa38a4006"
        },
        "item": {
          "id": "a46967d5-c9e2-40f5-86c6-266b0088f472",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f33baab2-9f55-458b-8d97-e13c4954ebc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ced887-e7f8-480d-b8b2-0d470534caec",
        "cursor": {
          "ref": "d86a873d-dde1-4cc2-b4a0-7bca63fea531",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "624da0dd-12ff-42ff-9eff-f97d21469ebd"
        },
        "item": {
          "id": "d7ced887-e7f8-480d-b8b2-0d470534caec",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "74d82189-feec-422a-9666-da36cc55b98b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadfc632-7bba-4ef3-81db-4b3d920fd58d",
        "cursor": {
          "ref": "1f4b261f-0a55-42c4-8157-cc1c4c071af6",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e7ce61ca-d923-4f92-86b8-a2dadf1cf43e"
        },
        "item": {
          "id": "eadfc632-7bba-4ef3-81db-4b3d920fd58d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3212dbb2-227c-43c7-8e79-d26823f250e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34744f5-df62-4457-b441-1cdf1929fcd5",
        "cursor": {
          "ref": "70383f2e-14e6-45e8-9e65-26d9867b0466",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fe6dc2eb-7ec7-48b1-a4c1-3693a48b6fd8"
        },
        "item": {
          "id": "e34744f5-df62-4457-b441-1cdf1929fcd5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a73aa2cd-f3b5-466a-8abc-0a38477000a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567e66db-2e37-4781-846f-a257ad47f442",
        "cursor": {
          "ref": "cd057872-6c31-419d-94ab-77313a6e3168",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "55966b10-54e1-4671-b80a-6a1e0a52b989"
        },
        "item": {
          "id": "567e66db-2e37-4781-846f-a257ad47f442",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "52da5d7a-506f-4481-9756-1c17ac35f233",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39edcdf8-8356-49bd-b550-5f085a6e41c6",
        "cursor": {
          "ref": "9955c8a9-4bfc-4b20-8b36-238c122f9334",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1dd41069-f113-4901-b3ac-3c97afefd9bc"
        },
        "item": {
          "id": "39edcdf8-8356-49bd-b550-5f085a6e41c6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3a3e3a80-dcbd-4cb9-9e12-487dd8e09e32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f17fb5-bd9b-43fa-bc3c-e7a1d7575447",
        "cursor": {
          "ref": "66f65f4d-856a-4850-abf2-8eb09fc567ce",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f36353ac-c304-4dac-9732-94b32267d0f8"
        },
        "item": {
          "id": "e4f17fb5-bd9b-43fa-bc3c-e7a1d7575447",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "253d4d85-8edd-4208-b8f5-a638ed8e05b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa75143e-e012-42bd-a294-05b4b8730e2f",
        "cursor": {
          "ref": "b5966778-ef80-468b-b5bb-86c60df0e520",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "17c80d49-155c-4daa-8b1e-21c036d0849a"
        },
        "item": {
          "id": "fa75143e-e012-42bd-a294-05b4b8730e2f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e3e67d38-bb65-4611-b674-fb5540bffcd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287b0615-8dd3-4f3d-afb3-159e56389ff7",
        "cursor": {
          "ref": "55612d87-38c3-408b-bf6b-02d14774983e",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c53642e6-ca7d-45ba-9da5-35ca6b4020ee"
        },
        "item": {
          "id": "287b0615-8dd3-4f3d-afb3-159e56389ff7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "64f4db72-4bf2-4279-bd4e-ed5e10467aad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661c90cb-70b8-466d-96d4-d652b04c2b90",
        "cursor": {
          "ref": "c82e64d6-0d12-4d34-887c-17fba19b1227",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "87918834-7e00-4284-ac6e-85495f8e9ae5"
        },
        "item": {
          "id": "661c90cb-70b8-466d-96d4-d652b04c2b90",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5b872d72-28da-4803-a784-340637a2a7d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9544f462-e6d7-41c7-a23f-931aabdcf94d",
        "cursor": {
          "ref": "610dfaf7-1911-4107-9d35-a577febda5f5",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f0752870-1e6f-42b4-855e-0fcac5d16426"
        },
        "item": {
          "id": "9544f462-e6d7-41c7-a23f-931aabdcf94d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a5181d65-06e2-42c3-8cbd-5fae496fe2df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c663665-cfb1-4263-a19b-8d549162171d",
        "cursor": {
          "ref": "66a766a4-2d01-4729-91a2-6425792156e8",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7df77444-44b1-494d-a4c1-b4417f906705"
        },
        "item": {
          "id": "2c663665-cfb1-4263-a19b-8d549162171d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8ee3fe20-b224-4fed-b086-d4130cf3cd32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfa0953-cd57-44eb-a748-7e8d6fe8c0bc",
        "cursor": {
          "ref": "0343987a-809a-4dff-8225-181924e9e0d5",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "65dd737f-a40f-464d-8bed-132b5b6eeeda"
        },
        "item": {
          "id": "7cfa0953-cd57-44eb-a748-7e8d6fe8c0bc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cf3911b2-bd39-4a10-b012-4061cdc65088",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e3c8bb-19f2-4843-9d01-ce2d6d780017",
        "cursor": {
          "ref": "519020e2-f68c-4900-a372-f9992de75acc",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2ff5559f-f094-44c4-a589-8907d18fb526"
        },
        "item": {
          "id": "a8e3c8bb-19f2-4843-9d01-ce2d6d780017",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7d88a43b-ef75-49d2-a2bf-4de0f680408e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92138eb-b845-4bac-8198-98b887a8f5a7",
        "cursor": {
          "ref": "4bf8ab2c-7efd-4a7e-a9bd-1ee9521d37d4",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9713db9f-a285-4aa4-b65b-921cb5df216c"
        },
        "item": {
          "id": "f92138eb-b845-4bac-8198-98b887a8f5a7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1d20e1ed-20b1-41a4-b119-c6619878521d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c617eb4-f55f-4e87-9bdd-9d256c14d370",
        "cursor": {
          "ref": "2ff0641e-7590-455d-b709-e4813b7b47c5",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c5772f25-e89a-4466-94cb-8212f0e2f96c"
        },
        "item": {
          "id": "0c617eb4-f55f-4e87-9bdd-9d256c14d370",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1c6fbdf1-500d-478f-9cce-f444e2c9b659",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d0991591-3683-4c36-a367-cbee25c31f8c",
        "cursor": {
          "ref": "fdaf5734-9312-4160-a64c-510ccfb99734",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cd0b5553-f7df-4140-947a-408c626d2fc1"
        },
        "item": {
          "id": "d0991591-3683-4c36-a367-cbee25c31f8c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a0f9ad60-e54e-4029-9acf-54a465577f8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 371,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "40ba9bb8-50bd-4857-a188-1cb66b8e1a06",
        "cursor": {
          "ref": "f7b4a1fe-15fc-4a9b-9240-c9d0a9380879",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "37ae1f19-444e-4498-92b5-655e0a2e905f"
        },
        "item": {
          "id": "40ba9bb8-50bd-4857-a188-1cb66b8e1a06",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "67c91390-b1f7-46d4-9d87-595827b4f6b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "eb0430ff-196f-4ed4-af81-76101c47c0e3",
        "cursor": {
          "ref": "8fafbc16-c8f5-4db9-973f-a8dad8854fd7",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cc8addf0-681b-4001-bc42-04d7d40e0dc5"
        },
        "item": {
          "id": "eb0430ff-196f-4ed4-af81-76101c47c0e3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8a69a43c-ef30-45d1-865a-142e4b5f37f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "dbe60a73-11ea-42d3-85ca-efb330acec3d",
        "cursor": {
          "ref": "f7d49fd0-5440-41ee-afd4-910d2fb611f6",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3f4f3c61-1a4e-41f3-8d2c-23242fdb357f"
        },
        "item": {
          "id": "dbe60a73-11ea-42d3-85ca-efb330acec3d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1d220263-09fe-4942-9d2e-917dd76262de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "87b7146b-b923-4214-9fab-e9a4772a1ae8",
        "cursor": {
          "ref": "2b7e20a0-6ed3-42d2-8f41-81a4c3a2bb7b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "94e4ab9f-dee0-4e82-8364-363bbd7f51a0"
        },
        "item": {
          "id": "87b7146b-b923-4214-9fab-e9a4772a1ae8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b3022107-043d-41a9-a389-db97a6666cc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "487139dd-3e7f-4260-94ad-d677c57abcb7",
        "cursor": {
          "ref": "9495b9a7-448c-4c6c-bd96-0f6bc27e5d65",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fa990ae2-f095-4226-9a07-30b52ec6fe7c"
        },
        "item": {
          "id": "487139dd-3e7f-4260-94ad-d677c57abcb7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "41fa7be1-ba61-4ef5-9798-1337c8a7c819",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "0f3525d6-00e4-4c38-94f0-4c238a36c8af",
        "cursor": {
          "ref": "8add7a96-e300-4b0d-8e73-5e167d4c66ae",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6a6d1e7e-2979-4efd-889e-62749c37eba4"
        },
        "item": {
          "id": "0f3525d6-00e4-4c38-94f0-4c238a36c8af",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "36f512f3-2b76-48e3-b048-370d617b8a62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11356dde-9925-4369-94f1-439f1905011d",
        "cursor": {
          "ref": "3684df61-3d61-4bcd-8e49-943486ef9c40",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e86ca2ce-15d5-430a-b91e-144cb619a57b"
        },
        "item": {
          "id": "11356dde-9925-4369-94f1-439f1905011d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8795bb0e-bf92-43e1-a1a9-33c20e1948e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a435f140-64c7-4d64-b49c-dc427ad4e95d",
        "cursor": {
          "ref": "b4a25b85-ea42-4036-88ac-5b57dda14fdb",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ed2ef159-5c26-4878-a1f3-97088f0679aa"
        },
        "item": {
          "id": "a435f140-64c7-4d64-b49c-dc427ad4e95d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c6cc786c-b448-4eae-9bca-83fd72c7b80a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7610631-0c79-485f-b7b8-3e226d5cad12",
        "cursor": {
          "ref": "1fe4efbd-6a11-455a-a835-afd50ba8c869",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c9560f6b-04ec-41dc-85c2-bda610d58ffc"
        },
        "item": {
          "id": "e7610631-0c79-485f-b7b8-3e226d5cad12",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "392a5492-0d61-44fa-8a7e-b8fbee9f8b48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789b477b-2dba-4a10-907a-7c9df1b28182",
        "cursor": {
          "ref": "ebb5ea9f-315f-43a7-a50d-2d35a44203ca",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "33492f8f-1bc1-4b4d-bd20-0b723c6fb847"
        },
        "item": {
          "id": "789b477b-2dba-4a10-907a-7c9df1b28182",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "54b9236d-7f90-4b6e-9f49-e3dd003feb83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e1ac51-2f02-4184-b298-808388ecb1d6",
        "cursor": {
          "ref": "e7a01cd5-cb1a-460e-9fd7-6183258e0cb5",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cf63ed97-b66c-44b7-b478-239dad945b0f"
        },
        "item": {
          "id": "b8e1ac51-2f02-4184-b298-808388ecb1d6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6748558d-3f53-465b-8b0f-f0012a85ff79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a68eee9-f01d-487f-b018-b59cfe287937",
        "cursor": {
          "ref": "36685935-b653-4df5-a140-eb247bf667f5",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5f9d69cb-6066-428c-abbb-3077f9b00fa1"
        },
        "item": {
          "id": "7a68eee9-f01d-487f-b018-b59cfe287937",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d619eaf2-661d-4de8-846f-858b4fc47e06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0dfaf0-dab0-4c24-87af-a5db286bd77d",
        "cursor": {
          "ref": "1784418a-c328-446c-8a1b-932e82449b52",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "53b8254f-f5a9-4f2e-8920-9a53c0713a42"
        },
        "item": {
          "id": "be0dfaf0-dab0-4c24-87af-a5db286bd77d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c3a0fa0c-dd16-46ac-a263-a11f215841f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7d5397-26b9-46b9-9af0-4391bd766daa",
        "cursor": {
          "ref": "57d910e8-f54c-40d7-872a-8207c8fe0038",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "acad65bd-9354-46e8-b4d4-ce2889eee414"
        },
        "item": {
          "id": "9b7d5397-26b9-46b9-9af0-4391bd766daa",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5208e194-a754-482d-ad30-3d868b7bd6e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995b7a39-3a92-4f01-a7ae-de2087bd16e6",
        "cursor": {
          "ref": "b0c06781-6014-4a9b-bf00-a0b6cddbb4e0",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a6021a63-d2c0-45f8-8a38-be4e6e4d5e6f"
        },
        "item": {
          "id": "995b7a39-3a92-4f01-a7ae-de2087bd16e6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "19b51bf7-6dd9-42b7-934d-c4dec45cec25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64169728-6128-4a16-ae3c-ce5cec42c035",
        "cursor": {
          "ref": "78a35b77-12d1-4b2e-ae97-95281c732085",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3de07b0f-30f9-4309-9c96-a0399e2e6356"
        },
        "item": {
          "id": "64169728-6128-4a16-ae3c-ce5cec42c035",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1a7118f0-e248-4d52-a681-5fd10b25aff4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b3d8f6-b75a-4e3c-849f-b5f08f0f485b",
        "cursor": {
          "ref": "7f526ba5-290c-4e4a-9829-9d5f168a3e64",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7c712674-9d39-474c-857d-55848903a68c"
        },
        "item": {
          "id": "b2b3d8f6-b75a-4e3c-849f-b5f08f0f485b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6d496c28-48d1-4709-8a27-e4db806a1104",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34251cf7-66e7-4de7-9320-30575156297d",
        "cursor": {
          "ref": "9c9db8ce-a306-48de-a81e-afa8090a0b6d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fdb65264-3b03-4bdb-8a27-25db5ec5a063"
        },
        "item": {
          "id": "34251cf7-66e7-4de7-9320-30575156297d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c1415e61-48e7-44fa-b44b-20fe279e227f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05c69f6-c16f-4676-94d0-46b6c3bbcca3",
        "cursor": {
          "ref": "48095998-9522-41f0-873b-f5377858c551",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e9a5612b-a74a-4771-9037-84701e733236"
        },
        "item": {
          "id": "d05c69f6-c16f-4676-94d0-46b6c3bbcca3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3142f095-bb5d-4169-8223-87f1a65a23f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9105d0ab-c6c5-43dc-8655-4a3ddc00cbe4",
        "cursor": {
          "ref": "d0d7238e-b5ea-4f8d-90e0-ba610121124c",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d0544950-6bd1-4966-b3b6-dff045daf255"
        },
        "item": {
          "id": "9105d0ab-c6c5-43dc-8655-4a3ddc00cbe4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "796d3b74-8213-41d3-b3b4-be313b326fd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859f2661-7468-4a80-bb73-adfcef26b621",
        "cursor": {
          "ref": "89217890-599b-4979-8c7b-926e8e6280f7",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fcd7a887-875e-46f4-b474-0a687b250bd9"
        },
        "item": {
          "id": "859f2661-7468-4a80-bb73-adfcef26b621",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b96e239f-b2c8-4f84-93c2-f36753e89df6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0663cf64-10e5-4a12-803f-9753eede822c",
        "cursor": {
          "ref": "23140ffc-93d9-4560-b627-f099bdcd5c32",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "70b8e9e8-4578-4d27-b479-5a01ca53151b"
        },
        "item": {
          "id": "0663cf64-10e5-4a12-803f-9753eede822c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1761bd1f-ba9c-4a6e-b5a3-6ab7696c541b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3063cc95-ad0d-4be4-8cf3-83d1f17ae830",
        "cursor": {
          "ref": "a09b0f10-6271-4f62-8061-dbe5eeacbe62",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "def3c89e-df0b-441b-95e5-87a2afce2832"
        },
        "item": {
          "id": "3063cc95-ad0d-4be4-8cf3-83d1f17ae830",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "856aacd6-b2f4-46e5-ae55-125c41dd9b87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae36a43-0a37-4eb6-96ce-0b1e67813019",
        "cursor": {
          "ref": "20cbe240-ff66-4592-8300-cc953fa73f1f",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "679eeede-8866-4759-ad4a-c8727617364c"
        },
        "item": {
          "id": "bae36a43-0a37-4eb6-96ce-0b1e67813019",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1be8ed32-d288-450b-9294-8a6a787bff87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61baeeeb-29c4-4d95-b6c5-3caa1665119f",
        "cursor": {
          "ref": "39485cb8-84f4-4d40-91a6-14651f3589b8",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ca3ac45e-755e-4f2a-9d5d-f5e5549febe1"
        },
        "item": {
          "id": "61baeeeb-29c4-4d95-b6c5-3caa1665119f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "44eed075-49dd-420f-8bdd-08f0b6822372",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc2727e-fab3-4fb9-a544-08769fe99db8",
        "cursor": {
          "ref": "ba90a1dc-0c5a-4e92-8e4e-b228d3184e42",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2b1563dc-5297-4732-9f38-1f6186317e2d"
        },
        "item": {
          "id": "ddc2727e-fab3-4fb9-a544-08769fe99db8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "697e3f29-ea66-48a1-b130-a5a23003e8f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4c6422-8474-43d5-ac99-d302d286d235",
        "cursor": {
          "ref": "f6674738-2905-448b-9f4d-82596ebc1c33",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d5e22af2-2257-4b06-9f92-858f496d2e39"
        },
        "item": {
          "id": "2c4c6422-8474-43d5-ac99-d302d286d235",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0aa8c5c5-66f1-4036-98fc-9b7ef84d5701",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba7f367-89b1-4312-948f-bf3a9619540b",
        "cursor": {
          "ref": "98f17c43-e1b2-423f-81c8-2b96c21b81e3",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2c9951d7-d1bc-4b8e-bdb4-76a20e3b1b7e"
        },
        "item": {
          "id": "dba7f367-89b1-4312-948f-bf3a9619540b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e330f0a3-691e-4869-91a7-e3f4a9cd98b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c0f9c4-b4dc-421a-89be-9913bfe62856",
        "cursor": {
          "ref": "9b812acc-8f1e-40e3-81df-60040c00f5bd",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3392d2e7-4d48-43de-9dfb-5394f935cff3"
        },
        "item": {
          "id": "a5c0f9c4-b4dc-421a-89be-9913bfe62856",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8764eedd-87af-4590-b663-8b7ced454e04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabc2984-286c-4cc6-9869-b4dfd15816b5",
        "cursor": {
          "ref": "5b477885-86bc-420f-9428-b291edab0130",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7f675857-e519-4282-a0af-dff0fc3db0e8"
        },
        "item": {
          "id": "dabc2984-286c-4cc6-9869-b4dfd15816b5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b1520bd6-1698-498b-8afb-6ecfe2769895",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5912d960-fc03-4b8c-89eb-27fdf02a4d95",
        "cursor": {
          "ref": "5b0b15cc-9340-4e0c-bf9c-3ec3f2fc48e5",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "dc5813f6-7f36-4c45-908d-4e2f4f2ad293"
        },
        "item": {
          "id": "5912d960-fc03-4b8c-89eb-27fdf02a4d95",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6391e60b-e893-45ac-9889-6a78f4a68c74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb562f3-3ca0-4226-9e27-1d051bcee4b6",
        "cursor": {
          "ref": "8b790ecb-5b1b-44cf-a86f-90f37b4d9459",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "31bd625b-5a76-41d1-8c89-5326eec63204"
        },
        "item": {
          "id": "bfb562f3-3ca0-4226-9e27-1d051bcee4b6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7730258b-8204-4a6e-98e7-b7db6e023933",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba013c06-aa97-4759-9f67-97d43dd790ab",
        "cursor": {
          "ref": "fee0dcf6-8b65-4c09-94c6-eb3bf9279505",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "70de9441-5730-44b8-b71e-848a9315ea7d"
        },
        "item": {
          "id": "ba013c06-aa97-4759-9f67-97d43dd790ab",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cdec97ad-4faa-4c18-8761-7b41fad7cea4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258d9709-a88a-4277-b173-ef3a6ce84421",
        "cursor": {
          "ref": "7124196b-2957-4d4a-aa9b-2aae4905499b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "85cb35d8-3d8e-4227-ba92-8ad15b568cf5"
        },
        "item": {
          "id": "258d9709-a88a-4277-b173-ef3a6ce84421",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "44cc9c4a-bc91-4d85-9c7e-8f57bbf6455f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff866732-ceaa-44f1-adb8-f07c6b798f4e",
        "cursor": {
          "ref": "f3f7ca03-dfa1-4b08-b116-326c989d7261",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ff102c04-9b38-4514-8c91-2de8cfbe63ba"
        },
        "item": {
          "id": "ff866732-ceaa-44f1-adb8-f07c6b798f4e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7a21b703-0854-4769-a5e3-1a61886bce48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75d3fa3-0f22-481f-b973-a698c0308884",
        "cursor": {
          "ref": "66d8a634-1514-49d0-82e9-8e72fa977924",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "67c1bd3a-be6f-4239-a33a-72d8b7268105"
        },
        "item": {
          "id": "d75d3fa3-0f22-481f-b973-a698c0308884",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "150edbed-c64b-455d-ac3e-266b738d2dc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd15580-bab2-4f1d-8a9e-fbb3ca0afb81",
        "cursor": {
          "ref": "e7119138-a2c6-4430-829c-ab67c391e2c1",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "964d006f-2c5b-4d3c-8ae5-2dfea60bfbb4"
        },
        "item": {
          "id": "fbd15580-bab2-4f1d-8a9e-fbb3ca0afb81",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "393a552b-db01-463e-84cd-5167698ea392",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a66d9fd-0059-4859-95c5-e25a7ae84ae4",
        "cursor": {
          "ref": "33f3b53a-fdea-4206-82b6-a1cce972ecd3",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "48d41e03-927e-4c23-ae20-8707c4f2fd99"
        },
        "item": {
          "id": "5a66d9fd-0059-4859-95c5-e25a7ae84ae4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7a755290-bec6-4d2a-a8c5-1643cbbbb781",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb56737-6769-4d6f-8e3c-3d9516fa1323",
        "cursor": {
          "ref": "efd7af19-0020-4629-b32b-97f7a5ff5fbb",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "11a0b5f6-e2d7-4957-af22-27fc2dbc9b39"
        },
        "item": {
          "id": "afb56737-6769-4d6f-8e3c-3d9516fa1323",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3af1db88-8800-439f-b3d9-1ef40d2a3eab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4690ebf4-0d05-4c57-8bb9-a57c7772f368",
        "cursor": {
          "ref": "59bb07ea-12e7-4751-924c-738299b4f535",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4bf970d4-205e-4511-ab35-14921c3842c9"
        },
        "item": {
          "id": "4690ebf4-0d05-4c57-8bb9-a57c7772f368",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6ea31be5-f035-447f-a5ed-60d160d896c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a28b952-c664-4c2f-95ca-c5777c654158",
        "cursor": {
          "ref": "6f904dd8-e553-4e4b-bae7-c1cd983523c5",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b8aa12f4-679d-4d66-b850-42437738c102"
        },
        "item": {
          "id": "2a28b952-c664-4c2f-95ca-c5777c654158",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d4b750e6-7932-4f4d-9afc-470a3f2632dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babc9430-1b90-49d3-9123-e86930fe0de6",
        "cursor": {
          "ref": "84e53c02-949a-4095-adea-43c2919ad77f",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1c5913b3-0094-4a08-9240-2c271a52ed65"
        },
        "item": {
          "id": "babc9430-1b90-49d3-9123-e86930fe0de6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "15af72b8-fc9a-4645-a495-1544d1657dfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0801fc26-62f7-4104-97c9-3e9a55f53b7a",
        "cursor": {
          "ref": "814e9b56-30c6-4209-86c2-beec0dd298ca",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9219b2cb-120f-4a25-8aeb-862c3dd6cef4"
        },
        "item": {
          "id": "0801fc26-62f7-4104-97c9-3e9a55f53b7a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "381179f1-6443-4b3f-a674-fadfe069fdc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32be0f6-c7c2-45fe-b379-b66e235b40bc",
        "cursor": {
          "ref": "61069a13-8986-49bb-b76b-cdd9e5cfe7ff",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e4a36e98-06a2-4959-b0b0-efaca099e219"
        },
        "item": {
          "id": "a32be0f6-c7c2-45fe-b379-b66e235b40bc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bdc74d69-4960-4a73-be20-001102c063be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7f0cda-0018-4e78-8b70-6e4a5f0a7f6b",
        "cursor": {
          "ref": "a4e88b19-90df-4b06-bc38-89b7671acfa2",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "33f6fab1-2638-4e4c-8878-c46989364bba"
        },
        "item": {
          "id": "9d7f0cda-0018-4e78-8b70-6e4a5f0a7f6b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7aacc866-0e86-49a7-8e90-5a2c339033b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f2e522-0b0a-4bd9-ad5a-e18ec349b0a9",
        "cursor": {
          "ref": "d5fa3a21-ed01-403b-9de3-8a618ac5ca68",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "682077a2-6fdf-4070-8ff9-07b93c6c9639"
        },
        "item": {
          "id": "10f2e522-0b0a-4bd9-ad5a-e18ec349b0a9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8216735c-7eee-4cc7-af6d-63e713df0568",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af8a67e-fc63-470a-9ee8-fc5ab5e1eaf6",
        "cursor": {
          "ref": "250d227d-d16f-4c5e-abcb-3613c53b0c85",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "42c285a9-b8cd-4eea-a3cd-dcfa2a26e862"
        },
        "item": {
          "id": "3af8a67e-fc63-470a-9ee8-fc5ab5e1eaf6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bfc98001-ec23-40ca-87fd-516573a578c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c643dbab-366b-45c5-9d2a-c8562929c14a",
        "cursor": {
          "ref": "b313b160-5669-47e6-a4e5-03aabbcc6a7f",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "68c723d3-c7c9-4640-8922-fbff9b60256d"
        },
        "item": {
          "id": "c643dbab-366b-45c5-9d2a-c8562929c14a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a42e9225-8399-41f7-a1c3-4903b0d919e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575704db-1228-44a5-b74f-1782583b4826",
        "cursor": {
          "ref": "6545f4d9-8694-4e4b-9794-b88dcd69603c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6709f000-9d39-40ef-bde9-c4b413be1476"
        },
        "item": {
          "id": "575704db-1228-44a5-b74f-1782583b4826",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "34c5aaee-7ea8-4079-84e4-1d5cb7562625",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d7bd45-982d-42c7-81ca-d4a98d39f426",
        "cursor": {
          "ref": "3f82c08b-8308-4932-846b-9f3bd7935f51",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "aeacfc58-37f7-49a4-8b22-bd5fe8c932b6"
        },
        "item": {
          "id": "24d7bd45-982d-42c7-81ca-d4a98d39f426",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eb85af53-d6a9-483b-9294-4c0c1525779e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7fbe6c-d451-4298-847b-9e93a715d948",
        "cursor": {
          "ref": "aecccd44-cfe4-4e46-9af6-8fa20f356bef",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "573f60b0-592e-4a42-a4c2-2daea333eedc"
        },
        "item": {
          "id": "ee7fbe6c-d451-4298-847b-9e93a715d948",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a2e3a015-6864-4c92-9ac9-dbc4a2f80be1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04afc587-92ee-4133-afe5-b80a9c3db9d7",
        "cursor": {
          "ref": "ff6f1cf3-5b83-4f43-bd55-cc5c7f01e007",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3eb100ea-0cad-41fb-ac4d-bd9a0d751b9b"
        },
        "item": {
          "id": "04afc587-92ee-4133-afe5-b80a9c3db9d7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2e3d7157-f546-4280-b8a4-a26b3bad8534",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7259657e-847e-4749-ab34-55d51b0f9aca",
        "cursor": {
          "ref": "7e840bac-039d-41f2-978c-34271e28d402",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1afb0612-73f1-4a18-ad92-a0890647b49b"
        },
        "item": {
          "id": "7259657e-847e-4749-ab34-55d51b0f9aca",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c8a5894c-76a8-4589-9b34-4a819e57c09c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c41a1e9-0176-4824-ab9c-d82f73ffafee",
        "cursor": {
          "ref": "b198152a-4b2c-4320-935a-9a70507977ae",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0e061998-d444-4391-9258-807fc00f061a"
        },
        "item": {
          "id": "8c41a1e9-0176-4824-ab9c-d82f73ffafee",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "41aa8425-3780-4efd-a039-ceef1be1344f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1acd7ca-f49d-4734-835d-acadbcd3fa4f",
        "cursor": {
          "ref": "8b0fef66-e80b-4565-9d9d-06128a6a2b04",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "aaa673a5-3781-4ed0-8f21-e79ff42b58b3"
        },
        "item": {
          "id": "f1acd7ca-f49d-4734-835d-acadbcd3fa4f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dae38c3b-0331-4fae-9a7f-577a293d3bba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db9c712-04c3-488b-857a-8beda0a4d4b2",
        "cursor": {
          "ref": "dd89f3b1-30df-49df-969e-9fa8cef0d74f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9ac4b793-be52-478c-a553-c142b80bbb17"
        },
        "item": {
          "id": "7db9c712-04c3-488b-857a-8beda0a4d4b2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c72b5da8-7a13-44e0-a5f5-96d3fcd4f956",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cc8935-0866-4515-8a8f-f99a4c11293a",
        "cursor": {
          "ref": "2212cffe-cee4-43e7-a4ec-c75f58a234be",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1eaea635-f190-4e48-8f5b-d934e0e97023"
        },
        "item": {
          "id": "20cc8935-0866-4515-8a8f-f99a4c11293a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1aa76bdf-b4c2-441b-87ce-6afc7747f36d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64a8601-b7a1-4bff-8870-1d5f9e1ddb9b",
        "cursor": {
          "ref": "7872c941-2ee6-4168-96a6-2cdf57f32676",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7df9335b-ee5b-436d-8b7a-b1545274530e"
        },
        "item": {
          "id": "c64a8601-b7a1-4bff-8870-1d5f9e1ddb9b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7869619b-bab6-4675-a035-d1d8ee24f200",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28161f4f-feab-4512-9bd8-a9908ebc37c2",
        "cursor": {
          "ref": "d546738a-53b7-4177-a90b-b6556341233c",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5072d019-9744-403b-9b8e-6786581efa41"
        },
        "item": {
          "id": "28161f4f-feab-4512-9bd8-a9908ebc37c2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "67e4c198-1c73-4dd9-855c-c55bc9918ac9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46fbab5-d8b6-41bd-aeb9-a25abf2f0bef",
        "cursor": {
          "ref": "11142083-86e2-42f3-a0c2-2b19610fc918",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "36f5e9a3-594f-4922-a585-be716b401702"
        },
        "item": {
          "id": "f46fbab5-d8b6-41bd-aeb9-a25abf2f0bef",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f39e042a-8ea5-45ac-a1d4-f2c53bf2c9b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c681570-514e-4e3b-99f5-f51c14259a2b",
        "cursor": {
          "ref": "1edd38fc-22fe-41df-87ec-9dcdc5b47c98",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "394cabdb-db62-43b7-ba2c-68726175bf8d"
        },
        "item": {
          "id": "8c681570-514e-4e3b-99f5-f51c14259a2b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f259e080-1225-4d88-89a0-593840240c1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53c94b4-0b6c-41e6-a0de-0940e86ece02",
        "cursor": {
          "ref": "5d5f9bcb-0d73-44fa-bef8-9fabffe30486",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "02174624-b88f-4f7e-a635-10cd49d8249b"
        },
        "item": {
          "id": "d53c94b4-0b6c-41e6-a0de-0940e86ece02",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a322b63e-a06b-45a7-a36d-d4c7075b9f14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3d0390-5ede-44bc-a402-365906e94a12",
        "cursor": {
          "ref": "afc098bf-2f2c-4e36-8748-84ff57dc4bfd",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "457790ed-6b4c-4017-9fc9-7f1b74dfb7e9"
        },
        "item": {
          "id": "1d3d0390-5ede-44bc-a402-365906e94a12",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6edf1dfa-2c37-46dc-9ca0-bd4f8e4f47b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504c245d-83a4-44db-93d9-3d40a1745e4a",
        "cursor": {
          "ref": "3d11ef3c-737c-4b46-a1ef-bee4789a0c3a",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6863a20b-71e8-4fc4-bd83-425f72f5335d"
        },
        "item": {
          "id": "504c245d-83a4-44db-93d9-3d40a1745e4a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "41677b92-b90b-4069-b015-960a3e4470e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def0ec4c-f456-4b20-aa77-0eaff1aa4d7a",
        "cursor": {
          "ref": "61501a8b-fd04-4ce1-8cf6-874990b11e37",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d8762a43-3cfa-40d8-8fee-d4ec7dd5b89b"
        },
        "item": {
          "id": "def0ec4c-f456-4b20-aa77-0eaff1aa4d7a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6da79d0e-59df-49b2-956b-92d28420ce82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4b1f98-6388-498e-84f7-a4b5becaeec7",
        "cursor": {
          "ref": "b64000f5-043c-4ec3-9eae-a0c99f809341",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f0fa27ee-4590-4432-bd16-57335a337675"
        },
        "item": {
          "id": "5b4b1f98-6388-498e-84f7-a4b5becaeec7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c3818317-a3f1-4ddf-b9d9-6c62659c73fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e36bfd4-639d-4aa5-82df-96420afbc0a8",
        "cursor": {
          "ref": "941a678e-22ac-4ed9-9b98-055e71ad0c99",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "018779dc-0892-4c48-8920-6129d2693f18"
        },
        "item": {
          "id": "9e36bfd4-639d-4aa5-82df-96420afbc0a8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f89974c3-c414-4dac-b5b7-abb045694113",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9444e1-c7c4-4853-bd89-5cf6eafe7633",
        "cursor": {
          "ref": "e8cc7700-8afa-4b56-a869-fada625b5e27",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b90fd20d-1da6-4a55-99d3-1d4996f4870a"
        },
        "item": {
          "id": "ce9444e1-c7c4-4853-bd89-5cf6eafe7633",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "197e3071-4624-427f-b854-e3fa5aebf3f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582a53b0-ab1f-48d9-bdfd-9b3d36bfa00f",
        "cursor": {
          "ref": "859f94bf-7315-4160-ba29-f28d9088c486",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e25753ee-bc37-40fc-82c7-b9e05836bc52"
        },
        "item": {
          "id": "582a53b0-ab1f-48d9-bdfd-9b3d36bfa00f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e9f6cd25-f139-4296-bb4a-3f295304aba4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d38eebd-b428-4350-8cda-09889aa48124",
        "cursor": {
          "ref": "f7ec8113-0248-418e-869e-e5ab57c85d65",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "86a940fb-7c3a-4a34-95e4-c2c99783166e"
        },
        "item": {
          "id": "2d38eebd-b428-4350-8cda-09889aa48124",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "14e9c39c-f880-4914-ac75-d4e8f88a5b9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167ccd4d-b57c-41cf-91c6-1b38bc9b72ac",
        "cursor": {
          "ref": "eaf4589b-7b20-40a5-9070-6ce07f483214",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b9cdf36f-d20a-4e32-80aa-047d1bb23056"
        },
        "item": {
          "id": "167ccd4d-b57c-41cf-91c6-1b38bc9b72ac",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3609fa30-bf16-47f1-a566-f1bd36740b7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15370ef0-6817-4ddb-829b-e90a11548e64",
        "cursor": {
          "ref": "869bb123-759a-48be-a342-442a057effd2",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "74c54e6c-a741-43cf-b41c-ca6cf45406fb"
        },
        "item": {
          "id": "15370ef0-6817-4ddb-829b-e90a11548e64",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5683d159-baad-4f79-ae68-5dee1400b00b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dafdd6-617b-44fd-a425-3ea32296c2d1",
        "cursor": {
          "ref": "1348a590-82f8-4411-9a4d-e8eedeff3e84",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7f8f8ccb-c1f3-4f16-b7f1-2e009a3b5b89"
        },
        "item": {
          "id": "09dafdd6-617b-44fd-a425-3ea32296c2d1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2a7791c3-164d-4fe8-9c90-a78c93fe5d1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c904ec6d-5b97-45bd-ad3f-51d6f16331aa",
        "cursor": {
          "ref": "73f598fc-114d-4357-aa61-29c35d5c59c9",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b4d0f46d-d923-443a-82ed-8f2b427cab5f"
        },
        "item": {
          "id": "c904ec6d-5b97-45bd-ad3f-51d6f16331aa",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "dfd0d96f-c1b4-4c9a-b3ea-79a159528464",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7501b4-9dba-4773-9d4b-da30c69f3e9d",
        "cursor": {
          "ref": "a38d45b0-b4f2-444e-9591-93724b5b9305",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2e2eaf53-2106-4043-8604-a856b0e2b5eb"
        },
        "item": {
          "id": "5c7501b4-9dba-4773-9d4b-da30c69f3e9d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7e6aec7a-47fc-4fe8-82ed-60c46a63fd15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431af4a5-8f1c-4ad6-9c28-f7705dc7d28c",
        "cursor": {
          "ref": "ab76ea06-a8f6-413e-b640-83fd2d2677be",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "75449a1f-5b16-4f7b-9147-75d5e9383791"
        },
        "item": {
          "id": "431af4a5-8f1c-4ad6-9c28-f7705dc7d28c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "56a5d696-fd35-4d90-b797-6eb68b646845",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9617765-7aef-4dbd-81c5-86e22d2be044",
        "cursor": {
          "ref": "8883ee3f-e476-4560-a099-d22ebc9964ff",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "92c23675-eeb9-4855-9cc1-7cd2f61d25b4"
        },
        "item": {
          "id": "a9617765-7aef-4dbd-81c5-86e22d2be044",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b894b116-7547-4041-9aa1-f01efb5553f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa4ebe5-ac49-40a2-aa41-a3a4b5022263",
        "cursor": {
          "ref": "3bcf7354-414c-4d74-a580-81b129450a41",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "aedb832a-47be-48f3-a2ec-b92e93fffb20"
        },
        "item": {
          "id": "9aa4ebe5-ac49-40a2-aa41-a3a4b5022263",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1478dd1e-c442-482f-a9c0-1d080b210f47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0255f99a-ebeb-4f48-bc0f-d80ea2e07ada",
        "cursor": {
          "ref": "5c3eb3ad-e692-4d8d-abb1-f4a504060238",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4cd2af98-c9c7-4004-87ce-37d797705a3f"
        },
        "item": {
          "id": "0255f99a-ebeb-4f48-bc0f-d80ea2e07ada",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b57d23ec-84c2-49c6-af36-d37b471f504d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a66f84-4f47-4d89-a3b7-45c84e859d03",
        "cursor": {
          "ref": "d34529ce-11e2-473e-aaef-98940fa0c97e",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a77c1101-f7d2-43b0-8776-330089657e3e"
        },
        "item": {
          "id": "47a66f84-4f47-4d89-a3b7-45c84e859d03",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "85c0c9da-1714-4839-a876-8c7d60b07468",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbbcc24-ee5b-4927-8c3a-af50a63a84a1",
        "cursor": {
          "ref": "07a9703e-19b6-4b4e-8d0a-09fe58cd22aa",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3645b5f8-3386-4951-a926-53d49e767a2d"
        },
        "item": {
          "id": "5fbbcc24-ee5b-4927-8c3a-af50a63a84a1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3dc00c4b-637d-48e8-82b8-36cdf9d955a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d233acf9-484c-4412-92d5-b0c488b0cd58",
        "cursor": {
          "ref": "74abda14-f5f7-41fb-8f91-756b6ee42c92",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6b739904-36d6-4bc7-b03b-95d374e075c3"
        },
        "item": {
          "id": "d233acf9-484c-4412-92d5-b0c488b0cd58",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "aca094a0-f4b2-4f6a-aee2-ca022ef4f9bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667b1b0d-9e4b-47e8-9bc8-74108bf05db1",
        "cursor": {
          "ref": "d0741b80-f553-461e-bd6e-73bc9d47ea5c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4eb1560f-b14f-4069-b9d6-585bb5b4301c"
        },
        "item": {
          "id": "667b1b0d-9e4b-47e8-9bc8-74108bf05db1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a561a27b-ba35-4d80-bf08-3c70ac587d28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6657e82-131c-4c34-b3e9-6b35190691d5",
        "cursor": {
          "ref": "8d88ce2e-ee01-4ea4-be32-1b7293769048",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "20b60fe4-a92e-4b59-88ce-709a185b64d5"
        },
        "item": {
          "id": "e6657e82-131c-4c34-b3e9-6b35190691d5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bde897b3-0247-4191-85de-d91aece9604b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e46248-8787-4927-b510-760550f5a5df",
        "cursor": {
          "ref": "9ab11c25-d33d-4e16-875d-a2ba42d47380",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "03f0640c-a0e2-4e61-8571-4d0867d21c96"
        },
        "item": {
          "id": "e3e46248-8787-4927-b510-760550f5a5df",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "dd31f310-3b4b-41bb-9ac7-ae53826af1b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae50a4f-4b7d-49ea-969c-6551a4354029",
        "cursor": {
          "ref": "97e92c11-ad9f-4b56-927c-1cc890a5af35",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3e45092e-4f62-40d0-93e6-6d8aa4658186"
        },
        "item": {
          "id": "6ae50a4f-4b7d-49ea-969c-6551a4354029",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "89a81393-3908-4249-a375-58854a1c952c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d38b027-fa42-4762-bf0d-fbd3a3168987",
        "cursor": {
          "ref": "c44a0898-e80d-4331-8371-741fa2b2fac4",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e6a05fc1-a016-4e1c-8bcd-c340a091b607"
        },
        "item": {
          "id": "1d38b027-fa42-4762-bf0d-fbd3a3168987",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9618fc38-7f6b-40ee-a223-5be4f9ce6800",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f89962a-bba0-4299-a679-e3d8368fc7eb",
        "cursor": {
          "ref": "09847066-66e9-4ad0-b7b5-ec3fa7d496c7",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cd803850-d2e0-44c7-967b-28c66f55b9f8"
        },
        "item": {
          "id": "7f89962a-bba0-4299-a679-e3d8368fc7eb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "815ea3ac-3aca-4f07-82fc-a8bd9d00e592",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69859116-a2c8-4a74-9658-f4852db812a8",
        "cursor": {
          "ref": "525f3cb0-ef88-40e8-b29c-a3b9924f49ae",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1bf0c3ce-9a82-48d2-9186-44237ca45f14"
        },
        "item": {
          "id": "69859116-a2c8-4a74-9658-f4852db812a8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d04685ba-6266-4118-bdd6-d7ee5e24964a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14ee15c-849b-4b60-bfe9-058c9601525e",
        "cursor": {
          "ref": "e83989b6-e7ae-49c6-b3e3-53b3c42bb4b3",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5a84a418-e694-4ed6-a219-446bb909980e"
        },
        "item": {
          "id": "c14ee15c-849b-4b60-bfe9-058c9601525e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fdd49662-cce1-4a81-b74c-90aa0792c533",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdea1b3-a611-424d-a610-3916914f7389",
        "cursor": {
          "ref": "d2e242ba-4d94-4dfd-b452-7c83f964bf9b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cc511dcb-ac54-43de-8e45-22ed1b2c384b"
        },
        "item": {
          "id": "2bdea1b3-a611-424d-a610-3916914f7389",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7b61eb1c-bd77-496f-b59d-4478465d3ff0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b50231f-56fa-4188-8a33-b4f7b18e745b",
        "cursor": {
          "ref": "3117eb1d-7d0c-4c45-919f-f1ce07f05e55",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5cb22cd6-4825-472d-a2ed-47467c342b48"
        },
        "item": {
          "id": "7b50231f-56fa-4188-8a33-b4f7b18e745b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f495d61d-6bfd-403e-b22a-71615e274cb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d348fbab-8060-4ef8-b493-b24f2dfa29b0",
        "cursor": {
          "ref": "d470a42a-bc9a-471c-b889-e6696208c69b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c5706d31-bf37-4536-9b10-c9a6bbc51224"
        },
        "item": {
          "id": "d348fbab-8060-4ef8-b493-b24f2dfa29b0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b197c857-6808-4d0a-ab79-2ce767d646f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68adb65f-30d7-47b8-b5ed-cf26375f7a8b",
        "cursor": {
          "ref": "3e53e16b-b866-4e76-9b5d-330c3505db46",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b02e7b9c-8e07-48ef-beef-03a5bbe643ed"
        },
        "item": {
          "id": "68adb65f-30d7-47b8-b5ed-cf26375f7a8b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d8b64244-dd0f-46bf-9125-497b01078456",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a03b4d-76aa-4ac1-a5a9-27df88a2458f",
        "cursor": {
          "ref": "7e8c4f8d-ef14-4b06-a083-c8923ceb4062",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "61a42af4-c4cb-4dab-aef3-631df3264f96"
        },
        "item": {
          "id": "26a03b4d-76aa-4ac1-a5a9-27df88a2458f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "590799a3-d41e-4ebb-9585-4eaa9266366b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3911882-3b25-4b04-96bf-d0337b6e6097",
        "cursor": {
          "ref": "4a396a57-9986-41f5-a716-66a54d6b28fb",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ba77f8ea-a650-422d-89d5-9c205d0e430f"
        },
        "item": {
          "id": "c3911882-3b25-4b04-96bf-d0337b6e6097",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "27ae4722-147e-4fd9-acf1-d23dc2bb689c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112f015d-37f7-4eef-a092-e52be59900be",
        "cursor": {
          "ref": "e45a9d9a-c774-45b7-b352-fbece4bec706",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8542635b-e35a-4f05-b9a7-cf8f7f379926"
        },
        "item": {
          "id": "112f015d-37f7-4eef-a092-e52be59900be",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f0caa42c-2c76-42f6-8613-c7d8b3cd3043",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d71f8d8-31b7-4d8d-9777-893ef2a19337",
        "cursor": {
          "ref": "ddfcdfc9-3c25-455d-abeb-b97499d8bd74",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "56a74176-0ca1-4d24-85f7-bb773e8c75cf"
        },
        "item": {
          "id": "4d71f8d8-31b7-4d8d-9777-893ef2a19337",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8ad1c824-d9bb-4605-9ccf-546652f68c0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4010e92c-d7cb-4c27-a567-51be6880e20b",
        "cursor": {
          "ref": "6a8c22de-7b20-41c5-ab99-fbd473ed2924",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a2500207-cda2-4fed-b4ed-9f2260b9120e"
        },
        "item": {
          "id": "4010e92c-d7cb-4c27-a567-51be6880e20b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3da94359-ff10-4067-b06c-119b20623661",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b319131b-0bb4-4322-acb7-c6c31078b03d",
        "cursor": {
          "ref": "b1731057-459a-496d-9828-d1deb52735cf",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a029c0fc-550a-4487-8a0b-0c88882bc3d8"
        },
        "item": {
          "id": "b319131b-0bb4-4322-acb7-c6c31078b03d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "964c7102-6de1-4930-a197-f502674a792e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 363,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255eaac1-1741-4ff1-ab47-47d4c3e9610b",
        "cursor": {
          "ref": "2ae6fd39-6c25-4ee9-986b-2b1495c7320b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "33a55b3e-a4a7-404e-b0b6-2c59eead1b57"
        },
        "item": {
          "id": "255eaac1-1741-4ff1-ab47-47d4c3e9610b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "712ba083-7422-4213-a36e-20f9223d1f24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d634448d-609a-472a-93a2-989ce35ba5c5",
        "cursor": {
          "ref": "6ff80217-6780-43d6-a4e3-0b8caf035819",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bf2d2c7c-6086-4ee7-bbc3-e4b238bb82e8"
        },
        "item": {
          "id": "d634448d-609a-472a-93a2-989ce35ba5c5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8544f283-aec4-4655-b270-521b163c5834",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ec4064-af6f-410e-9963-0befdf2c9814",
        "cursor": {
          "ref": "260cb424-38cd-4344-8cd6-02ae8c9d52bd",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0da1e3ca-698a-4588-be38-27a17d726f8a"
        },
        "item": {
          "id": "56ec4064-af6f-410e-9963-0befdf2c9814",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "964ecf77-7814-4e93-9b29-475caacbc9f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ab657c-075a-4e29-9b84-15921adc1144",
        "cursor": {
          "ref": "73cdaa7c-ca76-43d0-8fdf-282ac13eac58",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6292c03f-b3c1-40c5-8a58-3491d4ae51d8"
        },
        "item": {
          "id": "67ab657c-075a-4e29-9b84-15921adc1144",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b0887a89-d597-45ec-901a-451f0742dc8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee24f70-3829-4027-8309-0a033b76be93",
        "cursor": {
          "ref": "c46bc56d-4841-4ac4-b243-cdf062c03dc3",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "45fc047e-720b-456e-811e-6f16b4253df0"
        },
        "item": {
          "id": "fee24f70-3829-4027-8309-0a033b76be93",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "44389cd4-0bce-4cbc-bda5-ba7d48420f72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2925f16-6f58-47b9-a49c-70434f875277",
        "cursor": {
          "ref": "72a603af-fe8a-4000-b55f-b40a1db48d2b",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f3662f38-13da-4f94-99bd-8da16e22cd15"
        },
        "item": {
          "id": "e2925f16-6f58-47b9-a49c-70434f875277",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bae18ccd-cfb8-4205-9c9e-958491d4c927",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bcb8ca-efa2-4eca-935a-87e4a456fb07",
        "cursor": {
          "ref": "e189b54b-3f35-42be-90f4-0c6f049743ba",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "eaecb890-6245-48ca-9b2f-65cdd4ed92aa"
        },
        "item": {
          "id": "60bcb8ca-efa2-4eca-935a-87e4a456fb07",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "aa603ce0-d5bd-4eb8-874f-f9de2d116526",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931c6b6e-0b1a-4722-99d8-2cb221f7afb0",
        "cursor": {
          "ref": "b06468df-0651-48d7-bed3-a667541f52bf",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8f5d2ece-272c-46a5-a6ca-03a311c95b11"
        },
        "item": {
          "id": "931c6b6e-0b1a-4722-99d8-2cb221f7afb0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a8be5345-29e4-49e6-8401-f6006cf5064e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c94012a-670e-4317-953f-c93628225b46",
        "cursor": {
          "ref": "1138585d-a3de-4ee3-9e14-e733bf3d4d83",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d71e34ec-0956-47fe-82a4-0bde7880bb32"
        },
        "item": {
          "id": "9c94012a-670e-4317-953f-c93628225b46",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f2099bdd-a2e0-4877-92a5-648373f1c9d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54a243a-f67c-4d05-ace6-96b559605ff1",
        "cursor": {
          "ref": "eaed6264-e629-49e1-b895-c407bb761436",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5c043f56-903c-466f-8688-d8549924eaf8"
        },
        "item": {
          "id": "a54a243a-f67c-4d05-ace6-96b559605ff1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "37f94a28-eef9-467f-8909-4dfa5170d619",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa28cca-05b2-4289-afc4-8185b9f33c79",
        "cursor": {
          "ref": "aa12890d-9761-4649-a25d-6c973555d53c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a9b1a23b-7dbc-4ee8-a346-bb1c189bc0d8"
        },
        "item": {
          "id": "ffa28cca-05b2-4289-afc4-8185b9f33c79",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "97fa3c91-5fc7-4585-8b35-64502afd3074",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01e672d-347e-475f-8eb9-40379ff6f584",
        "cursor": {
          "ref": "bd34cf1f-b799-45d1-92ae-0b4cac7c80bf",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "11521a01-ccbe-4bd7-bc71-3db096f7d819"
        },
        "item": {
          "id": "e01e672d-347e-475f-8eb9-40379ff6f584",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fbb88625-785f-41c2-966f-7c121ba09eb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4576e86c-fb4f-49ca-ad77-83d050d73d4a",
        "cursor": {
          "ref": "9dd23d9f-1360-4301-9aea-2fb4ff29f51c",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1f3eddf7-5135-4496-a540-f2621af6930e"
        },
        "item": {
          "id": "4576e86c-fb4f-49ca-ad77-83d050d73d4a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b2b529bb-1299-4469-af4e-bb586c90a05c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94dabdf-88b7-46f0-a7de-c036120b65e5",
        "cursor": {
          "ref": "4bd0d459-8a24-44fc-ad64-6ef8ef2c46b0",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "970479be-b413-40f6-8170-1b1cd2014727"
        },
        "item": {
          "id": "d94dabdf-88b7-46f0-a7de-c036120b65e5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2d20a160-42f5-42e7-8744-a7054397b783",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dcf130-9b44-439f-8533-9511142fc4d1",
        "cursor": {
          "ref": "cdf806fc-25dc-44c2-8fb6-44e549fcf134",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f9c604b3-f20d-4bcb-b455-3d8501ac6cfa"
        },
        "item": {
          "id": "c2dcf130-9b44-439f-8533-9511142fc4d1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2fa5427d-e2ab-4094-a4e2-ecb358639c14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4143a9b6-10d0-477c-93f3-f7d9d060efcf",
        "cursor": {
          "ref": "11577076-70a8-420b-802a-25eb9bf24f1b",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "00909fd8-a319-4fb1-9795-104693947192"
        },
        "item": {
          "id": "4143a9b6-10d0-477c-93f3-f7d9d060efcf",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "11c5521a-7302-46b2-ae56-c51fe07a4196",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14c4c49-cd1e-4789-afed-2924834445cd",
        "cursor": {
          "ref": "0e1337ae-b9bb-43ab-832c-00394a771d02",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "aedb1f5f-482b-4421-a4fc-43c8c1846b9b"
        },
        "item": {
          "id": "b14c4c49-cd1e-4789-afed-2924834445cd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c0b1d744-6bf3-4661-9d24-f51489518a1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a38b6b-0e75-4b07-b040-ae68398085e0",
        "cursor": {
          "ref": "2b515cf2-3ea6-42c5-90dd-0cb438e1f6dd",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4cbf4757-aa79-4661-8476-0d7d088e9f06"
        },
        "item": {
          "id": "31a38b6b-0e75-4b07-b040-ae68398085e0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "933730ea-77af-4834-b662-06eb947ec0e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ce9bd3-7ad9-4da9-b7ed-97daab561f5e",
        "cursor": {
          "ref": "adea270d-6095-4cb6-b254-55b3cd1addf6",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "849d9d73-c40e-4095-a490-429889bb6bcb"
        },
        "item": {
          "id": "d0ce9bd3-7ad9-4da9-b7ed-97daab561f5e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9f56bb24-90fd-4af2-93a1-d5884dde9c68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1ea04c-963a-4477-ae69-a2e9c6989d57",
        "cursor": {
          "ref": "7771cb0d-9248-4227-8932-e96051c86675",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5f4bd5f8-584a-469a-8d87-7c4a1417385a"
        },
        "item": {
          "id": "9a1ea04c-963a-4477-ae69-a2e9c6989d57",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "194d3110-a9af-46c4-b38e-260eb074bcdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340e6640-1dd8-4d4a-8e7b-20c8c0511ab2",
        "cursor": {
          "ref": "f306e8b8-494d-4ec2-8f41-e3e7e4701d7e",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f115e141-3b55-4a87-ac01-966e564130d9"
        },
        "item": {
          "id": "340e6640-1dd8-4d4a-8e7b-20c8c0511ab2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c4bdfa28-026b-4a32-b9c7-1dedbe7d46b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273950e7-cbb1-4369-a205-79c69c070e13",
        "cursor": {
          "ref": "f90c5f01-132d-4792-b376-1e0c9b9dbd2c",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "78f29a8c-4a2b-41a0-9b72-2df3baa6baca"
        },
        "item": {
          "id": "273950e7-cbb1-4369-a205-79c69c070e13",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1912afed-ba94-464e-a305-7e55f5a0eaa2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8503d7e9-f91d-44a1-af7f-c42887eebfa4",
        "cursor": {
          "ref": "26f6881e-9078-4088-897a-ee8cfc0cadb5",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1a3b2971-47ed-4f32-8408-33881e9d913a"
        },
        "item": {
          "id": "8503d7e9-f91d-44a1-af7f-c42887eebfa4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "40dbdc18-c0eb-497f-9a58-526082f39ab6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d16dc2-30f4-4735-b740-fa6248e652f5",
        "cursor": {
          "ref": "46f45bd7-2913-40c3-b089-aaf2a4a615e0",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a8f2b8cb-db62-4cf2-8198-3dfc954b3dd3"
        },
        "item": {
          "id": "06d16dc2-30f4-4735-b740-fa6248e652f5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "eef7bb78-0ab6-4ff4-b678-16a7ada01b3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e6180c-0b69-4d03-a1ea-b1b569c6b3e0",
        "cursor": {
          "ref": "f5225ced-32b2-4f2c-82eb-e4d18436965f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cb739584-52b0-4865-8f56-f39aba39ea9e"
        },
        "item": {
          "id": "26e6180c-0b69-4d03-a1ea-b1b569c6b3e0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6a098ced-5ceb-427b-83ab-9d7411bce6f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec07484-7d7c-4133-b9e1-2336c9e4d2bf",
        "cursor": {
          "ref": "20780774-44c4-4f5d-bbbf-4021445dca11",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bfef5b9d-98ca-47fd-b415-ca896253bb61"
        },
        "item": {
          "id": "fec07484-7d7c-4133-b9e1-2336c9e4d2bf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "12cb9dcc-4c66-422d-93c7-9cb070781f4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce450d97-2e52-472f-912d-a86fc2a11f75",
        "cursor": {
          "ref": "b98de761-4e34-446d-aca0-d41cd5b73d4a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0544e810-73f2-4afa-abff-6ba9520efac2"
        },
        "item": {
          "id": "ce450d97-2e52-472f-912d-a86fc2a11f75",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0f73ee14-9d78-4bb9-ba00-7bc9da131717",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f9d7eb-5477-4d8f-999a-2aaf1c94b015",
        "cursor": {
          "ref": "a012d187-35fd-49d5-8e8b-c9ba216faa79",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7a832d39-521a-417a-9cc7-ce0afa58954c"
        },
        "item": {
          "id": "92f9d7eb-5477-4d8f-999a-2aaf1c94b015",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8ee1bf80-784c-4677-b660-89ffd8b90873",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99255ae4-5752-4cb0-990a-9ee06dcc9ad9",
        "cursor": {
          "ref": "2c8be5ed-e03e-4be7-908b-ae2e492241e4",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7529c154-a776-4d93-bb71-9ebcc8031a26"
        },
        "item": {
          "id": "99255ae4-5752-4cb0-990a-9ee06dcc9ad9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "31f3c61f-a318-4b53-b4c4-f0e0f418eafe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92d1fd0-cb09-4cab-95da-93e3580a8197",
        "cursor": {
          "ref": "43809f52-3812-448c-81f6-3e2a1caff538",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a97f2e1e-a713-49b6-9c9e-bdbe35552190"
        },
        "item": {
          "id": "c92d1fd0-cb09-4cab-95da-93e3580a8197",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "229f7f51-4bda-48ad-a2d8-3f94561b67a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68dfbc6-8c29-4112-aec2-71732c42b675",
        "cursor": {
          "ref": "76dc045c-4edb-4656-8d9b-bfeef2af6cfa",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c25532a3-8845-4e75-819e-87f8afe09cd7"
        },
        "item": {
          "id": "c68dfbc6-8c29-4112-aec2-71732c42b675",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e2d044b9-b6b6-458c-953d-f29609396c56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf50517-46fe-4070-9191-b6b67c7fb556",
        "cursor": {
          "ref": "05de53cc-db33-483b-a4fa-e4472af584fd",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0840887f-142f-433c-be22-50cc328adc57"
        },
        "item": {
          "id": "acf50517-46fe-4070-9191-b6b67c7fb556",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0b910e6d-b44c-44bd-a7c3-48f79f9ae041",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cb21fe-98b3-4e45-942d-902dab644552",
        "cursor": {
          "ref": "da7bb85e-997c-4514-a507-7c1fa0b6202c",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fd333d60-5dd2-4334-9621-549c86557671"
        },
        "item": {
          "id": "18cb21fe-98b3-4e45-942d-902dab644552",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ba3e9061-b1fd-4357-bcb4-d24ecbfc7f21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f22496d-e2fb-4706-9d94-16da2b3e3a3e",
        "cursor": {
          "ref": "17064841-8a08-4c7d-96d0-f048b896c5fc",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b17b591a-7e01-4eb0-a975-6f71837b13f3"
        },
        "item": {
          "id": "9f22496d-e2fb-4706-9d94-16da2b3e3a3e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5e40c60a-2384-493f-aa47-162683c6e5b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7822b3-3673-46ef-a727-536352aec5b0",
        "cursor": {
          "ref": "cbaa13b6-d6a1-4c61-8c01-ae2356064cb5",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c92bd1ac-7ae5-4548-845e-58c4fb2a5a29"
        },
        "item": {
          "id": "cf7822b3-3673-46ef-a727-536352aec5b0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a6443ea6-016e-4771-8176-fea9a1af4c20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc16779-e427-4636-bd37-a1e5f1d0e972",
        "cursor": {
          "ref": "fcb8b35b-6c70-443b-8e36-76ec3109d9d2",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bed0369a-41be-4e22-b421-f8a1ea93d442"
        },
        "item": {
          "id": "acc16779-e427-4636-bd37-a1e5f1d0e972",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "27658d11-364f-4925-b93f-fd37085bf449",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9953442b-e4ad-4e28-ab18-e45dbda612d5",
        "cursor": {
          "ref": "71b7e763-1b4e-4d60-abcf-c06e3db2deb7",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "76710a5d-0e2f-43a2-adec-3b84c13d3a27"
        },
        "item": {
          "id": "9953442b-e4ad-4e28-ab18-e45dbda612d5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "df5dd5df-a5dc-41a2-b355-ab41ece14b03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094c5711-0083-4684-bdbd-f1ba998e25d7",
        "cursor": {
          "ref": "ff078d3e-393b-40b3-bb3b-ca11ca713fe8",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0c1de1df-abd9-41bf-b483-4fa728090576"
        },
        "item": {
          "id": "094c5711-0083-4684-bdbd-f1ba998e25d7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ceca4611-5deb-4173-81a7-0bf5cf2138b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb049c91-5159-4375-b017-fa6d49435d54",
        "cursor": {
          "ref": "fc1a7645-1f0f-4b67-9238-e793f3255cd1",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "558f749e-7026-4890-9176-32571744b284"
        },
        "item": {
          "id": "fb049c91-5159-4375-b017-fa6d49435d54",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b918412e-ac23-4611-b77d-407eb24bee96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756c175d-947a-4934-9162-1e89b9c2572b",
        "cursor": {
          "ref": "25f3644d-dc6b-41a4-887d-4c5e23b885e0",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a0cb984a-aa8f-4c23-ac06-4eafd4c8cba1"
        },
        "item": {
          "id": "756c175d-947a-4934-9162-1e89b9c2572b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "49a8abb2-89f3-407d-b7f5-8f1196416015",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f680d5-86c9-4cb6-9289-d51eb06a4ddf",
        "cursor": {
          "ref": "302ffc87-7fc0-4989-8eb3-20b03fbc3eb5",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c2575d8c-ad7e-4e2c-a8a8-5692091f0d9d"
        },
        "item": {
          "id": "d4f680d5-86c9-4cb6-9289-d51eb06a4ddf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "478936eb-560c-4980-9630-6f552aec31eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4377adeb-7656-4857-82a0-b358674492bf",
        "cursor": {
          "ref": "2fe95f27-272b-40c8-a5ce-29ba2e64bf0f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bb49d144-808d-4617-9dda-e2b20dd971f9"
        },
        "item": {
          "id": "4377adeb-7656-4857-82a0-b358674492bf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "49120fc2-abe7-44fc-b364-0fadf52ba9fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "d716ff37-9f88-4fa2-a11a-a97698075c0a",
        "cursor": {
          "ref": "f746f2cb-02bc-45df-a31e-16103eebc343",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1ec2ab3c-aa60-4f66-b884-d6d5f7b83434"
        },
        "item": {
          "id": "d716ff37-9f88-4fa2-a11a-a97698075c0a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5e350988-e2f7-4347-8f1f-0f7b92af07a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "87c232f4-dd23-4394-8a0e-5497eeae9bc7",
        "cursor": {
          "ref": "47d7801b-b50e-4bb7-b22b-c0dfa5092f25",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0034d408-3bf3-4b5c-8c43-7e637c04b20b"
        },
        "item": {
          "id": "87c232f4-dd23-4394-8a0e-5497eeae9bc7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d6de24ef-6198-4057-bf62-38c61ccc8fc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "077e1098-d798-48d8-b9ec-0441153cdf00",
        "cursor": {
          "ref": "7c00d8fa-41a5-4454-b2da-8f933adbcf88",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "118fb5c9-c567-45ba-850e-21f8532afa9d"
        },
        "item": {
          "id": "077e1098-d798-48d8-b9ec-0441153cdf00",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6de35d8e-aa51-4838-9839-75e49ef62be9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077e1098-d798-48d8-b9ec-0441153cdf00",
        "cursor": {
          "ref": "7c00d8fa-41a5-4454-b2da-8f933adbcf88",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "118fb5c9-c567-45ba-850e-21f8532afa9d"
        },
        "item": {
          "id": "077e1098-d798-48d8-b9ec-0441153cdf00",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6de35d8e-aa51-4838-9839-75e49ef62be9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab5da84-67cc-4386-9538-5011157ba1b9",
        "cursor": {
          "ref": "0b009930-4a77-4bdd-8f3e-c4ca302b7a4a",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bdc9d794-c8b5-4e1b-99d2-09fd1edddc73"
        },
        "item": {
          "id": "2ab5da84-67cc-4386-9538-5011157ba1b9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "188c565b-b3fc-45aa-b658-09d561848dbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a321c59b-39b8-4d16-8ae7-c40d223c0612",
        "cursor": {
          "ref": "d7683230-8af7-423b-9121-8220db23aeed",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "96e708a8-638d-4b2d-9ae8-f9006466dceb"
        },
        "item": {
          "id": "a321c59b-39b8-4d16-8ae7-c40d223c0612",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "47d46025-65a4-4b94-9886-19928209a716",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}