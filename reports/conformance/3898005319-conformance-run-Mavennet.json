{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "093554f2-fbe9-447a-81d4-8b12bf5547e7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "764e4bcd-be59-4177-8f7d-12f79d7ca4ad",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70021608-6da5-485f-b11b-4d2114b08d4c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5609ebcc-8aab-485d-8de4-67aaf7bf3c2a"
                }
              }
            ]
          },
          {
            "id": "c0a30892-b544-49b8-83fb-e89ecdec60c7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8757fdc5-35ae-40c4-9184-32d3e694c4e1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "78ae2c04-0355-431d-b8fc-557714105d3c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "93fb1bbf-8db0-4bb6-b46d-16186af3fedb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "361bc0b7-ef38-49e5-b05b-4e0ca80c6745",
            "name": "Positive Testing",
            "item": [
              {
                "id": "568955f5-265f-4108-a0a8-6ef8c905b8ef",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f9c0560-999d-4bbf-9436-f68e3f21cf0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f613648-0892-415f-a978-f60cfd384f1e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8491c792-f2dc-40c5-bcf5-036b55cf9810",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55fa19ef-549e-4132-924e-a5a474cf059d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "471c38b0-80cb-43de-bf20-fb02e6076a24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b9a89c4-4498-436f-91bc-72fc2d74031a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07c53590-f81d-4954-b470-f8764326b72d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "44513bd2-05ff-48e2-948e-51123c4baba8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc34bce0-e9e1-440c-802a-d5efc8650674",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c73a2d32-a01a-46cb-bd03-92a5e794c8ce"
            }
          }
        ]
      },
      {
        "id": "c5ecc792-82ee-4511-a7de-1f33ee884ecc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0fafd699-3ca0-49bf-9468-0c451c97f8c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d3cc060-716f-48a4-a509-8db2498ffe7e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "14a7d14e-ce3f-47cb-bc03-774655e337e7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c9e999-1898-444f-bc00-7284d3e9cd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9861cc4d-9da3-4484-a859-8cff5c350ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb247651-ce18-4e91-bc6d-03fa99312f27",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82716a4-e66f-402d-bfe8-7e2d897c3e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8969f975-887f-4dec-ac37-e68acdc2c657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe210cee-b1f4-4157-8959-e8cf40c850d5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5ff3e3-8a28-4634-b767-34b98a7ac117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cb1f232-c788-4491-9bf5-41ff060831e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4ef40560-2620-415c-9656-b57791fa2996",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b732644-81a0-4711-91de-7f5ff86013c9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff6a014-bdcf-4881-8063-b5eea4f59874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b658723-0d0f-4f62-96e1-caa01b5ba02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45ff353-21e1-4621-9178-d9ebbbfb92d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896c31e4-b5e5-49ad-b21a-35f8320a9d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c127687e-d6e4-470b-b482-841694c72de2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b76135c-5c59-4750-ab70-f6087b4833f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "664e00ab-1f08-473a-88b9-ac5221774512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea6f812-840d-4dd2-b4d0-546f7bac41f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f4d502bd-a029-4320-b006-c0ba3161274f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "68152a0d-fbc4-4db7-90fd-d7d7eb8374f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e2d6e230-f293-4015-9fd0-dab7346a9bc8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "777adb84-85f8-4555-96c3-e442c0b6c7f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e84cbc8d-d181-47c1-a133-d86e52459415"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5f2e30c-9c68-43f3-aaf4-1aefb86a8b7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a2e8d627-8385-4a94-b949-9daa976ea79f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1c66b6b-388d-4fd7-b0ee-5b0077b69762",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "daa5a955-75fc-49e5-bf3c-7be41b72e5f0"
            }
          }
        ]
      },
      {
        "id": "5fdc9111-c51e-40ba-a126-9560cde97f65",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9fcb70e1-8c94-49fc-9450-0af080ad9120",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2095a656-c1b1-4a95-a989-9d941a8a29d3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fc416c80-e01a-47d7-b35c-0a0c02f37ea3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc4b69d-3b21-4d59-86f1-ddbf55acf1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56cf9ef8-a815-4448-9f0f-7d117a9b8dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d448ada-f8e3-41b8-a48f-2af04bb9f07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "738c72b6-4555-479f-bd8e-969dce890343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c998dab5-0889-403d-b776-6d6b85ea3010",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cddf0c-d337-40f3-85c2-c52a2c7983cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d478af3e-c8b4-48ff-9b58-a1bf1c12a76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8939f03c-06e7-47b7-9985-2e64f21a1fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0924a7c-3f8a-4474-977c-005f4eecfb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51920c90-97b9-4ce4-929f-9904d636416e",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f23dcc3-e80f-47d8-a2c9-82af63dc4a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7550ac0-9e4f-4de6-be33-feae04efc428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee80ddc-fd8d-4126-ab10-882b30355c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b97bae15-dc1c-421f-9141-092503a89eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd69938-cd1f-4a3d-989a-630995ba1ddc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3d0b26-6cae-4ce6-b89f-b1361088ffb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3bb64c-ccfe-4896-beda-b8e97053cfc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c246131-d084-4aef-8936-ddf204752d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66840117-f575-4a4a-8a31-f655ba42280a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668b99d5-be07-4fcf-af47-1d995ba3bd6f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1d9d0c-e0d5-4070-9ce2-13201e2491b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c83b4b-7b22-4756-a797-7f2354d152fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23209ee3-d504-41b6-bf14-5efbff203907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5b1f3db-76af-46bc-86a4-7821da7ceda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca55f19-1f2f-42f8-a0dd-d83bad6c3850",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39042cb-a3c2-4d0d-ba5d-298d31db4c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a9c0b3-4ef0-4134-bbfc-0ad146a9b610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad4d468-7525-42ae-91e8-bcef737fef60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "951f0af4-1047-489a-a297-4b24a897192f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382c9bc7-9959-402a-bece-714372b06015",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2104024-4ab8-46d0-bb02-c0c760a8bb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492cc979-be71-4e0d-8d57-24dc096fc5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62955c8e-176f-4216-8bc2-16ab899dfed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba0ed2e7-692c-4232-8834-25ccfab81a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83afc3f3-36ba-4eb9-9ba9-4f49703db68c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c4b597-5456-4763-9588-bdb19dbee8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576ca13c-7f55-4e52-a957-2ba862cecaf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa22fd8a-45af-4cdf-962b-4a9ece2d3cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6da14a3-0d9b-43a5-a359-3387fd5612eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa5ebcb-4b1f-4e42-954f-29846e7f0dcd",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21336336-757b-4e5b-bbab-d3fedd624718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7825bd92-5fbb-427e-8862-d402fcda6ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b3a770-faf3-4f50-a649-60bd4bd8eeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a42a4fb9-195a-46ec-8249-4c2b6539e7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af377762-dbd2-49cd-bb7e-5c92436da402",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3145054-0da7-4607-b251-491e4e1f3129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560628a2-7cc4-436e-b16c-cffa1f9dbf0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96431778-f111-469d-b6b6-9d1b5c8e1998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfcb45a2-fd0d-44dc-b5f6-01d00dfc16df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52707ed8-a09a-49c4-b03c-5e1bfb360cd9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff666f45-575d-4d75-9021-6827679ce360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb571f4-3fd4-416e-9f71-9abe25c3e370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ae3bcb-d4c2-4237-b52e-7f3dc86c8669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3fe1715-5029-4060-ae1f-14dc1a6efc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa233be-85c2-404b-a95e-53a26868b544",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb50e1e-e6b4-4ee2-99a4-6b10d0ea385e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bbbcc9-68d9-40c2-8486-c0b2de325b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210f3096-b382-4f2a-b94a-23b0f03f7187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c642c55-b1bd-4f9d-a500-b5adeaf3b3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af9df9e-1f40-41df-9d5e-6a0672709e37",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3676c49-329e-4864-8d49-b1635d93f85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ae60d9-3834-48fa-9c6b-f3a4a958c115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934c326c-6d0f-4860-b72c-c0c9d649a54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea7701af-2de3-4972-860a-a17a15e6cf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ca8cba-8591-4bb7-a097-ef60709a81c7",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc42b10-928f-4d6d-96bf-d95f1134a519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76dd42b-6349-4b22-8db7-a9dce3230220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df67c6e8-a192-440e-ae8e-fd96322d134f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "44160a28-b12b-42a4-990c-0b58c09ebbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f6fef7-8a79-4ce2-b532-58deb32203fb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5734298f-c16b-417e-977b-bbb944352132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50005b8-0909-4960-ae26-66464f8f56a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a1f922-1e15-4e1b-a3bc-54ece2c3453d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "798c6614-5a10-4db9-9bbf-05ea78401e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1dbd51-142c-42f7-94fa-427cb1b9dd1c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214cad02-42a4-47e2-a17e-3b7d266013f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637e595b-e52f-4d5c-a209-e385a1bae922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afd7d5d-54b9-4309-976a-475c9431f738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e56368b-163c-4070-9802-cecb1c03105f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4121b040-f0df-4fa0-bd1c-8eaca67478ad",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c905099c-16e3-4d54-9f62-816f9c8b5a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abebeaee-e6e3-410d-8d11-395acc96caaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bd51ca-7016-4de1-87bb-ff9294d2ca8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e631d48-ee82-46a7-a402-9d140949cfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969e090b-2ef2-4da4-9859-3ff2c1bf5754",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb42baae-30e5-43d3-a851-9de490eb5d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9806dd8e-d86e-403e-9415-0e0e76e99c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7d98e6-c3a3-4f45-9643-87f258cd79b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa6d2302-5ed5-4542-b3a4-9d0ddb86e313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75bdb649-e01c-427a-818a-af95a9a267fd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867ff6c8-c2b2-4a4c-a801-e4f427814dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ed0662-771d-4cb0-aec8-d17d3ce6e47b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdea975-c052-486c-aa1e-9a3d922560db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8f4ae00-cf09-4121-9070-0c3968ce624b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225b8f46-38e6-43a8-a74c-110f2d97af83",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31b2ae0-a84d-4fb8-baa9-bf540911c7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d39ae7-d4be-468e-9417-85070dc486c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cec7aaa-f133-48ee-af77-0892ace55849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b27b830a-bc92-476f-b1f7-406537aee80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1391802d-aaad-49c1-956e-96649b26de98",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9236563d-f5a7-44b8-ad26-7f74b22c43c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d10551-4f40-40e7-b201-0f6533def1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88535ea9-4631-48e0-9121-8d06c3d921d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a57264fd-4bf4-484f-8e9e-26c1d8fcd468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac00bfe9-b040-436b-b042-a8c4d0e64d3f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e873ca-a571-4b1b-9cc5-03b9a095850b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3b71a6-9aaa-4cf3-abb3-287d5e9eb7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad2edc8-6dca-4232-b5d9-ceb763432c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "971095dd-d842-4619-8a37-fed4764fb659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db9b649-5075-42aa-852e-d90d2e1b9ddb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bc5bff-c84d-49a7-a811-69f3c08babef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b19765-9701-48bf-822a-7408698376ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e837f7-752a-45f2-bb32-4d44b9c6a6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3251b4e8-8754-4b43-b0c6-5386cfe4dd4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188997ff-a4ee-40b6-b840-ed00c3eb0425",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dd4458-3468-4862-801b-09a08b28aa12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff76c498-2bff-4416-9877-d17ce1ea1d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceadedc5-e936-4a31-a121-56e465c2f744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e942bbc1-d69b-478a-976d-ee849a73521e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0175fd6-604d-488f-b280-75f1f8189a0b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8419abe6-be2f-450c-b943-2e502856661b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7121a04a-1143-4ad0-b60e-2f94bd2c9eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b522bdd5-499e-4487-b5d2-3c519a78f03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "272c69cb-aa83-4ad4-a524-1cb32632cb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c987df0e-ba63-4c75-b764-38e384b5383b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af09c242-2352-4c1a-800d-d2fd42e11314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f34e74-c376-494e-acf0-a36756b3b8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8efc00-c4a8-4e3a-a5e2-813f9a1a4c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b264d6-5f6f-4173-af88-983c3ca2f82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f6db6a-8fbd-4f90-b45e-5f5ecc0a2c2b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892e980e-09d5-4245-ab94-f5d847adcc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a36b0f7-22e1-4b03-80a7-68b442fd53eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3394af-3fa9-4d77-8772-16ca35f3b343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8423ded7-2339-42cc-8e5f-023fc1dc128d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d296f38-9fd0-4cae-a900-c5335458932f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f743a2-d378-4291-a56d-17b21e11ff55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab3930d-a4ef-4122-ac5a-306f68bd2a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19f8b11-b083-4eda-ac4d-9808d4ab6ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db536393-f3f9-48f3-9859-ef9b253b5d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5621e593-e89b-4729-adf3-2a99dbcf5709",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8bfb64-c0e1-42af-8861-ef86ec66b8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1deb438f-1fef-48fa-b3b2-27a7602e8af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e1d77b-940e-4ebd-8519-f4b057280125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3eee2b4-a81c-4890-bbfb-024a5e1f6688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7191887-d940-4d62-9a58-689743f000be",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e128e8a-3789-494d-a00c-06004503c501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143ce90f-60ce-4512-8d06-467084fcf76f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933112c2-5ad0-4726-8104-bc31c747a361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f321f47-df34-4e0c-aa2f-c680c3b842b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70588947-2ca0-416c-9af5-bcda08c609f7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e93f08-0298-47df-ac90-b5a9b468b8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde5943d-872d-48a8-97d5-69c63d2df578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d6aa49-6c5a-4308-98fe-160b2bbe9195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c700f6e-41fa-4d40-9a92-750f9de642e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ba3c5a-7320-458e-81f3-724d58ce1a44",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ec9982-4ed8-4cfb-8001-826b952b1b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5686320e-c12c-4445-8590-abe0442c51b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a25203-5def-4f82-a21f-d71e43d097a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb1e706-061c-43d2-bf5a-12f7697e8412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d306dfcf-c0bc-4a89-a301-4788a3bef790",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b1abbb-396e-4978-b050-7518fdf5c8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec077978-a90e-45bb-8f32-71ebf1e48c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3549fe30-7444-4918-aea4-dd0cc4f84eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3879945-3ab5-4b8c-8666-223e70ccb7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78657961-97c9-43c9-a29b-5935c53875d9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6c3b49-d83e-48ea-9887-e17f689b82c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ea203f-6874-4c73-b502-a0025d774888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50cf4af-5869-466a-ac99-66cd28a560db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b057bae-719a-41a3-ba7d-05dcd4c5e484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e29660-e0e6-44d2-ac89-8d77c1feefb6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321bf6b1-5101-428e-950c-60ee20dbf6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a04ef473-c80f-44b0-ad9d-79f915489f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5e2c4a-2978-4a64-a2d6-932393479658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39b5a014-d58f-4ced-a556-183444873b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f012807-59f6-42f3-855e-dab745cb8ee0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce3bca1-208c-4867-9387-e6969ad8a1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6468072a-a22a-4afc-9fde-a67b47d50dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51124460-a4e3-4f9f-9e4d-89799e9417bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd5920bd-9495-4680-a55f-bf5452585ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1677aa6-1feb-4ef5-9e30-71580b9fcdba",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35c615d-4685-42e6-9cfb-a6c43941efce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41af895d-fb6c-4f37-b7df-122a02bb9d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e133bb-e9c3-439e-be8f-f5434f136c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d7276d3e-5ae1-4407-9fa2-093c6fbcd661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecc4733-0ed2-4e8a-9de7-c197a58aeb68",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d48cb47-05fe-402a-9056-a64713b65863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf00f531-6b15-4b20-985c-af51ac82992b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a406f8-84e7-4eba-8dd2-a6c13cd35d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7dc8b52-6501-4320-9219-20ac92987e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b785f4c-ee71-4370-bddc-6f9b6459c6a5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd95bfae-d22f-41b0-b47f-ec0ca1bc9cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e1d411-2a83-4a75-9e07-446436449e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07daa1e5-50ef-46c0-bb44-7f8d2c5be25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9375452f-16bb-4323-aea5-5d881b836068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20375e3-3b26-4806-98ad-585df229a049",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a32e64-e031-4058-a3aa-e4c88f8faf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec445c8-73d5-4e80-b5de-349e5a68f6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666bc337-c6fe-4083-a566-a8484e3246a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa71d42-7992-44bf-953f-d67227e8aa67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bc1fa7-be63-4a30-8ae0-491998a68636",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea39e814-0b26-447d-8596-4534ec906f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90af81a-ea9d-4db7-8135-59514ee8a22c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bedefe-64b3-42a9-9c9e-1e26c3ee7435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "176c002e-a0cd-4138-b298-a112514ac1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00e3eb3-ab5f-497d-a377-a42c41b77a2b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4674f74a-f76d-4cf3-8cd5-14ac043e1d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37eff26e-b40d-4eae-9806-671855355777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70750f9d-b541-41fb-85b2-edf6bf5e4e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "86322cd5-ae19-485c-b462-29e79b34fef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c67c4be-ced2-4076-8c18-204f113b6607",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e47871b-721a-42a2-9260-cad16c855cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d27a8f-91a3-42f9-996c-6307c89701ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6493678-126c-40de-916f-c5887e61ee57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "78cca269-62b7-4f0d-b069-2e3bf5599c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3a7669-21a2-4e52-9a65-099d703f1ff6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193b35d7-2eb8-425e-828b-14385d2de372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cc4979-7eeb-44ce-a445-11c45ca5cc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec23f57-e483-46c8-bd1b-aa5609b7f5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bd632c91-bc61-43ed-a417-42dafc858e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73006af1-96c6-43cd-9585-078f87912e6d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813ec464-8d77-4b35-8b16-67182719a963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b719b3e4-7857-4150-b8e4-2dfee0155a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd50f7e-c08c-4b22-8c0c-2de1a1c01847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3da87e6e-d2e4-43a3-b8d1-e6170b99ed64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f72153a-e307-4479-9dea-e42765280e33",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4546cb-b110-48bd-a08e-be05ff1fb3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2132324e-7af3-4af9-adb1-62516ca7273d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd7f3ff-5bd4-45d8-854c-cdc5bc15601e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "76416691-a148-4d53-9210-29dbe3d48e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396f7c8f-7ab7-4220-94bd-1c6eb210b24e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af170147-24d9-4362-b0e1-84c5484a3047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8112ab80-3f20-4b03-b954-1e45a89ce1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d064e9f9-34fe-4f13-900b-cd65cf52863a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21df4564-dc20-4b7b-83fd-6c6cda358fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4c1c3d-6d2a-4a5d-a053-9b9ebd0d8043",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1708b8-7666-45c5-9e65-c50e282fa76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f558b320-74a6-474d-9ad1-523c5b541b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488682df-b3b5-4eff-acaf-d71d3cdabdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb517ac-12ab-4275-a8b3-7b9ad3adb777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877011bb-fd87-4b81-907f-a1aca78d49d5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b5069b-773c-4241-85f7-3aa788fc56b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b685c8-9f91-42c9-9c79-a625d89cdf2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64375488-7a2b-4be3-a4cf-3831a24b99f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99b0b87d-45ed-4ec9-bce7-5b53fa33cace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912d7bfa-d6cf-484f-8824-05ed7fd735d1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c24f313-2f22-4b81-ab7d-c8c99dfcdd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd011f8-ea28-4e0a-aba8-c950f03e5110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b6343d-cbfb-4b74-b692-470f751d64d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4506eb43-88e9-4331-9d98-13f32dcbb5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df62bde4-9ec9-4dcc-b33c-83a3f94e6fe3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e31b52-77fe-4fd6-9682-72cc014afefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eedc2992-52bd-45b7-817e-4d811841c13f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e88d182-4781-4d47-98f0-40ac54f42627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26a46a0c-00a1-40aa-98ba-140f32d6306d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa59b18-29b8-4dc5-873b-045da19f1c8b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a223545d-471f-435d-a81d-44c86bb44794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21bf04e3-7f3b-425d-a93a-0fa3b5c1bd88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d456c7-5391-4e8e-892a-6c5cdf53d011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e33ba69a-fcae-4efa-a0c1-16def00ca231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e74b230-a850-4e2c-b96c-6dfed7ff154f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69ecbf8-e2ac-459f-bf7c-413d647a08c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a1e89c-cd95-4793-b687-5e027ea8f2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e9ebac-c99c-4a54-98ec-71f5162627f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a46abc7-8c59-461d-a455-885838bcab44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5455cdf-ca62-4d3a-85ff-2727dae8597d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6007aaa5-6d74-4d3b-ad69-fa518c27b267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f955039-40bc-460a-84ad-19306aafc245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bd6599-ebad-40bb-9fbf-eb2bee250e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1444ca81-8ad5-4489-9f32-46b11f6b4f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d727139-7b21-4083-b848-5c01a4835569",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6dcc71-9a12-4156-90ec-a509971e1534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab98f78-6e11-4f89-867c-506e345cbf0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05081f22-d283-4d0c-b810-b2b7413a3740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9088700b-19c1-437d-a8b5-7f01541e445f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ab65ec-048e-4ebf-a48b-a83caee23294",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c38871-c0c2-4c8d-b42f-04b86e8e08e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288e0b1f-ef89-4082-bfd9-6a5ad4ea5559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb6ad60-2f60-4cae-8fe5-a97ac7cf646d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe079bd4-60f3-4507-afc4-922e040928ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b826e7e-dc61-430d-9a2f-29282bcf7546",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce58bda-d5b1-40f3-85b5-91f243cf6bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3eb1abc-4c4e-4aea-808b-853155fa1c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf3cf19-b4c3-4b1a-8c5e-4b12654ac674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8375d58c-6fb7-4469-a816-7a1da6d78f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08c6e12-d8c9-4bbb-8c88-84a14dd6f3f7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f54807c-f1d3-41bc-9bde-32285dd4007a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c275bf02-f99f-48b0-8e78-b8fcf350f02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69384202-52d0-4ad5-bd78-239d25117e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b82e0e-da33-40ca-9141-e3df263c6f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30c9bda-09a8-4ef3-90bc-3957bddc550b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd911c6-125d-42bb-a7b0-51df5376d473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4342f993-466f-406f-bed8-6ffa26f12360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b7a500-673a-4615-9abb-46fd89068a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15d12a27-7dc4-482c-beb5-6e9b229ff1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d75e26-8e8f-4435-abc0-89f83bf0cbcf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588e135e-5a53-42cc-8f0b-93066c088d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a26a15-e08c-458e-9228-10b16e571d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c297e6-1c46-4d77-9766-5f47c70df98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b3f558-e52c-45c7-82a2-7b608f9193d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eca1244-6c1e-4a15-bb7d-b8026f8974fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7919d172-0b64-4150-ad19-652f333aa70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b182cf68-540f-4678-bff6-fcdbdcdd0a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256c75aa-d860-486c-a479-5731a0eb6294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cda0752b-638d-46b6-806d-582fb376d2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cf6352-f578-4dc8-8ced-1725d707b8ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e57b68-146f-43f2-8060-e882fbddbfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c70a99c-9d24-4208-80d0-bd3509d9bfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8900dd3-9033-4f27-992c-d42172f981dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e061fe0-f95c-4df0-95a2-82824c4213df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0a4344-09ae-4e10-af48-31f5d01b3cc7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19493cd8-f116-4e82-a040-6cae5923e8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e684f2-6e09-4527-a5ac-5e02fccbcfe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d274c1b1-42a3-4a97-8e75-b10b36407ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e03c6e-be19-4bc7-b397-b4a5e14a892e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddea4a62-ac98-424a-ab7d-75150708fe01",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d0af92-56d2-4b76-acd4-841371d9eab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30255411-3e1f-4757-a3d7-05fa0629b970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3361453b-16e5-41a9-a329-5b2e9c88de37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe441fd-66f5-4c1e-b606-3127d5d2f4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa88622-af16-4601-b99b-08594dba0bd1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1319338d-5841-4e5e-b829-c56d84ddc379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2641a76-305e-4708-b35a-f8a3cb8b0ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ef371b-f045-4772-a374-4077d75f9df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c41288cf-1a4d-4da7-83be-32d938e41f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97395092-af60-4172-a0d8-717df35dd916",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98deb436-5162-43b1-911a-3ee1055f2360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4347a4-798a-426a-ab53-8227b3f9c07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4efd86f-8299-4c37-8005-9ca8444e1d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d83d796c-6664-4281-b8ce-de125ec631e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31ac399-6e46-4ee4-94ab-2f2ce10cc7e3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7084738e-aa37-4055-b431-4432230c88d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45b2c0e-d3ef-4196-9789-0e07b6fff676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e64b2c-3792-4dcc-815a-e2133f738f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b721d37d-a916-4f69-be03-cb1b1b4ff60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283a2643-613c-49b4-9f81-f426ba69798a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160931f5-0466-400f-9843-f9ae9c3cd98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f964924-cecf-4f85-b225-fed23cfed202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c4689b-8122-4c3e-8385-f45c623db83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77244ff9-1b84-41fb-a142-5f89237a48f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d8edb6-0bb8-4993-abaa-05550ab0b845",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70c9630-96e4-431d-81b6-941fc5d50859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439e4d14-d52d-4c0f-80ca-1faaa160f6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22865fab-1daa-4105-82b8-fa381c96c8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5731637f-fb0b-4967-93bd-ce810090c6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fc89d7-8fe5-4e15-b5cc-82e29ba613f7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8396c5d0-46e1-4543-9add-9ec5b4d1d66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ca364f-678e-459d-9634-11b7919d2fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7f76c1-8c9e-4264-8ee8-b548b28b8fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbb852b-4304-4b42-8b76-9ce02e509c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914d2c97-3c44-4bb0-96e7-da3a0044e01b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ccaa57-359e-4d82-a8cb-ec33ea97a3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b0d2c2-5ebf-4fe4-a1ba-0a77c0f20bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87509b49-6721-4d5f-abd5-06a55c40dcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd184d3-9f67-48d3-8b52-bdb9a4bb905e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3706f32d-e4d3-4238-93c5-15a71311ef01",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54289443-750c-4575-8f36-dcd922debfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b17cce-a1a4-44c7-902e-b9ffce82fca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c96f00-a59c-4578-8746-25cb6702c97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e651a8e7-77a7-4b1d-904b-ba96f3be4925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b7ceac-7e31-4f7d-894f-a32925e52906",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0dfc7c0-a933-4bda-8548-a5da39e2b065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c363533-5431-4502-811e-0027e4d8ac71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daac7e88-c0f6-4427-98d0-8586ceea6322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c913e2a0-aeec-4bc1-ab4a-634654393f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932380da-64d5-41d3-b9ef-2702243fa7b1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191f5ad9-486b-4b54-bd9d-0a593d5a1d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26ebc15-d349-4d21-afe8-0dabbb902cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be09e4a2-acc5-4326-ae9e-a9bd907acfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4744eb5-2af6-4b58-b9d7-647a20c9b325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3061a77d-ffbd-410d-a822-20c5f7210d1e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31211e98-57c9-478d-839a-ce1747acbbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4941b6-7478-4291-b1a3-e6e4460c57cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c8ae30-aa92-4909-9367-0fa5203a169b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fdc322b-ad72-441f-a92e-9a65f40375dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22323814-ea57-44ed-9751-592c9d25c937",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8cbaaa-43da-4852-a990-a90a796262ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30890e60-3750-4441-b170-bffd2f2f0d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601614f3-245c-413d-815f-cf89f9d9c4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ceff4adf-d364-46b3-8985-fc5db0e605a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3483b5-5c36-438d-bc45-cb5053c92053",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6ef978-2c27-472e-9491-466c5c1c2af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebc8dc7-73d7-4d8d-8f8c-db82537c4b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52b0342-6d42-4c15-a33d-781e9631a74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af8fd5ef-cb93-42bc-8d66-56a0ef64f2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973383a0-7707-47df-b50e-a999c0e5e1f1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d832a46-21ce-4860-bd79-391c056363ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47f41cd-f83d-4a5e-b454-cd85c094deac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ad49b0-f3e9-4d5d-b234-f3bfc21f441d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5453d6d-f12a-4eb1-910f-ffa12108cb88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a067fd22-58d1-403a-996e-8974aa9850cd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6128f5-c739-4fc6-bcfe-ca5c46b2463d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f3ad1b-4cd2-4c7c-ad69-9af4ff9365ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520ee7cb-815a-45a5-8531-332312970ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82923049-e8dc-4f36-9965-2e4fb48c98a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c67fcac-fa84-4fad-9ced-b0ad583492cc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd05a02-9f4a-4368-86f5-ffa97aa72b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01ced0b-7453-4302-8a68-118230a200bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f868c027-1d58-4a77-9a6f-9f3c91b8a4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4c6083-b623-4453-9b14-7d6da9241403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e57f78-5fb4-472a-9c0a-8ff1588d69e0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e29dd4-947b-4422-a350-45a070d355b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebad9c1-ecc7-4e18-ba55-2ffae2a53ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ca549d-f151-4bc8-b88d-9b6c5ecb3bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e064a711-118c-4cd5-abc5-10b7371ce010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4800b174-5531-40f1-aa02-4186c3be14a8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908fd59b-321a-4a2a-8d6a-799c04021bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3491a700-f6f5-41f0-8b3f-579647da7634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1a7822-f978-42cb-aa7b-054abbef0528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45f61402-075b-4f31-a57f-f02ee51671e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67474da4-5fc2-4f25-9f47-f25976181f2e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5ca196-d4e8-47ce-80e0-bcd1db729a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3afbb8-b1e1-4036-be76-b2c38405b80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ebfbee-218a-4d67-be06-ce40868274db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1486ad-dd2e-4a3a-814c-7aae703a9a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff409a2-e362-41e0-8cce-e92beb461aa4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a9af83-2728-4e11-8487-d87fabee0c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e6992c-2e78-48ef-8415-7ccdfbce774a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e092e1-32df-44df-b346-c3e32e602f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e99849d0-94f6-435e-9aa5-d2b5c8c150eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae84f059-42f7-4b37-bafa-b1825aea5023",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f63d1e-a34d-4c3a-946c-af068af8b3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf11556b-a971-4cbb-acce-ae4a49991210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cfb628-f816-4a4e-8ab0-a0c12f4b5dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72aa6f54-c166-4402-9a13-9af865557667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ddded1-0cd1-4816-b255-f37449124f7e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f985c8-f040-4045-a858-8b080a1675b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77f22d3-92b8-4170-8877-1707583ff4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b61651-25a4-480d-a81c-a8e9ef01ca96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "327be591-f0d4-47de-8d23-94c7d1e06d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db0be5e-7a9b-41e2-bd71-1f0e27119071",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d96c2d-d84e-46df-b23e-923c67a35a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c623d00-5643-4615-be24-2b0668784aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7494fbd-e84e-4c4e-a042-e7ec0a3d523c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7136a596-4325-4e8e-9f08-162356dd01c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229a2af8-e23e-4607-a530-165dce734bd5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7faaa46-6ed2-4a2b-a78e-8258880ff819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4348e420-e067-4761-9f0f-af3d5af0cb79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40520f23-e7fc-42c1-a55e-3ec04196219c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e97e8d7-db3b-41d8-98ef-a85c8dc620c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac8562a-03d1-4e3e-87cd-bdbebb3b6695",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adce1bab-8c93-4114-92a6-92c7b0967dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a02910-32d5-4bfb-aa60-e6732dc833d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff4c2a0-c93b-4e87-ac95-71200c9bbd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9120df3e-fd8a-48b4-ae51-027a93473441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab4a4f6-965d-4507-a9ff-ccbb6a84f44d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d5b877-b4db-4e00-8b44-e86f8652515e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683f4fd2-ad3d-4004-908f-40d47c53a603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ab94de-4827-436a-a5de-c715498d438b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ded0d1-3204-4782-96e6-3f32ca191167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426e8c4b-cb94-4eb1-ba01-caf47068c49d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0418e6-9e85-4354-9c54-6986f6aacafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8212ca59-78b9-4c71-bd3d-08d6ed4cc3f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33476fc-23b0-4e1b-969c-20c756fac510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "189311b2-ba30-417f-adfb-c49c4e8b1043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1706ba-baf2-46a6-81c6-d4c1fa17168b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b44fb6-74f9-4ba5-9de9-4273045b600d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e88edd-52a6-4a2a-bfe8-10de0d6e2ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb880342-dae0-4485-b2a9-f989888c7ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3b6f1f-f0dd-40bd-9ab2-a40700682ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3984b71b-463b-489f-845b-87ea5e1012c3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef49ac6-3993-4ca0-a033-a15ec157683a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a814525f-691d-451b-87d0-ef2ac63b7977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20c09fc-eba7-4fb1-9e48-8c9485ae8adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f331ac2-663a-4fee-b6e8-8bdea17c77ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd822f7a-120d-4ea0-b44e-fe63a4a51fd8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab2c8da-f11f-4a8b-893e-bf68c1a56a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1dcf8dca-d80a-4bf0-83a3-e38daafd19bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fadaa0-d01f-4006-b603-45675ceb6d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "135b5f8a-f435-4a8a-b426-19a8747e5fe8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eeaa6c8e-dbb3-40e1-8513-1bdecfbbd2b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4be913bc-11fb-494e-868b-5b930a30eca5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a27c327-0ffe-4847-8292-3e7758c1baf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f85b58f-d9d4-4f18-8cfe-08ac7c06806d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8298369-82f1-42bd-82af-345d779e029d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c74a0daa-33e6-4490-b411-a93325bcf776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26261a97-e28c-42a4-b526-f22e15c1c409",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a08fc0-6e52-4182-b42e-b616cc4122d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c645f859-7ffb-4ea9-8bbb-0a569ce51f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83548171-5147-41fd-a38a-962a5c220db7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "518b49a0-4ee0-4815-ad93-6f76f7b272aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee370c7f-74dd-4beb-bdff-667eb0bb4d11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12acea13-a585-45c9-a967-c500231e179b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa4e9766-eabb-4b67-aa21-2f028a7898ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c2c7c25-326c-432a-b5a5-a38bf3760627"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9435615-2dde-4336-9a49-d0d37a7c6d75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b3be473-86af-4587-b642-79fc49ddde6f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "01163f36-d653-4819-842c-26aa0347e338",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fa75057e-9141-4f0c-ba30-35187414578e"
                }
              }
            ]
          },
          {
            "id": "1c00e1de-e7fc-4c6a-8bf5-7242eb05c050",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6938edbe-04c5-4a18-8b3a-a322fb590a78",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1087101-9a8d-42d1-9676-b26cd0c94021",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3617c09-d0c2-4406-bd4c-1b86835f7a16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f133e24-29dc-4e95-a2dc-3737d026f2f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b4037a4f-ab2b-4374-b906-66fbe016c702"
                    }
                  }
                ]
              },
              {
                "id": "d13a16d9-2318-4f91-823b-7bf7a86df9a5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74813814-dca6-4455-a565-53bbaf00b251",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d043ada-584c-48a2-babb-adf893f6d505"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcc63c6c-0e60-453d-8fdf-08f975f66827",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ef92b01-f1cd-46e0-99ef-a7ddc94080a3"
                    }
                  }
                ]
              },
              {
                "id": "9e4cbd13-c084-4220-b42a-b439d23786fa",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcefb9a9-d3a3-4df6-8dd6-70711255dcdf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa579a43-2fe5-4699-8b7d-25c122b24ad5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9010e458-05b8-4eb6-819f-dd9be6596eac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0ea9c3f8-3845-432a-a75a-4ede44677139"
                    }
                  }
                ]
              },
              {
                "id": "7bd1859e-80eb-4d6a-a090-66d2433f39d7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1f64291-2c7d-4897-aa37-f2d40cd23d70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3d8512e-fc10-42a5-a269-42703ef1c84b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dfbc68a-49bd-403b-9cd5-03bd45f3ee32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "30e9c1c7-f2ce-4daa-a753-f96600d47fac"
                    }
                  }
                ]
              },
              {
                "id": "10bbff13-be98-48bb-9564-57659e4c9955",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a9d129e-a498-49db-ba15-16946647fcb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c864244d-7ef5-41bc-b5e4-a4708a2f7575"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4850b3e1-0924-4b56-a31b-107aac927313",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "48337c90-8af4-4063-bfc4-85f6a8b42aef"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bec772e2-1a11-4b26-9334-d802fde27d9d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a94f579-d7f1-4c39-90c9-e8dd182c991b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94ecd1b3-924d-4706-a567-2ff077fc31cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d6b96b51-3fa9-48fa-a225-d7d46d073352"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50c62214-ad7d-4cc5-9e33-85ce4b0ad34a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e6f2daaa-78f5-4ecf-b947-00249c46dbc7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd4a4b78-3d9e-481c-8ed3-e859b3ff814e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a75ea074-ba67-4641-addc-3795bbf3c436"
            }
          }
        ]
      },
      {
        "id": "4a18a55f-8d66-44f4-b86d-dd9cfe85f541",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "45064c06-b700-4159-b083-279a6c2047ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98faf5a6-ffa7-4830-8b4d-9dfc2efa719a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "076a7315-25b3-478c-b224-eef80aeb5eee",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ec35e4-cce7-47cb-aa84-45a74cb1b7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a903470-f476-4d8a-81f6-b45e2c22a93c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28945e86-364b-4bc4-a36f-9c267a97e643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5c5815-0ad2-4749-9989-247fe3281326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae55d6a-950f-4931-9df6-da67f1f0dc62",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef046068-4a0b-4c3f-bb30-a62a2d28c9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6db5b41-4e6f-4d0c-9cfa-0169853707e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce30130-0e43-449f-952c-f8b350d387b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd42610-018d-42da-acf3-a28e225cf0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a889d15-e92e-4c03-b431-568d726dbfd5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a0a9b5-7ac8-4251-8453-feaeca4b85b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930c7b2f-8c02-42f0-89e0-c65d2b02f2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0eef11-8b66-423c-8ae6-1267461a9dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2910204e-ac0f-43e3-977c-bc3b5bf61c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8577a07c-adcb-45be-b686-83d9432efd63",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38053466-6a80-49eb-a227-6476ec71c347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "238701f0-fbb0-4005-acf6-f00362c281c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ab3a83-0969-4723-9956-59215f9c38aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d39e858d-e04e-402a-823e-7e5590312b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f1aefc-7afc-47c1-a116-997cea1836cd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6424ca5-51d7-481d-8bdd-f27044be54d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9a62ef-58b9-4b42-a54e-3aed7a9a5049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6b71d1-4c40-407d-88b8-6df7eb1865f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb6819e-6181-488a-b9c5-28d4f190bf31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce172bc3-9c84-41ce-b43d-04f6c39a98a4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb951a6a-3514-4ed8-a0f0-1870220da31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11ede7f-c202-48c6-a7a2-268ae7374714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af37e49-04a6-4158-ae49-0aa7ceecc000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f7b49b-207a-493b-881c-4c235520a02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16168cf1-7f5f-459c-939f-e287dcad140a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39392e9-b3c1-4941-9963-48875bc1e343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ee79c4-6f2e-4db9-ae62-ada203f730e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aef5dfd-52fa-4a10-ac85-f8aa15cb5719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a47f4604-d87d-433f-a4c2-c326e3f7ceac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1f813f-44ce-4951-ac87-b124efd5d97b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2287f4c-4e36-4758-bbd6-87f80ddc40a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17676ab-9ff9-428f-89cf-94fb00fec4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c951ba9b-a202-4592-8c90-2aa87ddeb116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5bfefb-1f68-4d08-afa6-f9fe435b8efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86e5cc3-5032-4f92-8519-328bb8a10431",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949be992-f70a-4d7b-b6c0-8b0c789207e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74f3c07-b77e-4416-80ce-c059db4dc762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfea980-fe71-4af0-93c5-c21696fc8d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c047bf8f-1a14-4d5a-9db4-7047fe95b513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393e68b7-eb97-46e2-8fa1-2dddca608c18",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05410a84-d857-4c6d-9950-4c26d9211a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae71838f-5d27-440b-9659-08648bbffc07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f9ca21-d527-4e63-ae99-063128680188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46f4b573-42db-406e-949f-ed61cd898eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46f094a-7512-46e7-8386-a47b993e80cf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbd4ce7-91e2-4a8f-a084-8fbc79fff227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1797c18-c886-4cad-b9fc-61eb649ddb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287f24f2-c0ba-4449-894f-53fba81621e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5cb707-103a-4312-bce4-0ceff367b7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4465952-da37-4494-a04a-c3423d243c4b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b328c1f0-a821-4e72-8110-b51742e38b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88f7be8-900c-4408-98f4-125ae7caac12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f373271b-b513-4505-a5e2-288a368d6cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c062cc9f-503f-450f-a592-13203dc78900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed20e683-a11a-4a65-8ddb-9bd962c841a7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c79c047-5eeb-4ff4-ba01-a5a94dcf15c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbd1f52-20f3-43a3-a7bc-3d6c4fd3dcea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207374fb-2272-42b9-88fe-927abed11314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6ccced-c581-4d73-82e7-c6be2ffe1bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071bfe99-23c6-4923-84b2-44a0abd319a3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069939ee-0b8d-4f88-aeea-8d0d6bf47f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e042ca8a-a5cb-4dce-8113-55a385855732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253c2748-3b2c-4324-b857-666517ce5077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b05cb98c-a646-4ad3-b320-3c7722907aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5090e76-c89a-4f8e-be2f-3bdb4e3dd86f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff21a11-915e-4fe5-98c6-8ea51d29f472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3161bfa2-1e91-4c52-a637-d230f646b47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b31ae6-cfd0-4a8e-9003-999d0d7b0a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa9beec-a601-4210-bd3b-48a58e09ca41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f7d0d6-30c3-459f-84a2-67055b01e54c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f07158-8700-4ad8-ba10-8d296ade8844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fd2a0a-26e5-4585-9674-a5201ffe89c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcf4db9-0b74-47be-bcc6-61a6e03cc58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e65895ab-8e99-4279-93b0-2d7f40fd747a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcb81a2-e799-4109-8428-87f91cb59b33",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4917ebd1-c6da-450f-9b7f-f8b2ecc4509b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78458a21-316a-4990-b9d5-f50d77af65a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364d05c0-7192-468d-8d5e-881b311ba0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "54c5bbe5-3225-430e-b5d4-1afdf6ffc66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07389906-6387-482f-be9e-633755a4a432",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be57a374-805c-40fd-8dba-5775bae0f0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f96a84-9d12-4766-a2a4-ba82d509ded6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ee393b-0e93-4f74-af30-582697701f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5adfd7-4443-4a99-b595-4bdcd46289cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c005ecb-baa0-4942-a113-cba22e1aa2a1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0306fa-6399-42bf-8dd5-95ea39f62045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6d5dc3-8c79-4edd-aa06-1dac75533a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7041e51-b535-4f4d-8ad1-d3e46e697d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4318cdc2-6d71-4722-816c-3bc4246b6f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd13321-2193-44a2-abad-b9fa07066653",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16518463-84cc-4c5d-a757-5641ba746f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5faeff60-578c-462f-9662-302c3ec2dfc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029afc45-60ca-4aa6-86c1-35e9a1989538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62f75d4b-3e97-40c8-a22e-ee0827204757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb71aa4f-819b-45cc-9f48-67e3963c8fdd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c86f04-b19c-4fc8-bbcd-957a902f6fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f087552-b86a-4444-bc50-11e65b0fe309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834c6ab0-78f2-4f87-8298-fdb674aba872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08e96eab-442b-45a6-85c8-6f23c0d5789d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e7a132-8af1-4350-80b1-ce863bd10dc6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62eb2df-09a6-49f2-a335-959f5aa2020b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6138e1-1110-4e8c-b31a-623bb9f5ebb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd843fea-50f4-490f-b04b-22e23bcf2e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8056b5c7-d4d6-48cf-a0c1-4d0600be9d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fc7b99-eff4-4f19-8707-f39b2c66e589",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b22aa64-ea6a-46c1-bdaf-b1320891c888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d3bfee-2d0f-4fe7-bd7d-893c5e202223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98421a6d-1df0-4572-992b-76bda6e9b6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8054eac4-9d77-44f5-92b0-3646f41c4346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a24f0c-0d5d-4836-82ff-eae4244e82f9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754d2157-06a4-41e9-a802-99dc7786233c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08349203-e5cb-4195-bbf6-cb481246d903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d029c453-1e76-4782-91f7-8d2bdcdd96b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f664224f-91d9-40a1-858c-6431da4653fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a63bd7-78a1-4ed3-afc6-07a8f1564a38",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852c8bd5-41bd-424e-a548-2d03dad997df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0169da35-3b0f-4679-a126-825a2766e85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d234ec22-bdfc-412a-8e90-2776d6e20138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c134c7a8-0c2c-4dfd-afaa-ac5ef7fca8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42be91d-a1a2-4508-853d-abfdb218e5b7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d2df00-e546-49de-9486-b7f9a9f028ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fccdc4e-9889-40b2-bec3-8f60704ff213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0439b1e-696b-47ce-8525-1e0ed7443ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72d684a6-a657-418a-a9c2-4f843132eb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ee7bdc-d465-44aa-928a-0cf84cb35222",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87746f0f-ac72-42dd-8bc0-c2326fd0ae51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80281ee4-678c-4567-87f9-c653953313f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f00c791-3478-48fa-8ce7-25027ff7dc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfff7168-c414-410e-8b81-7495344a423b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb59683-052b-4275-95fa-0defc98e3205",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b987bf1-40ff-439a-8752-f3da75a869ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba97a05-f934-4120-819e-79729e4ebe2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1847b152-751c-4d97-a180-8bdfefdc2090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "683f3d71-4aa7-48c5-ade4-a8a7295c4dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17044938-89f7-4ac1-aa26-a1800ead93b2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5804d8-2e41-4036-bfea-fb41ed8c9f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a216084b-6c2a-470c-9d9f-cd57cedc31ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a43753-a9ba-4055-9ce6-ec290b37a528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e74554-112f-4d16-9c8f-79e1c8b32d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c657c2f-a81c-4959-99c8-e906faf3e5a0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a862ea-736a-408c-8b00-85e3f232b711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5305815-86cb-4ba4-93f2-e29a221ab46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b8dbb5-7adb-4274-8e8d-727a08c8be3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f8d7227-ff6a-4f35-8bfe-1e9e01d50e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6d95cf-e038-47d8-bfcd-75ddaf8b3e23",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d30c51-536a-495f-b5d5-c2fe3ee4c829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9eea99a-ad12-4f44-ba27-68d3c64fdbbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a45e5e8-c47f-4b45-aa2f-33a8c352c300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c952a39b-1b2a-46e6-b9bc-dd36672a6bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c61a803-9212-47cf-9db5-d253dc673269",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633d7dff-6c5b-4c96-875f-ebc57ca53408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac537d9-8aba-4e2e-87b1-20ba1e262fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293cf13c-d77b-4dc1-b3f6-03cf26f6b33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cc8d8c-647d-4846-9845-4747bf708e77"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8c982b00-6f89-4b6e-8697-995aa9b00f0b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "860449f6-e191-4158-9dea-bd2a589320e9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76381fdc-26cb-44bc-8a78-2c637550c908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3706ebde-755e-4d2b-a566-22eeed91f162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca4035d-8943-4b14-ae70-2d1130c50b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adf78ded-fd09-4a32-ac53-8acb0ba7af3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29493dc1-0b53-44b3-952c-f902e67fa1e6",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b520b33-03ff-43c2-8be3-585e6734d3f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f70a7edd-3cfc-471a-82d3-1433ce11c5ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abbbfcb-12b8-40bd-aaf0-a294e31d2520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9e98217-45df-40c3-a2b8-3fbe066739b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f6b2095-c2f5-4673-9b96-2492437030b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b953cdc1-5918-42d4-b121-1514f034df48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89f59ac3-3490-4440-b18a-835eaf1d67c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "763b8e8c-20e9-4a6f-8ce7-98da6143e2a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c1d1d1a-1203-4d53-94ba-8e683738c0f9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b2d0b859-957e-413e-8112-a578d7dc67b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc3ea3fc-1652-412a-bfbd-4ca90640cc50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f0b21f8-e29e-409a-866d-ac92476e39df"
            }
          }
        ]
      },
      {
        "id": "d044461d-5008-4d92-8d73-7e2f9effcfaf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6ab2eff5-5b52-4ac8-bb40-69f2a0b139bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "513e2743-0650-4ef9-932c-e84f27d043fc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b5cfc021-2196-4f0a-9342-2c4029382cff",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eef2d1c-e845-45a5-8b2d-e6aee847bdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224f08ef-603f-48e8-850b-3ffb30e143f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f0be60-db5c-4f02-b778-e83c35c8a168",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bbb9b3-82aa-4c0e-8df9-8995c7e4daa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef365346-329a-41be-a543-9024b26ba00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06107bc9-4177-4111-8ecd-4b796da10744",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69de4a09-8a71-4485-b12f-e13478bbe14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53872c9c-332f-4c4e-b9de-e1b596d3d828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dd403b-d4f6-4cd6-bdbe-4276b99f20c8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8097a317-232a-4b19-8945-7b39d1e8a6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85532a17-e6a5-4697-bdc0-71cf133a6135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504cffca-aeb8-4c3d-ab79-d716cd1e6d1a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4808eb1-d1a6-4628-8411-319e4c3dcb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904fef9a-7dec-4a0f-bfbe-6f1c93311e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503a0c5e-e71a-47de-95a4-a6dbc8a5357c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484c3e9c-9b15-4b94-ab6e-e30733e3a960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e50695-059c-4059-8f24-c8f02e373b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69842099-1d2a-487c-8e75-6410b5434696",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccd5b6e-65c2-44eb-9944-6e71bdc33ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af675dd-bdd8-4ee1-8034-2eef1dda1e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ecd79d-9c74-4ffd-b285-816cb89d0555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94cf9c6f-1b1c-4aa8-8089-17f44b79b69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34f52ae-215f-4426-a654-aead500ef4de",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d55279-4025-477a-b4f3-4a3adbc9e05b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0df3ef08-9ab5-4ae7-8de0-87719a4e2acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff22ecb-d513-47dd-a23c-e62d5f194b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404336b4-0292-45e9-aa89-3eb463b8ddea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db61d3d-3241-4ad7-82a5-4e37e01f92ff",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29ae6c7-3c15-4323-913d-6cbe7edaf696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57351209-7353-4252-a996-ee15567d1ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb03bfe-4316-4278-a1c2-8fe2aec8e96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa478ddf-0ed2-4e7c-993a-625b5fb1df1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5c573f-8558-4b21-bae4-c25dd3064099",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649bc3dc-85d3-4cd4-aa3c-2263365f5438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f35eb3e-e176-41a3-bd53-a6150276de75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d148ccdb-acc1-44be-87b9-d0c2d0896e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6c533d-40a8-4700-a3ce-0562c466127d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4ea91d-30b3-473a-bc6e-7ecea3318471",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78a81f6-7f7f-4ed9-aab5-f57abddbd6c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46095dab-8da8-4ce9-ab3a-345a4bf577e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb09d52-e816-4e61-b632-ac1c77ef0b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c304657-47dc-42da-a9e1-e1fc027c054d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2119ceab-3449-495e-a226-4eb452d568e9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8203c4a1-7271-45c2-a788-114ad6ba4a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263768fe-6d0c-48eb-adb5-98cfb72e5e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a0140a-817c-44db-a270-11f9741966f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd98761f-1f32-406a-91c2-a0a50f5e9244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16e707a-7bbb-42ca-a867-7d6dd988d1e6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91c3943-91c2-4d2f-9d98-fd22692c2bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96797b03-be1b-4fe0-92ce-cf922d841cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34a7f96-b1ca-4ae2-9030-33855699cb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f089c5fd-1cf9-4764-b3c4-37f5f27995fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f858da-bc03-4f39-9ff2-fe47e1968ca0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bf7c0b-84ed-4fd3-936d-82db98f96f78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "974464cf-86fd-491d-9220-c38a9edc26a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea504d3f-b80a-402a-bfb5-6d936a0cf7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba2f2ad-d46b-452a-a14f-8d3aa6747e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b322b3b2-27b5-48df-964e-33673d1af168",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a976cef2-5ebb-447b-85c8-d041ff8a02e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68f94ae6-3935-4b05-bba9-e5d4dbcaeb1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4846169b-1478-47f2-900a-3b21fce82d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d9fbce-2dff-45f5-b4fb-13bee8fb0d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa8a167-6375-4392-8c09-f5e851ab08ee",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32aa4284-22fa-4549-8bea-d516f384d78c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d6c5253-31fe-4b92-9ae4-ac55ad46e983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a059de0-d020-4c9b-a3e3-1fcb0e892b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0264293b-d2e7-4c19-b5ac-960cab3af2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ef7b98-a0e0-4ecb-a1b4-35e2272ecee4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d846b061-d764-48bb-b6ed-6481ed2f88ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83680130-302a-48a0-855d-085c91eaa2ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3387727-f91e-4f82-96b1-ad4cdcc647ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677b5c19-443e-4812-8929-686daaaaab35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72597954-ab7f-4d46-8e89-53dd8cf4bab5",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46472336-5645-4f11-af3b-11cabe48467e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ecd3c4a-a1dc-448a-be5c-17812f2972d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c680e52-fb4d-49e6-a3b6-eb5d038a46f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1cd7582-d026-4eb4-bd2d-bea72561b852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3067f1c3-7889-48ab-afec-3d7ff05ec2ad",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da295bb-38a4-4fec-a294-0aa39db4ea5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd17206-6ab4-4e21-a51a-6d393a2ea372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f4c56e-46a2-402a-9574-d7169fdc3013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c0e5d9-d51c-49a9-811f-7d79da350bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d185cd-d16b-49af-8d2a-a722d00ec164",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625d2bf1-2c0f-4eb8-9708-f4254b9422fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934edb80-65cb-437c-b70e-3c90593c8f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83c82fd-6950-4deb-a043-6173a4477dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59d6f56-497a-4052-b5f0-60dd7350e743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f0afb5-e22f-4cbd-b050-99cfa4bbe483",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e1e4f8-6e1b-403c-bd1b-95ce8b7201b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96ab71d-dc5e-41fd-878d-389f2b619e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5335294-bd5a-4846-bda7-f7f87d80a3cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b9e7db-2edf-43de-a97b-6635cdd81970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f9ee8e-e1a5-480b-9675-854aca592e26",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d028fc6-9b61-43e3-96fb-f2df6ba11128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21f31bf-7391-488c-bc1a-8f6edf7f87d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee072de-c04b-489d-8f60-b96f95ef184f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019c3953-214d-4758-afbd-b1ec9be7c03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aec8b63-1249-4bf3-9afe-aad84df84ae5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73409270-c4f1-4321-ba63-714fddd99f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6529e2e2-c397-4759-b6bc-441b51f2ed74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f87faf1-6998-4891-bd9c-82af6252bbc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9357e626-19a4-4208-b3bc-ed53faf76d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b6bd80-221b-4a60-8005-632ee4a77ad4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecca71e-3fba-4157-9847-670ccff01b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b6452c-1c1b-424b-83aa-ff3a23c98159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196482c2-e931-4289-9fbb-e1f6a553a7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee103635-395a-470d-bc2c-1efda461ce0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de24aac-9a0a-4b5d-8134-fcaa32a9108b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409aa31e-21b3-4eba-b175-b7e4345dbccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd8ab0a0-dfd5-4185-8207-b566da7f19c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a65155-99fa-4b17-895b-88f547ebfb19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0baf8e-390b-4ee3-838c-d58477c930d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd79834-9c87-4812-8d6c-d86398779241",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5db0f1-a685-4765-9329-cafa27c2367e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fac30cc-c0ba-444a-9cf2-59205048780f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe60bb56-ccbb-458b-bc00-8a73d690813b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f303eb83-da5e-4448-97f4-d7e9379e81f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae12fcbb-25a0-4ef0-8e13-dc13ca06f4af",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b2aa19-fefb-4e7b-bd72-6be32f11f554",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0359d30-4de2-4d73-95de-2a7afc1dec75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6bc8ce-0782-464b-9967-9579edb62dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0977b03-5b3c-4316-8c6f-7152cc14a87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4705e342-80c7-49f5-8fc5-cca26d34d5f8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1575dd4-c20d-4264-92a6-281793c01746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74be3e51-a0e2-48a5-9c00-8f1d29dbfa9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00ff6fc-8515-4263-b185-459df6e10be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f74095-5a4f-41c4-b932-d88d1f40a1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8992d1b0-4081-4d0f-adf6-2bc63eec6004",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474366f8-2f83-4d00-90d4-d4f3c2aba34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f64fc6-b061-4c83-bbfa-3cf716194ed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "117b8328-1611-4ac3-b650-26d047d62fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27635f05-e088-4bfb-8276-416ea424b77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5e4c1b-8059-4a70-baa3-1b8648d64d53",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cee6fba-4c90-4020-b6c1-a9939dac863d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a8a99f5-8649-4cb3-9dab-818f64778ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cd16dc-cb3b-4c4e-96f7-711a6b56fdc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8c166d-09c7-41ac-807c-7a06c6ff5ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f8316d-9797-44bc-bead-556fe89f5b7b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2d4a3a-5932-4e37-963a-268ac0120d44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e79f9641-3dd1-4f11-89bd-63979075b050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d4688e-ed00-46df-8519-c42360d5fbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ad482b-eb75-4c64-87d7-ae42b5e951a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d380d2-e3de-470e-861a-3b5b43122aae",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af8f3db-4bae-4271-b988-f199bf0374ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e11ae903-5758-4139-8857-f46d67eeaf7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3214fb66-4d42-4300-9aaa-340e342e4576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1179302a-b90f-4f98-b49b-d5bfeb77a641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7bbd92-4c35-427a-b4c9-e93561985098",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44991b80-5303-4fb7-a2ee-9e680abb6b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e31a9969-57ac-4d1c-94c4-e2f0d26634bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be5c502-9806-427a-b53d-3cb429fa95f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0fb2b0-a695-4605-a3ae-aac58a658d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38169802-890d-4290-a46d-d66cd75441c5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b310b5a-51dc-4ed6-9bf4-376294cf5e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69b3391e-214b-45f3-8f32-e8ff9ae3fb94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8d459f-b21e-4a83-97d8-3deb059aa7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569de1e1-c573-482c-bf3b-607d7d40590d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee177ab-2a24-412e-8920-e337de7a4cf2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74073300-3c79-46a8-8b5b-679bc4b1f06e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b092a5d-ac18-4a58-be5a-4c3b21e1ff9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8371537-ffda-42a6-8194-018252632254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6062b118-0f64-40cf-8bc6-9a4c135ce48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f842b6-8021-4310-a6fd-ce9829376b49",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d898ec-182e-4c8d-8769-82731b5f347c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f382dc4-350a-4d1a-9838-3c69aa7067e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf849dfc-57c7-484d-8138-0543fad1818f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714267f3-5daf-4d44-8725-06c0d9858a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29ba6b3-de51-4294-9c36-c8695a72bda2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad3f1ce-0916-4ca6-9918-5a2e8b1ffd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff1ffc7-931e-47f4-9efb-7380a29ab8a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72807b98-02db-4722-9df5-603415aa7cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ce39e6-3de0-43b8-b43e-166e9a5df16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d147c2-8379-4c40-964e-002fc2c5a598",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a02fc1-fa2f-441d-98ec-f05d630cda2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808ab687-59a1-440c-b274-5d9970001f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef83f141-be49-4956-8a13-65ee1f059550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d32d95-35fe-46de-8399-27b0bbff3867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0256319f-7115-4d7d-92b5-ecdf71c8192c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648ddd5a-4407-4589-a914-24175531199d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb001388-408b-4fa0-8e61-1ff6514775b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0dbe1b2-9279-4fef-a22f-bfe182e841df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7f8308-0a7f-4280-ad93-36de4832c444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecd3854-89e3-4516-b347-119c8f402b16",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5813a753-9744-45da-9270-9634d8476f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff4ea3a9-f32a-49a9-9a18-9538f2cdffb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ae9650-1eea-4e08-b028-f98228b2cb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b22206-9cb0-4d61-9c96-8ebf524574af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c33e0f6-43a9-457a-97f4-510ca7548887",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e0419b-b21a-4c05-bb46-a47212c363ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64486c5-375d-4e99-a8c4-6eda2bf69172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5242af-13e3-4ced-a40b-5b5c401a03ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac8344f-cd77-4850-8958-27d551214512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64d923e-a96e-46ce-b3da-dc0849f1227b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa1678a-7a0e-49bd-b367-18a1d0d1efb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218e1e66-798e-4bea-b2ce-17985cc27c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf3c6de-4dd1-4eed-a3f7-aebf95fd8d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e5597d-eecc-40f4-a7d9-ea0bab15ca88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71afb74b-88dc-4f95-9af7-677655f803b5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c74d8c-9d9b-4978-9fb8-2dfb94d1c352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d389561-7ab5-4269-a174-dbe42a3fe53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b8546f-54a0-45df-9d7f-36b241364549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d580938c-204a-43f0-a7d4-6ad5734cea15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c759021-f3d4-4fa0-897a-7ea7ec7124de",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6f7b3b-9ee3-4824-86d5-0a70d650b957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53baedab-2010-4985-99f8-6d7823d2565b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7614bf9-f4b3-4f29-8e3a-9d070f73d595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef7de53-12ee-4d55-805c-751831dbf834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a7637b-d2a1-499a-9dbf-03887de71357",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5a07f7-47f9-46d0-b73e-e9bb77995e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64363ca9-cf55-4ccb-bcbc-657324e0d217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037b5a62-1371-450d-a280-c5764887b3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeaa4024-6468-42f5-99d0-e61e41579bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64aaded7-fc62-442a-b18e-236fc0a5d481",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31094380-db2e-4919-9ae5-804af4ca675a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693f0dd8-eb54-4746-85a6-19df6ecc31a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a276c8ee-7d89-4481-8d45-3121d2f39496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7a1ccc-a0dc-444f-8ea8-594e7922288f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a9239d-cb8a-416c-945f-1bb61df84ab8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f443bb-d845-40b8-a9f8-73b1e5a4df07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268f9fb2-d91a-461f-a9be-c14c9cceaa9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fffa1a1-fc9e-4a33-b5d3-7c1296fd3d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e97c67b-2c62-4aeb-85ac-a0f6cfc47ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda46372-db54-4efc-a246-9343837ab9c9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b212471f-c8dc-4faa-835f-32c65eec7b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b227d34-4de3-4324-a4d6-aea241879f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6edde6-2e8c-4aad-9f6e-2756766262df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d465165e-6782-416d-a289-5af4be4f4bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c0ff20-69f7-4cb7-9c3f-651d4dc460cd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32f2ce0-7cc6-4880-8b6d-1ba28dcd89dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24cc7d4-578b-44ef-a3a2-ac15b3ed4135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa64de2-6f25-49e1-8aa8-089c86b4c058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d058ce9f-ce4c-4095-9d8c-f1e65fdf9988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f03bb8-1067-4434-afbd-72c0ada444e8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964bf950-5afc-4dce-9bae-b9c3a59f543c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ced90b9-6c43-4cae-b1a3-c8111cca3927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91328eb-da72-4b27-a59d-f1f656d69779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a273953-b90f-4e1e-a9a8-707260227b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9451181-e258-4d77-921a-b25257224f2c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56442f57-7e58-4720-8d89-188e541ecea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd824f79-8c09-4608-b6ff-75c5ac39b2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1302e0ae-4a2c-44cf-a3d6-7361a6f7d0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd5e9d5-37c3-4018-824e-7ebc8e0f580b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af4b879-fb5a-49d2-a411-9fd21b070fc2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca34bb6-4a18-4d45-8f04-fd43094e1abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6beda112-87b4-465f-abe2-2bcb18f508d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cd7993-5b4a-43bf-ad44-d47754389ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7dbda43-8d3e-4889-9c02-5e1f0d0c1ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab8a20c-72db-4d68-938d-85bad5cacb9d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b411ff0d-4e97-4614-a6c7-cf858c5a6cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7620a1a1-730a-4254-8a11-e9babab0ca41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94dea38-9c03-4f8a-975d-38503fda7ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3c416b-c8ee-4214-b293-058e5bcd615b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6188a3-6922-4924-8d10-3e271300203a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d329a490-c055-48bb-9b06-8c58ab4747a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8174dc-104e-460d-8722-a2dbff2822a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bd7406-5197-4b8c-93b8-3459e5cbb785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0948bf9e-90e3-4208-bdbd-ad156264abee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a162cc-7bc4-42a7-b240-8bb4ade95334",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab818285-7467-4184-b804-e7ef530eb35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d0b394-e07f-4644-8be0-ed68dc1d596c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abc580d-15e0-49b5-9d00-27c4e9a8a996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b98a45c-7c21-4992-95f6-eada77361dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6bc558-183c-4657-a9e7-df90688272c6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d33d17-712c-410f-9789-d25883c6ba9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03dbcce9-b434-4ab6-8fce-17088fdaf39b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e35b513-495a-43bd-9a59-942074efbdfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8907be80-c5db-4483-8e63-711e09e27ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d94df0-f8f4-4f4c-a7b4-7111255fa1a0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f33fd2-a69c-4fa2-b975-a32521dcf87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "826c1a4e-9af4-4972-9d67-530435c5b403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf820ff-87b8-425b-9b18-2995cbdb181a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c152ec-3ed4-49ce-ad99-404351347f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ca02ae-8276-45ab-b9d0-0da3a811d891",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9dd20f-6270-4777-8bf6-6d93d92116b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82338d3-5fab-42a3-bb75-df2fa1a30c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c3556e-6be5-45f6-8df0-aa7612b35e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5df66bd-d4e1-4524-9b45-b1f04e2883cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bb0a10-6e70-4d77-9e45-4ca21712149c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bce0d6-0094-4828-a0d2-df2022e03456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a39ba40-96f4-4545-af10-831767ddb19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204768db-3e8c-4c69-a178-a2e2e27faa61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c67f4e-17da-4158-9470-ab9b61ad1875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd79e93b-dc68-4e90-9253-85ecaa98fe20",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6d6c4e-7f21-41a3-9d43-31f41de4aac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e45e36-cb5b-4c7f-90d7-e24faf436ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8e07b9-9fa3-423e-ae0f-9e23ff5934f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ce3cf8-097d-4369-aedd-5383fd78396e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d82d12-9bab-4836-a522-014ebfca1c15",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba74fd13-799b-46b6-9b46-2b9ad3f52e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab22592-f133-4463-acde-551561a675e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c0686d-6301-4e01-b74b-0907c66f4727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9502f8-a95b-4fe4-a8d3-ed37fccc914e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36ba215-ddfb-4780-a34d-0debe5c6398f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f08b4c-2438-4e73-bc07-fbca0180a23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b482a8-ec7e-4756-9349-eb1498ca4e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5facc2-e823-4dc7-9390-a107cf1fc4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc556d86-1320-44d4-bb01-1baed26cede9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f2acfe-1fe4-41d4-abc0-636f77a6d2a1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e12d17-edb7-4a43-92e0-da4e0c30cb23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1c407d-034f-4ed3-a5b6-8ec6cf1f92d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffeedae-9ad2-4954-a7f6-9618bd136e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7fe449-f742-4320-b664-3d46859ab642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3839fa8-e832-4e7c-a752-f4671ef5bd3c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b387cc16-b6ec-4ea3-9266-6ba5a4e05ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73457dc-0269-44b2-93e1-ae9540cadd03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c478f52-1a82-4a60-8cd6-d26af5993972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94057b0c-3dd9-4334-9a4c-c9b26e54b194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094e2d5a-76d1-475c-ad5e-9dc8c930ee31",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd78e4b-ff06-4adc-a72e-d1c8ad4c333c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6154d6f3-c19d-4b45-94ef-96a089a43210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "353f8cbb-05b1-4f5c-8c89-8ec52399f89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2fe0bc-d8cb-4650-a7e0-01f7abe65633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f586208-a394-4922-8f06-c344f284a77b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ec9950-f590-4781-8430-d0289a0a8aff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2593b2a-3d3c-44bb-b526-690963b362cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f9b35f-baef-4cbc-938f-783c73376515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e0d7c98-6319-4b29-8621-b3998226d939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fea0619-6071-45a7-87aa-41ff57713f54",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf485873-6644-4169-93d5-b0bf61794b11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3147530-8719-4030-a4c4-1aaf3f01d19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0f566d-bc2d-4fc2-82fa-a4abd4a0f73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3871ca12-46ce-4944-b5c6-3f8df5d93629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bbf101-e922-4149-88a0-814330cd93d8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581c3e4a-f5f6-4433-b6b6-89647060392c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bc77c22-32f2-4b64-a1a3-e4764fec4908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea628da-0128-4887-afb1-b075b1f255ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f561de48-11c1-4521-afa8-c02d7e0ef8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5c3949-19ef-4b1a-8545-01c256460d0c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9d116e-e952-4741-a8ca-308d0ec078c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "793084b7-e13d-45a5-99ba-b1647656de99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169dd7b3-4fd7-4242-ab10-3e1e22cf5c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "759ad09b-f823-4a9b-9abb-8213ef9e59dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5640d504-ab91-4cc5-9622-1cd1cadd29c5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e49db9-a315-41c6-82b0-319cf52dc9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ba37536-dc31-48e8-8ef4-0f8b13328a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f67dc6c-4891-45f3-8eb1-6727473ef50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2785df16-84ce-4ee0-99ae-0f05694ab116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb135dc3-e4c5-4b58-8f5b-31031eec89fe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14114758-6eaa-4cb0-b49a-c4457461fc4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aed63519-20cd-4e96-a995-becfddb667df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419200f5-53d2-43d5-8521-f2bc9e814420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ab932a-9ad4-411b-ab63-8cf560fd72c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf7a28b-1027-41df-89bf-a06f1d98977f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92470c3-0d30-4954-b8f2-4ec8137959b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ac985d-ff63-4672-ac98-c280a135e2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b425154b-88b4-487a-ab55-e976df857b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d2ae1c-a9e6-4a8c-978a-da1984664e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1658cce2-aad2-4e91-b66f-ee368e23b6fc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befc0fc0-5d72-44a0-b09b-3b89f9f0a767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c3cf05-fd3d-428f-a61c-6972f3c57214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf2659e-6b3d-40e8-a432-aff6143cd92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce909a2-bf41-42a8-bf99-2bba22f4130f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d8febf-bc98-420e-b004-e8cf6ddce439",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c30631-f420-4b30-add0-8f936de94906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bd63a2d-a9ae-4e04-a80b-5cbce630430b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0131df1c-7214-4f07-bee4-784f166f663d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b16e5fb-1b17-40cc-b90c-1af61b7eed12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca344f79-c277-42fe-af6a-fd211c762aec",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4fbac6-d093-4353-9d47-f089571d0679",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf43376-f2b5-4a36-87e9-5465f7aa0a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104a863e-4756-40e6-a424-d7a5fd879776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f20010-9ff2-441e-9b38-884f2e99e5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0736224-601c-4c94-8d8b-e7b6ff862618",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6a3b2e-a9e6-40ed-b840-5b3d3758dde7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38cedc21-de9e-432e-96dd-87abcb29a73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30c3328-019a-417f-8593-43ddb6b3cdb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a1fea7-0a27-4851-a3a4-643cf704d469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cde3768-e052-424c-a951-e09dec3822d8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c668b5-4d13-4ac4-bb1f-c5da69589d94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd8408e4-8771-4546-9f31-34fb34500bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2ffd93-ad45-407a-bc08-f8ae733924ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9973caa-a624-4868-9795-022d3a94bc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a8922b-ca6e-4c53-91c6-0c44accb6a7f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95c4d45-7966-4aff-aca2-44f6982379d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb221e6-669d-4760-a141-620612a2fe83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf947b0-8eb7-46f3-aefc-01c98620d0fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f62f8a6-dee7-4281-bc56-b3557755d4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f742ba-ba6d-4250-aa80-adb613d3d146",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e3ca8d-d120-4c42-801c-411f886be5a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee3a4f3-1d76-4717-9034-da07d5070fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b0e42d-e1b4-480b-b237-f35c8a704457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df48dca6-ab7f-43a6-9dbc-b5c45bbd35ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2431a46-cab7-4fa9-9002-1efa6df74f50",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51c5b34-91e7-4f6f-9fbd-6e56d1e62b8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31b252ba-4226-4aa7-a4a7-88927180c386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82247eff-dcf8-408c-9c0d-6db221bf94ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54526476-7b87-4f8f-adaf-ae85bf1b76cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d14113-0656-4f62-9429-9ecdeee7009c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da822c76-9250-4c65-846c-3f085b96969b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16978b17-3824-4aa4-b22d-5ef942ff7408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "302be31b-80de-42bf-9eba-03813dc48af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449f716e-1e3b-4b27-adde-0f5ed4170eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6160410-5330-4519-a945-00b1e88d652b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9100f80a-d3e6-4025-bd2d-af6a155e3ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "626b51ed-e58e-4e04-85ee-388511f8dc4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b1fa1d-36ac-4f94-beaf-718d038c8ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d05aaa4-1295-4f1a-b618-91d117f89ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4496fa0-8566-4eb8-a8c5-8049dbd18f21",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbc6a06-6bf1-4db7-b639-87fe9d890e4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b5c3c59-dc08-442d-8414-c30ae413feae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7b5386-7462-48e8-8864-2913e8d13878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a327337-77c4-4a23-8624-a33b2097e962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad93552-b6f5-425e-b18a-3f468d5f950a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22cdc31-e718-40fb-a14c-987b29743b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe17d7b9-545f-4d02-af3c-15cd6e5e2e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a72e795-efbe-47ba-b2c0-1cffb6f9f577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f18031-9bf8-4bd9-b453-c9b226dd2229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ee2772-29ab-474a-95f2-ff0866b17718",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cf439b-8743-48a4-9c09-e68b9e7f3f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9e74daf-62af-498e-877a-c1052cf906d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "836693ae-7332-4e74-84b7-9c3952b9afd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7872adbb-107d-4fbe-b1a8-2dd6a728cdd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adabd96-c8e7-4e9a-a654-627c53f00536",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6274133a-e0f5-4757-a804-7d9191db7d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a271fd2c-2def-4270-b78a-a7d1375caad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77dbe73-a6af-40ae-a74a-43faa33e5291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1b7e26-a483-4072-ae1b-63490337db4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43ee939-a0c9-4c99-a0d1-20f4b7591871",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2f7cc6-07eb-43ff-96e8-6c7c50f78018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "898e3717-6e08-4c08-b461-444922964953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c34b982-51be-46de-8d47-a910c736565e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6964e8ee-a338-4526-ad3a-2e554fd0d102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996833ea-57a1-4b2d-b9df-5af3266f6678",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab144be6-b419-49e6-941c-51908a85990a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff5c9516-5623-44ab-be6b-58847b7ce51a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e028cc98-c458-4f5f-82f2-667ee4e111fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab349c27-91c6-42ab-ac5c-80df9342d8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f567b366-da6a-4b70-96b7-a38f76df8bef",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd424bf7-3196-4dc7-a2c5-39228fb49347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b58b10e-4f69-46e8-922b-8e589b6c0690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d029a58-506f-4240-8170-f71f7e5ef131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19589992-937f-48f8-9a15-8c79bc8d8593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befc486e-c840-40ff-9e9a-68a8d377664a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9e940b-ef65-4ba6-a6ea-e7aff63e1f00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e25ca5-4dad-40a7-a96d-f813803e7d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6773f8f-2f1f-4809-bdad-1de84ab30589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d062b7-6106-4ad9-8c01-21965471799a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d379c5-338d-49ec-ae82-1b24a245abaf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef70b631-9271-4436-8b91-ebaf7b6776be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93bc471b-b281-4430-85ce-722d1747ba82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c9ae95-726a-49af-afc6-2ac5ef38a219",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69da466f-7e14-4111-8488-d53dd5824950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967dade7-e2ed-4793-8520-f6a6d7548e40",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec605ecc-ade1-4fd4-b349-1b63e7db968e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91365354-6ea3-4788-ace4-52e42ae20fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6be1dcb-5ca0-4162-ad81-c0ddfed1fbb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc445738-d924-447d-b047-3b3caeea7e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af12a1ff-d652-4143-b774-2ac2d71dbd25",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117e826f-8321-445d-9acd-c16c0411f573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d27360f5-a8f4-4018-a711-dd7c6250c84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56109f61-6e15-4ab1-97f1-a1e8d31c3c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc91a8f-137e-4a01-902d-b3669fc01bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3c5ac7-a574-4cf3-b924-8fb5b923cd23",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7ba631-62fb-4f24-ae55-1b89139ed5b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff349e7-e022-4326-8c2c-f83f82391be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32c247e-80d1-43f6-a57b-8b46f7c615fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6636d479-21a8-4372-840f-ed590b230711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60eac8e-d555-4ab1-81d3-faaf9dae5479",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfbbfdf-fd96-4db8-a319-d044f7999765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b791af13-d635-4123-a87a-b0ad80aefbb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842b36c9-910d-4f6c-a165-88cb885abb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c77e465-96a9-4d98-b3c7-aacf61aaa7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e620aa61-8234-4085-857e-f98d9380a384",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed12f13-4493-45e0-b26f-32b5ca36b0f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b6f1248-0a1a-4847-bdd3-9897e20262ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b5f3b6-dbc3-46d1-991c-7f738b92f849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f32dda1-1b76-4f5d-b9fa-6a2e09d2cdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa45cd67-e2d8-466e-aeb2-509eef85617a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9801bea9-489e-43ed-98fa-9761ce050efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37be9d79-52fb-49f3-8dfe-4ac798142e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5ca9fe-dc87-4eca-bbfc-7b3819b08d24",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eeb8302-bc8e-4c83-9638-6e1e3fcffe1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac04915a-a857-4453-866e-b20660eccce7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43983f52-844e-4191-82d9-7fbf7f8e3b96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f08722f7-8f4e-48f9-94f3-c6d4d04c933e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e065b36-01cb-4a0f-b613-1b62ab4d855f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb328bad-50ad-451e-9e8b-3fecdb5032ba"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1b1cdb2-54ff-4674-86f7-c72d32202057",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79734c18-be73-49fa-9e1e-2d764e8ef85f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5226e49f-e392-4c39-8835-24f6384bc3fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b826ba7-337a-4e7e-bd00-55bbd6dd377b"
                    }
                  }
                ]
              },
              {
                "id": "0b461512-1406-41b1-a57e-d99ac7eb7511",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c40628ff-5a56-412a-a3b1-7af9c0ddba72",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef47eb40-64be-4d70-8b8a-e8f84f1150e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a5ff661b-02e1-4d3a-b5f3-fe7ceb020b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1ba345-8240-4f9f-9a0c-f0de3f1d124c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c470f4b1-6e0b-4cfe-b4b3-1596e9f84cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c8fba2-7311-4a52-965e-d1ce956e8fb2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a09cb1d-d595-4fe1-bf7d-7d9787c40cf2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b0600d3d-5acc-4ab2-96c2-ff51f3924c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b957b36-4170-44ae-aca4-5c5195765fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b90ae6c5-851f-49ae-b6dd-d91926001cfb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0db6113b-7c62-493e-94fe-42a853fbdf14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fdcc88c-4607-40a1-9289-6164cb34183b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fe85412-f6b8-4011-ac90-5db194feac40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e3a815f-573c-401b-94eb-62c1c037867c"
                    }
                  }
                ]
              },
              {
                "id": "dc7444a5-9d39-49b7-8d70-8fa41d6b4332",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1be5583a-5c7a-4176-80ad-408af0f58148",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad81ed0-f0a3-4e76-90d8-bc19af4502f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d5f3750e-d4fe-435f-9f45-057468bc44df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed9d850-937d-43f7-8e40-19b44ae7c639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105bd5cc-2bf8-409e-8582-d5a45b3f3d50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0dcf9cff-c660-41b3-bda8-a4da4b9eccd5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f6e3803-4a3e-4901-95ea-1d066a3a00cc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db7c2c45-31ef-4a30-84fa-e404ea591332",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "44fbd114-9f96-4a54-9895-51a5a31c2088"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c415fe7-6952-438d-8f1b-e0aa9d05a06c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4abb7a3e-696a-48bd-bdc5-547b0b18fdbb"
                    }
                  }
                ]
              },
              {
                "id": "bf586439-c12d-4e8b-a790-27509eb3711b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b915722-6fea-425c-991f-0dc0a9e0cc62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a4460dfc-465f-4e54-8a16-61661193b2fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0827837-9ac8-4f49-b065-2ff7b4abc9db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb44573c-90d6-4f13-b4f5-dd6d9a9749b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a074e9c1-7acf-47ca-bb8c-00e9c7bff5ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1f4998ff-277f-4b4c-816e-760441b87ca7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b299c8e1-70f1-4ed4-b7b3-ce7417bc70d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3bdea564-e5db-44c4-a989-a10c641f0f24"
            }
          }
        ]
      },
      {
        "id": "5c77eeb9-d1c3-4af9-b512-1aede9a4faf3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d5368dee-fbc5-4786-a1c2-a93ab6722442",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca11ef33-5144-4fe6-8f95-114399d3767c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2338ae5d-7428-464d-bf35-612a1a1a2492",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69282760-c3a9-4dac-ac50-4b61e57a8b6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3a9481c4-7752-4557-a031-1a83cbb458cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24de7fd-fc40-4f85-a2f1-138b2c9806ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5efc346-8d94-457f-878b-55ceac335fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d336bd9b-9f65-4050-b307-c6f8e8c6eec6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb7ff1f-254d-4dbc-8dca-4ce255f685f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9966a2ff-6b39-4b11-b44c-697cb2866a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60e9b5f-ee70-4dbe-83fb-3279521213d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4aeed7cd-f0f5-45ae-887d-6dbbd5ea718d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13890317-9ca0-415d-8c37-efe782fb47fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "008da919-50c4-42fe-851f-8e6b7fffc1c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59363d75-d792-4db2-9702-c666f80e335b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e21f0e0d-9447-42ed-8849-adcbacc08e98"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4efd464-6213-4770-ba0c-628988205003",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "765b8ea4-b7cc-4b8f-92b4-74317aa8102a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49257195-0a88-445f-8bbf-7374639e20da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "355764a1-f7aa-42a3-8aa8-e83e3da8d41d"
            }
          }
        ]
      },
      {
        "id": "0acfbcb9-f1ff-4736-a3e6-753ebb5597e8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f7a5a45e-05a4-4608-bf59-0fee11f83821",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0172aad-6560-41c3-b97c-3d3ee7bf1d56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d51ea9d9-f8bd-4d47-a9bb-e89a21dd12c0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce28eca4-ebc0-4a71-85bd-0dc2a79098f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b4c1df8e-0514-4f7d-9599-cb9d00648667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfe0eef-f817-4fbe-981e-0994d8e1cf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "433d47f9-85e1-4bc0-bbfb-e64bce68efcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba6ea6f-cd25-4e4a-a2cf-f27d79062ded",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1761f0f9-96fd-4cb3-befa-83f047597705",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fe652257-e04f-4e1f-94c2-f28ae4b2de2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1478b146-bf81-4721-a653-45c0e8f0b2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fda93c61-3e1c-4446-b7bf-7100dc30a47a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc9d3964-73f4-4307-8e61-f77498a22242",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2d4a3dc-0f45-4a17-a278-cac99810a6fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3269e665-5b71-498e-90dd-6a6ded61c937",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fc2be88-2b0e-4155-82b5-4c8a823a7947"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "066efc0a-a0e9-41cc-9476-e00531e2c4f7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c130e0ed-a750-4c1a-bd8f-e3ae35f6b07d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e8e1022-90ee-442f-9680-3a40c43c2674",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2c8afea-1343-46ed-8748-7415dd42c894"
            }
          }
        ]
      },
      {
        "id": "ffa5abd4-2d54-4f3f-9ca2-e4810c30b412",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "763f387a-c5d4-49aa-a557-8bfca56bfa54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ac3e3d79-ff88-4e80-87f8-8a60cbbc12e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08119d3f-db3c-4e26-a334-a0bec466e7bd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1627834d-1fa4-47ec-a392-9766f6676d4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aa10bf94-b2d5-4d12-84f4-b8e3b1e945a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6858cb3-6062-4109-81e0-e02e30f4720d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00705540-5d95-4f4c-9a7b-2fa799a3761a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6682d912-7932-4841-a824-2f655440c315",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bb5415-a5a7-404f-afd3-1341cb1f7b31",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "76b44bbe-d148-4448-a90a-fff7180dc5a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea010d02-2563-4d93-a2c4-685feaa4002e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19331217-d3c6-4bbe-b4ff-bf08180cc969"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e37d698-04e9-4a64-9b70-cc66fe507a7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb6afa7f-ddac-4a1c-b8f2-db865a55425c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5e40976-345a-4ed2-a2c1-d290118cbb3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92ce1898-9b47-469f-b336-f8115de8954f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11a7188a-cca1-4892-b2e4-9a1aa8959105",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e658b820-751b-447a-8733-f8c3891b4d0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d7ce779-f22e-41e4-ae80-93e414aff1e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c6f171e-4ab2-44d5-a6e6-f6381c506458"
            }
          }
        ]
      },
      {
        "id": "e30b192d-3644-4987-9e25-4942edbac2b5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a807dccb-6a08-49c9-8a20-334da66789d4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1d7ed6f-856f-4455-b583-a03f762e4f2e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6e1d7bc7-4237-44d1-8ccb-e68245813d7c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94ceafe9-a10e-4089-9203-c28aafcd1b09",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bfe021dc-994a-45f6-84fd-98342ca92567",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 432
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 452.3076632577625,
      "responseMin": 21,
      "responseMax": 7310,
      "responseSd": 1258.2903783315567,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673483990489,
      "completed": 1673484181570
    },
    "executions": [
      {
        "id": "764e4bcd-be59-4177-8f7d-12f79d7ca4ad",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "75cb70c8-849b-4355-a344-d4a694d52fc3",
          "httpRequestId": "23d6afb3-1bb2-48fa-9e24-dffce8c30315"
        },
        "item": {
          "id": "764e4bcd-be59-4177-8f7d-12f79d7ca4ad",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1250019a-65d9-4af8-b6ca-4e131692a9b8",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 0
        }
      },
      {
        "id": "c0a30892-b544-49b8-83fb-e89ecdec60c7",
        "cursor": {
          "ref": "6b2f5663-a667-4f6b-a8f7-72472f2ecd1f",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f91f948c-6f07-4d65-b66c-b666b8624bff"
        },
        "item": {
          "id": "c0a30892-b544-49b8-83fb-e89ecdec60c7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5b2e7138-4bd7-4fd7-bbac-e99dec797a72",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "568955f5-265f-4108-a0a8-6ef8c905b8ef",
        "cursor": {
          "ref": "60812885-e3bd-4f75-9629-05c23c8b5ee5",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2cead1d4-a6f6-4d1e-bb3b-1423f2bc0ea5"
        },
        "item": {
          "id": "568955f5-265f-4108-a0a8-6ef8c905b8ef",
          "name": "did_json"
        },
        "response": {
          "id": "e4799db3-f3d2-4259-a27c-13938d1d0dfd",
          "status": "OK",
          "code": 200,
          "responseTime": 311,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a7d14e-ce3f-47cb-bc03-774655e337e7",
        "cursor": {
          "ref": "51439034-51cf-4bff-b81f-ff34e1778b8d",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c41d31cf-d09e-419e-acb2-77c6863e2b9c"
        },
        "item": {
          "id": "14a7d14e-ce3f-47cb-bc03-774655e337e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "47a4d3a4-30e7-4909-b048-8fb06b6a5026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a7d14e-ce3f-47cb-bc03-774655e337e7",
        "cursor": {
          "ref": "51439034-51cf-4bff-b81f-ff34e1778b8d",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c41d31cf-d09e-419e-acb2-77c6863e2b9c"
        },
        "item": {
          "id": "14a7d14e-ce3f-47cb-bc03-774655e337e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "47a4d3a4-30e7-4909-b048-8fb06b6a5026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb247651-ce18-4e91-bc6d-03fa99312f27",
        "cursor": {
          "ref": "81803158-8e82-401a-91f2-2598a178e6bc",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2614c618-4b30-425f-afd1-0868eb3309e9"
        },
        "item": {
          "id": "bb247651-ce18-4e91-bc6d-03fa99312f27",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bfbe70aa-b770-4141-897c-db52fc6735ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 353,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe210cee-b1f4-4157-8959-e8cf40c850d5",
        "cursor": {
          "ref": "96075d8c-319b-4a56-b037-d6828697509d",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0f800ce2-d8f0-4ad4-82b7-17bd2358a6ef"
        },
        "item": {
          "id": "fe210cee-b1f4-4157-8959-e8cf40c850d5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "97a79e27-eb9e-4a9b-8222-87bcaa2b8544",
          "status": "Not Found",
          "code": 404,
          "responseTime": 81,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b732644-81a0-4711-91de-7f5ff86013c9",
        "cursor": {
          "ref": "b5ce21ee-d502-4a57-b883-e1c7c3a2418b",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2bd59c72-6c6b-43b4-955c-b7bbeabb8a46"
        },
        "item": {
          "id": "0b732644-81a0-4711-91de-7f5ff86013c9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f601ecbc-29eb-47e1-a35e-e29bc379fe60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c127687e-d6e4-470b-b482-841694c72de2",
        "cursor": {
          "ref": "ebb22556-0817-41e9-b669-0d5ed181328d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c25d4192-7a3b-42f1-b9a9-5d6a5a4fb97a"
        },
        "item": {
          "id": "c127687e-d6e4-470b-b482-841694c72de2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "49d05f18-9a6f-43e1-8809-a8ab1e1b7db2",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c127687e-d6e4-470b-b482-841694c72de2",
        "cursor": {
          "ref": "ebb22556-0817-41e9-b669-0d5ed181328d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c25d4192-7a3b-42f1-b9a9-5d6a5a4fb97a"
        },
        "item": {
          "id": "c127687e-d6e4-470b-b482-841694c72de2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "49d05f18-9a6f-43e1-8809-a8ab1e1b7db2",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e2d6e230-f293-4015-9fd0-dab7346a9bc8",
        "cursor": {
          "ref": "0421da1a-5422-484e-89dd-782679ede8cc",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7ec304ae-7f02-48e3-bdbc-2a9b9cfb49e6"
        },
        "item": {
          "id": "e2d6e230-f293-4015-9fd0-dab7346a9bc8",
          "name": "identifiers"
        },
        "response": {
          "id": "c73bc792-32f3-4dc4-a193-5eadd57eb25a",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc416c80-e01a-47d7-b35c-0a0c02f37ea3",
        "cursor": {
          "ref": "4014b928-03d6-4106-bdbb-0e582be6c8c1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "28ae65d3-641f-447d-961a-da2ac6deddae"
        },
        "item": {
          "id": "fc416c80-e01a-47d7-b35c-0a0c02f37ea3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cc37e310-e995-4183-8cbd-99d34e639e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "fc416c80-e01a-47d7-b35c-0a0c02f37ea3",
        "cursor": {
          "ref": "4014b928-03d6-4106-bdbb-0e582be6c8c1",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "28ae65d3-641f-447d-961a-da2ac6deddae"
        },
        "item": {
          "id": "fc416c80-e01a-47d7-b35c-0a0c02f37ea3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cc37e310-e995-4183-8cbd-99d34e639e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c998dab5-0889-403d-b776-6d6b85ea3010",
        "cursor": {
          "ref": "7cd8dc9f-10c5-4256-abb8-f17695379955",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e4a7b98c-fa5a-46c0-b518-a92c96ed48e5"
        },
        "item": {
          "id": "c998dab5-0889-403d-b776-6d6b85ea3010",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6fb796ab-8aee-4a74-866b-c4bb4963a2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "51920c90-97b9-4ce4-929f-9904d636416e",
        "cursor": {
          "ref": "5da366eb-1ba7-4f99-a1ea-e5a0a4d4bbde",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d84bc0a8-8a2d-4fdc-bade-09ab22d2ab79"
        },
        "item": {
          "id": "51920c90-97b9-4ce4-929f-9904d636416e",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "e1767ae5-9a23-4971-8bf7-b4b9fede7872",
          "status": "Created",
          "code": 201,
          "responseTime": 195,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "ccd69938-cd1f-4a3d-989a-630995ba1ddc",
        "cursor": {
          "ref": "8a50fd03-3c60-4012-b24d-540675c53b76",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a1753526-b785-43b3-bb08-07cfd6f8575f"
        },
        "item": {
          "id": "ccd69938-cd1f-4a3d-989a-630995ba1ddc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b8b8c401-b5f1-4cda-86ec-e6720e427976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "668b99d5-be07-4fcf-af47-1d995ba3bd6f",
        "cursor": {
          "ref": "3bcb4eb6-15d6-4f54-a9e6-5a2309e291ce",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "16f7fc68-e6ef-4150-a169-a6b0c93effb9"
        },
        "item": {
          "id": "668b99d5-be07-4fcf-af47-1d995ba3bd6f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bad118cc-8c19-48b2-b8ae-9ecab4d6a3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2ca55f19-1f2f-42f8-a0dd-d83bad6c3850",
        "cursor": {
          "ref": "4dfab52d-dc55-4795-8bbe-ee6cde80dc8c",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a23b83ce-3e00-4fe3-a9d3-06f1caf77c04"
        },
        "item": {
          "id": "2ca55f19-1f2f-42f8-a0dd-d83bad6c3850",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b03d5111-6fdb-4224-a033-bc66979cb0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "382c9bc7-9959-402a-bece-714372b06015",
        "cursor": {
          "ref": "4107988b-8114-4d85-8a8b-8b48b4d1673b",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "54fb4f1f-b0c7-49c8-bb71-1412ceae88f4"
        },
        "item": {
          "id": "382c9bc7-9959-402a-bece-714372b06015",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "683f715f-1cdd-4ca3-87ba-ed0cc207abf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "83afc3f3-36ba-4eb9-9ba9-4f49703db68c",
        "cursor": {
          "ref": "bc8075a5-0ad7-4878-b66c-8e773284aca8",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d24d4a64-be9c-43b0-a217-b53e47973425"
        },
        "item": {
          "id": "83afc3f3-36ba-4eb9-9ba9-4f49703db68c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d0f74f1d-fad3-4494-8fc8-931ee7b7ece8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "4fa5ebcb-4b1f-4e42-954f-29846e7f0dcd",
        "cursor": {
          "ref": "a29fd706-58dd-4383-97ed-0e1ff6181383",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3b6a80b3-c9dc-4184-a49b-bcf39fbee0f9"
        },
        "item": {
          "id": "4fa5ebcb-4b1f-4e42-954f-29846e7f0dcd",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5c925a04-096d-4a1d-8a87-1a59b20ebc20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "af377762-dbd2-49cd-bb7e-5c92436da402",
        "cursor": {
          "ref": "fbfd072d-3a9e-4386-a9ba-bcfa82a111e0",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8e1d8fc8-52eb-49dc-a45d-51c6a9c05654"
        },
        "item": {
          "id": "af377762-dbd2-49cd-bb7e-5c92436da402",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "27866422-833e-4ccf-b831-aa78467dc4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "52707ed8-a09a-49c4-b03c-5e1bfb360cd9",
        "cursor": {
          "ref": "1d9ccfeb-ad7b-4b8f-a09f-808053c67d26",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "beaa9ee3-3cda-4a7c-8877-49334c0c1e3f"
        },
        "item": {
          "id": "52707ed8-a09a-49c4-b03c-5e1bfb360cd9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "57388348-b9d0-4622-bc2b-67104a23b8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5fa233be-85c2-404b-a95e-53a26868b544",
        "cursor": {
          "ref": "8406e365-77eb-4502-9ace-2e9243308021",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "27c54f05-2f72-4f05-82cf-ba16d2fe9aaf"
        },
        "item": {
          "id": "5fa233be-85c2-404b-a95e-53a26868b544",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "eb76991b-80bf-4370-9e9d-462f4f53d6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1af9df9e-1f40-41df-9d5e-6a0672709e37",
        "cursor": {
          "ref": "50641b29-b63d-42bf-855e-2b759b97d1f0",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2f106734-63c8-44b2-9883-58513b6e1f9e"
        },
        "item": {
          "id": "1af9df9e-1f40-41df-9d5e-6a0672709e37",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3029b997-72e5-4161-b893-d446ccf5738b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "23ca8cba-8591-4bb7-a097-ef60709a81c7",
        "cursor": {
          "ref": "ca15d5d5-0f9f-44e6-a575-2c7deccabfc9",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e7a57350-3739-4a1d-89f2-44886bb81265"
        },
        "item": {
          "id": "23ca8cba-8591-4bb7-a097-ef60709a81c7",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "2b794ba9-8206-4d5a-98b3-83b06c0c2e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b1f6fef7-8a79-4ce2-b532-58deb32203fb",
        "cursor": {
          "ref": "c84461ca-a6ca-4d4b-a023-b7ad8cdcd7a2",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eabadbc9-ab96-438e-bada-46ea8f19bbdf"
        },
        "item": {
          "id": "b1f6fef7-8a79-4ce2-b532-58deb32203fb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "344702f3-874d-46e1-9256-c699fc6c8803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "6c1dbd51-142c-42f7-94fa-427cb1b9dd1c",
        "cursor": {
          "ref": "8043e620-8441-49fe-934c-d935ff09a9ea",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ba5576f5-5bbb-41c1-bcc6-2ec7bdeea57a"
        },
        "item": {
          "id": "6c1dbd51-142c-42f7-94fa-427cb1b9dd1c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0130ec1d-e3bb-4bbb-a89d-a7ead10e3c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4121b040-f0df-4fa0-bd1c-8eaca67478ad",
        "cursor": {
          "ref": "ddd63dc3-c9a6-4f4a-82a8-2c70accd5594",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f28554f8-594d-4d02-8742-d4d893a01edd"
        },
        "item": {
          "id": "4121b040-f0df-4fa0-bd1c-8eaca67478ad",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f139dd74-d0db-4db1-b599-fd362dd64d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "969e090b-2ef2-4da4-9859-3ff2c1bf5754",
        "cursor": {
          "ref": "3fc607c4-75b5-4754-af95-b61e68944f6f",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8d4f551b-805b-4533-aed6-6bebbe0cebdd"
        },
        "item": {
          "id": "969e090b-2ef2-4da4-9859-3ff2c1bf5754",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "bf44c876-c3d2-42ec-a5cb-cf6723f00a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "75bdb649-e01c-427a-818a-af95a9a267fd",
        "cursor": {
          "ref": "ddda32cb-c2af-49a2-896f-8ec58fd14cfb",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9d264216-0be7-42b3-b935-e9f6afe702b2"
        },
        "item": {
          "id": "75bdb649-e01c-427a-818a-af95a9a267fd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6d586ab0-8068-4591-b850-fb8e7504567d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "225b8f46-38e6-43a8-a74c-110f2d97af83",
        "cursor": {
          "ref": "eed53045-18d6-492c-bf01-bc5f44550b33",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7f701802-9436-4e2d-b7a6-1238c0df7526"
        },
        "item": {
          "id": "225b8f46-38e6-43a8-a74c-110f2d97af83",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "94dfce56-f949-401d-9319-a65e9a760616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "1391802d-aaad-49c1-956e-96649b26de98",
        "cursor": {
          "ref": "3a430c7c-983d-42aa-8a3b-e06dfda495f6",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e05a8b22-90a5-4b5e-bb3d-8dc2b9d23c09"
        },
        "item": {
          "id": "1391802d-aaad-49c1-956e-96649b26de98",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "286d08fc-1026-4e51-be30-f0e4b8c4e6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "ac00bfe9-b040-436b-b042-a8c4d0e64d3f",
        "cursor": {
          "ref": "79f03f75-1869-4fd4-8ecc-ad3cf87cd8cd",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "81fd9f3b-3277-47d8-ad07-93af7c417d94"
        },
        "item": {
          "id": "ac00bfe9-b040-436b-b042-a8c4d0e64d3f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ba6f3d38-86fe-4a21-88ae-829881d8502e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9db9b649-5075-42aa-852e-d90d2e1b9ddb",
        "cursor": {
          "ref": "3ce5ba78-b470-4a04-b23c-e46308cd1898",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ece7b43d-2de8-4db5-94c4-114484797be0"
        },
        "item": {
          "id": "9db9b649-5075-42aa-852e-d90d2e1b9ddb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9f17b84a-f1c6-4ffa-b6c2-3d4df6ba8ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "188997ff-a4ee-40b6-b840-ed00c3eb0425",
        "cursor": {
          "ref": "40938556-3976-4af5-b9db-a4b7c6949408",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f8ebdfed-4da9-44c1-a2c2-93b2a1e3c985"
        },
        "item": {
          "id": "188997ff-a4ee-40b6-b840-ed00c3eb0425",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f3fb00fa-caed-427f-8f2f-6268814751f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a0175fd6-604d-488f-b280-75f1f8189a0b",
        "cursor": {
          "ref": "b12a06a3-f508-4dc3-bf68-b7348303c8a2",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "09ed2807-a30f-46c4-b8b8-1e280d8651a9"
        },
        "item": {
          "id": "a0175fd6-604d-488f-b280-75f1f8189a0b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c9e0fbef-03d4-4468-bc5d-f73afda74c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "c987df0e-ba63-4c75-b764-38e384b5383b",
        "cursor": {
          "ref": "0080cfd7-999b-41f2-9f60-4d9ae7207b87",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1af538d9-3792-41dc-8ccf-805fa7ccec0a"
        },
        "item": {
          "id": "c987df0e-ba63-4c75-b764-38e384b5383b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f4dc9099-7fad-4856-82dd-bc8aa5560e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "77f6db6a-8fbd-4f90-b45e-5f5ecc0a2c2b",
        "cursor": {
          "ref": "a322acc5-0fd0-430c-98f1-6c6489526310",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2977dc31-3e35-42cc-96b0-9a38808579b0"
        },
        "item": {
          "id": "77f6db6a-8fbd-4f90-b45e-5f5ecc0a2c2b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8378740b-5d87-4d3b-a135-d2e06b86e18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4542,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "0d296f38-9fd0-4cae-a900-c5335458932f",
        "cursor": {
          "ref": "e709a455-4358-40e2-a352-2f57bb3527b2",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eb095626-29e2-4192-9fa1-4a40e513485e"
        },
        "item": {
          "id": "0d296f38-9fd0-4cae-a900-c5335458932f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c346ea0e-59b0-4449-b094-226f03993ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6346,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "5621e593-e89b-4729-adf3-2a99dbcf5709",
        "cursor": {
          "ref": "cb165037-0dd1-4f00-8b77-2b75124bcd74",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5872dfbe-956a-4fc2-a140-9b1232b07089"
        },
        "item": {
          "id": "5621e593-e89b-4729-adf3-2a99dbcf5709",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a73867f3-9634-4f81-adbb-c869641b3800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4065,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b7191887-d940-4d62-9a58-689743f000be",
        "cursor": {
          "ref": "744cff2d-1f65-4092-896a-6846323d1066",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "04e4a157-b19c-4e98-9d4e-4c69c52c874c"
        },
        "item": {
          "id": "b7191887-d940-4d62-9a58-689743f000be",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e20f8090-fa03-4b80-8cc9-77d26c7830c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4038,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "70588947-2ca0-416c-9af5-bcda08c609f7",
        "cursor": {
          "ref": "1a7e9f7e-fa71-4346-aa67-ecd9be16bed6",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "df7da7cf-0ba1-4780-a9af-3a94cb7d0093"
        },
        "item": {
          "id": "70588947-2ca0-416c-9af5-bcda08c609f7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "66d60177-f8dd-4cf7-a47d-7966da8c93fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3861,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "44ba3c5a-7320-458e-81f3-724d58ce1a44",
        "cursor": {
          "ref": "3bc01a33-1239-4e7d-a2e0-0ce5e0e37332",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "54218959-242a-495b-8350-e1543a090cc4"
        },
        "item": {
          "id": "44ba3c5a-7320-458e-81f3-724d58ce1a44",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a48c2914-8faa-4863-88bf-d405fe4ba08f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d306dfcf-c0bc-4a89-a301-4788a3bef790",
        "cursor": {
          "ref": "e1b4af38-e103-4b52-bf60-743eaeb51d6e",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f0db4e23-53a9-4de2-85cd-4566ed516363"
        },
        "item": {
          "id": "d306dfcf-c0bc-4a89-a301-4788a3bef790",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c1c6b9d6-dd98-414a-863d-2e621bc951e6",
          "status": "Created",
          "code": 201,
          "responseTime": 3568,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "78657961-97c9-43c9-a29b-5935c53875d9",
        "cursor": {
          "ref": "379f808a-1ecd-4ab8-9d80-aec6f00877b8",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "374c3492-470c-4921-a837-9b5557d0fa15"
        },
        "item": {
          "id": "78657961-97c9-43c9-a29b-5935c53875d9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ba93db1a-acb5-4a4a-a126-7985c8e834d1",
          "status": "Created",
          "code": 201,
          "responseTime": 5397,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "55e29660-e0e6-44d2-ac89-8d77c1feefb6",
        "cursor": {
          "ref": "d09f7b86-4e26-473c-b4e3-1d1eea3091e1",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "70353fb2-a607-486c-b417-0e3fa7a0a115"
        },
        "item": {
          "id": "55e29660-e0e6-44d2-ac89-8d77c1feefb6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e77bc5c2-f4e4-46cd-95c8-1ccac1abefb0",
          "status": "Created",
          "code": 201,
          "responseTime": 3903,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6f012807-59f6-42f3-855e-dab745cb8ee0",
        "cursor": {
          "ref": "10fef18a-1abf-4256-bc42-7e605a59c4d0",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cf8ad935-a2e5-4008-9f06-7b40515aa4c8"
        },
        "item": {
          "id": "6f012807-59f6-42f3-855e-dab745cb8ee0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5a520b4e-bcb5-4a73-9a40-c89b486ece1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d1677aa6-1feb-4ef5-9e30-71580b9fcdba",
        "cursor": {
          "ref": "46af3956-6a4c-456a-8571-75e0aaadb67f",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dc9d7a0a-80a0-4c12-ab69-f2d6e9d40e10"
        },
        "item": {
          "id": "d1677aa6-1feb-4ef5-9e30-71580b9fcdba",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "af8d08b4-77e1-4bd0-b4ab-b8130b083006",
          "status": "Created",
          "code": 201,
          "responseTime": 3799,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8ecc4733-0ed2-4e8a-9de7-c197a58aeb68",
        "cursor": {
          "ref": "500894ea-a111-4040-8872-5cf19cea1370",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0301a058-6331-47b7-88f3-7ae6870a57d5"
        },
        "item": {
          "id": "8ecc4733-0ed2-4e8a-9de7-c197a58aeb68",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "42a83231-2e23-4381-b03e-813d18215495",
          "status": "Created",
          "code": 201,
          "responseTime": 4052,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3b785f4c-ee71-4370-bddc-6f9b6459c6a5",
        "cursor": {
          "ref": "76473999-d143-424b-81c1-bcd804752d28",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c260f1a8-5002-4fbb-a71b-4a555af7985e"
        },
        "item": {
          "id": "3b785f4c-ee71-4370-bddc-6f9b6459c6a5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "675b1f96-880d-4aa3-bc7f-aff1697f8f0a",
          "status": "Created",
          "code": 201,
          "responseTime": 3734,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b20375e3-3b26-4806-98ad-585df229a049",
        "cursor": {
          "ref": "1ac1d4d7-0cd5-428f-970c-3e667adba025",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4e7f0df5-85ad-4dac-bb54-84ed17316d52"
        },
        "item": {
          "id": "b20375e3-3b26-4806-98ad-585df229a049",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e84eec2f-ba66-4133-9afd-86fbae280ad7",
          "status": "Created",
          "code": 201,
          "responseTime": 4318,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "01bc1fa7-be63-4a30-8ae0-491998a68636",
        "cursor": {
          "ref": "0488a2d5-41eb-4e2f-b284-f64e80547d1a",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e0623fe8-887e-467b-a7c3-9a00deee84e8"
        },
        "item": {
          "id": "01bc1fa7-be63-4a30-8ae0-491998a68636",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0b9d908a-6ce9-49c6-afa4-7bf6500a40fa",
          "status": "Created",
          "code": 201,
          "responseTime": 5200,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a00e3eb3-ab5f-497d-a377-a42c41b77a2b",
        "cursor": {
          "ref": "28e13c5a-def1-427e-bcbf-f0ef605f633e",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8025dc3f-5882-4478-9fcf-d64f62907325"
        },
        "item": {
          "id": "a00e3eb3-ab5f-497d-a377-a42c41b77a2b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "088ce4ea-2983-4d38-b6d9-81dca6243f58",
          "status": "Created",
          "code": 201,
          "responseTime": 3821,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7c67c4be-ced2-4076-8c18-204f113b6607",
        "cursor": {
          "ref": "75ec7d16-de49-4653-ae54-69e40d88245b",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "066dac8f-7f93-4e6a-99b9-b8234890d3d9"
        },
        "item": {
          "id": "7c67c4be-ced2-4076-8c18-204f113b6607",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "218cf533-329f-4cff-ba86-0d7df4e8f7bd",
          "status": "Created",
          "code": 201,
          "responseTime": 3975,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4c3a7669-21a2-4e52-9a65-099d703f1ff6",
        "cursor": {
          "ref": "c51966da-1559-4f9a-accd-3d3308bdb9dd",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9423381a-4b24-4476-bfeb-49f36318fd89"
        },
        "item": {
          "id": "4c3a7669-21a2-4e52-9a65-099d703f1ff6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "619ee5b6-8875-4407-90af-fc9cabd54806",
          "status": "Created",
          "code": 201,
          "responseTime": 3836,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "73006af1-96c6-43cd-9585-078f87912e6d",
        "cursor": {
          "ref": "bd39f03b-3ecb-4f7b-937d-e482f6f4ef4f",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9092b54e-23a1-4055-b72c-82b0b841e3cd"
        },
        "item": {
          "id": "73006af1-96c6-43cd-9585-078f87912e6d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e0309ff5-d63a-40b7-8af4-4e412753e7cc",
          "status": "Created",
          "code": 201,
          "responseTime": 4045,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "0f72153a-e307-4479-9dea-e42765280e33",
        "cursor": {
          "ref": "9800daa0-bd0f-4961-8ef6-2af20aa8855e",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "68a61209-6af1-47db-b077-80699a6d7f38"
        },
        "item": {
          "id": "0f72153a-e307-4479-9dea-e42765280e33",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ef07d1ec-77f4-42c7-9fde-d5c6d61bc91a",
          "status": "Created",
          "code": 201,
          "responseTime": 5296,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "396f7c8f-7ab7-4220-94bd-1c6eb210b24e",
        "cursor": {
          "ref": "6bb096d5-e12b-4a20-8ded-f452cbe2d8cf",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "03d3358d-9aef-452c-ac3a-eb20414c5a8c"
        },
        "item": {
          "id": "396f7c8f-7ab7-4220-94bd-1c6eb210b24e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "644416e4-4196-4ca0-9555-ece42cb61ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 465,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "cf4c1c3d-6d2a-4a5d-a053-9b9ebd0d8043",
        "cursor": {
          "ref": "43fb7b8c-32ed-4671-b9ef-ca3258ec4579",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a55c90b2-4aee-40b3-b404-4155fafe9577"
        },
        "item": {
          "id": "cf4c1c3d-6d2a-4a5d-a053-9b9ebd0d8043",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cae185b3-600f-44aa-b840-cfec5b4d5721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "877011bb-fd87-4b81-907f-a1aca78d49d5",
        "cursor": {
          "ref": "bf438c40-b600-40c9-a536-4f7885bdc7ed",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6d8a1752-42c0-4c8a-89ce-412038253bfd"
        },
        "item": {
          "id": "877011bb-fd87-4b81-907f-a1aca78d49d5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3fd54391-14a3-4046-b810-606f6dab0bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "912d7bfa-d6cf-484f-8824-05ed7fd735d1",
        "cursor": {
          "ref": "048b5c48-e32a-42c5-99a4-bb0cb478c7e3",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "526cb379-ae18-4504-bfd1-3ed1654cee47"
        },
        "item": {
          "id": "912d7bfa-d6cf-484f-8824-05ed7fd735d1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2763b21e-3b80-4561-b4c1-d62cbe8f1f29",
          "status": "Created",
          "code": 201,
          "responseTime": 3920,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "df62bde4-9ec9-4dcc-b33c-83a3f94e6fe3",
        "cursor": {
          "ref": "ee167b1c-1e90-4833-b840-abb4126b297d",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1d6825d0-99ab-4d80-b860-aa50558870f9"
        },
        "item": {
          "id": "df62bde4-9ec9-4dcc-b33c-83a3f94e6fe3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "26832b5b-667f-49c3-be2f-641cb163e547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "baa59b18-29b8-4dc5-873b-045da19f1c8b",
        "cursor": {
          "ref": "c31b3ed2-d402-46fe-a0fe-ee3d8b5f5201",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1a5b0322-d1cb-4f21-9376-822b886eadf0"
        },
        "item": {
          "id": "baa59b18-29b8-4dc5-873b-045da19f1c8b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "32c262e3-4984-45f8-be2c-b26896f729b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "8e74b230-a850-4e2c-b96c-6dfed7ff154f",
        "cursor": {
          "ref": "c330cdfc-a521-454d-9c9f-ccca97e47c50",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c1ff1144-f5e8-4e41-8e97-eed90827cf11"
        },
        "item": {
          "id": "8e74b230-a850-4e2c-b96c-6dfed7ff154f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9d3b7f98-b445-4cfd-8e6f-58abaa96cc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "a5455cdf-ca62-4d3a-85ff-2727dae8597d",
        "cursor": {
          "ref": "186e9f4f-54be-4889-a5f7-e2bf46033694",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fac4319e-377a-4530-a741-973f30014635"
        },
        "item": {
          "id": "a5455cdf-ca62-4d3a-85ff-2727dae8597d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "211f3dbd-821c-4f5e-a11e-0845a4ccde39",
          "status": "Created",
          "code": 201,
          "responseTime": 3724,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "4d727139-7b21-4083-b848-5c01a4835569",
        "cursor": {
          "ref": "e98d3c89-885e-4bb3-8ab1-6be98912f042",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "265023bb-3214-47e0-84dd-477a01f165f9"
        },
        "item": {
          "id": "4d727139-7b21-4083-b848-5c01a4835569",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "22f02954-f80f-4ccd-8850-7e87e35406fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "d6ab65ec-048e-4ebf-a48b-a83caee23294",
        "cursor": {
          "ref": "164f2555-b7ee-4bb1-9055-a8dbe30d734b",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4778c4ef-6aa6-4b4d-85a2-bfe95f5d8490"
        },
        "item": {
          "id": "d6ab65ec-048e-4ebf-a48b-a83caee23294",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1a2f1bf0-2029-4978-ac9d-23817963eea3",
          "status": "Created",
          "code": 201,
          "responseTime": 4038,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9b826e7e-dc61-430d-9a2f-29282bcf7546",
        "cursor": {
          "ref": "0792c7c9-05f0-48f9-b969-1312b71e9dd8",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0f65d496-2820-4c47-8f0d-cb346dc2f028"
        },
        "item": {
          "id": "9b826e7e-dc61-430d-9a2f-29282bcf7546",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fe9a0d2a-7284-440e-b101-83cde357fcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a08c6e12-d8c9-4bbb-8c88-84a14dd6f3f7",
        "cursor": {
          "ref": "25be4acf-c128-43e4-9bef-58b496a1038d",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2aa3bd41-4e34-455e-a6c7-e14cea2fabe4"
        },
        "item": {
          "id": "a08c6e12-d8c9-4bbb-8c88-84a14dd6f3f7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fa2d7964-378a-4118-90e4-e2ecc61ab66a",
          "status": "Created",
          "code": 201,
          "responseTime": 3818,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a30c9bda-09a8-4ef3-90bc-3957bddc550b",
        "cursor": {
          "ref": "885e3640-5feb-477b-957e-37534670860f",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "703cf88b-e817-4a40-9d71-2f9c32baa357"
        },
        "item": {
          "id": "a30c9bda-09a8-4ef3-90bc-3957bddc550b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1d60bdf1-3e46-4fbf-b4f7-021709847bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3825,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b0d75e26-8e8f-4435-abc0-89f83bf0cbcf",
        "cursor": {
          "ref": "1ea744ad-c050-4058-b3e0-34629ab2df7f",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5be42f06-80b2-4498-8417-0ef9237a42d2"
        },
        "item": {
          "id": "b0d75e26-8e8f-4435-abc0-89f83bf0cbcf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9235c539-608c-48ce-bfaa-0990f83999ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4060,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0eca1244-6c1e-4a15-bb7d-b8026f8974fc",
        "cursor": {
          "ref": "a18501db-5ffc-4b93-9e11-18ce41663543",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b3f0da19-0df9-4270-ac39-b20b96eb10f7"
        },
        "item": {
          "id": "0eca1244-6c1e-4a15-bb7d-b8026f8974fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3ea3180c-b2a3-4b46-b844-d4bf8d356ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 746,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "08cf6352-f578-4dc8-8ced-1725d707b8ba",
        "cursor": {
          "ref": "92babd14-e77c-405f-94e9-b341b114058a",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "929aa973-91b8-420a-9250-55f7289ded76"
        },
        "item": {
          "id": "08cf6352-f578-4dc8-8ced-1725d707b8ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5f54c64a-34ec-4803-88c6-23c34efa5419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4754,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ba0a4344-09ae-4e10-af48-31f5d01b3cc7",
        "cursor": {
          "ref": "1a64b0da-a24d-4975-a9af-ffff82d7a0cf",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3eeede8c-4fb3-4139-bad4-365ee7b59706"
        },
        "item": {
          "id": "ba0a4344-09ae-4e10-af48-31f5d01b3cc7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b7bdfa5a-faf0-49fa-8632-da6fd0e0176a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "ddea4a62-ac98-424a-ab7d-75150708fe01",
        "cursor": {
          "ref": "bb8cbcaf-2771-4152-a42b-f65706a28f77",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6fabc668-64e2-48ce-b915-e323c6f66dff"
        },
        "item": {
          "id": "ddea4a62-ac98-424a-ab7d-75150708fe01",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bff36129-1232-4994-8766-841f23403e58",
          "status": "Created",
          "code": 201,
          "responseTime": 5263,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "2fa88622-af16-4601-b99b-08594dba0bd1",
        "cursor": {
          "ref": "9218b065-825f-4d3d-b093-1aeda9491814",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5b238585-6eac-4c2e-a700-dc15796f3aaf"
        },
        "item": {
          "id": "2fa88622-af16-4601-b99b-08594dba0bd1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fc11bb49-5d1f-4a1c-9971-89d888e996f8",
          "status": "Created",
          "code": 201,
          "responseTime": 5131,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "97395092-af60-4172-a0d8-717df35dd916",
        "cursor": {
          "ref": "45a67971-69b4-4a02-9e93-df7649ec50e4",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6437a870-54f4-4eb1-b427-9e82e69e8e73"
        },
        "item": {
          "id": "97395092-af60-4172-a0d8-717df35dd916",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "20b13370-75bb-4cec-b50d-298b5d65d2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "e31ac399-6e46-4ee4-94ab-2f2ce10cc7e3",
        "cursor": {
          "ref": "ddaa4c01-f35e-4fe7-a88d-9a8b538c2047",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bc44bf2c-10fd-4e4c-b695-653c11d6253c"
        },
        "item": {
          "id": "e31ac399-6e46-4ee4-94ab-2f2ce10cc7e3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2e775595-e2c5-4e8f-a3b5-a668d2a98b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "283a2643-613c-49b4-9f81-f426ba69798a",
        "cursor": {
          "ref": "4739715e-a4fa-4d38-882e-c7ded034182e",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "45c59b01-2a85-4d65-bd27-b8a915e4939c"
        },
        "item": {
          "id": "283a2643-613c-49b4-9f81-f426ba69798a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0e92f05f-6952-4b2c-8258-ea2e1892b3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "01d8edb6-0bb8-4993-abaa-05550ab0b845",
        "cursor": {
          "ref": "84123a7f-cdd7-4574-aa8c-4a8054b4ba56",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0c7965ec-4658-46e6-82ee-2a77ff74427d"
        },
        "item": {
          "id": "01d8edb6-0bb8-4993-abaa-05550ab0b845",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "036f3eec-7f8a-43af-b9e4-8c9ee2bf118e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "c9fc89d7-8fe5-4e15-b5cc-82e29ba613f7",
        "cursor": {
          "ref": "c4645385-d96e-400b-9dcc-a48daf8d4e67",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f5073a0e-3dac-4ee8-9bcc-e9c5358a6899"
        },
        "item": {
          "id": "c9fc89d7-8fe5-4e15-b5cc-82e29ba613f7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d64a6c1a-e88f-4d1a-921c-4e12d2886b1f",
          "status": "Created",
          "code": 201,
          "responseTime": 4216,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "914d2c97-3c44-4bb0-96e7-da3a0044e01b",
        "cursor": {
          "ref": "b3ef486f-2075-449e-a313-ec4228092f6f",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2ac9a1a8-285b-499d-bcee-36a53b82fa13"
        },
        "item": {
          "id": "914d2c97-3c44-4bb0-96e7-da3a0044e01b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "94ccc8db-1cb3-4a4e-b4c6-bd9b1d0e5d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "3706f32d-e4d3-4238-93c5-15a71311ef01",
        "cursor": {
          "ref": "bb81aafd-4d19-46d1-945d-1b9fd9a17740",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c6bf0ebf-d99a-4d52-be10-c3cdf9a5d588"
        },
        "item": {
          "id": "3706f32d-e4d3-4238-93c5-15a71311ef01",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "28f4b17d-9c78-4c9f-8533-57f8cd234aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "c6b7ceac-7e31-4f7d-894f-a32925e52906",
        "cursor": {
          "ref": "ece4345d-0068-4ad2-a9a2-af5f7848f2af",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "85393e50-872d-485d-b8a6-04f345cddbbe"
        },
        "item": {
          "id": "c6b7ceac-7e31-4f7d-894f-a32925e52906",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9da30f27-0f9b-48a8-82b4-fc488cd47694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "932380da-64d5-41d3-b9ef-2702243fa7b1",
        "cursor": {
          "ref": "9115e180-4d93-45c2-a2ac-9b3b5c4d0d9d",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "246305a7-bbf5-43ee-b1af-2a3b2221071f"
        },
        "item": {
          "id": "932380da-64d5-41d3-b9ef-2702243fa7b1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ffc2e391-f9db-4613-b308-746a17acea90",
          "status": "Created",
          "code": 201,
          "responseTime": 4762,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "3061a77d-ffbd-410d-a822-20c5f7210d1e",
        "cursor": {
          "ref": "3c68f0d3-5dfe-41f5-a91b-984a8d66e9e5",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "26751f31-17ec-49e9-8f3d-6be14d1c9c16"
        },
        "item": {
          "id": "3061a77d-ffbd-410d-a822-20c5f7210d1e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "86d8105d-adee-4c31-bc89-58dbfc81d03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "22323814-ea57-44ed-9751-592c9d25c937",
        "cursor": {
          "ref": "0c4a53d9-d933-4283-9e29-a7cf5474f034",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "12aae269-ba20-464e-8fb4-8cd7e6254bb0"
        },
        "item": {
          "id": "22323814-ea57-44ed-9751-592c9d25c937",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "52cf1c32-e536-4b15-8abe-390cad598897",
          "status": "Created",
          "code": 201,
          "responseTime": 4151,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "6c3483b5-5c36-438d-bc45-cb5053c92053",
        "cursor": {
          "ref": "64b7baec-ef9b-44a5-a347-3cbd767517cc",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cfa3c518-fbba-4584-91de-c76e71920abb"
        },
        "item": {
          "id": "6c3483b5-5c36-438d-bc45-cb5053c92053",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "30ede7f6-19ee-4c9b-b418-4207b7b1e296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "973383a0-7707-47df-b50e-a999c0e5e1f1",
        "cursor": {
          "ref": "66b4772a-d58a-43ef-bfbc-75f978100473",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bbcffada-4148-4f60-90ef-097ab89fea5d"
        },
        "item": {
          "id": "973383a0-7707-47df-b50e-a999c0e5e1f1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ac1fa5f5-1fa7-4c91-a8ad-fe2be12f6e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a067fd22-58d1-403a-996e-8974aa9850cd",
        "cursor": {
          "ref": "bd65a72c-c097-47e0-b02f-1dadb187e0ea",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a4b91375-2a14-40f2-8509-6bc213c9a777"
        },
        "item": {
          "id": "a067fd22-58d1-403a-996e-8974aa9850cd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3092fddf-d1d8-44d4-9c65-2ca8f2bc75ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "5c67fcac-fa84-4fad-9ced-b0ad583492cc",
        "cursor": {
          "ref": "d2c0357f-f3bd-4758-8c95-3a2b7bcaf73d",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "36fcba2d-a43b-4983-9fb8-6659ec20b98e"
        },
        "item": {
          "id": "5c67fcac-fa84-4fad-9ced-b0ad583492cc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0f153b84-a2c2-46dd-a93a-7609a16ac649",
          "status": "Created",
          "code": 201,
          "responseTime": 6350,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "94e57f78-5fb4-472a-9c0a-8ff1588d69e0",
        "cursor": {
          "ref": "279d5cf7-f141-4191-994e-b2c86dc628f7",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f7d03145-48f6-4f93-9df2-183383d99e9b"
        },
        "item": {
          "id": "94e57f78-5fb4-472a-9c0a-8ff1588d69e0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b6b52ea1-7002-4463-96d5-dd1bf255acc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 549,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "4800b174-5531-40f1-aa02-4186c3be14a8",
        "cursor": {
          "ref": "0363500d-4f40-418b-b7a5-12cc5cb2215a",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "743b77a4-947d-48ff-abb6-794e89fbf380"
        },
        "item": {
          "id": "4800b174-5531-40f1-aa02-4186c3be14a8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a14e53f1-c9b3-4ab0-ac86-7cee2bd36a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "67474da4-5fc2-4f25-9f47-f25976181f2e",
        "cursor": {
          "ref": "7f9f4354-5d0c-4322-bf35-68a3384118e4",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f231831c-d215-4135-bfcf-d941fe8502ba"
        },
        "item": {
          "id": "67474da4-5fc2-4f25-9f47-f25976181f2e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4c22acb4-7fc0-4f4b-a503-97e38cb49084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "fff409a2-e362-41e0-8cce-e92beb461aa4",
        "cursor": {
          "ref": "26bf454e-4516-494c-8f06-e679524940c1",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2f52d3c4-5b7a-48ed-b0fe-713133046939"
        },
        "item": {
          "id": "fff409a2-e362-41e0-8cce-e92beb461aa4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f3e15c48-866e-462a-a4cd-9b3d206a3150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "ae84f059-42f7-4b37-bafa-b1825aea5023",
        "cursor": {
          "ref": "947e525e-090c-47f2-8f6d-5ae5ea76e8e5",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8a1e385a-e431-4e80-bf0c-0e6667b24914"
        },
        "item": {
          "id": "ae84f059-42f7-4b37-bafa-b1825aea5023",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e313f6fc-b156-4f4c-b1bd-3acf79dc565d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "e1ddded1-0cd1-4816-b255-f37449124f7e",
        "cursor": {
          "ref": "6169c931-a7a1-40f6-9259-0ed4c2cbe354",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cc14036a-1b56-45c0-93c3-2a9d5a3e3d39"
        },
        "item": {
          "id": "e1ddded1-0cd1-4816-b255-f37449124f7e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bd72d692-24d8-4160-b8a6-4cac276e0166",
          "status": "Created",
          "code": 201,
          "responseTime": 4511,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "1db0be5e-7a9b-41e2-bd71-1f0e27119071",
        "cursor": {
          "ref": "1595b626-307d-41af-8875-6d98db1e9751",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "90a2077f-5fd5-4df4-8375-b1587c6f8602"
        },
        "item": {
          "id": "1db0be5e-7a9b-41e2-bd71-1f0e27119071",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3cb0b405-be8d-49bb-b5f5-0c75dacfa44f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "229a2af8-e23e-4607-a530-165dce734bd5",
        "cursor": {
          "ref": "53bcfa4e-fb08-44d0-8297-15586f6875e6",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3cb68d11-dc2d-4766-9ffd-b076dc4ce85e"
        },
        "item": {
          "id": "229a2af8-e23e-4607-a530-165dce734bd5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "33cb19ef-dbdf-4111-a410-ffd89a765fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "aac8562a-03d1-4e3e-87cd-bdbebb3b6695",
        "cursor": {
          "ref": "fd286714-0602-4684-adae-f6f39fed3632",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ff464f32-df44-485e-afec-4ed096b60e79"
        },
        "item": {
          "id": "aac8562a-03d1-4e3e-87cd-bdbebb3b6695",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b5ffe883-9ebe-4383-8bd4-3f0029c87797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "cab4a4f6-965d-4507-a9ff-ccbb6a84f44d",
        "cursor": {
          "ref": "5868def7-c388-4147-a32d-c7a2bc2e84e0",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "51d51180-38ef-4a16-8985-65b8182d8a03"
        },
        "item": {
          "id": "cab4a4f6-965d-4507-a9ff-ccbb6a84f44d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1dff870e-39ce-458b-b864-73fc42ca9cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "426e8c4b-cb94-4eb1-ba01-caf47068c49d",
        "cursor": {
          "ref": "20adb1e8-7bb3-4928-9def-af5016097f74",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "458f1a2d-3421-4af8-b184-7eb23615c07c"
        },
        "item": {
          "id": "426e8c4b-cb94-4eb1-ba01-caf47068c49d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "04353db2-8add-4912-ac63-9528842acb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "8a1706ba-baf2-46a6-81c6-d4c1fa17168b",
        "cursor": {
          "ref": "80e28593-373a-411d-b669-fb2b7351be85",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7fe525c8-6da4-4a02-a4c3-6917f65b7965"
        },
        "item": {
          "id": "8a1706ba-baf2-46a6-81c6-d4c1fa17168b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c7cb4b40-1b68-44b0-b46a-847172da6bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "3984b71b-463b-489f-845b-87ea5e1012c3",
        "cursor": {
          "ref": "2797ca4f-d2f1-41a0-991b-3611f261e2c7",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "11ae5ea6-e4e5-45f7-8760-142d72d2ee77"
        },
        "item": {
          "id": "3984b71b-463b-489f-845b-87ea5e1012c3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "90363cf9-e28b-4e9d-b187-2a543a6ee192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "bd822f7a-120d-4ea0-b44e-fe63a4a51fd8",
        "cursor": {
          "ref": "f15b1120-a8c2-4ff0-9dd5-7b20a3ea1dce",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8a9c542a-de6f-4a06-b24c-560549f3fbde"
        },
        "item": {
          "id": "bd822f7a-120d-4ea0-b44e-fe63a4a51fd8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b36f0533-e69f-466f-ba28-4e8da1886377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4be913bc-11fb-494e-868b-5b930a30eca5",
        "cursor": {
          "ref": "c82b524a-6849-49dd-97ae-33c112a0ad51",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "96516acc-ed41-4863-ba84-5a80fc5d9391"
        },
        "item": {
          "id": "4be913bc-11fb-494e-868b-5b930a30eca5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "36fb6528-d59e-44c9-8217-044174608f62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26261a97-e28c-42a4-b526-f22e15c1c409",
        "cursor": {
          "ref": "56a6cbbd-8de4-4913-bec7-670d7e36e3d0",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f09065ab-d358-4218-a1cc-570ee67d0e9a"
        },
        "item": {
          "id": "26261a97-e28c-42a4-b526-f22e15c1c409",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "acdadcc0-1c4a-4e6d-af28-070dfc4fea74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "6938edbe-04c5-4a18-8b3a-a322fb590a78",
        "cursor": {
          "ref": "df9ec438-754f-467d-a37f-09d9f2029a09",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b2f7c16a-ee55-40ba-88ec-69f43cb10196"
        },
        "item": {
          "id": "6938edbe-04c5-4a18-8b3a-a322fb590a78",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6d08152e-b6cf-4827-be37-f29abb7f000a",
          "status": "Created",
          "code": 201,
          "responseTime": 7310,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "d13a16d9-2318-4f91-823b-7bf7a86df9a5",
        "cursor": {
          "ref": "9bcfdb13-2fd8-4816-a547-9ccafde475d7",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "88c2a4b8-9cbb-4d12-a6ec-612afcd42df0"
        },
        "item": {
          "id": "d13a16d9-2318-4f91-823b-7bf7a86df9a5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fc8ddd25-7363-4eb2-ba6a-52990f142a43",
          "status": "Created",
          "code": 201,
          "responseTime": 4383,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "9e4cbd13-c084-4220-b42a-b439d23786fa",
        "cursor": {
          "ref": "eb13dec1-70c3-45f6-82d9-f6745a570fd1",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4cf2bcf9-204b-4731-bb9e-9676ef38895f"
        },
        "item": {
          "id": "9e4cbd13-c084-4220-b42a-b439d23786fa",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4b4cca67-de27-45b4-8899-20880b036197",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 2176,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "7bd1859e-80eb-4d6a-a090-66d2433f39d7",
        "cursor": {
          "ref": "c2e8080c-c85b-4c86-9d25-4b307d7385c8",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f8c91ad8-605e-4d21-8ef2-30ceb64dc869"
        },
        "item": {
          "id": "7bd1859e-80eb-4d6a-a090-66d2433f39d7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "228e4125-5f88-41b2-9366-a8f5b5c36062",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "10bbff13-be98-48bb-9564-57659e4c9955",
        "cursor": {
          "ref": "5ea5f0c7-dfd7-41bb-8dea-0dd2c67af469",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "89d42c79-2a97-4fb5-80cc-d0b2b3b5eefd"
        },
        "item": {
          "id": "10bbff13-be98-48bb-9564-57659e4c9955",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7cd9b879-0d2c-4874-b9bd-64e20cd083c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "076a7315-25b3-478c-b224-eef80aeb5eee",
        "cursor": {
          "ref": "75189997-87f2-4130-b69b-7fe0fc03431d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d76f028d-b9d4-4c09-aef9-17f96110108b"
        },
        "item": {
          "id": "076a7315-25b3-478c-b224-eef80aeb5eee",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c928070b-6d71-4db4-ab24-d1cb003b1d6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "076a7315-25b3-478c-b224-eef80aeb5eee",
        "cursor": {
          "ref": "75189997-87f2-4130-b69b-7fe0fc03431d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d76f028d-b9d4-4c09-aef9-17f96110108b"
        },
        "item": {
          "id": "076a7315-25b3-478c-b224-eef80aeb5eee",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c928070b-6d71-4db4-ab24-d1cb003b1d6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2ae55d6a-950f-4931-9df6-da67f1f0dc62",
        "cursor": {
          "ref": "3846cca7-673b-427e-894f-f6f9e9bbe5fd",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5efe698d-3b7e-48e8-a56b-75b08afc613c"
        },
        "item": {
          "id": "2ae55d6a-950f-4931-9df6-da67f1f0dc62",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2a9ac148-2823-4235-adc8-d58192823a47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "2ae55d6a-950f-4931-9df6-da67f1f0dc62",
        "cursor": {
          "ref": "3846cca7-673b-427e-894f-f6f9e9bbe5fd",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5efe698d-3b7e-48e8-a56b-75b08afc613c"
        },
        "item": {
          "id": "2ae55d6a-950f-4931-9df6-da67f1f0dc62",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2a9ac148-2823-4235-adc8-d58192823a47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "0a889d15-e92e-4c03-b431-568d726dbfd5",
        "cursor": {
          "ref": "4616a586-9449-40ff-8a25-19a672cd9c50",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8655558b-13db-4413-a730-424f858191b4"
        },
        "item": {
          "id": "0a889d15-e92e-4c03-b431-568d726dbfd5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "042ab8b7-c093-4d99-a2e7-c7a47d4d9f15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "0a889d15-e92e-4c03-b431-568d726dbfd5",
        "cursor": {
          "ref": "4616a586-9449-40ff-8a25-19a672cd9c50",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8655558b-13db-4413-a730-424f858191b4"
        },
        "item": {
          "id": "0a889d15-e92e-4c03-b431-568d726dbfd5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "042ab8b7-c093-4d99-a2e7-c7a47d4d9f15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "8577a07c-adcb-45be-b686-83d9432efd63",
        "cursor": {
          "ref": "1f7e813c-07db-4ddc-b911-b3dbb4041e5c",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6d1e62aa-efc6-4216-a5fe-a5dc70307c5f"
        },
        "item": {
          "id": "8577a07c-adcb-45be-b686-83d9432efd63",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f26a3c48-4686-497f-bc7b-1deb1916c55a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "8577a07c-adcb-45be-b686-83d9432efd63",
        "cursor": {
          "ref": "1f7e813c-07db-4ddc-b911-b3dbb4041e5c",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6d1e62aa-efc6-4216-a5fe-a5dc70307c5f"
        },
        "item": {
          "id": "8577a07c-adcb-45be-b686-83d9432efd63",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f26a3c48-4686-497f-bc7b-1deb1916c55a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d4f1aefc-7afc-47c1-a116-997cea1836cd",
        "cursor": {
          "ref": "31aa56e5-b643-42dd-a512-c6e7d40b62d5",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "66610b73-dd3b-4fb9-aca6-1a698a3648e9"
        },
        "item": {
          "id": "d4f1aefc-7afc-47c1-a116-997cea1836cd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5cbd42a5-64c1-4f47-b6fd-67e6294451dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "d4f1aefc-7afc-47c1-a116-997cea1836cd",
        "cursor": {
          "ref": "31aa56e5-b643-42dd-a512-c6e7d40b62d5",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "66610b73-dd3b-4fb9-aca6-1a698a3648e9"
        },
        "item": {
          "id": "d4f1aefc-7afc-47c1-a116-997cea1836cd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5cbd42a5-64c1-4f47-b6fd-67e6294451dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ce172bc3-9c84-41ce-b43d-04f6c39a98a4",
        "cursor": {
          "ref": "69f135d1-6b7c-4bde-862e-7a08ddcd767a",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "310d994f-be49-4aee-a39e-73c6e32aab02"
        },
        "item": {
          "id": "ce172bc3-9c84-41ce-b43d-04f6c39a98a4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4bb166fe-4c84-4649-b61e-95feb100513d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "ce172bc3-9c84-41ce-b43d-04f6c39a98a4",
        "cursor": {
          "ref": "69f135d1-6b7c-4bde-862e-7a08ddcd767a",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "310d994f-be49-4aee-a39e-73c6e32aab02"
        },
        "item": {
          "id": "ce172bc3-9c84-41ce-b43d-04f6c39a98a4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4bb166fe-4c84-4649-b61e-95feb100513d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "16168cf1-7f5f-459c-939f-e287dcad140a",
        "cursor": {
          "ref": "c09af6ae-e053-46ce-9c3f-a63a3671d934",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "11b99d5a-7c2e-4aba-bf70-a4b900de693c"
        },
        "item": {
          "id": "16168cf1-7f5f-459c-939f-e287dcad140a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08398dda-61ec-451c-853c-19b15c81100d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "16168cf1-7f5f-459c-939f-e287dcad140a",
        "cursor": {
          "ref": "c09af6ae-e053-46ce-9c3f-a63a3671d934",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "11b99d5a-7c2e-4aba-bf70-a4b900de693c"
        },
        "item": {
          "id": "16168cf1-7f5f-459c-939f-e287dcad140a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08398dda-61ec-451c-853c-19b15c81100d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "fc1f813f-44ce-4951-ac87-b124efd5d97b",
        "cursor": {
          "ref": "b510b585-8314-43a0-8419-e6be739f6421",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "53ac9592-8bf8-4d6e-a676-ad3e3b75b763"
        },
        "item": {
          "id": "fc1f813f-44ce-4951-ac87-b124efd5d97b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ca0c4638-3a4d-46cf-bd92-72b54d058894",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "fc1f813f-44ce-4951-ac87-b124efd5d97b",
        "cursor": {
          "ref": "b510b585-8314-43a0-8419-e6be739f6421",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "53ac9592-8bf8-4d6e-a676-ad3e3b75b763"
        },
        "item": {
          "id": "fc1f813f-44ce-4951-ac87-b124efd5d97b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ca0c4638-3a4d-46cf-bd92-72b54d058894",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c86e5cc3-5032-4f92-8519-328bb8a10431",
        "cursor": {
          "ref": "a20504e7-bda0-42eb-bb24-21fdc6fc160c",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "55abd32f-b9b0-4cc1-a5d4-4de280d30895"
        },
        "item": {
          "id": "c86e5cc3-5032-4f92-8519-328bb8a10431",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fb2f4af5-79c7-4bc1-aa06-f19504782c2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c86e5cc3-5032-4f92-8519-328bb8a10431",
        "cursor": {
          "ref": "a20504e7-bda0-42eb-bb24-21fdc6fc160c",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "55abd32f-b9b0-4cc1-a5d4-4de280d30895"
        },
        "item": {
          "id": "c86e5cc3-5032-4f92-8519-328bb8a10431",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fb2f4af5-79c7-4bc1-aa06-f19504782c2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "393e68b7-eb97-46e2-8fa1-2dddca608c18",
        "cursor": {
          "ref": "5082be1e-c2fe-4f79-8e95-74173e3d8caf",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "666f37b3-f781-4abe-a811-12768bf3121c"
        },
        "item": {
          "id": "393e68b7-eb97-46e2-8fa1-2dddca608c18",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aaeaebc6-9160-4b44-90b7-c0c8398509f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "393e68b7-eb97-46e2-8fa1-2dddca608c18",
        "cursor": {
          "ref": "5082be1e-c2fe-4f79-8e95-74173e3d8caf",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "666f37b3-f781-4abe-a811-12768bf3121c"
        },
        "item": {
          "id": "393e68b7-eb97-46e2-8fa1-2dddca608c18",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aaeaebc6-9160-4b44-90b7-c0c8398509f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e46f094a-7512-46e7-8386-a47b993e80cf",
        "cursor": {
          "ref": "edcee569-ad0c-44e4-8676-1c3b9b9df8d4",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e5278f73-accf-47b5-a443-957827878d11"
        },
        "item": {
          "id": "e46f094a-7512-46e7-8386-a47b993e80cf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d639d9e9-6848-40c4-a7c3-e652e7156fa6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e46f094a-7512-46e7-8386-a47b993e80cf",
        "cursor": {
          "ref": "edcee569-ad0c-44e4-8676-1c3b9b9df8d4",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e5278f73-accf-47b5-a443-957827878d11"
        },
        "item": {
          "id": "e46f094a-7512-46e7-8386-a47b993e80cf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d639d9e9-6848-40c4-a7c3-e652e7156fa6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a4465952-da37-4494-a04a-c3423d243c4b",
        "cursor": {
          "ref": "1994567c-2642-4659-90f3-96fada15dc59",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "61a78d33-07a5-414d-afba-e79e0bcd9356"
        },
        "item": {
          "id": "a4465952-da37-4494-a04a-c3423d243c4b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "359df6b9-1699-4ac9-a46a-6cf208eecfc2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a4465952-da37-4494-a04a-c3423d243c4b",
        "cursor": {
          "ref": "1994567c-2642-4659-90f3-96fada15dc59",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "61a78d33-07a5-414d-afba-e79e0bcd9356"
        },
        "item": {
          "id": "a4465952-da37-4494-a04a-c3423d243c4b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "359df6b9-1699-4ac9-a46a-6cf208eecfc2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ed20e683-a11a-4a65-8ddb-9bd962c841a7",
        "cursor": {
          "ref": "2cef86ef-2d60-47ee-aa34-ee3c78a99938",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a7e5f17e-8120-4c0f-bed5-b09e0e5aba4f"
        },
        "item": {
          "id": "ed20e683-a11a-4a65-8ddb-9bd962c841a7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "765b9c19-2c67-4e8a-96d9-38b618d623ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ed20e683-a11a-4a65-8ddb-9bd962c841a7",
        "cursor": {
          "ref": "2cef86ef-2d60-47ee-aa34-ee3c78a99938",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a7e5f17e-8120-4c0f-bed5-b09e0e5aba4f"
        },
        "item": {
          "id": "ed20e683-a11a-4a65-8ddb-9bd962c841a7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "765b9c19-2c67-4e8a-96d9-38b618d623ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "071bfe99-23c6-4923-84b2-44a0abd319a3",
        "cursor": {
          "ref": "11cfee93-930c-4134-bf48-68e657dcf572",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6576d03f-ff31-4856-8c45-9b423fff157e"
        },
        "item": {
          "id": "071bfe99-23c6-4923-84b2-44a0abd319a3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "70ef644c-c141-4dfa-b8a7-90d4f1113eb9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "071bfe99-23c6-4923-84b2-44a0abd319a3",
        "cursor": {
          "ref": "11cfee93-930c-4134-bf48-68e657dcf572",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6576d03f-ff31-4856-8c45-9b423fff157e"
        },
        "item": {
          "id": "071bfe99-23c6-4923-84b2-44a0abd319a3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "70ef644c-c141-4dfa-b8a7-90d4f1113eb9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f5090e76-c89a-4f8e-be2f-3bdb4e3dd86f",
        "cursor": {
          "ref": "c6ec979b-45c3-44eb-bd1f-8a6380cbf5a6",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ce5179d1-d487-42e8-b3cf-b791088dfc72"
        },
        "item": {
          "id": "f5090e76-c89a-4f8e-be2f-3bdb4e3dd86f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "98148845-0372-4fa7-8f88-a1c05e1a9b13",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "f5090e76-c89a-4f8e-be2f-3bdb4e3dd86f",
        "cursor": {
          "ref": "c6ec979b-45c3-44eb-bd1f-8a6380cbf5a6",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ce5179d1-d487-42e8-b3cf-b791088dfc72"
        },
        "item": {
          "id": "f5090e76-c89a-4f8e-be2f-3bdb4e3dd86f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "98148845-0372-4fa7-8f88-a1c05e1a9b13",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "21f7d0d6-30c3-459f-84a2-67055b01e54c",
        "cursor": {
          "ref": "4d343722-cd13-40e6-8d7e-3d1743839107",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bbe1e72d-a060-4427-b349-3222453e230c"
        },
        "item": {
          "id": "21f7d0d6-30c3-459f-84a2-67055b01e54c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7f14fd44-9c77-4d2f-8631-c95e0cd02851",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "21f7d0d6-30c3-459f-84a2-67055b01e54c",
        "cursor": {
          "ref": "4d343722-cd13-40e6-8d7e-3d1743839107",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bbe1e72d-a060-4427-b349-3222453e230c"
        },
        "item": {
          "id": "21f7d0d6-30c3-459f-84a2-67055b01e54c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7f14fd44-9c77-4d2f-8631-c95e0cd02851",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "7bcb81a2-e799-4109-8428-87f91cb59b33",
        "cursor": {
          "ref": "18864f97-d935-4e22-b869-595c7eafc413",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "51d113da-6722-4155-9857-b2d802f2ad96"
        },
        "item": {
          "id": "7bcb81a2-e799-4109-8428-87f91cb59b33",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "814cad48-2eb6-4bf6-bbcc-bc32f1ee3477",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "7bcb81a2-e799-4109-8428-87f91cb59b33",
        "cursor": {
          "ref": "18864f97-d935-4e22-b869-595c7eafc413",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "51d113da-6722-4155-9857-b2d802f2ad96"
        },
        "item": {
          "id": "7bcb81a2-e799-4109-8428-87f91cb59b33",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "814cad48-2eb6-4bf6-bbcc-bc32f1ee3477",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "07389906-6387-482f-be9e-633755a4a432",
        "cursor": {
          "ref": "d1901a9f-3de1-4bc9-8b7a-8ca25ad8d40c",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dfaea350-1a9d-4207-809e-4e2a453f7ae4"
        },
        "item": {
          "id": "07389906-6387-482f-be9e-633755a4a432",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "220349f7-4908-465a-a2e4-63ebe3d58d77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "07389906-6387-482f-be9e-633755a4a432",
        "cursor": {
          "ref": "d1901a9f-3de1-4bc9-8b7a-8ca25ad8d40c",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dfaea350-1a9d-4207-809e-4e2a453f7ae4"
        },
        "item": {
          "id": "07389906-6387-482f-be9e-633755a4a432",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "220349f7-4908-465a-a2e4-63ebe3d58d77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "1c005ecb-baa0-4942-a113-cba22e1aa2a1",
        "cursor": {
          "ref": "8bbf800e-e72a-46ef-8230-07388ad69466",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1cbc0df5-6e5a-4b1d-acee-a1def7140a3c"
        },
        "item": {
          "id": "1c005ecb-baa0-4942-a113-cba22e1aa2a1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7e09246e-a672-4592-ba2c-2682b121aced",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "1c005ecb-baa0-4942-a113-cba22e1aa2a1",
        "cursor": {
          "ref": "8bbf800e-e72a-46ef-8230-07388ad69466",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1cbc0df5-6e5a-4b1d-acee-a1def7140a3c"
        },
        "item": {
          "id": "1c005ecb-baa0-4942-a113-cba22e1aa2a1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7e09246e-a672-4592-ba2c-2682b121aced",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "bfd13321-2193-44a2-abad-b9fa07066653",
        "cursor": {
          "ref": "10f49f2f-a0c7-4074-b02f-b18db5ee5e88",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "25c0f979-8136-4473-853b-6d95fcad2352"
        },
        "item": {
          "id": "bfd13321-2193-44a2-abad-b9fa07066653",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "43f12208-d02e-42ab-99db-6cbe9e5edd10",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "bfd13321-2193-44a2-abad-b9fa07066653",
        "cursor": {
          "ref": "10f49f2f-a0c7-4074-b02f-b18db5ee5e88",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "25c0f979-8136-4473-853b-6d95fcad2352"
        },
        "item": {
          "id": "bfd13321-2193-44a2-abad-b9fa07066653",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "43f12208-d02e-42ab-99db-6cbe9e5edd10",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fb71aa4f-819b-45cc-9f48-67e3963c8fdd",
        "cursor": {
          "ref": "037b039f-f642-4ec1-99e3-70555c94b456",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0c0e5e4d-c39b-4f22-b452-b68fd7cb9c14"
        },
        "item": {
          "id": "fb71aa4f-819b-45cc-9f48-67e3963c8fdd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b70141ef-42e5-467c-bead-09c3166d413b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "fb71aa4f-819b-45cc-9f48-67e3963c8fdd",
        "cursor": {
          "ref": "037b039f-f642-4ec1-99e3-70555c94b456",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0c0e5e4d-c39b-4f22-b452-b68fd7cb9c14"
        },
        "item": {
          "id": "fb71aa4f-819b-45cc-9f48-67e3963c8fdd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b70141ef-42e5-467c-bead-09c3166d413b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "76e7a132-8af1-4350-80b1-ce863bd10dc6",
        "cursor": {
          "ref": "ce4d2c02-58a3-4d10-88be-955c5a6a1f96",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "81b94529-7c01-40f7-9f85-554213beb23c"
        },
        "item": {
          "id": "76e7a132-8af1-4350-80b1-ce863bd10dc6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e3c0ebff-e99c-46cb-9867-a716b753c5eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "76e7a132-8af1-4350-80b1-ce863bd10dc6",
        "cursor": {
          "ref": "ce4d2c02-58a3-4d10-88be-955c5a6a1f96",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "81b94529-7c01-40f7-9f85-554213beb23c"
        },
        "item": {
          "id": "76e7a132-8af1-4350-80b1-ce863bd10dc6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e3c0ebff-e99c-46cb-9867-a716b753c5eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "57fc7b99-eff4-4f19-8707-f39b2c66e589",
        "cursor": {
          "ref": "30b83bb5-617c-4233-abac-1d3379a8b6a2",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0bbce7d4-36f4-4c77-b583-2898074ac021"
        },
        "item": {
          "id": "57fc7b99-eff4-4f19-8707-f39b2c66e589",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "622922fa-c8a3-41a4-a8ee-4190f34b9280",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "57fc7b99-eff4-4f19-8707-f39b2c66e589",
        "cursor": {
          "ref": "30b83bb5-617c-4233-abac-1d3379a8b6a2",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0bbce7d4-36f4-4c77-b583-2898074ac021"
        },
        "item": {
          "id": "57fc7b99-eff4-4f19-8707-f39b2c66e589",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "622922fa-c8a3-41a4-a8ee-4190f34b9280",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "71a24f0c-0d5d-4836-82ff-eae4244e82f9",
        "cursor": {
          "ref": "9de9da16-d4ca-496a-bb7b-57c95b6b0eb4",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "abe1b1c1-e584-4ebf-b4b7-0a091a3d9126"
        },
        "item": {
          "id": "71a24f0c-0d5d-4836-82ff-eae4244e82f9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ee420b14-f4d1-4650-a03f-2758d9e8ce49",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "71a24f0c-0d5d-4836-82ff-eae4244e82f9",
        "cursor": {
          "ref": "9de9da16-d4ca-496a-bb7b-57c95b6b0eb4",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "abe1b1c1-e584-4ebf-b4b7-0a091a3d9126"
        },
        "item": {
          "id": "71a24f0c-0d5d-4836-82ff-eae4244e82f9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ee420b14-f4d1-4650-a03f-2758d9e8ce49",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "99a63bd7-78a1-4ed3-afc6-07a8f1564a38",
        "cursor": {
          "ref": "8771270d-402c-4384-a599-e7977d6958ed",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f5af605b-83da-42f7-81f4-a9107e68bb41"
        },
        "item": {
          "id": "99a63bd7-78a1-4ed3-afc6-07a8f1564a38",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eed19bce-c9c6-431c-af56-0004ee378091",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "99a63bd7-78a1-4ed3-afc6-07a8f1564a38",
        "cursor": {
          "ref": "8771270d-402c-4384-a599-e7977d6958ed",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f5af605b-83da-42f7-81f4-a9107e68bb41"
        },
        "item": {
          "id": "99a63bd7-78a1-4ed3-afc6-07a8f1564a38",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eed19bce-c9c6-431c-af56-0004ee378091",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a42be91d-a1a2-4508-853d-abfdb218e5b7",
        "cursor": {
          "ref": "88db9338-60d4-46be-bef6-7a83b7d13d9a",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b1e4ac41-31f5-4095-ac20-09094dda730e"
        },
        "item": {
          "id": "a42be91d-a1a2-4508-853d-abfdb218e5b7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5a0fa4e2-6cc5-4dd6-a5df-3efa1d1abd46",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "a42be91d-a1a2-4508-853d-abfdb218e5b7",
        "cursor": {
          "ref": "88db9338-60d4-46be-bef6-7a83b7d13d9a",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b1e4ac41-31f5-4095-ac20-09094dda730e"
        },
        "item": {
          "id": "a42be91d-a1a2-4508-853d-abfdb218e5b7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5a0fa4e2-6cc5-4dd6-a5df-3efa1d1abd46",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "52ee7bdc-d465-44aa-928a-0cf84cb35222",
        "cursor": {
          "ref": "836967ff-b1f6-4778-811d-7c4b1bc7cceb",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c94e0e24-d13c-4fe3-86fd-109dd051f01c"
        },
        "item": {
          "id": "52ee7bdc-d465-44aa-928a-0cf84cb35222",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f6a5b240-8a22-4f72-a7bd-6c3d21121b63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "52ee7bdc-d465-44aa-928a-0cf84cb35222",
        "cursor": {
          "ref": "836967ff-b1f6-4778-811d-7c4b1bc7cceb",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c94e0e24-d13c-4fe3-86fd-109dd051f01c"
        },
        "item": {
          "id": "52ee7bdc-d465-44aa-928a-0cf84cb35222",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f6a5b240-8a22-4f72-a7bd-6c3d21121b63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "4eb59683-052b-4275-95fa-0defc98e3205",
        "cursor": {
          "ref": "cb1fe6bb-ee07-43ca-a216-2146a3ef7402",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9462d1be-6a06-483b-b04c-11af3c6ae049"
        },
        "item": {
          "id": "4eb59683-052b-4275-95fa-0defc98e3205",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c48127da-14ce-4abe-8dca-920dec684828",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "4eb59683-052b-4275-95fa-0defc98e3205",
        "cursor": {
          "ref": "cb1fe6bb-ee07-43ca-a216-2146a3ef7402",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9462d1be-6a06-483b-b04c-11af3c6ae049"
        },
        "item": {
          "id": "4eb59683-052b-4275-95fa-0defc98e3205",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c48127da-14ce-4abe-8dca-920dec684828",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "17044938-89f7-4ac1-aa26-a1800ead93b2",
        "cursor": {
          "ref": "9efd4f66-cdf9-4d5a-a206-7a14a74f8a1d",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "756eec9e-85fd-4895-9663-9f81f5ce6f25"
        },
        "item": {
          "id": "17044938-89f7-4ac1-aa26-a1800ead93b2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "47b87c5f-6f8f-4b7a-84f6-fcc3b4493b08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "17044938-89f7-4ac1-aa26-a1800ead93b2",
        "cursor": {
          "ref": "9efd4f66-cdf9-4d5a-a206-7a14a74f8a1d",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "756eec9e-85fd-4895-9663-9f81f5ce6f25"
        },
        "item": {
          "id": "17044938-89f7-4ac1-aa26-a1800ead93b2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "47b87c5f-6f8f-4b7a-84f6-fcc3b4493b08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "1c657c2f-a81c-4959-99c8-e906faf3e5a0",
        "cursor": {
          "ref": "be9f758d-5c95-4381-9cca-8110bb0ced0b",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dc8c1480-2737-4881-b72a-f19c6ead688c"
        },
        "item": {
          "id": "1c657c2f-a81c-4959-99c8-e906faf3e5a0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4592ace3-ceb4-440b-90d8-3781d9e925a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1c657c2f-a81c-4959-99c8-e906faf3e5a0",
        "cursor": {
          "ref": "be9f758d-5c95-4381-9cca-8110bb0ced0b",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dc8c1480-2737-4881-b72a-f19c6ead688c"
        },
        "item": {
          "id": "1c657c2f-a81c-4959-99c8-e906faf3e5a0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4592ace3-ceb4-440b-90d8-3781d9e925a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "fe6d95cf-e038-47d8-bfcd-75ddaf8b3e23",
        "cursor": {
          "ref": "28636577-e7f8-4b3e-a42c-13dbd9cf9e67",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b1c4e10a-6141-4bdf-b8be-9b3b2eee3bb4"
        },
        "item": {
          "id": "fe6d95cf-e038-47d8-bfcd-75ddaf8b3e23",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bdf3e140-52a2-48a8-b5dc-fa430957fc15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "fe6d95cf-e038-47d8-bfcd-75ddaf8b3e23",
        "cursor": {
          "ref": "28636577-e7f8-4b3e-a42c-13dbd9cf9e67",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b1c4e10a-6141-4bdf-b8be-9b3b2eee3bb4"
        },
        "item": {
          "id": "fe6d95cf-e038-47d8-bfcd-75ddaf8b3e23",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bdf3e140-52a2-48a8-b5dc-fa430957fc15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2c61a803-9212-47cf-9db5-d253dc673269",
        "cursor": {
          "ref": "94e9be9c-f3d1-458b-980a-9954222634c4",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "92612083-f390-460e-8989-94cd7f04b034"
        },
        "item": {
          "id": "2c61a803-9212-47cf-9db5-d253dc673269",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "baf53029-b885-442e-97b2-4157fd35a069",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2c61a803-9212-47cf-9db5-d253dc673269",
        "cursor": {
          "ref": "94e9be9c-f3d1-458b-980a-9954222634c4",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "92612083-f390-460e-8989-94cd7f04b034"
        },
        "item": {
          "id": "2c61a803-9212-47cf-9db5-d253dc673269",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "baf53029-b885-442e-97b2-4157fd35a069",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "860449f6-e191-4158-9dea-bd2a589320e9",
        "cursor": {
          "ref": "b6c5fa30-0848-4c70-8ab4-f5d34891e30c",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5db8acf6-a76e-4e19-b5f7-d3aaf8d9c585"
        },
        "item": {
          "id": "860449f6-e191-4158-9dea-bd2a589320e9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "509db41f-9680-41c5-b8a3-98844a8e632d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "860449f6-e191-4158-9dea-bd2a589320e9",
        "cursor": {
          "ref": "b6c5fa30-0848-4c70-8ab4-f5d34891e30c",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5db8acf6-a76e-4e19-b5f7-d3aaf8d9c585"
        },
        "item": {
          "id": "860449f6-e191-4158-9dea-bd2a589320e9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "509db41f-9680-41c5-b8a3-98844a8e632d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "29493dc1-0b53-44b3-952c-f902e67fa1e6",
        "cursor": {
          "ref": "0f11b6ca-5a13-461b-8c45-0b3faa12f6ee",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0f3b44c6-b424-484a-afb0-7eb39a3d47d5"
        },
        "item": {
          "id": "29493dc1-0b53-44b3-952c-f902e67fa1e6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cd4f3641-6dad-4108-a741-b501088d472b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "29493dc1-0b53-44b3-952c-f902e67fa1e6",
        "cursor": {
          "ref": "0f11b6ca-5a13-461b-8c45-0b3faa12f6ee",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0f3b44c6-b424-484a-afb0-7eb39a3d47d5"
        },
        "item": {
          "id": "29493dc1-0b53-44b3-952c-f902e67fa1e6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cd4f3641-6dad-4108-a741-b501088d472b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "b5cfc021-2196-4f0a-9342-2c4029382cff",
        "cursor": {
          "ref": "dbc10dab-e75d-44a3-92b1-280e5807a836",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "232c51e7-0d56-44ca-9f05-ece99fe8c37d"
        },
        "item": {
          "id": "b5cfc021-2196-4f0a-9342-2c4029382cff",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ddae19d1-d0d6-4924-97e4-999807af068d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "b5cfc021-2196-4f0a-9342-2c4029382cff",
        "cursor": {
          "ref": "dbc10dab-e75d-44a3-92b1-280e5807a836",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "232c51e7-0d56-44ca-9f05-ece99fe8c37d"
        },
        "item": {
          "id": "b5cfc021-2196-4f0a-9342-2c4029382cff",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ddae19d1-d0d6-4924-97e4-999807af068d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "12f0be60-db5c-4f02-b778-e83c35c8a168",
        "cursor": {
          "ref": "b91f245d-d9f5-44fa-9d4a-0d002edd0316",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6b5c69a0-a6a1-40ea-9769-70155139cfd8"
        },
        "item": {
          "id": "12f0be60-db5c-4f02-b778-e83c35c8a168",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6c9a8c63-78c1-4ae2-ba1c-3159d3be8f74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "12f0be60-db5c-4f02-b778-e83c35c8a168",
        "cursor": {
          "ref": "b91f245d-d9f5-44fa-9d4a-0d002edd0316",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6b5c69a0-a6a1-40ea-9769-70155139cfd8"
        },
        "item": {
          "id": "12f0be60-db5c-4f02-b778-e83c35c8a168",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6c9a8c63-78c1-4ae2-ba1c-3159d3be8f74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "06107bc9-4177-4111-8ecd-4b796da10744",
        "cursor": {
          "ref": "d34128eb-7bb2-43e8-bf36-997b9ca1ac5b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e5f95b27-12a9-4020-adc1-4f6856a159af"
        },
        "item": {
          "id": "06107bc9-4177-4111-8ecd-4b796da10744",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8f9ab639-4c54-4a3b-a104-3123b7bd90af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "06107bc9-4177-4111-8ecd-4b796da10744",
        "cursor": {
          "ref": "d34128eb-7bb2-43e8-bf36-997b9ca1ac5b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e5f95b27-12a9-4020-adc1-4f6856a159af"
        },
        "item": {
          "id": "06107bc9-4177-4111-8ecd-4b796da10744",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8f9ab639-4c54-4a3b-a104-3123b7bd90af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "d5dd403b-d4f6-4cd6-bdbe-4276b99f20c8",
        "cursor": {
          "ref": "2345a88e-8199-4da3-84c0-df4a96809435",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c3c5a128-7dd4-4ff4-93f2-92d5b24ae215"
        },
        "item": {
          "id": "d5dd403b-d4f6-4cd6-bdbe-4276b99f20c8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "34d3e3eb-585d-4e40-b8a0-6798255e31fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "d5dd403b-d4f6-4cd6-bdbe-4276b99f20c8",
        "cursor": {
          "ref": "2345a88e-8199-4da3-84c0-df4a96809435",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c3c5a128-7dd4-4ff4-93f2-92d5b24ae215"
        },
        "item": {
          "id": "d5dd403b-d4f6-4cd6-bdbe-4276b99f20c8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "34d3e3eb-585d-4e40-b8a0-6798255e31fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "504cffca-aeb8-4c3d-ab79-d716cd1e6d1a",
        "cursor": {
          "ref": "c82b4085-2d4d-4be5-bd1a-d5fb84273da2",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bdcc57ae-bcaa-4c7a-b13f-20e432b60e16"
        },
        "item": {
          "id": "504cffca-aeb8-4c3d-ab79-d716cd1e6d1a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ac449524-f8db-4af2-bb9e-04558d0ec57f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "504cffca-aeb8-4c3d-ab79-d716cd1e6d1a",
        "cursor": {
          "ref": "c82b4085-2d4d-4be5-bd1a-d5fb84273da2",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bdcc57ae-bcaa-4c7a-b13f-20e432b60e16"
        },
        "item": {
          "id": "504cffca-aeb8-4c3d-ab79-d716cd1e6d1a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ac449524-f8db-4af2-bb9e-04558d0ec57f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "503a0c5e-e71a-47de-95a4-a6dbc8a5357c",
        "cursor": {
          "ref": "76bcec40-afd6-4d80-b512-6b6229ad9305",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "37bf8cb7-b3e4-479b-ae0d-14b7ea10b2b8"
        },
        "item": {
          "id": "503a0c5e-e71a-47de-95a4-a6dbc8a5357c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c89116b3-067b-446f-bac8-00ee5fe73d9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "503a0c5e-e71a-47de-95a4-a6dbc8a5357c",
        "cursor": {
          "ref": "76bcec40-afd6-4d80-b512-6b6229ad9305",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "37bf8cb7-b3e4-479b-ae0d-14b7ea10b2b8"
        },
        "item": {
          "id": "503a0c5e-e71a-47de-95a4-a6dbc8a5357c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c89116b3-067b-446f-bac8-00ee5fe73d9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "69842099-1d2a-487c-8e75-6410b5434696",
        "cursor": {
          "ref": "69267a5b-1f42-4018-b01f-d58368ac57ae",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "72f0514c-b1f4-425b-a1d6-2c0da2722635"
        },
        "item": {
          "id": "69842099-1d2a-487c-8e75-6410b5434696",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "65553f10-b960-4efa-9747-f711fa19f3de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "69842099-1d2a-487c-8e75-6410b5434696",
        "cursor": {
          "ref": "69267a5b-1f42-4018-b01f-d58368ac57ae",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "72f0514c-b1f4-425b-a1d6-2c0da2722635"
        },
        "item": {
          "id": "69842099-1d2a-487c-8e75-6410b5434696",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "65553f10-b960-4efa-9747-f711fa19f3de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "c34f52ae-215f-4426-a654-aead500ef4de",
        "cursor": {
          "ref": "7d1b370a-d90c-401b-8b70-71667fcd5381",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7b4e4a8e-4f17-4375-8cb3-924e719d2e28"
        },
        "item": {
          "id": "c34f52ae-215f-4426-a654-aead500ef4de",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8dcf3093-83a1-4f14-a1a1-bb8764789898",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c34f52ae-215f-4426-a654-aead500ef4de",
        "cursor": {
          "ref": "7d1b370a-d90c-401b-8b70-71667fcd5381",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7b4e4a8e-4f17-4375-8cb3-924e719d2e28"
        },
        "item": {
          "id": "c34f52ae-215f-4426-a654-aead500ef4de",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8dcf3093-83a1-4f14-a1a1-bb8764789898",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "1db61d3d-3241-4ad7-82a5-4e37e01f92ff",
        "cursor": {
          "ref": "19947335-a0cc-4f92-8c9d-3f2d91769568",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "85247d3c-9dc6-4d9d-b777-7da4a0ad2761"
        },
        "item": {
          "id": "1db61d3d-3241-4ad7-82a5-4e37e01f92ff",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "016ed12d-f937-4c6d-84bd-dd97ab7fa411",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "1db61d3d-3241-4ad7-82a5-4e37e01f92ff",
        "cursor": {
          "ref": "19947335-a0cc-4f92-8c9d-3f2d91769568",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "85247d3c-9dc6-4d9d-b777-7da4a0ad2761"
        },
        "item": {
          "id": "1db61d3d-3241-4ad7-82a5-4e37e01f92ff",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "016ed12d-f937-4c6d-84bd-dd97ab7fa411",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "1b5c573f-8558-4b21-bae4-c25dd3064099",
        "cursor": {
          "ref": "c45319b8-97af-4f1e-a141-64fa90d722eb",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "164e4e7f-442c-412b-b7fd-6178b8d06b0b"
        },
        "item": {
          "id": "1b5c573f-8558-4b21-bae4-c25dd3064099",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4371b0af-5556-40ff-93ca-6d68708f7c96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "1b5c573f-8558-4b21-bae4-c25dd3064099",
        "cursor": {
          "ref": "c45319b8-97af-4f1e-a141-64fa90d722eb",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "164e4e7f-442c-412b-b7fd-6178b8d06b0b"
        },
        "item": {
          "id": "1b5c573f-8558-4b21-bae4-c25dd3064099",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4371b0af-5556-40ff-93ca-6d68708f7c96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "1f4ea91d-30b3-473a-bc6e-7ecea3318471",
        "cursor": {
          "ref": "b80e59aa-0a9e-4e7e-a6f1-df01169191df",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "832924ba-14ba-4093-ac60-e20c6fc395cc"
        },
        "item": {
          "id": "1f4ea91d-30b3-473a-bc6e-7ecea3318471",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f4eacfa5-13b4-4d9c-892f-894ee885cdb1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "1f4ea91d-30b3-473a-bc6e-7ecea3318471",
        "cursor": {
          "ref": "b80e59aa-0a9e-4e7e-a6f1-df01169191df",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "832924ba-14ba-4093-ac60-e20c6fc395cc"
        },
        "item": {
          "id": "1f4ea91d-30b3-473a-bc6e-7ecea3318471",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f4eacfa5-13b4-4d9c-892f-894ee885cdb1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "2119ceab-3449-495e-a226-4eb452d568e9",
        "cursor": {
          "ref": "183382dc-e1fb-48c5-8553-eec17d0ebeb1",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "932a92c7-3384-447c-881e-a63d4f5b5d0f"
        },
        "item": {
          "id": "2119ceab-3449-495e-a226-4eb452d568e9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "67930aac-3ad7-43dd-95c1-8e3d9fb332b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "2119ceab-3449-495e-a226-4eb452d568e9",
        "cursor": {
          "ref": "183382dc-e1fb-48c5-8553-eec17d0ebeb1",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "932a92c7-3384-447c-881e-a63d4f5b5d0f"
        },
        "item": {
          "id": "2119ceab-3449-495e-a226-4eb452d568e9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "67930aac-3ad7-43dd-95c1-8e3d9fb332b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "c16e707a-7bbb-42ca-a867-7d6dd988d1e6",
        "cursor": {
          "ref": "5d6156b5-f489-472b-ab5c-e790868d3234",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "829d7275-0f87-4538-ad5d-f212c2a2b9ef"
        },
        "item": {
          "id": "c16e707a-7bbb-42ca-a867-7d6dd988d1e6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ac469b09-7341-4f2a-a096-76220b2f5939",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "c16e707a-7bbb-42ca-a867-7d6dd988d1e6",
        "cursor": {
          "ref": "5d6156b5-f489-472b-ab5c-e790868d3234",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "829d7275-0f87-4538-ad5d-f212c2a2b9ef"
        },
        "item": {
          "id": "c16e707a-7bbb-42ca-a867-7d6dd988d1e6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ac469b09-7341-4f2a-a096-76220b2f5939",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "06f858da-bc03-4f39-9ff2-fe47e1968ca0",
        "cursor": {
          "ref": "84b65c37-f027-4153-9c12-c380c3e33c61",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f80b2025-3aee-4cee-8df0-d90a1b2a1863"
        },
        "item": {
          "id": "06f858da-bc03-4f39-9ff2-fe47e1968ca0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cbaf801c-d587-4333-896a-671a7406c40d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "06f858da-bc03-4f39-9ff2-fe47e1968ca0",
        "cursor": {
          "ref": "84b65c37-f027-4153-9c12-c380c3e33c61",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f80b2025-3aee-4cee-8df0-d90a1b2a1863"
        },
        "item": {
          "id": "06f858da-bc03-4f39-9ff2-fe47e1968ca0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cbaf801c-d587-4333-896a-671a7406c40d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "b322b3b2-27b5-48df-964e-33673d1af168",
        "cursor": {
          "ref": "14ff504d-4666-45cb-aabf-4dcb4e7305b0",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "133eea3e-cc0f-44ff-930b-3db00b838572"
        },
        "item": {
          "id": "b322b3b2-27b5-48df-964e-33673d1af168",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "01e8a151-5548-43b5-9ba5-f5e1231ee427",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 61,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "b322b3b2-27b5-48df-964e-33673d1af168",
        "cursor": {
          "ref": "14ff504d-4666-45cb-aabf-4dcb4e7305b0",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "133eea3e-cc0f-44ff-930b-3db00b838572"
        },
        "item": {
          "id": "b322b3b2-27b5-48df-964e-33673d1af168",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "01e8a151-5548-43b5-9ba5-f5e1231ee427",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 61,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "6fa8a167-6375-4392-8c09-f5e851ab08ee",
        "cursor": {
          "ref": "6623da2e-b176-476f-915a-0ad8a0680545",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "24ab9428-39b0-4fdf-afd3-fbc4b10f469a"
        },
        "item": {
          "id": "6fa8a167-6375-4392-8c09-f5e851ab08ee",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9237fcef-cf6a-48b8-b705-51d2d82f4eec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "6fa8a167-6375-4392-8c09-f5e851ab08ee",
        "cursor": {
          "ref": "6623da2e-b176-476f-915a-0ad8a0680545",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "24ab9428-39b0-4fdf-afd3-fbc4b10f469a"
        },
        "item": {
          "id": "6fa8a167-6375-4392-8c09-f5e851ab08ee",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9237fcef-cf6a-48b8-b705-51d2d82f4eec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "74ef7b98-a0e0-4ecb-a1b4-35e2272ecee4",
        "cursor": {
          "ref": "311d349a-8657-4a28-85bc-f253d0d30c43",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "eda206b7-5a2a-40d4-8316-fa35997f30d4"
        },
        "item": {
          "id": "74ef7b98-a0e0-4ecb-a1b4-35e2272ecee4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3a967dfb-8b7d-45b4-8b3a-5571d9b0bf72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "74ef7b98-a0e0-4ecb-a1b4-35e2272ecee4",
        "cursor": {
          "ref": "311d349a-8657-4a28-85bc-f253d0d30c43",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "eda206b7-5a2a-40d4-8316-fa35997f30d4"
        },
        "item": {
          "id": "74ef7b98-a0e0-4ecb-a1b4-35e2272ecee4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3a967dfb-8b7d-45b4-8b3a-5571d9b0bf72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "72597954-ab7f-4d46-8e89-53dd8cf4bab5",
        "cursor": {
          "ref": "750ed6c3-5a2f-4c40-a9d9-7c2f2e15d857",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fc87abf0-e758-4a89-8135-a46fe3394299"
        },
        "item": {
          "id": "72597954-ab7f-4d46-8e89-53dd8cf4bab5",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "4f96026b-e6aa-414f-9f57-4d1cbba6c17f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "72597954-ab7f-4d46-8e89-53dd8cf4bab5",
        "cursor": {
          "ref": "750ed6c3-5a2f-4c40-a9d9-7c2f2e15d857",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fc87abf0-e758-4a89-8135-a46fe3394299"
        },
        "item": {
          "id": "72597954-ab7f-4d46-8e89-53dd8cf4bab5",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "4f96026b-e6aa-414f-9f57-4d1cbba6c17f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3067f1c3-7889-48ab-afec-3d7ff05ec2ad",
        "cursor": {
          "ref": "7734faf8-7582-4217-b9e5-c5c4d73eebb6",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "435107bd-66ab-457e-b9d7-2324177ad99f"
        },
        "item": {
          "id": "3067f1c3-7889-48ab-afec-3d7ff05ec2ad",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "67a20a64-4c98-4313-9efb-6433acdea65c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "3067f1c3-7889-48ab-afec-3d7ff05ec2ad",
        "cursor": {
          "ref": "7734faf8-7582-4217-b9e5-c5c4d73eebb6",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "435107bd-66ab-457e-b9d7-2324177ad99f"
        },
        "item": {
          "id": "3067f1c3-7889-48ab-afec-3d7ff05ec2ad",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "67a20a64-4c98-4313-9efb-6433acdea65c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "63d185cd-d16b-49af-8d2a-a722d00ec164",
        "cursor": {
          "ref": "fff4ee62-7b73-4104-9805-b7d45038091b",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2a9355c3-dafa-491d-a3e2-d66f5b78a39e"
        },
        "item": {
          "id": "63d185cd-d16b-49af-8d2a-a722d00ec164",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c1eadad3-ca92-47dc-8747-993f3b970774",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "63d185cd-d16b-49af-8d2a-a722d00ec164",
        "cursor": {
          "ref": "fff4ee62-7b73-4104-9805-b7d45038091b",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2a9355c3-dafa-491d-a3e2-d66f5b78a39e"
        },
        "item": {
          "id": "63d185cd-d16b-49af-8d2a-a722d00ec164",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c1eadad3-ca92-47dc-8747-993f3b970774",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "e5f0afb5-e22f-4cbd-b050-99cfa4bbe483",
        "cursor": {
          "ref": "b327ee83-debf-4b96-8a64-3b6d2ff3e85d",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9c3034df-17d4-4b12-9d71-6a5b8e6e1c7c"
        },
        "item": {
          "id": "e5f0afb5-e22f-4cbd-b050-99cfa4bbe483",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0d0509cf-4fd0-46cd-946d-d08b1095bfa8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "e5f0afb5-e22f-4cbd-b050-99cfa4bbe483",
        "cursor": {
          "ref": "b327ee83-debf-4b96-8a64-3b6d2ff3e85d",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9c3034df-17d4-4b12-9d71-6a5b8e6e1c7c"
        },
        "item": {
          "id": "e5f0afb5-e22f-4cbd-b050-99cfa4bbe483",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0d0509cf-4fd0-46cd-946d-d08b1095bfa8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "07f9ee8e-e1a5-480b-9675-854aca592e26",
        "cursor": {
          "ref": "c1a3ef44-5b8d-4f4f-b3e7-d92439ff7a34",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "52e02ed7-352b-4a0c-9821-ad160f382978"
        },
        "item": {
          "id": "07f9ee8e-e1a5-480b-9675-854aca592e26",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "084d5bf1-de0d-46e3-a039-db5fc3118116",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "07f9ee8e-e1a5-480b-9675-854aca592e26",
        "cursor": {
          "ref": "c1a3ef44-5b8d-4f4f-b3e7-d92439ff7a34",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "52e02ed7-352b-4a0c-9821-ad160f382978"
        },
        "item": {
          "id": "07f9ee8e-e1a5-480b-9675-854aca592e26",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "084d5bf1-de0d-46e3-a039-db5fc3118116",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "9aec8b63-1249-4bf3-9afe-aad84df84ae5",
        "cursor": {
          "ref": "8d696a04-07f5-4795-96f6-5bdabd51b6d8",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dd007b9c-e1fc-440b-87bb-1f97d2b87d6e"
        },
        "item": {
          "id": "9aec8b63-1249-4bf3-9afe-aad84df84ae5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a6dcaa35-df11-4b59-9067-e60da49a9c83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "9aec8b63-1249-4bf3-9afe-aad84df84ae5",
        "cursor": {
          "ref": "8d696a04-07f5-4795-96f6-5bdabd51b6d8",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dd007b9c-e1fc-440b-87bb-1f97d2b87d6e"
        },
        "item": {
          "id": "9aec8b63-1249-4bf3-9afe-aad84df84ae5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a6dcaa35-df11-4b59-9067-e60da49a9c83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "99b6bd80-221b-4a60-8005-632ee4a77ad4",
        "cursor": {
          "ref": "50e30c90-49eb-4ec9-a91a-8f9c06a8d48a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9e5e2054-9287-4cad-bde9-fb180926a9ec"
        },
        "item": {
          "id": "99b6bd80-221b-4a60-8005-632ee4a77ad4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "14ed6209-2b31-4319-a68d-f37b7f3f0092",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "99b6bd80-221b-4a60-8005-632ee4a77ad4",
        "cursor": {
          "ref": "50e30c90-49eb-4ec9-a91a-8f9c06a8d48a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9e5e2054-9287-4cad-bde9-fb180926a9ec"
        },
        "item": {
          "id": "99b6bd80-221b-4a60-8005-632ee4a77ad4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "14ed6209-2b31-4319-a68d-f37b7f3f0092",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "2de24aac-9a0a-4b5d-8134-fcaa32a9108b",
        "cursor": {
          "ref": "2f1450ea-443d-4d90-8ca3-9e06e932d5de",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7a118568-bbfc-43a4-abf4-ce7d55ebe1fa"
        },
        "item": {
          "id": "2de24aac-9a0a-4b5d-8134-fcaa32a9108b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6eedb5e7-c85c-4b87-816f-cd3f2d5ce3f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "2de24aac-9a0a-4b5d-8134-fcaa32a9108b",
        "cursor": {
          "ref": "2f1450ea-443d-4d90-8ca3-9e06e932d5de",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7a118568-bbfc-43a4-abf4-ce7d55ebe1fa"
        },
        "item": {
          "id": "2de24aac-9a0a-4b5d-8134-fcaa32a9108b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6eedb5e7-c85c-4b87-816f-cd3f2d5ce3f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "acd79834-9c87-4812-8d6c-d86398779241",
        "cursor": {
          "ref": "2b1f9bb1-1cc1-488d-9b85-8f9b4c224c8f",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6ec1db7b-fb48-4ac9-9535-ecbbc356bbde"
        },
        "item": {
          "id": "acd79834-9c87-4812-8d6c-d86398779241",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ee0e59e8-1411-47db-9fd5-d1477a74fae7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "acd79834-9c87-4812-8d6c-d86398779241",
        "cursor": {
          "ref": "2b1f9bb1-1cc1-488d-9b85-8f9b4c224c8f",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6ec1db7b-fb48-4ac9-9535-ecbbc356bbde"
        },
        "item": {
          "id": "acd79834-9c87-4812-8d6c-d86398779241",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ee0e59e8-1411-47db-9fd5-d1477a74fae7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "ae12fcbb-25a0-4ef0-8e13-dc13ca06f4af",
        "cursor": {
          "ref": "63d6049a-8a14-4375-8f48-3b0ed18736ad",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "16cdbbeb-33ff-45e0-aa47-30e3e2f46bf1"
        },
        "item": {
          "id": "ae12fcbb-25a0-4ef0-8e13-dc13ca06f4af",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3b0514df-b3bf-45e8-8eda-1841ca2f7dfd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "ae12fcbb-25a0-4ef0-8e13-dc13ca06f4af",
        "cursor": {
          "ref": "63d6049a-8a14-4375-8f48-3b0ed18736ad",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "16cdbbeb-33ff-45e0-aa47-30e3e2f46bf1"
        },
        "item": {
          "id": "ae12fcbb-25a0-4ef0-8e13-dc13ca06f4af",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3b0514df-b3bf-45e8-8eda-1841ca2f7dfd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "4705e342-80c7-49f5-8fc5-cca26d34d5f8",
        "cursor": {
          "ref": "559410b9-4f18-4d9a-a64d-17a0b15f8472",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ad6cef6e-f35b-4d19-bde4-45331db68351"
        },
        "item": {
          "id": "4705e342-80c7-49f5-8fc5-cca26d34d5f8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "85bfb9a6-4399-4b00-b2ce-1cc16b887c21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "4705e342-80c7-49f5-8fc5-cca26d34d5f8",
        "cursor": {
          "ref": "559410b9-4f18-4d9a-a64d-17a0b15f8472",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ad6cef6e-f35b-4d19-bde4-45331db68351"
        },
        "item": {
          "id": "4705e342-80c7-49f5-8fc5-cca26d34d5f8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "85bfb9a6-4399-4b00-b2ce-1cc16b887c21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "8992d1b0-4081-4d0f-adf6-2bc63eec6004",
        "cursor": {
          "ref": "50339b85-1f62-4984-9210-0332167c430d",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c6070489-686e-4cf5-b5a8-80b4dd1c9dfa"
        },
        "item": {
          "id": "8992d1b0-4081-4d0f-adf6-2bc63eec6004",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a0151ff7-7ecf-4870-85d3-4d04900283a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "8992d1b0-4081-4d0f-adf6-2bc63eec6004",
        "cursor": {
          "ref": "50339b85-1f62-4984-9210-0332167c430d",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c6070489-686e-4cf5-b5a8-80b4dd1c9dfa"
        },
        "item": {
          "id": "8992d1b0-4081-4d0f-adf6-2bc63eec6004",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a0151ff7-7ecf-4870-85d3-4d04900283a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "9a5e4c1b-8059-4a70-baa3-1b8648d64d53",
        "cursor": {
          "ref": "ecff7b78-023b-4b01-82f8-edd3cc2149df",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "139ff4c7-cc28-4848-bc6e-7480be60f2f8"
        },
        "item": {
          "id": "9a5e4c1b-8059-4a70-baa3-1b8648d64d53",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "70646cb8-aebd-42a5-860f-3c60f1075dbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "9a5e4c1b-8059-4a70-baa3-1b8648d64d53",
        "cursor": {
          "ref": "ecff7b78-023b-4b01-82f8-edd3cc2149df",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "139ff4c7-cc28-4848-bc6e-7480be60f2f8"
        },
        "item": {
          "id": "9a5e4c1b-8059-4a70-baa3-1b8648d64d53",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "70646cb8-aebd-42a5-860f-3c60f1075dbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "63f8316d-9797-44bc-bead-556fe89f5b7b",
        "cursor": {
          "ref": "7589ce4e-7b86-438c-9578-dfbbace33c4f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "90763c6f-8976-41b3-8219-7ba1c7c6dfa5"
        },
        "item": {
          "id": "63f8316d-9797-44bc-bead-556fe89f5b7b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d08b6eda-c56e-4029-9e40-13f6e1aaaddc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "63f8316d-9797-44bc-bead-556fe89f5b7b",
        "cursor": {
          "ref": "7589ce4e-7b86-438c-9578-dfbbace33c4f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "90763c6f-8976-41b3-8219-7ba1c7c6dfa5"
        },
        "item": {
          "id": "63f8316d-9797-44bc-bead-556fe89f5b7b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d08b6eda-c56e-4029-9e40-13f6e1aaaddc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "21d380d2-e3de-470e-861a-3b5b43122aae",
        "cursor": {
          "ref": "8a732023-ca86-4564-9eb3-d8de1c051ba0",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3d8c0211-4026-439f-a431-cd67a9685c74"
        },
        "item": {
          "id": "21d380d2-e3de-470e-861a-3b5b43122aae",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9567f5e6-a13c-4116-b9de-63fd1131f857",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "21d380d2-e3de-470e-861a-3b5b43122aae",
        "cursor": {
          "ref": "8a732023-ca86-4564-9eb3-d8de1c051ba0",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3d8c0211-4026-439f-a431-cd67a9685c74"
        },
        "item": {
          "id": "21d380d2-e3de-470e-861a-3b5b43122aae",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9567f5e6-a13c-4116-b9de-63fd1131f857",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "af7bbd92-4c35-427a-b4c9-e93561985098",
        "cursor": {
          "ref": "6ebeb6f5-d8d2-4d2a-9b48-ca0122246a20",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0c0632f2-6af7-4dc9-8ca1-8ff632867d9b"
        },
        "item": {
          "id": "af7bbd92-4c35-427a-b4c9-e93561985098",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c70449b1-66ce-4f95-9129-607d104bb421",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "af7bbd92-4c35-427a-b4c9-e93561985098",
        "cursor": {
          "ref": "6ebeb6f5-d8d2-4d2a-9b48-ca0122246a20",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0c0632f2-6af7-4dc9-8ca1-8ff632867d9b"
        },
        "item": {
          "id": "af7bbd92-4c35-427a-b4c9-e93561985098",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c70449b1-66ce-4f95-9129-607d104bb421",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "38169802-890d-4290-a46d-d66cd75441c5",
        "cursor": {
          "ref": "f986d6c7-59b7-48a3-bf3c-f6a52e1d221d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a6284b49-b0ab-40d4-9ae8-d4adb52db1fc"
        },
        "item": {
          "id": "38169802-890d-4290-a46d-d66cd75441c5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c5943701-fac6-4c61-9fcc-d33de8e091f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "38169802-890d-4290-a46d-d66cd75441c5",
        "cursor": {
          "ref": "f986d6c7-59b7-48a3-bf3c-f6a52e1d221d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a6284b49-b0ab-40d4-9ae8-d4adb52db1fc"
        },
        "item": {
          "id": "38169802-890d-4290-a46d-d66cd75441c5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c5943701-fac6-4c61-9fcc-d33de8e091f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "aee177ab-2a24-412e-8920-e337de7a4cf2",
        "cursor": {
          "ref": "4cc70998-4b0a-49b0-a185-a82eb509a977",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97e6fdc8-f74a-44df-af71-3ebc64f8aeb3"
        },
        "item": {
          "id": "aee177ab-2a24-412e-8920-e337de7a4cf2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5939ddee-ad33-4ecd-b6a8-22d6887f2cb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "aee177ab-2a24-412e-8920-e337de7a4cf2",
        "cursor": {
          "ref": "4cc70998-4b0a-49b0-a185-a82eb509a977",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97e6fdc8-f74a-44df-af71-3ebc64f8aeb3"
        },
        "item": {
          "id": "aee177ab-2a24-412e-8920-e337de7a4cf2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5939ddee-ad33-4ecd-b6a8-22d6887f2cb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "e7f842b6-8021-4310-a6fd-ce9829376b49",
        "cursor": {
          "ref": "e0097b51-41b4-478a-9665-70dd5464cdbd",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b04c5028-f095-4eff-84f6-67324c0b352e"
        },
        "item": {
          "id": "e7f842b6-8021-4310-a6fd-ce9829376b49",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "27c45f4f-6939-4716-a4f2-c542a1d1d7bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "e7f842b6-8021-4310-a6fd-ce9829376b49",
        "cursor": {
          "ref": "e0097b51-41b4-478a-9665-70dd5464cdbd",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b04c5028-f095-4eff-84f6-67324c0b352e"
        },
        "item": {
          "id": "e7f842b6-8021-4310-a6fd-ce9829376b49",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "27c45f4f-6939-4716-a4f2-c542a1d1d7bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "a29ba6b3-de51-4294-9c36-c8695a72bda2",
        "cursor": {
          "ref": "39e90202-786f-48ec-8369-28bc830e72dd",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "17651b01-9baf-4c05-aa27-f4db14fb761e"
        },
        "item": {
          "id": "a29ba6b3-de51-4294-9c36-c8695a72bda2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4b3c459b-ec11-4c6a-9129-5ce3fb6745e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "a29ba6b3-de51-4294-9c36-c8695a72bda2",
        "cursor": {
          "ref": "39e90202-786f-48ec-8369-28bc830e72dd",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "17651b01-9baf-4c05-aa27-f4db14fb761e"
        },
        "item": {
          "id": "a29ba6b3-de51-4294-9c36-c8695a72bda2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4b3c459b-ec11-4c6a-9129-5ce3fb6745e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "c8d147c2-8379-4c40-964e-002fc2c5a598",
        "cursor": {
          "ref": "1b1425b9-1953-4332-bfb0-197174215542",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "35cbb310-7c49-4490-b442-d6dc3d839a29"
        },
        "item": {
          "id": "c8d147c2-8379-4c40-964e-002fc2c5a598",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7968c78b-49ea-40d2-8be1-7815c99b8f59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c8d147c2-8379-4c40-964e-002fc2c5a598",
        "cursor": {
          "ref": "1b1425b9-1953-4332-bfb0-197174215542",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "35cbb310-7c49-4490-b442-d6dc3d839a29"
        },
        "item": {
          "id": "c8d147c2-8379-4c40-964e-002fc2c5a598",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7968c78b-49ea-40d2-8be1-7815c99b8f59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "0256319f-7115-4d7d-92b5-ecdf71c8192c",
        "cursor": {
          "ref": "c4fc8534-dbf8-4c2c-9b92-4e2ba35276e4",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a74f7bf3-21d8-4b8b-a814-af0c65c11547"
        },
        "item": {
          "id": "0256319f-7115-4d7d-92b5-ecdf71c8192c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8e9876fb-9ecf-4829-8528-e7eeefc50087",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "0256319f-7115-4d7d-92b5-ecdf71c8192c",
        "cursor": {
          "ref": "c4fc8534-dbf8-4c2c-9b92-4e2ba35276e4",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a74f7bf3-21d8-4b8b-a814-af0c65c11547"
        },
        "item": {
          "id": "0256319f-7115-4d7d-92b5-ecdf71c8192c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8e9876fb-9ecf-4829-8528-e7eeefc50087",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9ecd3854-89e3-4516-b347-119c8f402b16",
        "cursor": {
          "ref": "87e402a0-896a-4eae-8286-0a837af19e11",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "50d12014-7de8-4719-8e8a-906abd1bbc8c"
        },
        "item": {
          "id": "9ecd3854-89e3-4516-b347-119c8f402b16",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3230e3e8-429b-4272-bd91-470da6674a31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9ecd3854-89e3-4516-b347-119c8f402b16",
        "cursor": {
          "ref": "87e402a0-896a-4eae-8286-0a837af19e11",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "50d12014-7de8-4719-8e8a-906abd1bbc8c"
        },
        "item": {
          "id": "9ecd3854-89e3-4516-b347-119c8f402b16",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3230e3e8-429b-4272-bd91-470da6674a31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4c33e0f6-43a9-457a-97f4-510ca7548887",
        "cursor": {
          "ref": "9abc614b-5483-4fa2-91dd-c2db6a59c028",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "29d57b92-22a4-4b87-85b5-8948a1b78c26"
        },
        "item": {
          "id": "4c33e0f6-43a9-457a-97f4-510ca7548887",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8c0aa476-1575-41a7-bd1b-bae191d781b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4c33e0f6-43a9-457a-97f4-510ca7548887",
        "cursor": {
          "ref": "9abc614b-5483-4fa2-91dd-c2db6a59c028",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "29d57b92-22a4-4b87-85b5-8948a1b78c26"
        },
        "item": {
          "id": "4c33e0f6-43a9-457a-97f4-510ca7548887",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8c0aa476-1575-41a7-bd1b-bae191d781b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c64d923e-a96e-46ce-b3da-dc0849f1227b",
        "cursor": {
          "ref": "bab5fcd9-2ce7-4fdb-af75-ae0f33785e7d",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fecefa52-7853-4320-852f-8ba2f91a614f"
        },
        "item": {
          "id": "c64d923e-a96e-46ce-b3da-dc0849f1227b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "05c40877-9180-4aa4-99ec-7423e094cab8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c64d923e-a96e-46ce-b3da-dc0849f1227b",
        "cursor": {
          "ref": "bab5fcd9-2ce7-4fdb-af75-ae0f33785e7d",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fecefa52-7853-4320-852f-8ba2f91a614f"
        },
        "item": {
          "id": "c64d923e-a96e-46ce-b3da-dc0849f1227b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "05c40877-9180-4aa4-99ec-7423e094cab8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "71afb74b-88dc-4f95-9af7-677655f803b5",
        "cursor": {
          "ref": "aa980cb5-9478-4f03-aede-65a69bbd76f6",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5585e925-a31e-41c5-b2f5-e8f3eba09aa9"
        },
        "item": {
          "id": "71afb74b-88dc-4f95-9af7-677655f803b5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a094bc78-9c36-4849-a82a-7d015ce59ada",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "71afb74b-88dc-4f95-9af7-677655f803b5",
        "cursor": {
          "ref": "aa980cb5-9478-4f03-aede-65a69bbd76f6",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5585e925-a31e-41c5-b2f5-e8f3eba09aa9"
        },
        "item": {
          "id": "71afb74b-88dc-4f95-9af7-677655f803b5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a094bc78-9c36-4849-a82a-7d015ce59ada",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "7c759021-f3d4-4fa0-897a-7ea7ec7124de",
        "cursor": {
          "ref": "f3a1d0cd-4f78-4949-8cc3-e3ff69701b7d",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ad5f1344-6190-4bd0-8a5a-5366595a674c"
        },
        "item": {
          "id": "7c759021-f3d4-4fa0-897a-7ea7ec7124de",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4cf98e14-8dc7-4503-b258-b0baff11e81e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "7c759021-f3d4-4fa0-897a-7ea7ec7124de",
        "cursor": {
          "ref": "f3a1d0cd-4f78-4949-8cc3-e3ff69701b7d",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ad5f1344-6190-4bd0-8a5a-5366595a674c"
        },
        "item": {
          "id": "7c759021-f3d4-4fa0-897a-7ea7ec7124de",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4cf98e14-8dc7-4503-b258-b0baff11e81e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "40a7637b-d2a1-499a-9dbf-03887de71357",
        "cursor": {
          "ref": "dc3d4fa9-a37c-4454-857f-ef65838d4bc5",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3f08350a-db5b-4c86-bb5d-baf8ad1945e9"
        },
        "item": {
          "id": "40a7637b-d2a1-499a-9dbf-03887de71357",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e67f9875-5058-4a4a-ab39-066d3e5ac267",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "40a7637b-d2a1-499a-9dbf-03887de71357",
        "cursor": {
          "ref": "dc3d4fa9-a37c-4454-857f-ef65838d4bc5",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3f08350a-db5b-4c86-bb5d-baf8ad1945e9"
        },
        "item": {
          "id": "40a7637b-d2a1-499a-9dbf-03887de71357",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e67f9875-5058-4a4a-ab39-066d3e5ac267",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "64aaded7-fc62-442a-b18e-236fc0a5d481",
        "cursor": {
          "ref": "4dbc8a83-93bd-4335-81c4-5fcb96df5dee",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "51079868-bb17-488e-92df-5f905788bace"
        },
        "item": {
          "id": "64aaded7-fc62-442a-b18e-236fc0a5d481",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5c002659-63c6-4448-97dc-8b03d9d2ac1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "64aaded7-fc62-442a-b18e-236fc0a5d481",
        "cursor": {
          "ref": "4dbc8a83-93bd-4335-81c4-5fcb96df5dee",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "51079868-bb17-488e-92df-5f905788bace"
        },
        "item": {
          "id": "64aaded7-fc62-442a-b18e-236fc0a5d481",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5c002659-63c6-4448-97dc-8b03d9d2ac1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "26a9239d-cb8a-416c-945f-1bb61df84ab8",
        "cursor": {
          "ref": "81edb196-1fd1-4da6-80d3-cbc6e232fa01",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "34786536-dcf0-42a3-8b40-2c2a5ef4500d"
        },
        "item": {
          "id": "26a9239d-cb8a-416c-945f-1bb61df84ab8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a1c46311-3782-48bb-99c1-c148edf23e3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "26a9239d-cb8a-416c-945f-1bb61df84ab8",
        "cursor": {
          "ref": "81edb196-1fd1-4da6-80d3-cbc6e232fa01",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "34786536-dcf0-42a3-8b40-2c2a5ef4500d"
        },
        "item": {
          "id": "26a9239d-cb8a-416c-945f-1bb61df84ab8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a1c46311-3782-48bb-99c1-c148edf23e3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "cda46372-db54-4efc-a246-9343837ab9c9",
        "cursor": {
          "ref": "5a6add36-9972-41d2-bc05-65b3711a0772",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8200120c-e77f-4fbf-9287-6ac2bc9cd5a9"
        },
        "item": {
          "id": "cda46372-db54-4efc-a246-9343837ab9c9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "96e08b36-29d2-4a64-b7f7-2b106ab24eee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "cda46372-db54-4efc-a246-9343837ab9c9",
        "cursor": {
          "ref": "5a6add36-9972-41d2-bc05-65b3711a0772",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8200120c-e77f-4fbf-9287-6ac2bc9cd5a9"
        },
        "item": {
          "id": "cda46372-db54-4efc-a246-9343837ab9c9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "96e08b36-29d2-4a64-b7f7-2b106ab24eee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "a9c0ff20-69f7-4cb7-9c3f-651d4dc460cd",
        "cursor": {
          "ref": "fcac383d-4b88-4471-a977-a7ad7f9965fd",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a20747a9-bf1f-454c-81b5-6e3ef8adac90"
        },
        "item": {
          "id": "a9c0ff20-69f7-4cb7-9c3f-651d4dc460cd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f9e64822-1833-4d47-ae9f-49a68d4c4d36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "a9c0ff20-69f7-4cb7-9c3f-651d4dc460cd",
        "cursor": {
          "ref": "fcac383d-4b88-4471-a977-a7ad7f9965fd",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a20747a9-bf1f-454c-81b5-6e3ef8adac90"
        },
        "item": {
          "id": "a9c0ff20-69f7-4cb7-9c3f-651d4dc460cd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f9e64822-1833-4d47-ae9f-49a68d4c4d36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "97f03bb8-1067-4434-afbd-72c0ada444e8",
        "cursor": {
          "ref": "64da1d41-12bb-4898-a64a-900476a11aae",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5d64d80e-3de7-43d4-abf8-859edac838cf"
        },
        "item": {
          "id": "97f03bb8-1067-4434-afbd-72c0ada444e8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3dd4e67c-947d-4cd9-afe5-e3ebe2d435e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "97f03bb8-1067-4434-afbd-72c0ada444e8",
        "cursor": {
          "ref": "64da1d41-12bb-4898-a64a-900476a11aae",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5d64d80e-3de7-43d4-abf8-859edac838cf"
        },
        "item": {
          "id": "97f03bb8-1067-4434-afbd-72c0ada444e8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3dd4e67c-947d-4cd9-afe5-e3ebe2d435e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "f9451181-e258-4d77-921a-b25257224f2c",
        "cursor": {
          "ref": "9dbbc58a-38a8-4789-b88e-f5cf400741c3",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1cc704ea-ba15-4fe8-8e25-ffb61356aba5"
        },
        "item": {
          "id": "f9451181-e258-4d77-921a-b25257224f2c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6d5a2e4a-747d-4caf-8cf0-2f0a6fcfd93d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "f9451181-e258-4d77-921a-b25257224f2c",
        "cursor": {
          "ref": "9dbbc58a-38a8-4789-b88e-f5cf400741c3",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1cc704ea-ba15-4fe8-8e25-ffb61356aba5"
        },
        "item": {
          "id": "f9451181-e258-4d77-921a-b25257224f2c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6d5a2e4a-747d-4caf-8cf0-2f0a6fcfd93d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "7af4b879-fb5a-49d2-a411-9fd21b070fc2",
        "cursor": {
          "ref": "6e076d6b-b18b-4398-8a58-6cbb3a6f2aa3",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "58260422-7c06-4b78-b71f-e023842e9eb0"
        },
        "item": {
          "id": "7af4b879-fb5a-49d2-a411-9fd21b070fc2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "da1ac75b-50b1-4aa4-95ce-b564f54154e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "7af4b879-fb5a-49d2-a411-9fd21b070fc2",
        "cursor": {
          "ref": "6e076d6b-b18b-4398-8a58-6cbb3a6f2aa3",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "58260422-7c06-4b78-b71f-e023842e9eb0"
        },
        "item": {
          "id": "7af4b879-fb5a-49d2-a411-9fd21b070fc2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "da1ac75b-50b1-4aa4-95ce-b564f54154e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "2ab8a20c-72db-4d68-938d-85bad5cacb9d",
        "cursor": {
          "ref": "d39def5f-f312-4ad8-bcaa-60d123622cc1",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "49c6dcce-6091-4838-b6ca-5ee374d743d0"
        },
        "item": {
          "id": "2ab8a20c-72db-4d68-938d-85bad5cacb9d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7e279f7a-457f-4498-ad34-5136d6767414",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "2ab8a20c-72db-4d68-938d-85bad5cacb9d",
        "cursor": {
          "ref": "d39def5f-f312-4ad8-bcaa-60d123622cc1",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "49c6dcce-6091-4838-b6ca-5ee374d743d0"
        },
        "item": {
          "id": "2ab8a20c-72db-4d68-938d-85bad5cacb9d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7e279f7a-457f-4498-ad34-5136d6767414",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "ea6188a3-6922-4924-8d10-3e271300203a",
        "cursor": {
          "ref": "d8c3382b-82a8-4b01-8fe0-ada180694d87",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c4005850-6392-420d-bcc0-6dbb0ad0af5c"
        },
        "item": {
          "id": "ea6188a3-6922-4924-8d10-3e271300203a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a1f7a90e-a3e7-4aef-b995-02f6eafee386",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "ea6188a3-6922-4924-8d10-3e271300203a",
        "cursor": {
          "ref": "d8c3382b-82a8-4b01-8fe0-ada180694d87",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c4005850-6392-420d-bcc0-6dbb0ad0af5c"
        },
        "item": {
          "id": "ea6188a3-6922-4924-8d10-3e271300203a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a1f7a90e-a3e7-4aef-b995-02f6eafee386",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "79a162cc-7bc4-42a7-b240-8bb4ade95334",
        "cursor": {
          "ref": "651684d0-2099-42af-a1be-a536372b14e8",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0365184a-54c2-422f-8d12-58d61b914805"
        },
        "item": {
          "id": "79a162cc-7bc4-42a7-b240-8bb4ade95334",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9940dab9-4d75-42b2-9953-064bdbf6880d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "79a162cc-7bc4-42a7-b240-8bb4ade95334",
        "cursor": {
          "ref": "651684d0-2099-42af-a1be-a536372b14e8",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0365184a-54c2-422f-8d12-58d61b914805"
        },
        "item": {
          "id": "79a162cc-7bc4-42a7-b240-8bb4ade95334",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9940dab9-4d75-42b2-9953-064bdbf6880d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "6c6bc558-183c-4657-a9e7-df90688272c6",
        "cursor": {
          "ref": "a4cd6330-04d4-4c6f-83a7-c9ca83b9ea8c",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1fe6a7c4-2235-490b-97e1-6306b7ed32f9"
        },
        "item": {
          "id": "6c6bc558-183c-4657-a9e7-df90688272c6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cc1b2163-69e0-4a2e-9644-576d7baaeb36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "6c6bc558-183c-4657-a9e7-df90688272c6",
        "cursor": {
          "ref": "a4cd6330-04d4-4c6f-83a7-c9ca83b9ea8c",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1fe6a7c4-2235-490b-97e1-6306b7ed32f9"
        },
        "item": {
          "id": "6c6bc558-183c-4657-a9e7-df90688272c6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cc1b2163-69e0-4a2e-9644-576d7baaeb36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "32d94df0-f8f4-4f4c-a7b4-7111255fa1a0",
        "cursor": {
          "ref": "8d6311d0-1ade-432d-a7c4-a4e469c25330",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2a253a9d-55b8-46cc-8039-3452b6677283"
        },
        "item": {
          "id": "32d94df0-f8f4-4f4c-a7b4-7111255fa1a0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "635af1a4-3489-4456-8d3b-94e53f76db7f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "32d94df0-f8f4-4f4c-a7b4-7111255fa1a0",
        "cursor": {
          "ref": "8d6311d0-1ade-432d-a7c4-a4e469c25330",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2a253a9d-55b8-46cc-8039-3452b6677283"
        },
        "item": {
          "id": "32d94df0-f8f4-4f4c-a7b4-7111255fa1a0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "635af1a4-3489-4456-8d3b-94e53f76db7f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "87ca02ae-8276-45ab-b9d0-0da3a811d891",
        "cursor": {
          "ref": "218a7972-b9ed-4c5c-984a-13a6e8592fe8",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "febef1e6-bcd8-46f2-b767-8bd65fa62f62"
        },
        "item": {
          "id": "87ca02ae-8276-45ab-b9d0-0da3a811d891",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a39af013-0570-4dd8-a0c2-76a8df01a794",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "87ca02ae-8276-45ab-b9d0-0da3a811d891",
        "cursor": {
          "ref": "218a7972-b9ed-4c5c-984a-13a6e8592fe8",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "febef1e6-bcd8-46f2-b767-8bd65fa62f62"
        },
        "item": {
          "id": "87ca02ae-8276-45ab-b9d0-0da3a811d891",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a39af013-0570-4dd8-a0c2-76a8df01a794",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "11bb0a10-6e70-4d77-9e45-4ca21712149c",
        "cursor": {
          "ref": "e33c2c93-4e86-482a-9e87-de86b60801c4",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e9426a58-dcdb-4b7a-9ac8-1a74eb298579"
        },
        "item": {
          "id": "11bb0a10-6e70-4d77-9e45-4ca21712149c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b65e0713-4c4f-4efe-9285-e09cb9cb87f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "11bb0a10-6e70-4d77-9e45-4ca21712149c",
        "cursor": {
          "ref": "e33c2c93-4e86-482a-9e87-de86b60801c4",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e9426a58-dcdb-4b7a-9ac8-1a74eb298579"
        },
        "item": {
          "id": "11bb0a10-6e70-4d77-9e45-4ca21712149c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b65e0713-4c4f-4efe-9285-e09cb9cb87f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "dd79e93b-dc68-4e90-9253-85ecaa98fe20",
        "cursor": {
          "ref": "7ce493ad-89ee-4827-bb1e-a8740fdb7801",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "15b5629b-dad0-467e-95ad-0cdbe7d2c413"
        },
        "item": {
          "id": "dd79e93b-dc68-4e90-9253-85ecaa98fe20",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "683d9880-1d60-437c-938c-171cab5fddbb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "dd79e93b-dc68-4e90-9253-85ecaa98fe20",
        "cursor": {
          "ref": "7ce493ad-89ee-4827-bb1e-a8740fdb7801",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "15b5629b-dad0-467e-95ad-0cdbe7d2c413"
        },
        "item": {
          "id": "dd79e93b-dc68-4e90-9253-85ecaa98fe20",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "683d9880-1d60-437c-938c-171cab5fddbb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "94d82d12-9bab-4836-a522-014ebfca1c15",
        "cursor": {
          "ref": "4de18cb8-bc5a-4b6f-803a-83ddb40ba18e",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "44ea054f-46d1-404a-9cc2-22475cd9f536"
        },
        "item": {
          "id": "94d82d12-9bab-4836-a522-014ebfca1c15",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f2144168-9ef0-4064-99fe-9c5d507fdc4d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "94d82d12-9bab-4836-a522-014ebfca1c15",
        "cursor": {
          "ref": "4de18cb8-bc5a-4b6f-803a-83ddb40ba18e",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "44ea054f-46d1-404a-9cc2-22475cd9f536"
        },
        "item": {
          "id": "94d82d12-9bab-4836-a522-014ebfca1c15",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f2144168-9ef0-4064-99fe-9c5d507fdc4d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "c36ba215-ddfb-4780-a34d-0debe5c6398f",
        "cursor": {
          "ref": "451ef749-68db-4a7a-bb9d-b90ccb3e6088",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c0db46a2-f806-412a-b7a7-9813b5d4ce27"
        },
        "item": {
          "id": "c36ba215-ddfb-4780-a34d-0debe5c6398f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "43fb7f67-991d-49e6-b68b-0dab6fce9be0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c36ba215-ddfb-4780-a34d-0debe5c6398f",
        "cursor": {
          "ref": "451ef749-68db-4a7a-bb9d-b90ccb3e6088",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c0db46a2-f806-412a-b7a7-9813b5d4ce27"
        },
        "item": {
          "id": "c36ba215-ddfb-4780-a34d-0debe5c6398f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "43fb7f67-991d-49e6-b68b-0dab6fce9be0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "82f2acfe-1fe4-41d4-abc0-636f77a6d2a1",
        "cursor": {
          "ref": "d04f330e-43e3-4df1-b408-17a1be753162",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ff044a09-efe8-4c1d-a94f-0b300550e231"
        },
        "item": {
          "id": "82f2acfe-1fe4-41d4-abc0-636f77a6d2a1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0a45dff0-ff0d-4cb3-9672-04b3a6685c6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "82f2acfe-1fe4-41d4-abc0-636f77a6d2a1",
        "cursor": {
          "ref": "d04f330e-43e3-4df1-b408-17a1be753162",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ff044a09-efe8-4c1d-a94f-0b300550e231"
        },
        "item": {
          "id": "82f2acfe-1fe4-41d4-abc0-636f77a6d2a1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0a45dff0-ff0d-4cb3-9672-04b3a6685c6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "d3839fa8-e832-4e7c-a752-f4671ef5bd3c",
        "cursor": {
          "ref": "2cec27dc-a46d-4f25-90d3-41326218ce05",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c146aae8-877e-49d0-a69e-0b47919f2b83"
        },
        "item": {
          "id": "d3839fa8-e832-4e7c-a752-f4671ef5bd3c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fea5fd2e-6d2e-49eb-ad64-366bed8c2745",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d3839fa8-e832-4e7c-a752-f4671ef5bd3c",
        "cursor": {
          "ref": "2cec27dc-a46d-4f25-90d3-41326218ce05",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c146aae8-877e-49d0-a69e-0b47919f2b83"
        },
        "item": {
          "id": "d3839fa8-e832-4e7c-a752-f4671ef5bd3c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fea5fd2e-6d2e-49eb-ad64-366bed8c2745",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "094e2d5a-76d1-475c-ad5e-9dc8c930ee31",
        "cursor": {
          "ref": "05934304-35e0-4f5c-a79c-33d4f795d6e9",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8f93d7d7-fe8c-46e3-b8a1-4555c45f5e88"
        },
        "item": {
          "id": "094e2d5a-76d1-475c-ad5e-9dc8c930ee31",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bdc6142d-086c-4f1c-926f-7121fe210fc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "094e2d5a-76d1-475c-ad5e-9dc8c930ee31",
        "cursor": {
          "ref": "05934304-35e0-4f5c-a79c-33d4f795d6e9",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8f93d7d7-fe8c-46e3-b8a1-4555c45f5e88"
        },
        "item": {
          "id": "094e2d5a-76d1-475c-ad5e-9dc8c930ee31",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bdc6142d-086c-4f1c-926f-7121fe210fc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1f586208-a394-4922-8f06-c344f284a77b",
        "cursor": {
          "ref": "cbfbc337-7c24-4e18-99c1-92b8f7064e7e",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2c8d1a58-9600-48f1-92e9-f58f768bea57"
        },
        "item": {
          "id": "1f586208-a394-4922-8f06-c344f284a77b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2b752f1c-8eb3-44ec-b0ce-78442de65aed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "1f586208-a394-4922-8f06-c344f284a77b",
        "cursor": {
          "ref": "cbfbc337-7c24-4e18-99c1-92b8f7064e7e",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2c8d1a58-9600-48f1-92e9-f58f768bea57"
        },
        "item": {
          "id": "1f586208-a394-4922-8f06-c344f284a77b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2b752f1c-8eb3-44ec-b0ce-78442de65aed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "7fea0619-6071-45a7-87aa-41ff57713f54",
        "cursor": {
          "ref": "503823f5-7b80-431f-a9e1-10a861343e5f",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "21e575cf-b4d5-48d6-950a-a25bbdbbe4c0"
        },
        "item": {
          "id": "7fea0619-6071-45a7-87aa-41ff57713f54",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b07557e2-4a71-4c91-b2d3-d4c0275b88be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "7fea0619-6071-45a7-87aa-41ff57713f54",
        "cursor": {
          "ref": "503823f5-7b80-431f-a9e1-10a861343e5f",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "21e575cf-b4d5-48d6-950a-a25bbdbbe4c0"
        },
        "item": {
          "id": "7fea0619-6071-45a7-87aa-41ff57713f54",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b07557e2-4a71-4c91-b2d3-d4c0275b88be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "84bbf101-e922-4149-88a0-814330cd93d8",
        "cursor": {
          "ref": "acf679b4-b7d4-4ddc-91eb-4227213add77",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8e0d7788-58d0-427f-a778-91b518c626aa"
        },
        "item": {
          "id": "84bbf101-e922-4149-88a0-814330cd93d8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ce2d81c2-6ac9-4e65-af16-8837c6419a16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "84bbf101-e922-4149-88a0-814330cd93d8",
        "cursor": {
          "ref": "acf679b4-b7d4-4ddc-91eb-4227213add77",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8e0d7788-58d0-427f-a778-91b518c626aa"
        },
        "item": {
          "id": "84bbf101-e922-4149-88a0-814330cd93d8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ce2d81c2-6ac9-4e65-af16-8837c6419a16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "5e5c3949-19ef-4b1a-8545-01c256460d0c",
        "cursor": {
          "ref": "6edf6c24-a17b-481c-b26a-abfdf9e83d48",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "047ded99-4961-4190-9ce9-e6cb476e707b"
        },
        "item": {
          "id": "5e5c3949-19ef-4b1a-8545-01c256460d0c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e5fee43a-17a3-4a03-9359-69dfda337f33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "5e5c3949-19ef-4b1a-8545-01c256460d0c",
        "cursor": {
          "ref": "6edf6c24-a17b-481c-b26a-abfdf9e83d48",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "047ded99-4961-4190-9ce9-e6cb476e707b"
        },
        "item": {
          "id": "5e5c3949-19ef-4b1a-8545-01c256460d0c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e5fee43a-17a3-4a03-9359-69dfda337f33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "5640d504-ab91-4cc5-9622-1cd1cadd29c5",
        "cursor": {
          "ref": "75f4905d-53d4-48ea-97b3-49bd49a19d47",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3641c3c0-cfe8-4a07-a218-992fb394109f"
        },
        "item": {
          "id": "5640d504-ab91-4cc5-9622-1cd1cadd29c5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b3541e44-1ed0-4bc6-a5e1-f1edc4269a53",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "5640d504-ab91-4cc5-9622-1cd1cadd29c5",
        "cursor": {
          "ref": "75f4905d-53d4-48ea-97b3-49bd49a19d47",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3641c3c0-cfe8-4a07-a218-992fb394109f"
        },
        "item": {
          "id": "5640d504-ab91-4cc5-9622-1cd1cadd29c5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b3541e44-1ed0-4bc6-a5e1-f1edc4269a53",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "bb135dc3-e4c5-4b58-8f5b-31031eec89fe",
        "cursor": {
          "ref": "6258fa18-f5ad-46b6-948b-99003b1107e5",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fbdb57b1-e625-4589-930d-e706870bba9c"
        },
        "item": {
          "id": "bb135dc3-e4c5-4b58-8f5b-31031eec89fe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c121139b-1602-41a3-8e95-cc86daa34629",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "bb135dc3-e4c5-4b58-8f5b-31031eec89fe",
        "cursor": {
          "ref": "6258fa18-f5ad-46b6-948b-99003b1107e5",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fbdb57b1-e625-4589-930d-e706870bba9c"
        },
        "item": {
          "id": "bb135dc3-e4c5-4b58-8f5b-31031eec89fe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c121139b-1602-41a3-8e95-cc86daa34629",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "daf7a28b-1027-41df-89bf-a06f1d98977f",
        "cursor": {
          "ref": "e57e1403-fd3f-447d-830e-bc67c4c53c2f",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d0ec80d0-7279-49e1-90e2-d981e01e21a9"
        },
        "item": {
          "id": "daf7a28b-1027-41df-89bf-a06f1d98977f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "04db8258-c307-4f93-91d9-6ebfd6b8c4de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "daf7a28b-1027-41df-89bf-a06f1d98977f",
        "cursor": {
          "ref": "e57e1403-fd3f-447d-830e-bc67c4c53c2f",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d0ec80d0-7279-49e1-90e2-d981e01e21a9"
        },
        "item": {
          "id": "daf7a28b-1027-41df-89bf-a06f1d98977f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "04db8258-c307-4f93-91d9-6ebfd6b8c4de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1658cce2-aad2-4e91-b66f-ee368e23b6fc",
        "cursor": {
          "ref": "719d3c18-5b20-4d15-bb4d-4d5c225e8202",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c6148887-a652-4f2d-ac74-c58952272438"
        },
        "item": {
          "id": "1658cce2-aad2-4e91-b66f-ee368e23b6fc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "41f9e8a4-96f1-45eb-919d-118b1b58040b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1658cce2-aad2-4e91-b66f-ee368e23b6fc",
        "cursor": {
          "ref": "719d3c18-5b20-4d15-bb4d-4d5c225e8202",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c6148887-a652-4f2d-ac74-c58952272438"
        },
        "item": {
          "id": "1658cce2-aad2-4e91-b66f-ee368e23b6fc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "41f9e8a4-96f1-45eb-919d-118b1b58040b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "80d8febf-bc98-420e-b004-e8cf6ddce439",
        "cursor": {
          "ref": "4a53818d-5a8f-4a63-9378-af735f642ed3",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9a189f89-ada0-41c6-8b8b-0423b7edb51d"
        },
        "item": {
          "id": "80d8febf-bc98-420e-b004-e8cf6ddce439",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bff80097-5915-4a79-8c4d-e5353f7bd1ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "80d8febf-bc98-420e-b004-e8cf6ddce439",
        "cursor": {
          "ref": "4a53818d-5a8f-4a63-9378-af735f642ed3",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9a189f89-ada0-41c6-8b8b-0423b7edb51d"
        },
        "item": {
          "id": "80d8febf-bc98-420e-b004-e8cf6ddce439",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bff80097-5915-4a79-8c4d-e5353f7bd1ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "ca344f79-c277-42fe-af6a-fd211c762aec",
        "cursor": {
          "ref": "04579fee-f78e-4eeb-848c-40087c8cf339",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "56c2ac23-df8f-4e5b-92da-b428a8e245d1"
        },
        "item": {
          "id": "ca344f79-c277-42fe-af6a-fd211c762aec",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a4fbc888-95c6-402e-b932-009fa4697280",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ca344f79-c277-42fe-af6a-fd211c762aec",
        "cursor": {
          "ref": "04579fee-f78e-4eeb-848c-40087c8cf339",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "56c2ac23-df8f-4e5b-92da-b428a8e245d1"
        },
        "item": {
          "id": "ca344f79-c277-42fe-af6a-fd211c762aec",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a4fbc888-95c6-402e-b932-009fa4697280",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a0736224-601c-4c94-8d8b-e7b6ff862618",
        "cursor": {
          "ref": "0d4d5b47-ce18-45c7-a6e6-03fc349159d4",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bcba9a2f-0776-4ebb-bf4c-33c883e5c876"
        },
        "item": {
          "id": "a0736224-601c-4c94-8d8b-e7b6ff862618",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7c948eff-2fed-4b99-93f5-d9a0b647baf9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a0736224-601c-4c94-8d8b-e7b6ff862618",
        "cursor": {
          "ref": "0d4d5b47-ce18-45c7-a6e6-03fc349159d4",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bcba9a2f-0776-4ebb-bf4c-33c883e5c876"
        },
        "item": {
          "id": "a0736224-601c-4c94-8d8b-e7b6ff862618",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7c948eff-2fed-4b99-93f5-d9a0b647baf9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "6cde3768-e052-424c-a951-e09dec3822d8",
        "cursor": {
          "ref": "a66229c3-03e4-4c3f-9b56-c728ccd7c47d",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8af380d5-c736-4c56-b21c-b5e2bb22ab29"
        },
        "item": {
          "id": "6cde3768-e052-424c-a951-e09dec3822d8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0e0de959-e7c6-4165-b09f-811b44617b1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6cde3768-e052-424c-a951-e09dec3822d8",
        "cursor": {
          "ref": "a66229c3-03e4-4c3f-9b56-c728ccd7c47d",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8af380d5-c736-4c56-b21c-b5e2bb22ab29"
        },
        "item": {
          "id": "6cde3768-e052-424c-a951-e09dec3822d8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0e0de959-e7c6-4165-b09f-811b44617b1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "59a8922b-ca6e-4c53-91c6-0c44accb6a7f",
        "cursor": {
          "ref": "0864cf6f-78c8-407b-bda7-04cc2fe0b9ce",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "40d6bfe9-30c3-44ee-a741-1f19e8b50ddc"
        },
        "item": {
          "id": "59a8922b-ca6e-4c53-91c6-0c44accb6a7f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d8ae83a5-f955-4b5b-a007-d497472a49d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "59a8922b-ca6e-4c53-91c6-0c44accb6a7f",
        "cursor": {
          "ref": "0864cf6f-78c8-407b-bda7-04cc2fe0b9ce",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "40d6bfe9-30c3-44ee-a741-1f19e8b50ddc"
        },
        "item": {
          "id": "59a8922b-ca6e-4c53-91c6-0c44accb6a7f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d8ae83a5-f955-4b5b-a007-d497472a49d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "97f742ba-ba6d-4250-aa80-adb613d3d146",
        "cursor": {
          "ref": "dac40ab1-461e-42b4-b773-8669b6f76348",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "71ffdbb8-b59f-4d5b-a11e-613f7c4cb127"
        },
        "item": {
          "id": "97f742ba-ba6d-4250-aa80-adb613d3d146",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "48eefad5-d4c4-4e1d-aaec-31f117e5c44c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "97f742ba-ba6d-4250-aa80-adb613d3d146",
        "cursor": {
          "ref": "dac40ab1-461e-42b4-b773-8669b6f76348",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "71ffdbb8-b59f-4d5b-a11e-613f7c4cb127"
        },
        "item": {
          "id": "97f742ba-ba6d-4250-aa80-adb613d3d146",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "48eefad5-d4c4-4e1d-aaec-31f117e5c44c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f2431a46-cab7-4fa9-9002-1efa6df74f50",
        "cursor": {
          "ref": "5136f528-7645-432d-bb4b-036ac6cdb9bf",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c8f7c1f9-7ad1-49fd-a36e-2e29e03e3f67"
        },
        "item": {
          "id": "f2431a46-cab7-4fa9-9002-1efa6df74f50",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "dbc41427-b4d1-4b1d-bfd4-f9db332f7c37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f2431a46-cab7-4fa9-9002-1efa6df74f50",
        "cursor": {
          "ref": "5136f528-7645-432d-bb4b-036ac6cdb9bf",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c8f7c1f9-7ad1-49fd-a36e-2e29e03e3f67"
        },
        "item": {
          "id": "f2431a46-cab7-4fa9-9002-1efa6df74f50",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "dbc41427-b4d1-4b1d-bfd4-f9db332f7c37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f5d14113-0656-4f62-9429-9ecdeee7009c",
        "cursor": {
          "ref": "cb87d4dc-6031-4634-8847-88019cc4e47d",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e4748585-3b6d-41e9-92c7-ea3bdbe10365"
        },
        "item": {
          "id": "f5d14113-0656-4f62-9429-9ecdeee7009c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5a88f44d-1601-4012-a031-46dd15f50caa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "f5d14113-0656-4f62-9429-9ecdeee7009c",
        "cursor": {
          "ref": "cb87d4dc-6031-4634-8847-88019cc4e47d",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e4748585-3b6d-41e9-92c7-ea3bdbe10365"
        },
        "item": {
          "id": "f5d14113-0656-4f62-9429-9ecdeee7009c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5a88f44d-1601-4012-a031-46dd15f50caa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "f6160410-5330-4519-a945-00b1e88d652b",
        "cursor": {
          "ref": "c3595d08-cbd3-4d83-805c-2f0f58e0cf7d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "aadfe82d-a9f6-470d-9b4f-b9dd420a852b"
        },
        "item": {
          "id": "f6160410-5330-4519-a945-00b1e88d652b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1461944a-86ac-4c26-9c07-4b2d7090dc47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "f6160410-5330-4519-a945-00b1e88d652b",
        "cursor": {
          "ref": "c3595d08-cbd3-4d83-805c-2f0f58e0cf7d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "aadfe82d-a9f6-470d-9b4f-b9dd420a852b"
        },
        "item": {
          "id": "f6160410-5330-4519-a945-00b1e88d652b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1461944a-86ac-4c26-9c07-4b2d7090dc47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "c4496fa0-8566-4eb8-a8c5-8049dbd18f21",
        "cursor": {
          "ref": "fc25576c-0cdc-4f93-8a9b-6f65a2b7e02f",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "30bb15e9-c260-46b7-9a3d-8b71cf52724b"
        },
        "item": {
          "id": "c4496fa0-8566-4eb8-a8c5-8049dbd18f21",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8ed327da-1f25-4dd0-9ecd-214d3595f0bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "c4496fa0-8566-4eb8-a8c5-8049dbd18f21",
        "cursor": {
          "ref": "fc25576c-0cdc-4f93-8a9b-6f65a2b7e02f",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "30bb15e9-c260-46b7-9a3d-8b71cf52724b"
        },
        "item": {
          "id": "c4496fa0-8566-4eb8-a8c5-8049dbd18f21",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8ed327da-1f25-4dd0-9ecd-214d3595f0bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "bad93552-b6f5-425e-b18a-3f468d5f950a",
        "cursor": {
          "ref": "646905a0-5c33-4100-8545-2faa5da08a37",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "61243ed5-b991-4a91-8238-1dda5861028b"
        },
        "item": {
          "id": "bad93552-b6f5-425e-b18a-3f468d5f950a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6c318086-5bd5-4bbe-9d4a-f20bb23223fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "bad93552-b6f5-425e-b18a-3f468d5f950a",
        "cursor": {
          "ref": "646905a0-5c33-4100-8545-2faa5da08a37",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "61243ed5-b991-4a91-8238-1dda5861028b"
        },
        "item": {
          "id": "bad93552-b6f5-425e-b18a-3f468d5f950a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6c318086-5bd5-4bbe-9d4a-f20bb23223fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "b4ee2772-29ab-474a-95f2-ff0866b17718",
        "cursor": {
          "ref": "7913563c-2481-42e4-b477-d2730573e4f0",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fae9493b-e170-496b-b471-4a3ec12cab6e"
        },
        "item": {
          "id": "b4ee2772-29ab-474a-95f2-ff0866b17718",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "09adb178-d06f-447a-8e6f-ebb4bd3dbb42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b4ee2772-29ab-474a-95f2-ff0866b17718",
        "cursor": {
          "ref": "7913563c-2481-42e4-b477-d2730573e4f0",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fae9493b-e170-496b-b471-4a3ec12cab6e"
        },
        "item": {
          "id": "b4ee2772-29ab-474a-95f2-ff0866b17718",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "09adb178-d06f-447a-8e6f-ebb4bd3dbb42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "6adabd96-c8e7-4e9a-a654-627c53f00536",
        "cursor": {
          "ref": "d580b14b-763a-4a03-9127-31e359261ea5",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5004a786-30e6-4cda-ae77-c0113d7c5ddc"
        },
        "item": {
          "id": "6adabd96-c8e7-4e9a-a654-627c53f00536",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "25cd642d-d43c-4e5b-bb04-df299bfa60c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "6adabd96-c8e7-4e9a-a654-627c53f00536",
        "cursor": {
          "ref": "d580b14b-763a-4a03-9127-31e359261ea5",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5004a786-30e6-4cda-ae77-c0113d7c5ddc"
        },
        "item": {
          "id": "6adabd96-c8e7-4e9a-a654-627c53f00536",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "25cd642d-d43c-4e5b-bb04-df299bfa60c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "d43ee939-a0c9-4c99-a0d1-20f4b7591871",
        "cursor": {
          "ref": "c4c522f6-9d62-49c7-92e0-03be9fe5e4b9",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6acccaa7-5b2c-4e06-b97d-6efedcec6c3e"
        },
        "item": {
          "id": "d43ee939-a0c9-4c99-a0d1-20f4b7591871",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bbd7bb94-8959-4144-9ffb-4c3479876d70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "d43ee939-a0c9-4c99-a0d1-20f4b7591871",
        "cursor": {
          "ref": "c4c522f6-9d62-49c7-92e0-03be9fe5e4b9",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6acccaa7-5b2c-4e06-b97d-6efedcec6c3e"
        },
        "item": {
          "id": "d43ee939-a0c9-4c99-a0d1-20f4b7591871",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bbd7bb94-8959-4144-9ffb-4c3479876d70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "996833ea-57a1-4b2d-b9df-5af3266f6678",
        "cursor": {
          "ref": "9d3ad21b-e436-417c-ba95-23c152c43576",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4a456442-bb92-4406-a60b-fbeaf7f03af9"
        },
        "item": {
          "id": "996833ea-57a1-4b2d-b9df-5af3266f6678",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6dc20bf0-4875-4fa6-85a2-dbc1556a4e4c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "996833ea-57a1-4b2d-b9df-5af3266f6678",
        "cursor": {
          "ref": "9d3ad21b-e436-417c-ba95-23c152c43576",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4a456442-bb92-4406-a60b-fbeaf7f03af9"
        },
        "item": {
          "id": "996833ea-57a1-4b2d-b9df-5af3266f6678",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6dc20bf0-4875-4fa6-85a2-dbc1556a4e4c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "f567b366-da6a-4b70-96b7-a38f76df8bef",
        "cursor": {
          "ref": "4d7b917d-b076-4b07-afb8-d8cd7c65ba61",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "95a07516-9c17-4380-b142-3812739d81ba"
        },
        "item": {
          "id": "f567b366-da6a-4b70-96b7-a38f76df8bef",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c91d7fc5-4c4c-4011-bfc0-ffa7e653b2c5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "f567b366-da6a-4b70-96b7-a38f76df8bef",
        "cursor": {
          "ref": "4d7b917d-b076-4b07-afb8-d8cd7c65ba61",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "95a07516-9c17-4380-b142-3812739d81ba"
        },
        "item": {
          "id": "f567b366-da6a-4b70-96b7-a38f76df8bef",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c91d7fc5-4c4c-4011-bfc0-ffa7e653b2c5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "befc486e-c840-40ff-9e9a-68a8d377664a",
        "cursor": {
          "ref": "f036bed4-6444-469a-b9c2-5efd17e030f8",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "88979323-32ae-4ded-8e58-0e3a5638b833"
        },
        "item": {
          "id": "befc486e-c840-40ff-9e9a-68a8d377664a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "56ed1287-3686-43a5-85f2-297b06da8354",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "befc486e-c840-40ff-9e9a-68a8d377664a",
        "cursor": {
          "ref": "f036bed4-6444-469a-b9c2-5efd17e030f8",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "88979323-32ae-4ded-8e58-0e3a5638b833"
        },
        "item": {
          "id": "befc486e-c840-40ff-9e9a-68a8d377664a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "56ed1287-3686-43a5-85f2-297b06da8354",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "88d379c5-338d-49ec-ae82-1b24a245abaf",
        "cursor": {
          "ref": "d088e25d-dd8c-4e76-894c-7658bd724a59",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c747960f-3f2b-48e7-9eef-3922c859a96c"
        },
        "item": {
          "id": "88d379c5-338d-49ec-ae82-1b24a245abaf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0ade8e54-84da-447a-bad4-fd378138353a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "88d379c5-338d-49ec-ae82-1b24a245abaf",
        "cursor": {
          "ref": "d088e25d-dd8c-4e76-894c-7658bd724a59",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c747960f-3f2b-48e7-9eef-3922c859a96c"
        },
        "item": {
          "id": "88d379c5-338d-49ec-ae82-1b24a245abaf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0ade8e54-84da-447a-bad4-fd378138353a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "967dade7-e2ed-4793-8520-f6a6d7548e40",
        "cursor": {
          "ref": "8f90d29b-f1b3-4936-a778-5f0b82050ad7",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4a026c8b-5ede-4372-9dda-ebf5dddbbffe"
        },
        "item": {
          "id": "967dade7-e2ed-4793-8520-f6a6d7548e40",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2a75b3d4-c455-45a0-ba17-a94c8a5f6ea4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "967dade7-e2ed-4793-8520-f6a6d7548e40",
        "cursor": {
          "ref": "8f90d29b-f1b3-4936-a778-5f0b82050ad7",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4a026c8b-5ede-4372-9dda-ebf5dddbbffe"
        },
        "item": {
          "id": "967dade7-e2ed-4793-8520-f6a6d7548e40",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2a75b3d4-c455-45a0-ba17-a94c8a5f6ea4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "af12a1ff-d652-4143-b774-2ac2d71dbd25",
        "cursor": {
          "ref": "756cdb96-2653-4537-9a57-f2744b351ccc",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "76ec411d-ca03-4fb9-83b1-ffdc05f24360"
        },
        "item": {
          "id": "af12a1ff-d652-4143-b774-2ac2d71dbd25",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "bb419908-9988-4088-a5ee-594673e4f30f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "af12a1ff-d652-4143-b774-2ac2d71dbd25",
        "cursor": {
          "ref": "756cdb96-2653-4537-9a57-f2744b351ccc",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "76ec411d-ca03-4fb9-83b1-ffdc05f24360"
        },
        "item": {
          "id": "af12a1ff-d652-4143-b774-2ac2d71dbd25",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "bb419908-9988-4088-a5ee-594673e4f30f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "cb3c5ac7-a574-4cf3-b924-8fb5b923cd23",
        "cursor": {
          "ref": "56936991-1afb-4fd1-a20e-d9d534f7ba54",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a85a912e-93bc-44fb-a130-a88359e37b6e"
        },
        "item": {
          "id": "cb3c5ac7-a574-4cf3-b924-8fb5b923cd23",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "16fb581e-3059-4563-9d4b-3bdfae96b1b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "cb3c5ac7-a574-4cf3-b924-8fb5b923cd23",
        "cursor": {
          "ref": "56936991-1afb-4fd1-a20e-d9d534f7ba54",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a85a912e-93bc-44fb-a130-a88359e37b6e"
        },
        "item": {
          "id": "cb3c5ac7-a574-4cf3-b924-8fb5b923cd23",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "16fb581e-3059-4563-9d4b-3bdfae96b1b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b60eac8e-d555-4ab1-81d3-faaf9dae5479",
        "cursor": {
          "ref": "671acb1b-e633-4e09-9688-031852727f4d",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9504af9a-7630-490f-afe4-74a2bec8cad0"
        },
        "item": {
          "id": "b60eac8e-d555-4ab1-81d3-faaf9dae5479",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "37199a52-0479-4989-97b3-0acf62696ce4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b60eac8e-d555-4ab1-81d3-faaf9dae5479",
        "cursor": {
          "ref": "671acb1b-e633-4e09-9688-031852727f4d",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9504af9a-7630-490f-afe4-74a2bec8cad0"
        },
        "item": {
          "id": "b60eac8e-d555-4ab1-81d3-faaf9dae5479",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "37199a52-0479-4989-97b3-0acf62696ce4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e620aa61-8234-4085-857e-f98d9380a384",
        "cursor": {
          "ref": "821f942d-ec39-4228-9948-644db0c42719",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fd973954-0ce3-430b-9329-c7e7e9d7549a"
        },
        "item": {
          "id": "e620aa61-8234-4085-857e-f98d9380a384",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b6f519e3-0092-44e2-857d-9b320e492ba9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e620aa61-8234-4085-857e-f98d9380a384",
        "cursor": {
          "ref": "821f942d-ec39-4228-9948-644db0c42719",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fd973954-0ce3-430b-9329-c7e7e9d7549a"
        },
        "item": {
          "id": "e620aa61-8234-4085-857e-f98d9380a384",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b6f519e3-0092-44e2-857d-9b320e492ba9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fa45cd67-e2d8-466e-aeb2-509eef85617a",
        "cursor": {
          "ref": "177068db-564f-45b8-b5ca-68400c6bd58b",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fd2ee5da-1d74-4336-a7d1-89ef42f866b0"
        },
        "item": {
          "id": "fa45cd67-e2d8-466e-aeb2-509eef85617a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "55420aef-8b22-4dd3-a34c-92ba3f083fa2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "fa45cd67-e2d8-466e-aeb2-509eef85617a",
        "cursor": {
          "ref": "177068db-564f-45b8-b5ca-68400c6bd58b",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fd2ee5da-1d74-4336-a7d1-89ef42f866b0"
        },
        "item": {
          "id": "fa45cd67-e2d8-466e-aeb2-509eef85617a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "55420aef-8b22-4dd3-a34c-92ba3f083fa2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ac04915a-a857-4453-866e-b20660eccce7",
        "cursor": {
          "ref": "59fce2d9-8d2e-4b7c-a285-4efb64be550d",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a8232305-5d01-4fe9-90bb-0fed0c4f9d98"
        },
        "item": {
          "id": "ac04915a-a857-4453-866e-b20660eccce7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6006490f-b694-49ae-a765-dcdc74cb4b37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ac04915a-a857-4453-866e-b20660eccce7",
        "cursor": {
          "ref": "59fce2d9-8d2e-4b7c-a285-4efb64be550d",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a8232305-5d01-4fe9-90bb-0fed0c4f9d98"
        },
        "item": {
          "id": "ac04915a-a857-4453-866e-b20660eccce7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6006490f-b694-49ae-a765-dcdc74cb4b37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c40628ff-5a56-412a-a3b1-7af9c0ddba72",
        "cursor": {
          "ref": "067f9903-b18c-4881-9446-b5a222c807ce",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5e87509d-bac4-4df9-9500-7ed0da671ec5"
        },
        "item": {
          "id": "c40628ff-5a56-412a-a3b1-7af9c0ddba72",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2b4e55b6-1f69-4ab4-9417-f9b6d4d251f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "c40628ff-5a56-412a-a3b1-7af9c0ddba72",
        "cursor": {
          "ref": "067f9903-b18c-4881-9446-b5a222c807ce",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5e87509d-bac4-4df9-9500-7ed0da671ec5"
        },
        "item": {
          "id": "c40628ff-5a56-412a-a3b1-7af9c0ddba72",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2b4e55b6-1f69-4ab4-9417-f9b6d4d251f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "a1c8fba2-7311-4a52-965e-d1ce956e8fb2",
        "cursor": {
          "ref": "501cd432-464d-4829-95e4-22aef4dea146",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fa4fa893-2ab0-4d22-8777-50919e25bc9d"
        },
        "item": {
          "id": "a1c8fba2-7311-4a52-965e-d1ce956e8fb2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "00d2cc63-446a-4c8f-b194-2902b73d9552",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "a1c8fba2-7311-4a52-965e-d1ce956e8fb2",
        "cursor": {
          "ref": "501cd432-464d-4829-95e4-22aef4dea146",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fa4fa893-2ab0-4d22-8777-50919e25bc9d"
        },
        "item": {
          "id": "a1c8fba2-7311-4a52-965e-d1ce956e8fb2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "00d2cc63-446a-4c8f-b194-2902b73d9552",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "1be5583a-5c7a-4176-80ad-408af0f58148",
        "cursor": {
          "ref": "fad40379-b959-4929-ab36-46093728d780",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "368da407-36a8-4c13-8c29-3d50b9596568"
        },
        "item": {
          "id": "1be5583a-5c7a-4176-80ad-408af0f58148",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "107ebddc-38a8-4cb5-8659-185bc8563296",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "1be5583a-5c7a-4176-80ad-408af0f58148",
        "cursor": {
          "ref": "fad40379-b959-4929-ab36-46093728d780",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "368da407-36a8-4c13-8c29-3d50b9596568"
        },
        "item": {
          "id": "1be5583a-5c7a-4176-80ad-408af0f58148",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "107ebddc-38a8-4cb5-8659-185bc8563296",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "1f6e3803-4a3e-4901-95ea-1d066a3a00cc",
        "cursor": {
          "ref": "61273ef2-0fbd-40da-9e2c-01ba12a29065",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "eba62f5a-0eee-4bc6-831d-5a659ba535bc"
        },
        "item": {
          "id": "1f6e3803-4a3e-4901-95ea-1d066a3a00cc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2e075172-f298-4c8c-a9e3-f6250920c7bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "1f6e3803-4a3e-4901-95ea-1d066a3a00cc",
        "cursor": {
          "ref": "61273ef2-0fbd-40da-9e2c-01ba12a29065",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "eba62f5a-0eee-4bc6-831d-5a659ba535bc"
        },
        "item": {
          "id": "1f6e3803-4a3e-4901-95ea-1d066a3a00cc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2e075172-f298-4c8c-a9e3-f6250920c7bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "bf586439-c12d-4e8b-a790-27509eb3711b",
        "cursor": {
          "ref": "4794fa1b-a755-44aa-b7a8-d567ac5b9821",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1418b242-e7ac-4bf9-997a-f958ab226a3c"
        },
        "item": {
          "id": "bf586439-c12d-4e8b-a790-27509eb3711b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d0e0890b-6a3e-48f8-a1c5-ceae8df3567e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "bf586439-c12d-4e8b-a790-27509eb3711b",
        "cursor": {
          "ref": "4794fa1b-a755-44aa-b7a8-d567ac5b9821",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1418b242-e7ac-4bf9-997a-f958ab226a3c"
        },
        "item": {
          "id": "bf586439-c12d-4e8b-a790-27509eb3711b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d0e0890b-6a3e-48f8-a1c5-ceae8df3567e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "2338ae5d-7428-464d-bf35-612a1a1a2492",
        "cursor": {
          "ref": "d30966f9-167d-40e3-8e37-5099dd16dfcb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2e5942c1-d196-4cf5-8b7e-be197b669d4c"
        },
        "item": {
          "id": "2338ae5d-7428-464d-bf35-612a1a1a2492",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2338ae5d-7428-464d-bf35-612a1a1a2492",
        "cursor": {
          "ref": "d30966f9-167d-40e3-8e37-5099dd16dfcb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2e5942c1-d196-4cf5-8b7e-be197b669d4c"
        },
        "item": {
          "id": "2338ae5d-7428-464d-bf35-612a1a1a2492",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2338ae5d-7428-464d-bf35-612a1a1a2492",
        "cursor": {
          "ref": "d30966f9-167d-40e3-8e37-5099dd16dfcb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2e5942c1-d196-4cf5-8b7e-be197b669d4c"
        },
        "item": {
          "id": "2338ae5d-7428-464d-bf35-612a1a1a2492",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d336bd9b-9f65-4050-b307-c6f8e8c6eec6",
        "cursor": {
          "ref": "16c01bd1-0efe-44a7-8097-7aeaa7f4eaad",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b9107791-2cf3-43a4-9110-1c1669023eb7"
        },
        "item": {
          "id": "d336bd9b-9f65-4050-b307-c6f8e8c6eec6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d336bd9b-9f65-4050-b307-c6f8e8c6eec6",
        "cursor": {
          "ref": "16c01bd1-0efe-44a7-8097-7aeaa7f4eaad",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b9107791-2cf3-43a4-9110-1c1669023eb7"
        },
        "item": {
          "id": "d336bd9b-9f65-4050-b307-c6f8e8c6eec6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d336bd9b-9f65-4050-b307-c6f8e8c6eec6",
        "cursor": {
          "ref": "16c01bd1-0efe-44a7-8097-7aeaa7f4eaad",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b9107791-2cf3-43a4-9110-1c1669023eb7"
        },
        "item": {
          "id": "d336bd9b-9f65-4050-b307-c6f8e8c6eec6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d51ea9d9-f8bd-4d47-a9bb-e89a21dd12c0",
        "cursor": {
          "ref": "4c62bdb3-2347-4d81-aa02-149ddcedd2e0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1ed96709-ecd6-42e2-8cdb-04a50266b09a"
        },
        "item": {
          "id": "d51ea9d9-f8bd-4d47-a9bb-e89a21dd12c0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d51ea9d9-f8bd-4d47-a9bb-e89a21dd12c0",
        "cursor": {
          "ref": "4c62bdb3-2347-4d81-aa02-149ddcedd2e0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1ed96709-ecd6-42e2-8cdb-04a50266b09a"
        },
        "item": {
          "id": "d51ea9d9-f8bd-4d47-a9bb-e89a21dd12c0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d51ea9d9-f8bd-4d47-a9bb-e89a21dd12c0",
        "cursor": {
          "ref": "4c62bdb3-2347-4d81-aa02-149ddcedd2e0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1ed96709-ecd6-42e2-8cdb-04a50266b09a"
        },
        "item": {
          "id": "d51ea9d9-f8bd-4d47-a9bb-e89a21dd12c0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "eba6ea6f-cd25-4e4a-a2cf-f27d79062ded",
        "cursor": {
          "ref": "118191ac-26ad-42f4-970f-9e3f6153c941",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ccd2ea95-a26e-40af-9a4c-36f87a935ce0"
        },
        "item": {
          "id": "eba6ea6f-cd25-4e4a-a2cf-f27d79062ded",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "eba6ea6f-cd25-4e4a-a2cf-f27d79062ded",
        "cursor": {
          "ref": "118191ac-26ad-42f4-970f-9e3f6153c941",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ccd2ea95-a26e-40af-9a4c-36f87a935ce0"
        },
        "item": {
          "id": "eba6ea6f-cd25-4e4a-a2cf-f27d79062ded",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "eba6ea6f-cd25-4e4a-a2cf-f27d79062ded",
        "cursor": {
          "ref": "118191ac-26ad-42f4-970f-9e3f6153c941",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ccd2ea95-a26e-40af-9a4c-36f87a935ce0"
        },
        "item": {
          "id": "eba6ea6f-cd25-4e4a-a2cf-f27d79062ded",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "08119d3f-db3c-4e26-a334-a0bec466e7bd",
        "cursor": {
          "ref": "1f16fe10-2133-4fc6-97e1-c7b83f42eb13",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "25a22e8e-8148-43c5-a806-7914d289f77e"
        },
        "item": {
          "id": "08119d3f-db3c-4e26-a334-a0bec466e7bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "08119d3f-db3c-4e26-a334-a0bec466e7bd",
        "cursor": {
          "ref": "1f16fe10-2133-4fc6-97e1-c7b83f42eb13",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "25a22e8e-8148-43c5-a806-7914d289f77e"
        },
        "item": {
          "id": "08119d3f-db3c-4e26-a334-a0bec466e7bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "08119d3f-db3c-4e26-a334-a0bec466e7bd",
        "cursor": {
          "ref": "1f16fe10-2133-4fc6-97e1-c7b83f42eb13",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "25a22e8e-8148-43c5-a806-7914d289f77e"
        },
        "item": {
          "id": "08119d3f-db3c-4e26-a334-a0bec466e7bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "6682d912-7932-4841-a824-2f655440c315",
        "cursor": {
          "ref": "b5ebef25-4bac-4da0-ba30-a3d91d77ea7f",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8f5c824c-d418-44f1-9b8b-73a804ed1bbb"
        },
        "item": {
          "id": "6682d912-7932-4841-a824-2f655440c315",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "6682d912-7932-4841-a824-2f655440c315",
        "cursor": {
          "ref": "b5ebef25-4bac-4da0-ba30-a3d91d77ea7f",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8f5c824c-d418-44f1-9b8b-73a804ed1bbb"
        },
        "item": {
          "id": "6682d912-7932-4841-a824-2f655440c315",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "6682d912-7932-4841-a824-2f655440c315",
        "cursor": {
          "ref": "b5ebef25-4bac-4da0-ba30-a3d91d77ea7f",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8f5c824c-d418-44f1-9b8b-73a804ed1bbb"
        },
        "item": {
          "id": "6682d912-7932-4841-a824-2f655440c315",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}